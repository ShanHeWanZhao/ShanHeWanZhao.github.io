<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Seata — AT模式和TCC模式详细对比</title>
      <link href="/2025-02-23/seata-at-he-tcc-mo-shi-de-xiang-xi-dui-bi/"/>
      <url>/2025-02-23/seata-at-he-tcc-mo-shi-de-xiang-xi-dui-bi/</url>
      
        <content type="html"><![CDATA[<p>​深入对比分析了 <strong>AT</strong> 和 <strong>TCC</strong> 模式在 <strong>网络 I&#x2F;O</strong> 和 <strong>锁资源</strong> 两个方面的性能差异，并根据分析结果提供了选择建议。最后，讨论了 <strong>AT</strong> 模式在业务中使用不当可能带来的问题，并提出了相应的解决方案</p> <span id="more"></span><h2 id="前置文章"><a href="#前置文章" class="headerlink" title="前置文章"></a>前置文章</h2><ul><li><a href="https://blog.shanzhao.site/2024-12-24/seata-at-mo-shi-yi-jie-duan-quan-jie-xi/">AT模式一阶段全解析</a></li><li><a href="https://blog.shanzhao.site/2025-01-14/seata-at-mo-shi-er-jie-duan-quan-jie-xi/">AT模式二阶段全解析</a></li><li><a href="https://blog.shanzhao.site/2025-02-03/seata-tcc-mo-shi-xiang-xi-fen-xi/">TCC模式详细分析</a></li></ul><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>​首先要明确一点，当数据量不大的时候，纯内存计算是受本地硬件的限制，掌握在自己手里的东西都算是可控的，所以性能问题不需要特别担心。况且内存操作本身非常快，更不用在性能分析里占用太多关注。所以业务运行效率的主要瓶颈还是 <strong>网络 I&#x2F;O</strong> 和 <strong>锁资源开销</strong>。网络性能会受到很多不可控因素影响，比如<strong>带宽、延迟、网络波动、CDN 状况，甚至对方的运行效率</strong>。而锁资源往往存在竞争，通常会导致并行处理受阻。所以，评估业务性能时，网络 I&#x2F;O 和锁资源开销才是最值得关注的两个点。我们也从这两个点切入对比分析AT和TCC模式下非业务部分的性能损耗</p><h3 id="网络IO"><a href="#网络IO" class="headerlink" title="网络IO"></a>网络IO</h3><h4 id="一阶段"><a href="#一阶段" class="headerlink" title="一阶段"></a>一阶段</h4><ul><li><p>AT</p><ul><li>开启全局事务和注册分支都通过 <strong>RPC</strong> 与 <strong>TC</strong> 通信</li><li>每条非SELECT的DML都会生成前后镜像 SQL，并进行查询</li><li>分支事务的undo_log数据落库</li></ul></li><li><p>TCC：一阶段即try阶段，仅有开启全局事务和注册分支事务会和TC进行PRC通信</p></li></ul><h4 id="二阶段"><a href="#二阶段" class="headerlink" title="二阶段"></a>二阶段</h4><ul><li>AT<ul><li>commit：仅同步删除lock_table，其余都异步完成，很快</li><li>rollback：依次同步，TC会和每个分支事务通信。每个分支事务需要查询自己的 <strong>undo_log</strong>，并且查询最新的数据与 <strong>undo_log</strong> 中的数据进行对比，接着，生成补偿 SQL 来执行回滚</li></ul></li><li>TCC<ul><li>commit：依次同步，TC会和每个分支事务通信，都操作自己的commit方法</li><li>rollback：：依次同步，TC会和每个分支事务通信，都操作自己的rollback方法</li></ul></li></ul><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><ul><li>AT：在一阶段注册分支事务时，<strong>TC</strong> 会为每个分支事务构建行锁，并进行独占锁定（基于 <strong>xid</strong>）。如果发生锁冲突，可能会触发多次重试，直到获得锁或超时</li><li>TCC：<strong>try</strong> 阶段仅仅是预留资源，并不会直接操作最终资源，因此不存在锁竞争问题</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​可以看出，在全局事务的 <strong>commit</strong> 阶段，<strong>AT</strong> 确实比 <strong>TCC</strong> 更快，但在其他阶段，<strong>AT</strong> 的性能通常较差。AT 需要大量构<strong>建数据镜像和准备 undo_log</strong>，而回滚时还需将 undo_log 与最新数据对比，确保数据没有被其他非全局事务并发修改。最重要的是，AT 存在<strong>锁竞争问题，在整个全局事务期间会阻止其他全局事务并发操作数据</strong>。如果有非全局事务操作数据，还需要使用 <code>@GlobalLock</code> 来防止并发修改。</p><p>​因此，从整体来看，<strong>AT 的性能通常要比 TCC 差的多</strong></p><h2 id="业务侵入性"><a href="#业务侵入性" class="headerlink" title="业务侵入性"></a>业务侵入性</h2><p>​<strong>AT</strong> 模式几乎没有业务侵入，只需通过一个 <code>@GlobalTransactional</code> 注解即可完成事务管理。</p><p>​而 <strong>TCC</strong> 模式则相对复杂，除了需要在数据库层增加资源预扣减字段，还需要在代码中手动实现完整的 <strong>try</strong>、<strong>commit</strong> 和 <strong>rollback</strong> 逻辑</p><p>​因此，从业务侵入性和使用难易度来看，<strong>AT</strong> 完胜 <strong>TCC</strong></p><h2 id="选择建议"><a href="#选择建议" class="headerlink" title="选择建议"></a>选择建议</h2><p>​<strong>AT</strong> 适用于流程简单、业务逻辑较直观且 SQL 操作不复杂的场景，尤其是当事务的回滚操作主要依赖于自动生成的 <strong>undo_log</strong> 时。<strong>AT</strong> 模式适合对性能要求不高的业务，因为复杂的 SQL 可能会影响 <strong>undo_log</strong> 的构建和性能。</p><p>​而 <strong>TCC</strong> 更适合那些复杂、对性能要求较高的场景，特别是当需要对每个参与者的操作进行精确控制时。例如，在涉及多个服务的核心业务中，<strong>TCC</strong> 可以确保每个事务阶段的行为都能被灵活处理和回滚</p><h2 id="使用提醒"><a href="#使用提醒" class="headerlink" title="使用提醒"></a>使用提醒</h2><p>​在使用 <strong>AT</strong> 模式时，建议将 <code>@GlobalTransactional</code> 和 <code>@Transactional</code> 配合使用。单独使用 <code>@GlobalTransactional</code> 虽然也能实现分布式事务的管理，但每个 SQL 操作都会创建一个新的分支事务，导致频繁的与 <strong>TC</strong> 进行 RPC 通信，这会显著增加性能开销</p><p>​此外，<strong>全局事务</strong> 的发起者是控制全局事务回滚的核心。如果下游分支事务发生问题导致本地回滚，必须确保最上游的全局事务发起者能够感知到异常，才能触发全局事务的完整回滚，避免数据不一致</p>]]></content>
      
      
      <categories>
          
          <category> Seata </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 分布式事务 </tag>
            
            <tag> AT模式 </tag>
            
            <tag> TCC模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seata — TCC模式详细分析</title>
      <link href="/2025-02-03/seata-tcc-mo-shi-xiang-xi-fen-xi/"/>
      <url>/2025-02-03/seata-tcc-mo-shi-xiang-xi-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>​深入分析了 Seata 的 TCC 模式，通过实际使用案例引出了关键注解的应用。结合 TM、RM 和 TC 的工作流程，剖析了 <code>TccActionInterceptor</code> 在 try 阶段的实现原理，详细讲解了 <code>TCCResourceManager</code> 如何处理 commit 和 rollback 操作。同时，解析了 <code>TCC_FENCE_LOG</code> 表如何保障事务幂等性，并有效解决了悬挂和空回滚等常见问题</p><span id="more"></span><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><p>​一个简单的使用TCC模式下订单，在本地扣减库存后再调用其他微服务的案例</p><h3 id="扣库存"><a href="#扣库存" class="headerlink" title="扣库存"></a>扣库存</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LocalTCC</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StockTccAction</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 预扣库存     */</span>    <span class="token annotation punctuation">@TwoPhaseBusinessAction</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"stockAction"</span><span class="token punctuation">,</span> useTCCFence <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">prepareReduceInventory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@BusinessActionContextParameter</span><span class="token punctuation">(</span>paramName <span class="token operator">=</span> <span class="token string">"sku"</span><span class="token punctuation">)</span> String sku<span class="token punctuation">,</span>                                <span class="token annotation punctuation">@BusinessActionContextParameter</span><span class="token punctuation">(</span>paramName <span class="token operator">=</span> <span class="token string">"quantity"</span><span class="token punctuation">)</span> Integer quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span>BusinessActionContext businessActionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span>BusinessActionContext businessActionContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="下单"><a href="#下单" class="headerlink" title="下单"></a>下单</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> StockTccAction stockTccAction<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">placeOrder</span><span class="token punctuation">(</span>OrderDTO orderDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stockTccAction<span class="token punctuation">.</span><span class="token function">prepareReduceInventory</span><span class="token punctuation">(</span>orderDTO<span class="token punctuation">.</span><span class="token function">getSku</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderDTO<span class="token punctuation">.</span><span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用其他微服务....</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TCC实现"><a href="#TCC实现" class="headerlink" title="TCC实现"></a>TCC实现</h2><p>​Seata还是利用了GlobalTransactionScanner来实现TCC的代理。具体来说，方法上如果使用了<code>@TwoPhaseBusinessAction</code>注解，并且是远程引用bean（如<code>sofa:reference</code>、<code>dubbo:reference</code>），或者是带有<code>@LocalTCC</code>类注解的方法，都会由<code>TccActionInterceptor</code>作为切面来实现TCC在try阶段的代理</p><h3 id="开启全局事务"><a href="#开启全局事务" class="headerlink" title="开启全局事务"></a>开启全局事务</h3><p>​首先TCC模式还是使用了@GlobalTransactional开启全局事务，这部分和AT模式是一样的，具体解析可以看<a href="http://localhost:4000/2024-07-26/seata-at-mo-shi-yi-jie-duan-quan-jie-xi/#%E5%85%A8%E5%B1%80%E4%BA%8B%E5%8A%A1%E5%BC%80%E5%90%AF">之前的文章</a></p><h3 id="try"><a href="#try" class="headerlink" title="try"></a>try</h3><p>​调用带有<code>@TwoPhaseBusinessAction</code>注解的TccAction方法时，会进入<code>TccActionInterceptor</code>切面，该切面即是TCC的<strong>try</strong>阶段。核心的业务逻辑在<code>ActionInterceptorHandler#proceed</code>方法中实现，下面是重点流程的总结：</p><ol><li><p>构建BusinessActionContext，并填充相关参数</p></li><li><p>使用TCC的RM（TCCResourceManager）向TC注册分支事务</p><blockquote><ul><li>注册时，<code>BusinessActionContext</code>的所有信息会被封装在<code>BranchRegisterRequest</code>中，并存储在<code>BranchTransactionDO</code>里。之后在<code>commit</code>或<code>rollback</code>阶段时会传回这些数据</li><li>TC处理TCC分支事务注册的逻辑和AT注册分支事务的逻辑是一套的，唯一的区别是<strong>TCC不需要获取锁资源（BranchSession#lock方法只对AT生效）</strong></li></ul></blockquote></li><li><p>根据<code>useTCCFence</code>决定<code>try</code>阶段业务逻辑的执行方式</p><blockquote><ul><li><code>useTCCFence=true</code>：在事务的try阶段，会先插入一条状态为<code>STATUS_TRIED</code>的<code>TCC_FENCE_LOG</code>数据，并随后执行业务代码。这两个操作会在同一个本地事务中执行</li><li><code>useTCCFence=false</code>：则直接执行业务代码</li></ul></blockquote></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">proceed</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arguments<span class="token punctuation">,</span> String xid<span class="token punctuation">,</span> TwoPhaseBusinessAction businessAction<span class="token punctuation">,</span>        Callback<span class="token operator">&lt;</span>Object<span class="token operator">></span> targetCallback<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取参数里的BusinessActionContext，没有就新建</span>    BusinessActionContext actionContext <span class="token operator">=</span> <span class="token function">getOrCreateActionContextAndResetToArguments</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    actionContext<span class="token punctuation">.</span><span class="token function">setXid</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>    String actionName <span class="token operator">=</span> businessAction<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    actionContext<span class="token punctuation">.</span><span class="token function">setActionName</span><span class="token punctuation">(</span>actionName<span class="token punctuation">)</span><span class="token punctuation">;</span>    actionContext<span class="token punctuation">.</span><span class="token function">setDelayReport</span><span class="token punctuation">(</span>businessAction<span class="token punctuation">.</span><span class="token function">isDelayReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册TCC分支事务到TC</span>    String branchId <span class="token operator">=</span> <span class="token function">doTccActionLogStore</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> arguments<span class="token punctuation">,</span> businessAction<span class="token punctuation">,</span> actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    actionContext<span class="token punctuation">.</span><span class="token function">setBranchId</span><span class="token punctuation">(</span>branchId<span class="token punctuation">)</span><span class="token punctuation">;</span>    MDC<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>RootContext<span class="token punctuation">.</span>MDC_KEY_BRANCH_ID<span class="token punctuation">,</span> branchId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TCC使用存在嵌套，先将外面的TCC拿出来</span>    BusinessActionContext previousActionContext <span class="token operator">=</span> BusinessActionContextUtil<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 绑定当前事务上下文</span>        BusinessActionContextUtil<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果启用了 TCC Fence，则使用 TCC Fence 机制进行处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>businessAction<span class="token punctuation">.</span><span class="token function">useTCCFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 插入一条状态为STATUS_TRIED的tcc_fence_log，再执行业务代码（这两个操作会在一个本地数据库事务中执行）</span>                <span class="token keyword">return</span> TCCFenceHandler<span class="token punctuation">.</span><span class="token function">prepareFence</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>branchId<span class="token punctuation">)</span><span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> targetCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SkipCallbackWrapperException</span> <span class="token operator">|</span> UndeclaredThrowableException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Throwable originException <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>originException <span class="token keyword">instanceof</span> <span class="token class-name">FrameworkException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[{}] prepare TCC fence error: {}"</span><span class="token punctuation">,</span> xid<span class="token punctuation">,</span> originException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">throw</span> originException<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> targetCallback<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 向TC报告</span>            BusinessActionContextUtil<span class="token punctuation">.</span><span class="token function">reportContext</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>previousActionContext <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 恢复上一个事务上下文</span>                BusinessActionContextUtil<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>previousActionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 清空当前的事务上下文</span>                BusinessActionContextUtil<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p>​当 <code>@GlobalTransactional</code> 注解的全局事务执行完毕并准备提交时，服务端的处理方式和前面的<a href="http://localhost:4000/2024-07-27/seata-at-mo-shi-er-jie-duan-quan-jie-xi/#TC%E5%A4%84%E7%90%86commit">AT模式TC处理commit</a>逻辑基本一致，只有点小区别：</p><ul><li>TCC模式没有锁资源，不需要释放</li><li>整个提交过程是同步的，TC会在提交阶段同步的回调RM来处理分支事务的提交</li></ul><p>​而客户端的RM处理分支事务核心逻辑在 <code>TCCResourceManager#branchCommit</code> 方法中，主要逻辑总结如下：</p><ol><li><p>获取 <code>TCCResource</code> 对象</p><blockquote><p>​据 <code>@TwoPhaseBusinessAction</code> 注解中的 <code>name</code> 属性，获取对应的 <code>TCCResource</code> 对象，这个对象代表了当前需要提交的 TCC 资源</p></blockquote></li><li><p>构建 <code>BusinessActionContext</code></p><blockquote><p>​<strong>使用 <code>BranchTransactionDO</code> 填充 <code>BusinessActionContext</code>，该上下文会在整个 TCC 流程中传递，确保业务信息一致性</strong></p></blockquote></li><li><p>判断是否使用 TCC Fence</p><blockquote><ul><li><code>useTCCFence=true</code>：一些列对<code>TCC_FENCE_LOG</code>的校验后再修改其状态为<code>STATUS_COMMITTED</code>，执行业务提交操作</li><li><code>useTCCFence=false</code>：直接执行业务提交操作</li></ul></blockquote></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> BranchStatus <span class="token function">branchCommit</span><span class="token punctuation">(</span>BranchType branchType<span class="token punctuation">,</span> String xid<span class="token punctuation">,</span> <span class="token keyword">long</span> branchId<span class="token punctuation">,</span> String resourceId<span class="token punctuation">,</span>        String applicationData<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从缓存中获取TCC资源对象</span>    <span class="token comment" spellcheck="true">// 早在对bean做能否被TCC代理判断时就已经缓存了，方法在DefaultRemotingParser#parserRemotingServiceInfo里</span>    <span class="token comment" spellcheck="true">// resourceId即为@TwoPhaseBusinessAction.name属性</span>    TCCResource tccResource <span class="token operator">=</span> <span class="token punctuation">(</span>TCCResource<span class="token punctuation">)</span> tccResourceCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resourceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tccResource <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ShouldNeverHappenException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"TCC resource is not exist, resourceId: %s"</span><span class="token punctuation">,</span> resourceId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取目标TCC Bean和commit方法</span>    Object targetTCCBean <span class="token operator">=</span> tccResource<span class="token punctuation">.</span><span class="token function">getTargetBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Method commitMethod <span class="token operator">=</span> tccResource<span class="token punctuation">.</span><span class="token function">getCommitMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetTCCBean <span class="token operator">==</span> null <span class="token operator">||</span> commitMethod <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ShouldNeverHappenException</span><span class="token punctuation">(</span>                String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"TCC resource is not available, resourceId: %s"</span><span class="token punctuation">,</span> resourceId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构建BusinessActionContext</span>        BusinessActionContext businessActionContext <span class="token operator">=</span> <span class="token function">getBusinessActionContext</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> branchId<span class="token punctuation">,</span> resourceId<span class="token punctuation">,</span>                applicationData<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTwoPhaseCommitArgs</span><span class="token punctuation">(</span>tccResource<span class="token punctuation">,</span> businessActionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object ret<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>businessActionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>USE_TCC_FENCE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行TCC Fence的提交操作</span>                result <span class="token operator">=</span> TCCFenceHandler<span class="token punctuation">.</span><span class="token function">commitFence</span><span class="token punctuation">(</span>commitMethod<span class="token punctuation">,</span> targetTCCBean<span class="token punctuation">,</span> xid<span class="token punctuation">,</span> branchId<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SkipCallbackWrapperException</span> <span class="token operator">|</span> UndeclaredThrowableException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ret <span class="token operator">=</span> commitMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>targetTCCBean<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token keyword">instanceof</span> <span class="token class-name">TwoPhaseResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TwoPhaseResult<span class="token punctuation">)</span> ret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span> ret<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result <span class="token operator">?</span> BranchStatus<span class="token punctuation">.</span>PhaseTwo_Committed <span class="token operator">:</span> BranchStatus<span class="token punctuation">.</span>PhaseTwo_CommitFailed_Retryable<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 允许TC重试</span>        <span class="token keyword">return</span> BranchStatus<span class="token punctuation">.</span>PhaseTwo_CommitFailed_Retryable<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cancel"><a href="#cancel" class="headerlink" title="cancel"></a>cancel</h3><p>​TCC 模式下，全局事务回滚时触发的操作与提交（commit）类似，唯一不同的是最终执行的业务方法变为 <code>rollbackMethod</code>，其他流程与提交过程一致，就不细讲了</p><h3 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h3><p>​在前文的源码分析中，我们简要提到过 <code>tcc_fence_log</code> 表。这里将详细解析该表的作用，它是 Seata 用来解决 TCC 模式中可能出现的<strong>悬挂、空回滚等问题，并确保整个流程的幂等性</strong>。每个<strong>分支事务仅会对应一条 <code>tcc_fence_log</code> 数据（<code>xid</code> 和 <code>branch_id</code> 作为主键）</strong>。对<strong>该数据的判断与操作都通过本地数据库事务进行，从而将其与业务代码绑定</strong>，所有逻辑封装在 <code>TCCFenceHandler</code> 类中</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>tcc_fence_log<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>           <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'global id'</span><span class="token punctuation">,</span>        <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>     <span class="token keyword">BIGINT</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'branch id'</span><span class="token punctuation">,</span>        <span class="token punctuation">`</span>action_name<span class="token punctuation">`</span>   <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>   <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'action name'</span><span class="token punctuation">,</span>        <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>        <span class="token keyword">TINYINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'status(tried:1;committed:2;rollbacked:3;suspended:4)'</span><span class="token punctuation">,</span>        <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>    <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'create time'</span><span class="token punctuation">,</span>        <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>  <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'update time'</span><span class="token punctuation">,</span>        <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_gmt_modified<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_status<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="幂等保证"><a href="#幂等保证" class="headerlink" title="幂等保证"></a>幂等保证</h4><p>​通过对 <strong><code>tcc_fence_log</code></strong> 状态的校验，能够保证事务的幂等性。这是通过检查 <strong><code>tcc_fence_log</code></strong> 中的状态是否已被更新为 <strong><code>COMMITTED</code></strong> 或 **<code>ROLLBACKED</code>**，从而避免重复执行相同的操作。整个过程相对简单，确保了事务的幂等性，无需过多分析</p><h4 id="空回滚"><a href="#空回滚" class="headerlink" title="空回滚"></a>空回滚</h4><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>​分支事务的 <strong><code>try</code></strong> 阶段出现异常或超时，导致 <strong>全局事务</strong> 发起回滚操作。此时，<strong>TC</strong> 会调用 <strong>RM</strong> 来触发分支事务的回滚操作。然而，分支事务本身并未成功进入 <code>try</code> 阶段，因此实际上不需要执行回滚。若此时仍然进行回滚操作，就会导致空回滚</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>​当 <code>cancel</code> 时，如果 <code>tccFenceDO</code> 记录为空，表示 <code>try</code> 阶段未成功执行。在这种情况下，尝试插入一条状态为 <strong><code>SUSPENDED</code></strong> 的 <strong><code>tcc_fence_log</code></strong> 记录，以阻止后续的 <code>try</code> （悬挂）执行。然后直接返回 <code>true</code>表示回滚成功，避免执行 <code>rollback</code> 方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">rollbackFence</span><span class="token punctuation">(</span>Method rollbackMethod<span class="token punctuation">,</span> Object targetTCCBean<span class="token punctuation">,</span>        String xid<span class="token punctuation">,</span> Long branchId<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> String actionName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>status <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Connection conn <span class="token operator">=</span> DataSourceUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>            TCCFenceDO tccFenceDO <span class="token operator">=</span> TCC_FENCE_DAO<span class="token punctuation">.</span><span class="token function">queryTCCFenceDO</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> xid<span class="token punctuation">,</span> branchId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tccFenceDO <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 空回滚场景，try都没有执行成功</span>                <span class="token comment" spellcheck="true">// 插入一条状态为SUSPENDED的tcc_fence_log记录，这样就算TCC中的cancel先于try执行，也不用担心try会被触发</span>                <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">insertTCCFenceLog</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> xid<span class="token punctuation">,</span> branchId<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> TCCFenceConstant<span class="token punctuation">.</span>STATUS_SUSPENDED<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TCCFenceException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>                            <span class="token string">"Insert tcc fence record error, rollback fence method failed. xid= %s, branchId= %s"</span><span class="token punctuation">,</span> xid<span class="token punctuation">,</span>                            branchId<span class="token punctuation">)</span><span class="token punctuation">,</span>                            FrameworkErrorCode<span class="token punctuation">.</span>InsertRecordError<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 幂等保证</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>TCCFenceConstant<span class="token punctuation">.</span>STATUS_ROLLBACKED <span class="token operator">==</span> tccFenceDO<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token operator">||</span> TCCFenceConstant<span class="token punctuation">.</span>STATUS_SUSPENDED <span class="token operator">==</span> tccFenceDO<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>TCCFenceConstant<span class="token punctuation">.</span>STATUS_COMMITTED <span class="token operator">==</span> tccFenceDO<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">updateStatusAndInvokeTargetMethod</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> rollbackMethod<span class="token punctuation">,</span> targetTCCBean<span class="token punctuation">,</span> xid<span class="token punctuation">,</span> branchId<span class="token punctuation">,</span>                    TCCFenceConstant<span class="token punctuation">.</span>STATUS_ROLLBACKED<span class="token punctuation">,</span> status<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            status<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SkipCallbackWrapperException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="悬挂"><a href="#悬挂" class="headerlink" title="悬挂"></a>悬挂</h4><h5 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h5><p>​分支事务的 <strong><code>try</code></strong> 阶段正常执行，但由于网络或其他问题，分支事务进入了等待状态，导致 <strong>全局事务</strong> 超时并触发了回滚操作。此时，<strong>TC</strong> 会调用 <strong>RM</strong> 进行分支事务的回滚。然而，在回滚操作完成后，分支事务的 <strong><code>try</code></strong> 阶段最终才成功执行</p><h5 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h5><p>​在 <strong><code>try</code></strong> 阶段，首先尝试插入一条 <strong>TCCFenceLog</strong> 记录（主键确保每个分支事务仅会有一条记录）。如果此时 <strong>TCCFenceLog</strong> 已存在，说明 <strong><code>cancel</code></strong> 阶段已经提前触发并插入了记录，表示当前分支事务已经被标记为挂起（SUSPENDED）。此时，**<code>try</code>** 阶段插入将失败，抛出异常以阻止后续的业务代码执行，从而避免重复执行</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​整个流程看下来，发现TCC模式与AT模式是高度相似的，二者共享 <strong>TM</strong> 和 <strong>TC</strong>，但使用了不同的 <strong>RM</strong> 实现</p><ul><li><strong>AT模式</strong> 的 <strong>RM</strong> 是 <strong>DataSourceManager</strong>，由 Seata 完全实现，通过自动构建 <strong>undo_log</strong> 来帮助资源回滚。</li><li><strong>TCC模式</strong> 的 <strong>RM</strong> 是 <strong>TCCResourceManager</strong>，需要我们自己实现 <strong>confirm</strong> 和 <strong>cancel</strong> 方法，来确认或回滚 <strong>try</strong> 阶段占用的资源，这也决定了它不能异步执行</li></ul>]]></content>
      
      
      <categories>
          
          <category> Seata </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 分布式事务 </tag>
            
            <tag> AT模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seata — AT模式二阶段全解析</title>
      <link href="/2025-01-14/seata-at-mo-shi-er-jie-duan-quan-jie-xi/"/>
      <url>/2025-01-14/seata-at-mo-shi-er-jie-duan-quan-jie-xi/</url>
      
        <content type="html"><![CDATA[<p>​本文深入解析了 Seata AT 模式下<strong>全局事务的提交与回滚</strong>机制，详细讲解了 <strong><code>GlobalTransaction</code> 提交全局事务</strong>、<strong>分支事务的异步提交</strong>以及 <strong>全局回滚的执行流程</strong>。重点探讨了 <strong>事务协调器（TC）和资源管理器（RM）如何协作完成事务提交与回滚</strong>。特别是在 <strong>并发控制与数据一致性</strong> 问题上，展示了 Seata 如何通过 <strong>UndoLog校验</strong> 机制避免“脏写”问题，并实现<strong>强一致性</strong>的全局事务回滚</p><span id="more"></span><h2 id="前置文章"><a href="#前置文章" class="headerlink" title="前置文章"></a>前置文章</h2><ul><li><a href="https://blog.shanzhao.site/2024-12-24/seata-at-mo-shi-yi-jie-duan-quan-jie-xi/">AT一阶段解析</a></li></ul><h2 id="全局事务的提交"><a href="#全局事务的提交" class="headerlink" title="全局事务的提交"></a>全局事务的提交</h2><p>​当业务正常执行完，没有抛异常时，就会进入 <code>GlobalTransaction#commit</code> 方法，开始全局事务的提交。在这个方法里，有两个重点要注意：</p><ul><li><strong>参与者不能主动提交事务</strong>：只有全局事务发起者才能触发全局提交</li><li><strong>提交失败会重试</strong>：如果全局提交失败，Seata 默认会自动重试 5 次，尽量保证提交能成功完成</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>role <span class="token operator">==</span> GlobalTransactionRole<span class="token punctuation">.</span>Participant<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 全局事物的参与者 是不能提交的</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">assertXIDNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 事务提交失败的重试次数：默认5次</span>    <span class="token keyword">int</span> retry <span class="token operator">=</span> COMMIT_RETRY_COUNT <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">?</span> DEFAULT_TM_COMMIT_RETRY_COUNT <span class="token operator">:</span> COMMIT_RETRY_COUNT<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>retry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                retry<span class="token operator">--</span><span class="token punctuation">;</span>                status <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to report global commit [{}],Retry Countdown: {}, reason: {}"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        retry<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 不能再重试了，才真正抛出异常</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>retry <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionException</span><span class="token punctuation">(</span><span class="token string">"Failed to report global commit"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xid<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>RootContext<span class="token punctuation">.</span><span class="token function">getXID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">suspend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TC处理commit"><a href="#TC处理commit" class="headerlink" title="TC处理commit"></a>TC处理commit</h3><p>​最终提交动作由 TM 通知 TC 完成，<code>TransactionManager#commit</code> 会发一个 <strong>GlobalCommitRequest</strong> 给 TC，由 TC 来负责全局事务的提交。</p><p>​回顾前面的流程，分支事务在注册后，本地数据其实已经提交并落库，undo_log 也没用了。所以客户端提交时，主要任务就是<strong>清理 undo_log</strong></p><p>​服务端这边涉及 <code>global_table</code>、<code>branch_table</code> 和 <code>lock_table</code> 三类数据。真正影响并发的是 <strong>lock_table</strong>，因为它占用全局锁，可能阻塞其他全局事务，所以它必须<strong>同步删除</strong>。而 <code>undo_log</code>、<code>global_table</code>、<code>branch_table</code> 这些不会影响其他事务，可以<strong>异步清理</strong></p><p>​换句话说，Seata 二阶段的大部分操作是异步的，只保留必要的同步动作（删锁），这也是它性能快的原因之一</p><h4 id="DefaultCore-commit"><a href="#DefaultCore-commit" class="headerlink" title="DefaultCore#commit"></a>DefaultCore#commit</h4><p>​服务端TC处理提交在io.seata.server.coordinator.DefaultCore#commit方法里，分析一下它的重点流程</p><ol><li><p>幂等控制</p><blockquote><p>只有全局事务状态是 <code>GlobalStatus.Begin</code> 才允许提交，避免重复操作</p></blockquote></li><li><p>GlobalSession的关闭和释放</p><blockquote><p>调用 <code>globalSession.closeAndClean()</code>，内部通过 <code>LockManager#releaseGlobalSessionLock</code> 删除对应 <code>xid</code> 的 <code>lock_table</code> 数据，释放占用的全局锁资源</p></blockquote></li><li><p>提交逻辑</p><ul><li><p>异步处理</p><blockquote><p>​AT模式支持异步提交，asyncCommit()方法仅将GlobalTransactionDO的状态修改为AsyncCommitting，由定时任务去拉取这个状态的数据再处理后续的操作</p></blockquote></li><li><p>同步处理</p><blockquote><p>如果不能异步（比如 TCC、SAGA 模式），则走 <code>doGlobalCommit()</code> 立即提交</p></blockquote></li></ul></li><li><p>返回结果</p><ul><li><p>异步提交：直接返回 <code>Committed</code>，对外表示事务结束</p></li><li><p>同步提交：根据 <code>doGlobalCommit()</code> 的结果返回实际状态</p></li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> GlobalStatus <span class="token function">commit</span><span class="token punctuation">(</span>String xid<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>    GlobalSession globalSession <span class="token operator">=</span> SessionHolder<span class="token punctuation">.</span><span class="token function">findGlobalSession</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>globalSession <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没找到，说明全局事务已经结束被删除了</span>        <span class="token keyword">return</span> GlobalStatus<span class="token punctuation">.</span>Finished<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>globalSession<span class="token punctuation">.</span><span class="token function">isTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> GlobalStatus<span class="token punctuation">.</span>TimeoutRollbacking<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    globalSession<span class="token punctuation">.</span><span class="token function">addSessionLifecycleListener</span><span class="token punctuation">(</span>SessionHolder<span class="token punctuation">.</span><span class="token function">getRootSessionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加锁处理，避免并发修改</span>    <span class="token keyword">boolean</span> shouldCommit <span class="token operator">=</span> SessionHolder<span class="token punctuation">.</span><span class="token function">lockAndExecute</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>globalSession<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> GlobalStatus<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 初次提交</span>            <span class="token comment" spellcheck="true">// 先关闭 GlobalSession，不再允许注册分支事务。并释放分支事务占用的锁资源</span>            globalSession<span class="token punctuation">.</span><span class="token function">closeAndClean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>globalSession<span class="token punctuation">.</span><span class="token function">canBeCommittedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 异步提交（AT），交给定时任务线程池去做</span>                globalSession<span class="token punctuation">.</span><span class="token function">asyncCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将GlobalTransactionDO的状态修改为AsyncCommitting，由定时任务去处理</span>                MetricsPublisher<span class="token punctuation">.</span><span class="token function">postSessionDoneEvent</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> GlobalStatus<span class="token punctuation">.</span>Committed<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不能异步处理，返回true马上提交</span>                globalSession<span class="token punctuation">.</span><span class="token function">changeGlobalStatus</span><span class="token punctuation">(</span>GlobalStatus<span class="token punctuation">.</span>Committing<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldCommit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行同步全局提交</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token function">doGlobalCommit</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分支事务没处理完但支持异步，还是改为异步状态以支持异步处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">&amp;&amp;</span> globalSession<span class="token punctuation">.</span><span class="token function">hasBranch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> globalSession<span class="token punctuation">.</span><span class="token function">canBeCommittedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            globalSession<span class="token punctuation">.</span><span class="token function">asyncCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> GlobalStatus<span class="token punctuation">.</span>Committed<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> globalSession<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// AsyncCommitting状态的直接返回Committed，表示完结</span>        <span class="token keyword">return</span> globalSession<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> GlobalStatus<span class="token punctuation">.</span>AsyncCommitting <span class="token operator">?</span> GlobalStatus<span class="token punctuation">.</span>Committed <span class="token operator">:</span> globalSession<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异步处理真正的提交"><a href="#异步处理真正的提交" class="headerlink" title="异步处理真正的提交"></a>异步处理真正的提交</h4><p>​Server 启动时，<code>DefaultCoordinator#init</code> 会注册一个定时任务 <code>handleAsyncCommitting()</code>，默认每隔 1 秒执行一次。任务的逻辑是：</p><ol><li>从数据库拉取 <strong>状态为 AsyncCommitting 的 GlobalTransactionDO</strong>，并将其转为 <code>GlobalSession</code></li><li>对每个 GlobalSession 调用 <code>DefaultCore#doGlobalCommit</code> 完成提交操作</li><li><code>doGlobalCommit</code> 内部会遍历关联的分支事务，并逐一处理：<ul><li><strong>分支状态为 PhaseOne_Failed</strong>：表示一阶段已经回滚，但全局事务仍然执行了 commit，这种情况下只会删除该分支，不会再触发回滚。</li><li><strong>通知 RM 执行分支事务的提交逻辑</strong>（具体逻辑后续再介绍）</li><li>根据 RM 返回结果处理：<ul><li>成功：删除对应的 BranchTransactionDO（即 <code>branch_table</code> 数据）</li><li>失败：后续可能重试，直到达到超时策略</li></ul></li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">doGlobalCommit</span><span class="token punctuation">(</span>GlobalSession globalSession<span class="token punctuation">,</span> <span class="token keyword">boolean</span> retrying<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 提交开始，记录指标</span>    MetricsPublisher<span class="token punctuation">.</span><span class="token function">postSessionDoingEvent</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> retrying<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>globalSession<span class="token punctuation">.</span><span class="token function">isSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        success <span class="token operator">=</span> <span class="token function">getCore</span><span class="token punctuation">(</span>BranchType<span class="token punctuation">.</span>SAGA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doGlobalCommit</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> retrying<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 遍历分支事务，逐个提交</span>        Boolean result <span class="token operator">=</span> SessionHelper<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">.</span><span class="token function">getSortedBranches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> branchSession <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 非重试时，跳过可异步提交的分支（比如 AT 模式），交给异步线程处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>retrying <span class="token operator">&amp;&amp;</span> branchSession<span class="token punctuation">.</span><span class="token function">canBeCommittedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> CONTINUE<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            BranchStatus currentStatus <span class="token operator">=</span> branchSession<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStatus <span class="token operator">==</span> BranchStatus<span class="token punctuation">.</span>PhaseOne_Failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/**                 * 说明该分支在一阶段执行失败，并且回滚了本地事务                 * 此时全局事务却进入提交流程，意味着发起方未感知到异常                 *                  * 风险：如果发起方不回滚全局事务，将破坏全局一致性                 * 当前处理：直接删除这个分支（因为它已回滚，不影响数据）                 */</span>                SessionHelper<span class="token punctuation">.</span><span class="token function">removeBranch</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> branchSession<span class="token punctuation">,</span> <span class="token operator">!</span>retrying<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> CONTINUE<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 通知客户端的RM处理其分支事务的提交操作</span>                BranchStatus branchStatus <span class="token operator">=</span> <span class="token function">getCore</span><span class="token punctuation">(</span>branchSession<span class="token punctuation">.</span><span class="token function">getBranchType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">branchCommit</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span>                        branchSession<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isXaerNotaTimeout</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> branchStatus<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    branchStatus <span class="token operator">=</span> BranchStatus<span class="token punctuation">.</span>PhaseTwo_Committed<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>branchStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> PhaseTwo_Committed<span class="token operator">:</span> <span class="token comment" spellcheck="true">// commit成功，直接删除这个BranchTransactionDO数据</span>                        SessionHelper<span class="token punctuation">.</span><span class="token function">removeBranch</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> branchSession<span class="token punctuation">,</span> <span class="token operator">!</span>retrying<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> CONTINUE<span class="token punctuation">;</span>                    <span class="token keyword">case</span> PhaseTwo_CommitFailed_Unretryable<span class="token operator">:</span>                        <span class="token comment" spellcheck="true">// 分支提交失败，且不可重试，标记全局事务失败</span>                        SessionHelper<span class="token punctuation">.</span><span class="token function">endCommitFailed</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> retrying<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>retrying<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            globalSession<span class="token punctuation">.</span><span class="token function">queueToRetryCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>globalSession<span class="token punctuation">.</span><span class="token function">canBeCommittedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> CONTINUE<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                StackTraceLogger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>LOGGER<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> <span class="token string">"Committing branch transaction exception: {}"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> branchSession<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>retrying<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    globalSession<span class="token punctuation">.</span><span class="token function">queueToRetryCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> CONTINUE<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果 result != null，说明提前返回（遇到失败或特定条件）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 还有分支事务且不能异步提交 -> 本次提交未完成，需重试</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>globalSession<span class="token punctuation">.</span><span class="token function">hasBranch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>globalSession<span class="token punctuation">.</span><span class="token function">canBeCommittedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Committing global transaction is NOT done, xid = {}."</span><span class="token punctuation">,</span> globalSession<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 提交完成，所有关联的BranchTransactionDO数据都已被删除</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">&amp;&amp;</span> globalSession<span class="token punctuation">.</span><span class="token function">getBranchSessions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>retrying<span class="token punctuation">)</span> <span class="token punctuation">{</span>            globalSession<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>GlobalStatus<span class="token punctuation">.</span>Committed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        SessionHelper<span class="token punctuation">.</span><span class="token function">endCommitted</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> retrying<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> success<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RM处理commit"><a href="#RM处理commit" class="headerlink" title="RM处理commit"></a>RM处理commit</h3><p>​当全局事务提交时，<strong>TC 会为其下的每个分支事务调用 <code>AbstractCore#branchCommit</code> 方法</strong>，并发送 <code>BranchCommitRequest</code> 请求给对应的 RM<br>​ 每个 <code>BranchTransactionDO</code> 都包含 <code>resourceId</code>（数据库标识）和 <code>clientId</code>（客户端标识），<strong>TC 通过 <code>ChannelManager#getChannel</code> 找到对应客户端的 Channel，实现定向消息发送</strong></p><p>​RM 收到请求后，会进入 <code>ResourceManagerInbound#branchCommit</code>，将分支事务封装为 <code>Phase2Context</code> 并投递到 <code>AsyncWorker#commitQueue</code>，等待定时任务异步处理。<strong>因此，RM 在收到消息后几乎立即返回，实际的 undo_log 删除操作是异步完成的</strong></p><h4 id="AsyncWorker-doBranchCommit"><a href="#AsyncWorker-doBranchCommit" class="headerlink" title="AsyncWorker#doBranchCommit"></a>AsyncWorker#doBranchCommit</h4><ul><li><strong>按 <code>resourceId</code> 分组</strong>，确保同一数据库复用同一 <code>Connection</code></li><li>通过资源管理器拿到数据源代理，再获取原始 <code>Connection</code>（避免再走代理，防止重新生成 <code>undo_log</code>）</li><li>执行批量删除对应 <code>undo_log</code>，完成分支事务提交</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doBranchCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>commitQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Phase2Context<span class="token operator">></span> allContexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 倒出来</span>    commitQueue<span class="token punctuation">.</span><span class="token function">drainTo</span><span class="token punctuation">(</span>allContexts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 按resourceId分组</span>    <span class="token comment" spellcheck="true">// resourceId标识具体的某个数据库。分组后数据库的所有操作可以在一个Connection里处理</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Phase2Context<span class="token operator">>></span> groupedContexts <span class="token operator">=</span> <span class="token function">groupedByResourceId</span><span class="token punctuation">(</span>allContexts<span class="token punctuation">)</span><span class="token punctuation">;</span>    groupedContexts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>dealWithGroupedContexts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dealWithGroupedContexts</span><span class="token punctuation">(</span>String resourceId<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Phase2Context<span class="token operator">></span> contexts<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>resourceId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 根据 resourceId 获取 DataSourceProxy</span>    DataSourceProxy dataSourceProxy <span class="token operator">=</span> dataSourceManager<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resourceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSourceProxy <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addAllToCommitQueue</span><span class="token punctuation">(</span>contexts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取真实数据库连接（非代理连接）</span>        conn <span class="token operator">=</span> dataSourceProxy<span class="token punctuation">.</span><span class="token function">getPlainConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据数据库类型获取对应的 UndoLogManager 实现</span>        UndoLogManager undoLogManager <span class="token operator">=</span> UndoLogManagerFactory<span class="token punctuation">.</span><span class="token function">getUndoLogManager</span><span class="token punctuation">(</span>dataSourceProxy<span class="token punctuation">.</span><span class="token function">getDbType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数据分片，默认1000</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Phase2Context<span class="token operator">>></span> splitByLimit <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>contexts<span class="token punctuation">,</span> UNDOLOG_DELETE_LIMIT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Phase2Context<span class="token operator">></span> partition <span class="token operator">:</span> splitByLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 按批删除 undo_log</span>            <span class="token function">deleteUndoLog</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> undoLogManager<span class="token punctuation">,</span> partition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> sqlExx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addAllToCommitQueue</span><span class="token punctuation">(</span>contexts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        IOUtil<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​通过如上的详细分析，总结下二阶段Commit的核心流程</p><h4 id="TC（事务协调器）"><a href="#TC（事务协调器）" class="headerlink" title="TC（事务协调器）"></a><strong>TC（事务协调器）</strong></h4><ul><li>接收到全局事务<code>commit</code>请求后，<strong>立即删除全局锁（LockDO）记录</strong>，以便资源尽快释放。</li><li>然后<strong>异步处理每个分支事务的提交</strong><ul><li>通过<code>branchCommit</code>请求通知对应的RM</li><li>等待分支提交完成后，再删除对应的<code>BranchTransactionDO</code>和<code>GlobalTransactionDO</code>，更新全局事务状态为<code>Committed</code></li></ul></li></ul><h4 id="RM（资源管理器）"><a href="#RM（资源管理器）" class="headerlink" title="RM（资源管理器）"></a><strong>RM（资源管理器）</strong></h4><ul><li>收到<code>BranchCommitRequest</code>后，<strong>快速返回</strong>（不阻塞TC）</li><li>将提交任务封装成<code>Phase2Context</code>，投递到<code>AsyncWorker.commitQueue</code>，<strong>异步执行undo_log清理</strong><ul><li>根据<code>resourceId</code>分组复用数据库连接，减少开销。</li><li>获取真实数据库连接（绕过代理，避免再次生成undo_log），<strong>批量删除对应undo_log</strong>，确保 AT 模式下的全局事务状态和数据状态最终一致</li></ul></li></ul><h2 id="全局事务的回滚"><a href="#全局事务的回滚" class="headerlink" title="全局事务的回滚"></a>全局事务的回滚</h2><p>​当业务执行过程中抛出异常，并命中回滚条件时，会进入 <code>DefaultGlobalTransaction#rollback</code>，启动全局事务回滚流程。和提交流程类似，<strong>参与者不能主动触发回滚</strong>，回滚操作由全局事务发起者控制，并带有默认重试机制，确保尽量完成回滚</p><p>​这也是分布式事务的核心价值所在：<strong>回滚依赖一阶段生成的 undo_log 进行反向补偿，保证整个微服务链中各应用的数据状态在同一时刻保持一致</strong>。不同于消息队列的最终一致性，AT 模式强调<strong>强一致性</strong>，因此 rollback <strong>必须同步执行</strong>，不能异步处理</p><h3 id="TC处理rollback"><a href="#TC处理rollback" class="headerlink" title="TC处理rollback"></a>TC处理rollback</h3><p>​由 TM 通知 TC 完成，<code>TransactionManager#rollback</code> 会发一个 <strong>GlobalRollbackRequest</strong> 给 TC，由 TC 来负责全局事务的回滚</p><p>​TC 在 <code>DefaultCore#doGlobalRollback</code> 中处理 rollback，核心逻辑如下：</p><ol><li>获取全局事务关联的所有分支事务 <code>BranchSession</code>，<strong>逆序遍历</strong>，保证依赖顺序正确</li><li>每个 <code>BranchSession</code> 的处理逻辑<ol><li><strong>PhaseOne_Failed</strong>：一阶段已经失败，本地事务已回滚，无需再操作，直接删除该分支</li><li><strong>通知客户端的RM处理当前BranchSession的回滚操作</strong></li><li>根据其RM的返回结果来处理<ul><li><strong>PhaseTwo_Rollbacked</strong>：回滚成功，删除对应的 <code>BranchTransactionDO</code></li><li><strong>PhaseTwo_RollbackFailed_Unretryable</strong>：回滚失败不可重试（客户端出现了SQLUndoDirtyException异常，数据被其他事务并发修改过），整体回滚标记失败，退出循环</li><li>其他状态：将全局事务状态标记为 <code>RollbackRetrying</code>，等待定时任务重试，并结束当前循环</li></ul></li></ol></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">doGlobalRollback</span><span class="token punctuation">(</span>GlobalSession globalSession<span class="token punctuation">,</span> <span class="token keyword">boolean</span> retrying<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// start rollback event</span>    MetricsPublisher<span class="token punctuation">.</span><span class="token function">postSessionDoingEvent</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> retrying<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>globalSession<span class="token punctuation">.</span><span class="token function">isSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        success <span class="token operator">=</span> <span class="token function">getCore</span><span class="token punctuation">(</span>BranchType<span class="token punctuation">.</span>SAGA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doGlobalRollback</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> retrying<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// AT 模式：遍历全局事务的分支事务，并逆序回滚（保证事务依赖顺序）</span>        Boolean result <span class="token operator">=</span> SessionHelper<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">.</span><span class="token function">getReverseSortedBranches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> branchSession <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            BranchStatus currentBranchStatus <span class="token operator">=</span> branchSession<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentBranchStatus <span class="token operator">==</span> BranchStatus<span class="token punctuation">.</span>PhaseOne_Failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 分支事务一阶段就失败了（PhaseOne_Failed），说明已经回滚过，无需再次处理</span>                SessionHelper<span class="token punctuation">.</span><span class="token function">removeBranch</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> branchSession<span class="token punctuation">,</span> <span class="token operator">!</span>retrying<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> CONTINUE<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 通知客户端的RM处理其分支事务的回滚操作</span>                BranchStatus branchStatus <span class="token operator">=</span> <span class="token function">branchRollback</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> branchSession<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isXaerNotaTimeout</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> branchStatus<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Rollback branch XAER_NOTA retry timeout, xid = {} branchId = {}"</span><span class="token punctuation">,</span>                            globalSession<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> branchSession<span class="token punctuation">.</span><span class="token function">getBranchId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    branchStatus <span class="token operator">=</span> BranchStatus<span class="token punctuation">.</span>PhaseTwo_Rollbacked<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 根据RM处理的结果来决定是否继续</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>branchStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> PhaseTwo_Rollbacked<span class="token operator">:</span>                        <span class="token comment" spellcheck="true">// 当前分支回滚成功，删除数据库branch_table中对应的记录</span>                        SessionHelper<span class="token punctuation">.</span><span class="token function">removeBranch</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> branchSession<span class="token punctuation">,</span> <span class="token operator">!</span>retrying<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> CONTINUE<span class="token punctuation">;</span>                    <span class="token keyword">case</span> PhaseTwo_RollbackFailed_Unretryable<span class="token operator">:</span>                        <span class="token comment" spellcheck="true">// 分支回滚失败且不可重试：标记全局事务回滚失败</span>                        <span class="token comment" spellcheck="true">// 这种情况为客户端前后镜像验证失败，可能在此期间需要回滚的数据被修改过（客户端产生了SQLUndoDirtyException异常）</span>                        SessionHelper<span class="token punctuation">.</span><span class="token function">endRollbackFailed</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> retrying<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 返回false则表示前面还未处理的分支事务不会再回滚了</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        <span class="token comment" spellcheck="true">// 分支回滚失败但可重试：将任务加入重试队列</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>retrying<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            globalSession<span class="token punctuation">.</span><span class="token function">queueToRetryRollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>retrying<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    globalSession<span class="token punctuation">.</span><span class="token function">queueToRetryRollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// result 不为 null，说明某个分支回滚失败或特定条件触发提前返回</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// AT 模式下全局事务回滚完成</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SessionHelper<span class="token punctuation">.</span><span class="token function">endRollbacked</span><span class="token punctuation">(</span>globalSession<span class="token punctuation">,</span> retrying<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Rollback global transaction successfully, xid = {}."</span><span class="token punctuation">,</span> globalSession<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> success<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RM处理rollback"><a href="#RM处理rollback" class="headerlink" title="RM处理rollback"></a>RM处理rollback</h3><p>​RM 执行回滚逻辑时，核心入口是 <code>DataSourceManager#branchRollback</code>，其内部会根据数据库类型选择对应的 <code>UndoLogManager</code>，最终调用 <code>UndoLogManager#undo</code> 完成回滚操作</p><h4 id="UndoLogManager-undo"><a href="#UndoLogManager-undo" class="headerlink" title="UndoLogManager#undo"></a>UndoLogManager#undo</h4><p>一个分支事务可能包含多条需要回滚的数据记录，每条对应一个 <code>SQLUndoLog</code>。核心流程如下：</p><ul><li><strong>查询 Undo 日志</strong>：根据 <code>xid</code> 和 <code>branchId</code> 查询当前分支事务对应的 <code>undo_log</code>，并解析为 <code>SQLUndoLog</code> 列表。</li><li><strong>开启本地事务</strong>：  在本地事务中执行所有回滚操作，保证原子性</li><li><strong>反向逐条回滚</strong>：遍历 <code>SQLUndoLog</code>，<strong>为每条生成对应的 <code>UndoExecutor</code>，并执行反向 SQL 恢复数据</strong></li><li><strong>收尾处理</strong><ul><li><strong>存在undo_log</strong>：<strong>所有回滚 SQL 执行完毕后，删除 <code>undo_log</code> 记录并提交事务</strong></li><li><strong>不存在undo_log</strong>：可能是分支一阶段提交超时导致全局回滚，此时插入一条状态为 <code>GlobalFinished</code> 的空记录，阻止其一阶段的提交</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLIntegrityConstraintViolationException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span>DataSourceProxy dataSourceProxy<span class="token punctuation">,</span> String xid<span class="token punctuation">,</span> <span class="token keyword">long</span> branchId<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>    ConnectionProxy connectionProxy <span class="token operator">=</span> null<span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>    PreparedStatement selectPST <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> originalAutoCommit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无限重试，直到成功</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connectionProxy <span class="token operator">=</span> dataSourceProxy<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> connectionProxy<span class="token punctuation">.</span><span class="token function">getTargetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 开启事务来执行undo_log的回滚</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>originalAutoCommit <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 查询 undo_log，并加行级锁（FOR UPDATE），防止并发回滚冲突</span>            selectPST <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>SELECT_UNDO_LOG_SQL<span class="token punctuation">)</span><span class="token punctuation">;</span>            selectPST<span class="token punctuation">.</span><span class="token function">setLong</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> branchId<span class="token punctuation">)</span><span class="token punctuation">;</span>            selectPST<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> xid<span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> selectPST<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> exists <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                exists <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> state <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>ClientTableColumnsName<span class="token punctuation">.</span>UNDO_LOG_LOG_STATUS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 状态校验，确保Undo_log可回滚</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canUndo</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 获取 undo_log 反序列化解析出来</span>                String contextString <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>ClientTableColumnsName<span class="token punctuation">.</span>UNDO_LOG_CONTEXT<span class="token punctuation">)</span><span class="token punctuation">;</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> context <span class="token operator">=</span> <span class="token function">parseContext</span><span class="token punctuation">(</span>contextString<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rollbackInfo <span class="token operator">=</span> <span class="token function">getRollbackInfo</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>                String serializer <span class="token operator">=</span> context <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>UndoLogConstants<span class="token punctuation">.</span>SERIALIZER_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>                UndoLogParser parser <span class="token operator">=</span> serializer <span class="token operator">==</span> null <span class="token operator">?</span> UndoLogParserFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token operator">:</span> UndoLogParserFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">;</span>                BranchUndoLog branchUndoLog <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>rollbackInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">setCurrentSerializer</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 逆序执行 SQLUndoLog（防止依赖问题）</span>                    List<span class="token operator">&lt;</span>SQLUndoLog<span class="token operator">></span> sqlUndoLogs <span class="token operator">=</span> branchUndoLog<span class="token punctuation">.</span><span class="token function">getSqlUndoLogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlUndoLogs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>sqlUndoLogs<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 依次对每条SQLUndoLog创建对应数据库类型的 UndoExecutor 并执行回滚操作</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>SQLUndoLog sqlUndoLog <span class="token operator">:</span> sqlUndoLogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        TableMeta tableMeta <span class="token operator">=</span> TableMetaCacheFactory<span class="token punctuation">.</span><span class="token function">getTableMetaCache</span><span class="token punctuation">(</span>dataSourceProxy<span class="token punctuation">.</span><span class="token function">getDbType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">getTableMeta</span><span class="token punctuation">(</span>                                        conn<span class="token punctuation">,</span> sqlUndoLog<span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataSourceProxy<span class="token punctuation">.</span><span class="token function">getResourceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        sqlUndoLog<span class="token punctuation">.</span><span class="token function">setTableMeta</span><span class="token punctuation">(</span>tableMeta<span class="token punctuation">)</span><span class="token punctuation">;</span>                        AbstractUndoExecutor undoExecutor <span class="token operator">=</span> UndoExecutorFactory<span class="token punctuation">.</span><span class="token function">getUndoExecutor</span><span class="token punctuation">(</span>                                dataSourceProxy<span class="token punctuation">.</span><span class="token function">getDbType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sqlUndoLog<span class="token punctuation">)</span><span class="token punctuation">;</span>                        undoExecutor<span class="token punctuation">.</span><span class="token function">executeOn</span><span class="token punctuation">(</span>connectionProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// remove serializer name</span>                    <span class="token function">removeCurrentSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>exists<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 回滚完就删除undo_log</span>                <span class="token function">deleteUndoLog</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> branchId<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>                conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果 undo_log 不存在，说明已回滚过，插入 GlobalFinished 防止重复回滚</span>                <span class="token function">insertUndoLogWithGlobalFinished</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> branchId<span class="token punctuation">,</span> UndoLogParserFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>                conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLIntegrityConstraintViolationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Connection回滚并抛出异常</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// close相关操作</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AbstractUndoExecutor"><a href="#AbstractUndoExecutor" class="headerlink" title="AbstractUndoExecutor"></a>AbstractUndoExecutor</h4><p>​这个类是生成 <strong>undo_log</strong> 对应的反向补偿 SQL 并执行的基类。它本身定义了模板方法 <code>buildUndoSQL()</code>，由各个具体子类去实现具体的回滚 SQL 构建逻辑。重点看看它的 <strong>dataValidationAndGoOn</strong> 校验方法</p><p>​默认情况下，<code>IS_UNDO_DATA_VALIDATION_ENABLE = true</code>，也就是说每条 <code>SQLUndoLog</code> 在执行反向 SQL 前都会先走这个校验逻辑，核心目的就是<strong>防止脏回滚</strong>，保证数据安全</p><p>dataValidationAndGoOn的校验规则总结如下：</p><ul><li><strong>beforeImage 和 afterImage 一致</strong><br>   说明这条数据在事务里根本没变，回滚也没意义，直接返回 <code>false</code>，跳过补偿</li><li><strong>最新数据和 afterImage 不一致</strong><br>   说明数据在当前分布式事务还没回滚前，被其他线程或事务改过，这时候要分情况：<ol><li><strong>最新数据和 beforeImage 一致</strong><br>  说明回滚其实已经完成了，那就不用再补偿，直接跳过</li><li><strong>最新数据既不等于 beforeImage，也不等于 afterImage</strong><br>  说明这条记录被其他非全局事务修改过，而且没有加 <code>@GlobalLock</code>。这时候 Seata 直接抛 <code>SQLUndoDirtyException</code>，终止整个全局回滚，避免把别人提交的数据误删。</li></ol></li></ul><p>​这里的风险点在于：<strong>非全局事务（没有开启分布式事务控制）是能直接修改那些处于全局事务中的未提交数据，这就是“脏写”问题</strong>。为了避免这种情况，<strong>如果某个业务不想用分布式事务，但又有并发写的可能，就可以用 <code>@GlobalLock</code> 给修改的数据加全局锁，从而防止并发修改</strong>。当然，你要是想无视这个风险，简单粗暴的将IS_UNDO_DATA_VALIDATION_ENABLE配置为false，关掉校验就行</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractUndoExecutor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 是否开启undo_log的镜像前后校验，默认为true</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> IS_UNDO_DATA_VALIDATION_ENABLE <span class="token operator">=</span> ConfigurationFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span>ConfigurationKeys<span class="token punctuation">.</span>TRANSACTION_UNDO_DATA_VALIDATION<span class="token punctuation">,</span> DEFAULT_TRANSACTION_UNDO_DATA_VALIDATION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">dataValidationAndGoOn</span><span class="token punctuation">(</span>ConnectionProxy conn<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        TableRecords beforeRecords <span class="token operator">=</span> sqlUndoLog<span class="token punctuation">.</span><span class="token function">getBeforeImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TableRecords afterRecords <span class="token operator">=</span> sqlUndoLog<span class="token punctuation">.</span><span class="token function">getAfterImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// DataCompareUtils#isRecordsEquals方法用来比较两个TableRecords是否逻辑一致（即对应行的字段数据是否一致）</span>        <span class="token comment" spellcheck="true">// 判断 beforeImage 和 afterImage 是否一致</span>        Result<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> beforeEqualsAfterResult <span class="token operator">=</span> DataCompareUtils<span class="token punctuation">.</span><span class="token function">isRecordsEquals</span><span class="token punctuation">(</span>beforeRecords<span class="token punctuation">,</span> afterRecords<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beforeEqualsAfterResult<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 镜像相同，直接返回false，不用执行回滚操作了</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 查询当前数据库中最新的数据</span>        TableRecords currentRecords <span class="token operator">=</span> <span class="token function">queryCurrentRecords</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        Result<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> afterEqualsCurrentResult <span class="token operator">=</span> DataCompareUtils<span class="token punctuation">.</span><span class="token function">isRecordsEquals</span><span class="token punctuation">(</span>afterRecords<span class="token punctuation">,</span> currentRecords<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>afterEqualsCurrentResult<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果当前数据 不等于 afterImage，则说明数据可能被修改过，进一步判断是否回到 beforeImage 状态</span>            Result<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> beforeEqualsCurrentResult <span class="token operator">=</span> DataCompareUtils<span class="token punctuation">.</span><span class="token function">isRecordsEquals</span><span class="token punctuation">(</span>beforeRecords<span class="token punctuation">,</span> currentRecords<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>beforeEqualsCurrentResult<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前数据已经回到 beforeImage，说明回滚已经完成或本地事务回滚成功，无需再做操作</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 产生脏数据了：当前数据既不等于 afterImage，也不等于beforeImage</span>                <span class="token comment" spellcheck="true">// 说明被其他非全局事务修改过（其他非全局事务没用@GlobalLock）</span>                               <span class="token comment" spellcheck="true">// 脏数据异常，无法安全回滚。TC会终止全局回滚</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLUndoDirtyException</span><span class="token punctuation">(</span><span class="token string">"Has dirty records when undo."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>​一句话总结：整个全局事务的回滚就是<strong>同步的依次将每个分支事务的所有UndoLog数据分别解析为反向补偿SQL并执行</strong>（insert变delete、delete变insert、update还是update）</p>]]></content>
      
      
      <categories>
          
          <category> Seata </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 分布式事务 </tag>
            
            <tag> AT模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seata — AT模式一阶段全解析</title>
      <link href="/2024-12-24/seata-at-mo-shi-yi-jie-duan-quan-jie-xi/"/>
      <url>/2024-12-24/seata-at-mo-shi-yi-jie-duan-quan-jie-xi/</url>
      
        <content type="html"><![CDATA[<p>​基于 <strong>Seata 1.7.1</strong> 源码，本篇文章详细拆解了一阶段分布式事务的执行流程，重点包括 <strong>降级检查策略</strong>、<strong>undo log 的生成与管理</strong>、<strong>非本地事务运行模式下的支持</strong>、<strong>锁冲突检测及重试机制</strong>，以及一阶段事务如何决定提交或回滚，为理解 AT 模式的核心原理提供了全面解析</p><span id="more"></span><p>​Seata 的 AT 模式本质上就是在<strong>一阶段做足准备，二阶段才能高效提交或回滚</strong>。我们从<code>@GlobalTransactional</code> 入手，来看看 <code>GlobalTransactionalInterceptor</code> 在分布式事务的一阶段里到底做了什么</p><h2 id="降级检查"><a href="#降级检查" class="headerlink" title="降级检查"></a>降级检查</h2><p>​<code>GlobalTransactionalInterceptor</code> 会在方法执行前先判断是否处于降级状态，<strong>如果已经降级，就直接跳过全局事务逻辑，改走本地事务，避免全局事务挂掉时影响业务</strong>。其降级检查相关参数和方法如下，核心逻辑如下：</p><ol><li><p><strong>启动定时任务，定期做可用性检测</strong></p><blockquote><p>​在 <code>GlobalTransactionalInterceptor</code> 构造方法里，会调用 <code>startDegradeCheck()</code>，开启一个定时任务。这个任务每隔一段时间，创建一个空的全局事务并马上提交，以此测试 TC 是否正常</p><p>​另外，业务中的全局事务执行完成后，也会根据执行结果发布DegradeCheckEvent事件</p></blockquote></li><li><p><strong>根据事件统计状态</strong></p><blockquote><p>​通过监听 <code>DegradeCheckEvent</code>，统计连续失败次数degradeNum和连续成功次数reachNum</p><ul><li>降级：失败次数达到degradeCheckAllowTimes（默认 10 次）</li><li>恢复：连续成功达到degradeCheckAllowTimes（同样是 10 次）</li></ul></blockquote></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 降级检查任务执行的时间间隔（单位：毫秒）</span><span class="token comment" spellcheck="true">// 仅当 degradeCheck = true 时有效，默认值为 2000 毫秒</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> degradeCheckPeriod<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 是否启用降级检查策略的动态开关</span><span class="token comment" spellcheck="true">// 受配置中心的client.tm.degradeCheck参数控制</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicBoolean ATOMIC_DEGRADE_CHECK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 降级检查失败允许的最大次数</span><span class="token comment" spellcheck="true">// 当连续失败次数 >= 此值时，会触发事务模式降级（从全局事务退化为本地事务）</span><span class="token comment" spellcheck="true">// 仅当 degradeCheck = true 时有效，默认值为 10</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> degradeCheckAllowTimes<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前累计的连续失败次数（用于降级）</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Integer degradeNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前累计的连续成功次数（用于恢复）</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Integer reachNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 基于 Guava 的事件总线，用于发布和监听降级相关事件</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> EventBus EVENT_BUS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuavaEventBus</span><span class="token punctuation">(</span><span class="token string">"degradeCheckEventBus"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定时任务线程池，只会执行降级检查任务</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> ScheduledThreadPoolExecutor executor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 开启降级检查的定时任务 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startDegradeCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ATOMIC_DEGRADE_CHECK<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadFactory</span><span class="token punctuation">(</span><span class="token string">"degradeCheckWorker"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    executor<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ATOMIC_DEGRADE_CHECK<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 开启一个空的全局事务</span>                String xid <span class="token operator">=</span> TransactionManagerHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token string">"degradeCheck"</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 马上提交全局事务</span>                TransactionManagerHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>                EVENT_BUS<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DegradeCheckEvent</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                EVENT_BUS<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DegradeCheckEvent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> degradeCheckPeriod<span class="token punctuation">,</span> degradeCheckPeriod<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * DegradeCheckEvent事件触发，统计降级相关数据 */</span><span class="token annotation punctuation">@Subscribe</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onDegradeCheck</span><span class="token punctuation">(</span>DegradeCheckEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 10</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">isRequestSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 成功</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>degradeNum <span class="token operator">>=</span> degradeCheckAllowTimes<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 已经处于降级状态</span>            <span class="token comment" spellcheck="true">// 统计连续成功次数</span>            reachNum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>reachNum <span class="token operator">>=</span> degradeCheckAllowTimes<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 连续成功次数达到阈值 → 恢复全局事务</span>                reachNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                degradeNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>LOGGER<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"the current global transaction has been restored"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>degradeNum <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不在降级状态直接重置degradeNum，因为不连续了</span>            degradeNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 失败</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>degradeNum <span class="token operator">&lt;</span> degradeCheckAllowTimes<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 还没降级</span>            <span class="token comment" spellcheck="true">// 增加失败计数</span>            degradeNum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>degradeNum <span class="token operator">>=</span> degradeCheckAllowTimes<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 连续失败次数达到阈值 → 会启用降级模式，这个做个日志</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>LOGGER<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"the current global transaction has been automatically downgraded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reachNum <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 已降级，但之前有成功累计 → 重置成功次数</span>            reachNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分布式事务的执行"><a href="#分布式事务的执行" class="headerlink" title="分布式事务的执行"></a>分布式事务的执行</h2><p>​<code>@GlobalTransactional</code> 的核心逻辑封装在<strong>TransactionalTemplate#execute</strong>方法中，其整体设计思路明显借鉴了 Spring 的事务处理模式。可以将其类比理解为：</p><ol><li>解析注解信息，将 <code>@GlobalTransactional</code> 的属性组装为 <code>TransactionInfo</code>（类似 Spring 的 <code>TransactionAttribute</code>）</li><li><strong>基于该信息创建并绑定 <code>GlobalTransaction</code>，并应用对应的传播行为</strong>（相当于 Spring 的 <code>TransactionStatus</code> ）</li><li>执行业务逻辑，根据是否抛出异常决定调用 <strong>rollback</strong> 还是 <strong>commit</strong></li><li>恢复执行上下文，确保支持 <strong>REQUIRES_NEW</strong> 和 <strong>NOT_SUPPORTED</strong> 这类传播策略</li></ol><p>​整体流程可以概括为：<strong>构建事务上下文 → 执行业务逻辑 → 结束事务 → 恢复现场</strong>，与 Spring 事务的核心思想是一致的，只是这里针对的是 <strong>分布式全局事务</strong>。我们先有个整体印象，然后再详细分析关键步骤的细节</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">execute</span><span class="token punctuation">(</span>TransactionalExecutor business<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 获取事务信息（事务传播、超时时间、隔离级别等）</span>    TransactionInfo txInfo <span class="token operator">=</span> business<span class="token punctuation">.</span><span class="token function">getTransactionInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>txInfo <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ShouldNeverHappenException</span><span class="token punctuation">(</span><span class="token string">"transactionInfo does not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 1.1 获取当前线程绑定的全局事务（不存在则表示是初次，则为发起者，否则为参与者）</span>    GlobalTransaction tx <span class="token operator">=</span> GlobalTransactionContext<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Propagation propagation <span class="token operator">=</span> txInfo<span class="token punctuation">.</span><span class="token function">getPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SuspendedResourcesHolder suspendedResourcesHolder <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>propagation<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> NOT_SUPPORTED<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">existingTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 存在事务就先暂停，以非全局事务来处理</span>                    suspendedResourcesHolder <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> business<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> REQUIRES_NEW<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 存在事务就先暂停，开启一个新的全局事务</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">existingTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    suspendedResourcesHolder <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                tx <span class="token operator">=</span> GlobalTransactionContext<span class="token punctuation">.</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> SUPPORTS<span class="token operator">:</span>                 <span class="token comment" spellcheck="true">// 存在全局事务就加入，不存在就以非全局事务的方式执行</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">notExistingTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> business<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> REQUIRED<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 如果没有全局事务，则创建一个；否则使用当前事务</span>                tx <span class="token operator">=</span> GlobalTransactionContext<span class="token punctuation">.</span><span class="token function">getCurrentOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> NEVER<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 如果存在事务，直接抛异常</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">existingTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionException</span><span class="token punctuation">(</span>                            String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>                                    <span class="token string">"Existing transaction found for transaction marked with propagation 'never', xid = %s"</span><span class="token punctuation">,</span>                                    tx<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> business<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">case</span> MANDATORY<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 必须有全局事务，否则抛异常</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">notExistingTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionException</span><span class="token punctuation">(</span>                            <span class="token string">"No existing transaction found for transaction marked with propagation 'mandatory'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Continue and execute with current transaction.</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionException</span><span class="token punctuation">(</span><span class="token string">"Not Supported Propagation:"</span> <span class="token operator">+</span> propagation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        GlobalLockConfig previousConfig <span class="token operator">=</span> <span class="token function">replaceGlobalLockConfig</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ======================= 进入事务逻辑 =======================</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 利用TM开启全局事务（只有全局事务的发起者开可以开启），注册到server端并触发对应的的hook</span>            <span class="token function">beginTransaction</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">,</span> tx<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object rs<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行业务代码</span>                rs <span class="token operator">=</span> business<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// =============== 往下走就算是二阶段的任务了，准备全局事务的提交或回滚 =====================</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 业务异常触发全局事务回滚</span>                <span class="token function">completeTransactionAfterThrowing</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">,</span> tx<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 业务执行成功 → 提交全局事务（只有事务发起者能提交）</span>            <span class="token function">commitTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> rs<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 全局事务配置（锁重试次数和锁重试时间间隔）回退（回退到上一个事务）或清除</span>            <span class="token function">resumeGlobalLockConfig</span><span class="token punctuation">(</span>previousConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// afterCompletion的钩子函数</span>            <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 钩子函数的clean</span>            <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 上一个事务的resume，很简单，重新绑定上一个xid就行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>suspendedResourcesHolder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tx<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>suspendedResourcesHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="XID"><a href="#XID" class="headerlink" title="XID"></a>XID</h3><p>​<code>GlobalTransactionContext#getCurrent</code> 用于获取当前全局事务信息，内部逻辑很简单：根据当前线程上下文是否存在 <strong>XID</strong> 来判断是 <strong>全局事务发起者</strong> 还是 <strong>参与者</strong></p><p>​<strong>XID 在整个分布式事务链路中起到类似 traceId 的作用，必须传递给下游服务，才能将多个微服务串联成一个完整的全局事务</strong>。Seata 的 <code>integration</code> 模块中实现了主流 RPC 框架的 XID 传播机制，例如 Dubbo 对应的 <code>AlibabaDubboTransactionPropagationFilter</code></p><h4 id="Launcher（全局事务发起者）"><a href="#Launcher（全局事务发起者）" class="headerlink" title="Launcher（全局事务发起者）"></a>Launcher（全局事务发起者）</h4><p>​作为全局事务的起点，如果线程上下文不存在 XID 时，才有资格创建新的全局事务。<strong>发起者负责开启全局事务，并在业务逻辑跑完后，根据是否抛异常来决定提交还是回滚</strong></p><h4 id="Participant（全局事务参与者）"><a href="#Participant（全局事务参与者）" class="headerlink" title="Participant（全局事务参与者）"></a>Participant（全局事务参与者）</h4><p>​处于微服务调用链的中下层，<strong>参与到了其他上游服务发起的全局事务（这时线程上下文存在xid）</strong>。对应 Spring 的 加入已有事务传播行为。所以，<strong>全局事务的参与者不能触发全局事务的回滚或提交</strong>，它能做的就是<strong>通过 RM 报告当前分支事务的执行结果。如果执行失败，会把状态标记成 <code>PhaseOne_Failed</code>，等全局回滚的时候一起处理</strong></p><h3 id="全局事务开启"><a href="#全局事务开启" class="headerlink" title="全局事务开启"></a>全局事务开启</h3><p>​全局事务是通过 <strong><code>GlobalTransaction#begin</code></strong> 来启动的。内部由<strong>TM构建一个 <code>GlobalBeginRequest</code> 请求发到 TC，TC 处理完成后会回传一个 XID，客户端拿到这个 XID 后绑定到当前线程上下文，用于后续分支事务的关联</strong></p><p>​server端的TC 收到请求后，最终会走到 <strong><code>DefaultCore#begin</code></strong> 方法，核心逻辑可以简单概括为：</p><ol><li><p><strong>创建 GlobalSession</strong>：初始化一个全局事务对象，并生成唯一的 <strong>XID</strong></p></li><li><p><strong>存储 GlobalSession</strong></p><blockquote><p>​通过不同的SessionLifecycleListener实现类来选择存储策略。以DataBaseSessionManager为例，会<strong>将GlobalSession转化为GlobalTransactionDO数据结构，并插入到global_table表中</strong>。至此全局事务信息完成持久化</p></blockquote></li><li><p><strong>回传 XID 给客户端</strong></p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DefaultCore#begin</span><span class="token keyword">public</span> String <span class="token function">begin</span><span class="token punctuation">(</span>String applicationId<span class="token punctuation">,</span> String transactionServiceGroup<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span>        <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建globalSession</span>        GlobalSession session <span class="token operator">=</span> GlobalSession<span class="token punctuation">.</span><span class="token function">createGlobalSession</span><span class="token punctuation">(</span>applicationId<span class="token punctuation">,</span> transactionServiceGroup<span class="token punctuation">,</span> name<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        MDC<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>RootContext<span class="token punctuation">.</span>MDC_KEY_XID<span class="token punctuation">,</span> session<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">addSessionLifecycleListener</span><span class="token punctuation">(</span>SessionHolder<span class="token punctuation">.</span><span class="token function">getRootSessionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启session，根据不同的策略（file、db、redis）将session保存起来</span>        session<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// transaction start event</span>        MetricsPublisher<span class="token punctuation">.</span><span class="token function">postSessionDoingEvent</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> session<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行业务代码"><a href="#执行业务代码" class="headerlink" title="执行业务代码"></a>执行业务代码</h3><p>​分布式事务要管的核心，其实就是数据库的读写操作。根据<a href="https://blog.shanzhao.site/2024-11-15/seata-he-xin-zu-jian-he-qi-dong-liu-cheng/#SeataDataSourceAutoConfiguration">上一篇文章</a>的分析，Seata通过代理<strong>DataSource</strong>、<strong>Connection</strong>、<strong>PreparedStatement</strong>来插入分布式事务逻辑。不过 DataSource 代理在事务期间主要是为了提供 ConnectionProxy，因此真正的重点在 <strong>ConnectionProxy</strong> 和 <strong>PreparedStatementProxy</strong>，这两个才是实现核心逻辑的关键角色</p><h4 id="PreparedStatementProxy"><a href="#PreparedStatementProxy" class="headerlink" title="PreparedStatementProxy"></a>PreparedStatementProxy</h4><p>​<code>PreparedStatementProxy</code> 在执行 SQL 时，会借助 Druid 等工具解析当前业务的 DML 语句，然后根据 SQL 类型选择对应的 <code>AbstractDMLBaseExecutor</code> 子类，并最终调用 <code>Executor#execute</code> 完成执行。SQL 类型和执行器映射关系大致如下：</p><ul><li>INSERT → 不同的数据库有不同的实现，MYSQL为MySQLInsertExecutor：其<strong>beforeImage为空实现，此时数据都还没有的</strong></li><li><strong>UPDATE → <code>UpdateExecutor</code><strong>：</strong>最常用的一种Executor，前后镜像都要执行SELECT</strong></li><li>DELETE → <code>DeleteExecutor</code>：其afterImage为空实现，因为数据都删了</li><li><strong>SELECT_FOR_UPDATE → <code>SelectForUpdateExecutor</code><strong>：</strong>全局事务读已提交功能的核心实现</strong></li><li>INSERT_ON_DUPLICATE_UPDATE → MYSQL为<code>MySQLInsertOnDuplicateUpdateExecutor</code></li><li>UPDATE_JOIN → MYSQL为<code>MySQLUpdateJoinExecutor</code></li><li><strong>SELECT</strong>  → <code>PlainExecutor</code>：这种 SQL 不涉及数据修改，不会生成前后镜像，也不会构建 <code>undo_log</code>，直接执行原 SQL</li></ul><h5 id="AbstractDMLBaseExecutor"><a href="#AbstractDMLBaseExecutor" class="headerlink" title="AbstractDMLBaseExecutor"></a>AbstractDMLBaseExecutor</h5><p>​AbstractDMLBaseExecutor<strong>是Seata 处理 DML 语句（INSERT、UPDATE、DELETE）的核心抽象类，它定义了执行 SQL 前后获取镜像数据的模板方法</strong>：</p><ul><li>beforeImage()：在SQL <strong>之前</strong>，查询<strong>旧数据保存为TableRecords</strong></li><li>afterImage()：在SQL<strong>之后</strong>，查询<strong>新数据保存为TableRecords</strong></li></ul><p>这两份TableRecords是后续构建undo_log和lockKey基础：</p><ul><li><strong>undo_log</strong>：<strong>全局事务回滚时用于执行反向补偿</strong></li><li><strong>lockKey</strong>：用于<strong>全局锁控制，避免不同的全局事务在结束前并发修改同一行数据</strong></li></ul><p>​其核心方法如下，execute()作为整体的入口，最终都会走到 executeAutoCommitFalse()，在这里<strong>完成 SQL 执行、镜像采集，以及 undo_log 和 lockKey 的生成</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 入口 */</span><span class="token keyword">public</span> T <span class="token function">execute</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        String xid <span class="token operator">=</span> RootContext<span class="token punctuation">.</span><span class="token function">getXID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xid <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 存在全局事务，将全局事务id设置到ConnectionProxy中</span>            statementProxy<span class="token punctuation">.</span><span class="token function">getConnectionProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// @GlobalLock注解支持</span>        statementProxy<span class="token punctuation">.</span><span class="token function">getConnectionProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setGlobalLockRequire</span><span class="token punctuation">(</span>RootContext<span class="token punctuation">.</span><span class="token function">requireGlobalLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">doExecute</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> T <span class="token function">doExecute</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    AbstractConnectionProxy connectionProxy <span class="token operator">=</span> statementProxy<span class="token punctuation">.</span><span class="token function">getConnectionProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>connectionProxy<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前事务为自动提交（代表没有主动开启事务）</span>        <span class="token comment" spellcheck="true">// 一般就是只用了分布式事务但没有使用本地事务的情况。</span>        <span class="token comment" spellcheck="true">// 这时每条dml都会被当作分支事务来执行，即执行完后都会操作seata的commit来注册分支事务（增加了rpc通信压力）</span>        <span class="token keyword">return</span> <span class="token function">executeAutoCommitTrue</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">executeAutoCommitFalse</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> T <span class="token function">executeAutoCommitTrue</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    ConnectionProxy connectionProxy <span class="token operator">=</span> statementProxy<span class="token punctuation">.</span><span class="token function">getConnectionProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行所有SQL前修改autoCommit为false，即手动提交事务</span>        connectionProxy<span class="token punctuation">.</span><span class="token function">changeAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 锁重试机制来commit</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LockRetryPolicy</span><span class="token punctuation">(</span>connectionProxy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            T result <span class="token operator">=</span> <span class="token function">executeAutoCommitFalse</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 走非自动提交事务的commit逻辑（准备undo日志）</span>            connectionProxy<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// when exception occur in finally,this exception will lost, so just print it</span>        <span class="token comment" spellcheck="true">// here</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"execute executeAutoCommitTrue error:{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LockRetryPolicy<span class="token punctuation">.</span><span class="token function">isLockRetryPolicyBranchRollbackOnConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            connectionProxy<span class="token punctuation">.</span><span class="token function">getTargetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        connectionProxy<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionProxy<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 准备执行SQL了 */</span><span class="token keyword">protected</span> T <span class="token function">executeAutoCommitFalse</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 记录sql执行前镜像</span>        TableRecords beforeImage <span class="token operator">=</span> <span class="token function">beforeImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 执行业务sql</span>        T result <span class="token operator">=</span> statementCallback<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>statementProxy<span class="token punctuation">.</span><span class="token function">getTargetStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 记录sql执行后的镜像</span>        TableRecords afterImage <span class="token operator">=</span> <span class="token function">afterImage</span><span class="token punctuation">(</span>beforeImage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 准备undo_log（只是准备，还未写表的）</span>        <span class="token function">prepareUndoLog</span><span class="token punctuation">(</span>beforeImage<span class="token punctuation">,</span> afterImage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TableMetaException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"table meta will be refreshed later, due to TableMetaException, table:{}, column:{}"</span><span class="token punctuation">,</span>                e<span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        statementProxy<span class="token punctuation">.</span><span class="token function">getConnectionProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDataSourceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tableMetaRefreshEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 准备undo_log数据 */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareUndoLog</span><span class="token punctuation">(</span>TableRecords beforeImage<span class="token punctuation">,</span> TableRecords afterImage<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beforeImage<span class="token punctuation">.</span><span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> afterImage<span class="token punctuation">.</span><span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// update语句的前后镜像Records数量一定要一样，Seata是不允许Update主键数据的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>SQLType<span class="token punctuation">.</span>UPDATE <span class="token operator">==</span> sqlRecognizer<span class="token punctuation">.</span><span class="token function">getSQLType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beforeImage<span class="token punctuation">.</span><span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> afterImage<span class="token punctuation">.</span><span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ShouldNeverHappenException</span><span class="token punctuation">(</span>                    <span class="token string">"Before image size is not equaled to after image size, probably because you updated the primary keys."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ConnectionProxy connectionProxy <span class="token operator">=</span> statementProxy<span class="token punctuation">.</span><span class="token function">getConnectionProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 准备先构建lockKey，可以映射到具体变化的某一行数据</span>    <span class="token comment" spellcheck="true">// DELETE作为删除操作，只有beforeImage可以定位到lockKey</span>    <span class="token comment" spellcheck="true">// 其余的update、insert都可以用afterImage来定位lockKey</span>    TableRecords lockKeyRecords <span class="token operator">=</span> sqlRecognizer<span class="token punctuation">.</span><span class="token function">getSQLType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> SQLType<span class="token punctuation">.</span>DELETE <span class="token operator">?</span> beforeImage <span class="token operator">:</span> afterImage<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建lock</span>    String lockKeys <span class="token operator">=</span> <span class="token function">buildLockKey</span><span class="token punctuation">(</span>lockKeyRecords<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> lockKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将lockKey和undo_log数据都先暂存起来</span>        connectionProxy<span class="token punctuation">.</span><span class="token function">appendLockKey</span><span class="token punctuation">(</span>lockKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>        SQLUndoLog sqlUndoLog <span class="token operator">=</span> <span class="token function">buildUndoItem</span><span class="token punctuation">(</span>beforeImage<span class="token punctuation">,</span> afterImage<span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionProxy<span class="token punctuation">.</span><span class="token function">appendUndoLog</span><span class="token punctuation">(</span>sqlUndoLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 锁冲突回滚策略 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LockRetryPolicy</span> <span class="token keyword">extends</span> <span class="token class-name">ConnectionProxy<span class="token punctuation">.</span>LockRetryPolicy</span> <span class="token punctuation">{</span>    <span class="token function">LockRetryPolicy</span><span class="token punctuation">(</span><span class="token keyword">final</span> ConnectionProxy connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">execute</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> callable<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LOCK_RETRY_POLICY_BRANCH_ROLLBACK_ON_CONFLICT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">doRetryOnLockConflict</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> callable<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 出现其他异常，则操作origin connection进行真正的回滚     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ConnectionContext context <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//UndoItems can't use the Set collection class to prevent ABA</span>        context<span class="token punctuation">.</span><span class="token function">removeSavepoint</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">getTargetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isLockRetryPolicyBranchRollbackOnConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> LOCK_RETRY_POLICY_BRANCH_ROLLBACK_ON_CONFLICT<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="非本地事务执行机制"><a href="#非本地事务执行机制" class="headerlink" title="非本地事务执行机制"></a>非本地事务执行机制</h5><p>​注意在 <code>AbstractDMLBaseExecutor#doExecute</code> 方法里会把事务的自动提交改成手动提交，为什么呢？</p><blockquote><p>​假设你在一个分布式事务里，只用了 Seata 的 <code>@GlobalTransactional</code> 注解，而没用 Spring 的 <code>@Transactional</code> 控制本地事务，其实 Seata 也是支持的</p><p>这种情况下，如果没有本地事务，JDBC 默认是 <strong>autoCommit&#x3D;true</strong>，也就是每条 SQL 执行完就直接提交事务。问题是如果这样做，Seata 就没法保证 <strong>业务 SQL 和 undo_log 写入的原子性</strong></p><p>​所以 Seata 在这里会先判断：如果当前连接是自动提交的，就把它改成手动提交（<code>autoCommit=false</code>）。这样能确保它先完成这几个步骤：</p><p>​ <strong>镜像 SQL 准备 → 业务 SQL 执行 → undo_log 构建 → 注册分支事务 → undo_log 落库</strong><br>最后再统一 <code>commit</code>，这样业务 SQL 和 undo_log 写入就是一个原子操作，不会出问题</p><p>再说分支事务：</p><ul><li>如果代码里开启了本地事务，那么整个本地事务算一个分支事务，共享同一个 XID</li><li>如果没开本地事务，那每一条 <code>update</code>、<code>delete</code>、<code>insert</code> 都会被 Seata 当成一个分支事务，由它来管全局一致性</li></ul><p>所以只用 Seata，不开本地事务，也是可以的，但性能会差不少。为什么？因为<strong>每个分支事务都得跟 TC 通信、做数据库锁检查、写 undo_log，成本就变得很高了</strong></p></blockquote><h4 id="ConnectionProxy"><a href="#ConnectionProxy" class="headerlink" title="ConnectionProxy"></a>ConnectionProxy</h4><p>​ConnectionProxy 是一阶段的核心控制器，它承载了<strong>分支事务的注册、锁冲突处理和重试、undo_log 落库以及事务提交&#x2F;回滚等核心逻辑</strong>，我们依次来拆解一下这些功能，看看它们到底做了什么</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionProxy</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConnectionProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConnectionProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ConnectionContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> LockRetryPolicy lockRetryPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockRetryPolicy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> REPORT_RETRY_COUNT <span class="token operator">=</span> ConfigurationFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>            ConfigurationKeys<span class="token punctuation">.</span>CLIENT_REPORT_RETRY_COUNT<span class="token punctuation">,</span> DEFAULT_CLIENT_REPORT_RETRY_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 默认false     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> IS_REPORT_SUCCESS_ENABLE <span class="token operator">=</span> ConfigurationFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span>            ConfigurationKeys<span class="token punctuation">.</span>CLIENT_REPORT_SUCCESS_ENABLE<span class="token punctuation">,</span> DEFAULT_CLIENT_REPORT_SUCCESS_ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkLock</span><span class="token punctuation">(</span>String lockKeys<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>lockKeys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 仅检查，不上锁</span>            <span class="token keyword">boolean</span> lockable <span class="token operator">=</span> DefaultResourceManager<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lockQuery</span><span class="token punctuation">(</span>BranchType<span class="token punctuation">.</span>AT<span class="token punctuation">,</span>                    <span class="token function">getDataSourceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lockKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lockable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 锁冲突，直接抛LockConflictException让上层去处理</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LockConflictException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"get lock failed, lockKey: %s"</span><span class="token punctuation">,</span> lockKeys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">recognizeLockKeyConflictException</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> lockKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lockQuery</span><span class="token punctuation">(</span>String lockKeys<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> DefaultResourceManager<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lockQuery</span><span class="token punctuation">(</span>BranchType<span class="token punctuation">.</span>AT<span class="token punctuation">,</span> <span class="token function">getDataSourceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    context<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lockKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">recognizeLockKeyConflictException</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> lockKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * LockConflictException异常转换     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recognizeLockKeyConflictException</span><span class="token punctuation">(</span>TransactionException te<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token function">recognizeLockKeyConflictException</span><span class="token punctuation">(</span>te<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recognizeLockKeyConflictException</span><span class="token punctuation">(</span>TransactionException te<span class="token punctuation">,</span> String lockKeys<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>te<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionExceptionCode<span class="token punctuation">.</span>LockKeyConflict                <span class="token operator">||</span> te<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionExceptionCode<span class="token punctuation">.</span>LockKeyConflictFailFast<span class="token punctuation">)</span> <span class="token punctuation">{</span>            StringBuilder reasonBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"get global lock fail, xid:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            reasonBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>lockKeys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reasonBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", lockKeys:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>lockKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LockConflictException</span><span class="token punctuation">(</span>reasonBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> te<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 转换为SQLException用于后续的回滚</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span>te<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 提交事务     */</span>   <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lockRetryPolicy<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">doCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetConnection <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAutoCommitChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 说明是Spring主动开启了事务，这里才操作回滚</span>                <span class="token comment" spellcheck="true">// 因为如果是Seata帮我们开启的本地事务（即设置autoCommit=false），会在AbstractDMLBaseExecutor$LockRetryPolicy#onException里进行回滚</span>                <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">inGlobalTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">processGlobalTransactionCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会注册分支事务到server端，并对修改的数据上锁（所以，至少会操作server端的两张表，branch_session和lock_table表）</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">isGlobalLockRequire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">processLocalCommitWithGlobalLocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 速度快，因为仅对修改的数据进行锁检查（不上锁）。适合不需要使用事务但不能脏读（读到其他全局事务未整体提交但分支事务已提交的场景）的场景使用</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            targetConnection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processGlobalTransactionCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注册分支事务，对当前分支事务修改的数据进行上锁（netty通信，server端上锁到lock_table表）</span>            <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 锁冲突异常判断（发生了锁冲突会重新抛出LockConflictException）</span>            <span class="token function">recognizeLockKeyConflictException</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">buildLockKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 刷新undo_log到数据库</span>            UndoLogManagerFactory<span class="token punctuation">.</span><span class="token function">getUndoLogManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDbType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flushUndoLogs</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当前分支事务真正提交</span>            targetConnection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"process connectionProxy commit error: {}"</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">report</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_REPORT_SUCCESS_ENABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">report</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        context<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processLocalCommitWithGlobalLocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 检查锁资源，存在其他事务上锁了就直接抛LockConflictException异常，进行锁重试</span>        <span class="token function">checkLock</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">buildLockKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            targetConnection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        context<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// undo_log或lockKey不存在，表示当前事务没有数据修改（可能只有select操作），也就不需要注册为分支事务了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span><span class="token function">hasUndoLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>context<span class="token punctuation">.</span><span class="token function">hasLockKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Long branchId <span class="token operator">=</span> DefaultResourceManager<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">branchRegister</span><span class="token punctuation">(</span>BranchType<span class="token punctuation">.</span>AT<span class="token punctuation">,</span> <span class="token function">getDataSourceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                null<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getApplicationData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                context<span class="token punctuation">.</span><span class="token function">buildLockKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setBranchId</span><span class="token punctuation">(</span>branchId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        targetConnection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">inGlobalTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span><span class="token function">isBranchRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 身在全局事务中且当前事务已注册为分支事务才有资格report</span>            <span class="token function">report</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        context<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * change connection autoCommit to false by seata     * &lt;p/>     * 修改当前Connection为非自动提交事务     *     * @throws SQLException the sql exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoCommitChanged</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">inGlobalTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> context<span class="token punctuation">.</span><span class="token function">isGlobalLockRequire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> autoCommit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// change autocommit from false to true, we should commit() first according to</span>            <span class="token comment" spellcheck="true">// JDBC spec.</span>            <span class="token function">doCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        targetConnection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span>autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**     * 根据commitDone向TC报告分支事务的状态     * TC也仅修改分支事务的状态，不会做回滚操作     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> commitDone<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBranchId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> retry <span class="token operator">=</span> REPORT_RETRY_COUNT<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>retry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                DefaultResourceManager<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">branchReport</span><span class="token punctuation">(</span>BranchType<span class="token punctuation">.</span>AT<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getBranchId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        commitDone <span class="token operator">?</span> BranchStatus<span class="token punctuation">.</span>PhaseOne_Done <span class="token operator">:</span> BranchStatus<span class="token punctuation">.</span>PhaseOne_Failed<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to report ["</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getBranchId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] commit done ["</span>                        <span class="token operator">+</span> commitDone <span class="token operator">+</span> <span class="token string">"] Retry Countdown: "</span> <span class="token operator">+</span> retry<span class="token punctuation">)</span><span class="token punctuation">;</span>                retry<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>retry <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">"Failed to report branch status "</span> <span class="token operator">+</span> commitDone<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**     * LockRetryPolicy：用于处理锁冲突时的重试策略。     *     * 在分布式事务场景下，数据写操作可能因锁冲突而失败，此类提供重试机制来提升成功率。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LockRetryPolicy</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 是否开启 锁冲突后分支事务回滚 策略         * 如果为 true，则表示在锁冲突时直接回滚分支事务，而不再进行多次重试。         */</span>        <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> LOCK_RETRY_POLICY_BRANCH_ROLLBACK_ON_CONFLICT <span class="token operator">=</span> ConfigurationFactory            <span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span>ConfigurationKeys<span class="token punctuation">.</span>CLIENT_LOCK_RETRY_POLICY_BRANCH_ROLLBACK_ON_CONFLICT<span class="token punctuation">,</span> DEFAULT_CLIENT_LOCK_RETRY_POLICY_BRANCH_ROLLBACK_ON_CONFLICT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> ConnectionProxy connection<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">LockRetryPolicy</span><span class="token punctuation">(</span>ConnectionProxy connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>connection <span class="token operator">=</span> connection<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">execute</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> callable<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*            不需要重试的机制如下：                1、开启了锁冲突回滚策略                2、当前Connection的自动提交改变过（由true变为false），这种情况已经单独处理了，就不需要再重试了             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>LOCK_RETRY_POLICY_BRANCH_ROLLBACK_ON_CONFLICT <span class="token operator">&amp;&amp;</span> connection<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAutoCommitChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> callable<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 重试</span>                <span class="token keyword">return</span> <span class="token function">doRetryOnLockConflict</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 锁冲突重试         */</span>        <span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">doRetryOnLockConflict</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> callable<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            LockRetryController lockRetryController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockRetryController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> callable<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">LockConflictException</span> lockConflict<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 所冲突异常捕获</span>                    <span class="token function">onException</span><span class="token punctuation">(</span>lockConflict<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAutoCommitChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token operator">&amp;&amp;</span> lockConflict<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionExceptionCode<span class="token punctuation">.</span>LockKeyConflictFailFast<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        lockConflict<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>TransactionExceptionCode<span class="token punctuation">.</span>LockKeyConflict<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// sleep后重试，默认重试30次，间隔时间为10毫秒</span>                    lockRetryController<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>lockConflict<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 其他非锁冲突异常，不重试，直接抛出</span>                    <span class="token function">onException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注册分支事务和锁检查"><a href="#注册分支事务和锁检查" class="headerlink" title="注册分支事务和锁检查"></a>注册分支事务和锁检查</h5><p>​在 <strong>ConnectionProxy#register</strong> 方法里，会通过 RM 的 <code>branchRegister</code> 向 TC 发送一条 <code>BranchRegisterRequest</code> 消息，请求注册分支事务。TC 端的处理逻辑主要在 <strong>AbstractCore#branchRegister</strong> 里，代码很多我就不贴了，直接说流程：</p><ol><li><strong>将 BranchRegisterRequest 转成 BranchSession 对象</strong></li><li><strong>尝试加锁（AT 模式才需要）</strong><ul><li>会检查锁并调用 <code>LockStoreDataBaseDAO#acquireLock</code> 去操作 <code>lock_table</code></li></ul></li><li><strong>加锁逻辑</strong><ul><li>查询 <code>lock_table</code> 是否已有对应的 <code>row_key</code>，即行锁（每个 <code>row_key</code> 唯一标识数据库某张表的某行）<ul><li><strong>没查到</strong>：说明没人占，直接插入 lock_table，加锁成功。</li><li><strong>查到了，且 xid 一致</strong>：说明是当前全局事务的重复加锁，只需补充缺失的锁记录，依然算成功</li><li><strong>查到了，xid 不一致</strong>：说明被别的全局事务占用，返回加锁失败，直接抛 <code>LockKeyConflict</code> 异常（非常重要，客户端会靠它判断是否重试）</li></ul></li></ul></li><li><strong>加锁成功后的处理</strong><ul><li>把 BranchSession 转成 BranchTransactionDO</li><li><strong>通过 SessionLifecycleListener 持久化（db 模式会写入 <code>branch_table</code>）</strong></li><li>返回 <code>branchId</code> 给客户端</li></ul></li><li><strong>加锁失败</strong><ul><li>抛出 <code>BranchTransactionException</code>，异常码 <code>LockKeyConflict</code></li><li>由 AbstractCallback 捕获并转成响应消息，发回客户端</li></ul></li></ol><h5 id="锁冲突重试"><a href="#锁冲突重试" class="headerlink" title="锁冲突重试"></a>锁冲突重试</h5><p>​当 <strong>ConnectionProxy#recognizeLockKeyConflictException</strong> 方法发现是 <strong>LockKeyConflict</strong> 异常时，会再包装成 <strong>LockConflictException</strong> 抛出去。接着，<strong>LockRetryPolicy</strong> 会接手，按重试策略继续尝试执行 SQL。默认策略是：<strong>重试 30 次，每次间隔 10ms</strong>（这些值受 GlobalLockConfig配置影响，可以调整）</p><p>​如果 30 次重试之后还是抢不到锁，说明冲突一直没解决，那就直接触发 <strong>本地事务回滚</strong>，整个业务 SQL 失败收场</p><h5 id="刷新undo-log"><a href="#刷新undo-log" class="headerlink" title="刷新undo_log"></a>刷新undo_log</h5><p>​分支事务注册成功后，就可以把之前暂存的 Undo Log 真正写进数据库的 <strong>undo_log</strong> 表，确保如果二阶段回滚发生，可以通过它恢复数据</p><h5 id="本地事务真正提交"><a href="#本地事务真正提交" class="headerlink" title="本地事务真正提交"></a>本地事务真正提交</h5><p>​该做的事都做完了：分支事务注册搞定、Undo Log 入库也搞定，这时候就可以安全地提交本地事务了</p><h5 id="rollback"><a href="#rollback" class="headerlink" title="rollback"></a>rollback</h5><p>​一阶段的回滚逻辑很简单，核心就两件事：</p><ul><li><strong>回滚本地事务</strong></li><li>调用 <strong>RM → TC 的 branchReport 方法</strong>，把分支异常状态上报。TC 接到后只是把对应分支事务的状态改成 <strong>PhaseOne_Failed</strong>，并不会触发全局回滚</li></ul><h2 id="一阶段简单总结"><a href="#一阶段简单总结" class="headerlink" title="一阶段简单总结"></a>一阶段简单总结</h2><p>​一阶段的核心，就是把 <strong>undo_log</strong> 准备好，并保证 <strong>业务 SQL + undo_log + 分支事务注册</strong> 的原子性，这样二阶段的全局提交或回滚才能顺利进行。二阶段的具体操作，我们留到下一篇再详细讲</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://blog.shanzhao.site/2024-11-15/seata-he-xin-zu-jian-he-qi-dong-liu-cheng/">前置文章：Seata核心组件和启动流程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Seata </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 分布式事务 </tag>
            
            <tag> AT模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seata — 核心组件和启动流程</title>
      <link href="/2024-11-15/seata-he-xin-zu-jian-he-qi-dong-liu-cheng/"/>
      <url>/2024-11-15/seata-he-xin-zu-jian-he-qi-dong-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p>​基于 <strong>Seata 1.7.1</strong> 源码，这篇文章算是 AT 模式源码解析的前置内容。文章先从 <strong>自动配置类</strong> 切入，梳理了客户端核心组件（<strong>TM、RM</strong>）的职责和初始化流程，接着分析 <strong>AT 模式下 DataSource 代理的实现原理</strong>，最后再简单介绍了服务端的启动过程以及 <strong>TC 的创建逻辑</strong></p><span id="more"></span><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>​当项目引入 <code>seata-spring-boot-starter</code> 后，当前模块就具备了分布式事务的能力，可以看作是 <strong>Seata 客户端</strong>。这个 Starter 主要加载 <strong>SeataAutoConfiguration</strong> 和 <strong>SeataDataSourceAutoConfiguration</strong> 两个自动配置类，用于提供分布式事务相关的核心功能</p><h3 id="SeataAutoConfiguration"><a href="#SeataAutoConfiguration" class="headerlink" title="SeataAutoConfiguration"></a>SeataAutoConfiguration</h3><p>​<code>SeataAutoConfiguration</code> 是客户端的核心配置类，所有事务模式都依赖它。其中注册了一个关键 <code>GlobalTransactionScanner</code> 这个具备代理功能的Bean，它承担两个核心职责</p><ul><li><strong>对注解 <code>@GlobalTransactional</code> 和 <code>@GlobalLock</code> 的方法进行代理</strong></li><li><strong>完成 TM 和 RM 的初始化</strong></li></ul><h4 id="注解代理"><a href="#注解代理" class="headerlink" title="注解代理"></a>注解代理</h4><p>​<code>GlobalTransactionScanner</code> 继承了 <code>AbstractAutoProxyCreator</code>，因此它具备 Spring 的 <strong>自动代理功能</strong>。重点看它的 <code>wrapIfNecessary</code> 方法，有两个关键点：</p><ol><li><p><strong>代理逻辑判断</strong></p><blockquote><p>如果Class或Method上有 <code>@GlobalTransactional</code> 或 <code>@GlobalLock</code>，就会创建一个代理，并加入 <code>GlobalTransactionalInterceptor</code> 作为拦截器</p></blockquote></li><li><p><strong>Advisor 插入顺序</strong></p><blockquote><p>​调用 <code>GlobalTransactionScanner#findAddSeataAdvisorPosition</code> 来确定 Advisor 的位置</p><p>​这里很重要，因为 <code>GlobalTransactionalInterceptor</code> 的位置是 <code>SeataInterceptorPosition.BeforeTransaction</code>，意味着它必须在 Spring 的事务切面（<code>@Transactional</code>）<strong>之前执行</strong>。<br> ​因为当 <code>@GlobalTransactional</code> 和 <code>@Transactional</code> 同时使用时，Seata 的全局事务逻辑需要先于本地事务，否则全局事务无法覆盖本地事务的执行范围</p></blockquote></li></ol><h4 id="客户端初始化"><a href="#客户端初始化" class="headerlink" title="客户端初始化"></a>客户端初始化</h4><p>​Seata 客户端和服务端之间基于 <strong>Netty 长连接</strong> 进行通信。为了完成分布式事务协调，客户端抽象出两个核心角色：</p><ul><li><strong>TM（Transaction Manager）</strong>：负责全局事务的开始、提交、回滚</li><li><strong>RM（Resource Manager）</strong>：负责分支事务的注册、回滚、提交</li></ul><p>​这两个角色分别由 <code>TMClient</code> 和 <code>RMClient</code> 管理，并在 <code>GlobalTransactionScanner#afterPropertiesSet</code> 中完成初始化。初始化过程中，每个角色会创建独立的 <strong>Netty 客户端（Bootstrap）</strong>，其连接由 <code>NettyClientChannelManager</code> 统一管理，底层通过 Apache Commons Pool 实现连接池化，且<strong>按照 <code>serverAddress（ip:port）</code> 维度</strong>复用 Channel，确保<strong>一个服务端节点仅维护一条长连接</strong>，从而兼顾性能与资源利用率</p><h5 id="TMClient"><a href="#TMClient" class="headerlink" title="TMClient"></a>TMClient</h5><h6 id="TM（Transaction-Manager）"><a href="#TM（Transaction-Manager）" class="headerlink" title="TM（Transaction Manager）"></a>TM（Transaction Manager）</h6><p>​事务管理器，接口为TransactionManager，可以理解成分布式事务版的 Spring <code>PlatformTransactionManager</code>。它负责<strong>发起、提交、回滚全局事务</strong>。区别是 <strong>Spring 靠数据库事务，Seata 需要服务端（协调者）来兜底</strong>。且只有<strong>全局事务的发起者</strong>才会触发 TM 的 <code>begin</code> &#x2F; <code>commit</code> &#x2F; <code>rollback</code>。代码里 <code>@GlobalTransactional</code> 切面就是通过 <code>GlobalTransactionalInterceptor</code> 调用 TM，默认实现是 <code>DefaultTransactionManager</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionManager</span> <span class="token punctuation">{</span>    String <span class="token function">begin</span><span class="token punctuation">(</span>String applicationId<span class="token punctuation">,</span> String transactionServiceGroup<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    GlobalStatus <span class="token function">commit</span><span class="token punctuation">(</span>String xid<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    GlobalStatus <span class="token function">rollback</span><span class="token punctuation">(</span>String xid<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询全局事务状态</span>    GlobalStatus <span class="token function">getStatus</span><span class="token punctuation">(</span>String xid<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 上报全局事务状态</span>    GlobalStatus <span class="token function">globalReport</span><span class="token punctuation">(</span>String xid<span class="token punctuation">,</span> GlobalStatus globalStatus<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h6><p>由TMClient#init方法触发TMClient的初始化，其核心逻辑如下</p><ol><li><p>创建TmNettyRemotingClient对象（单例）</p><blockquote><p>​主要是设置好一些参数，包括Netty相关的NioEventLoopGroup、使用AbstractNettyRemotingClient$ClientHandler作为ChannelPipeline的ChannelHandler等等；并配置好NettyClientChannelManager对象用来管理Netty Channel</p></blockquote></li><li><p>TMClient真正初始化</p><ol><li><p>注册ResponseProcessor，将其缓存到AbstractNettyRemoting#processorTable字段中，用来处理服务端返回的各种响应，具体类型如下</p><pre class="line-numbers language-bash"><code class="language-bash">MessageType.TYPE_SEATA_MERGE_RESULTMessageType.TYPE_GLOBAL_BEGIN_RESULT <span class="token comment" spellcheck="true"># 全局事务开启的结果</span>MessageType.TYPE_GLOBAL_COMMIT_RESULT <span class="token comment" spellcheck="true"># 全局事务提交的结果</span>MessageType.TYPE_GLOBAL_REPORT_RESULTMessageType.TYPE_GLOBAL_ROLLBACK_RESULT <span class="token comment" spellcheck="true"># 全局事务回滚的结果</span>MessageType.TYPE_GLOBAL_STATUS_RESULTMessageType.TYPE_REG_CLT_RESULT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启一些定时任务：包括与服务端Channel的reconnect任务、<strong>MergedSend任务（处理批量消息发送）</strong>、异步请求Future的超时检测任务。</p></li><li><p>初始化TM相关的netty客户端的Bootstrap，主要配置了一些如下的ChannelHandler：</p><blockquote><ul><li>IdleStateHandler：心跳检测，配合 <code>NettyClientChannelManager</code> 保证连接可用</li><li>ProtocolV1Encoder和ProtocolV1Decoder：处理消息编解码</li><li>ClientHandler：处理服务端的响应，以及 IdleStateEvent 事件等等</li></ul></blockquote></li></ol></li></ol><h5 id="RMClient"><a href="#RMClient" class="headerlink" title="RMClient"></a>RMClient</h5><h6 id="RM（Resource-Manager）"><a href="#RM（Resource-Manager）" class="headerlink" title="RM（Resource Manager）"></a>RM（Resource Manager）</h6><p>​资源管理器，接口为 <code>ResourceManager</code>，负责管理分支事务资源。它与 <strong>TC（事务协调器）</strong> 交互，用于：<strong>注册分支事务</strong>、<strong>上报分支事务状态</strong>、<strong>驱动分支事务提交或回滚</strong>。ResourceManager继承了两个接口：</p><ul><li><strong>ResourceManagerInbound</strong>：作为 Inbound，处理 TC 发起的分支事务 <code>commit</code> 和 <code>rollback</code> 请求</li><li><strong>ResourceManagerOutbound</strong>：作为 Outbound，主动向 TC 注册分支事务、上报事务状态，以及执行全局锁查询</li></ul><p>​在 Seata 中，每个DataSource都被视为一个资源，而 <code>ResourceManager</code> 则负责操作这些资源。代码上通过 <strong>代理 DataSource</strong> 来实现 <code>ResourceManager</code> 的功能。默认实现是 <code>DefaultResourceManager</code>，它充当适配器，根据不同事务模式选择不同的具体实现</p><ul><li><strong>AT 模式</strong>：使用 <code>DataSourceManager</code></li><li><strong>TCC 模式</strong>：使用 <code>TCCResourceManager</code></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResourceManager</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceManagerInbound</span><span class="token punctuation">,</span> ResourceManagerOutbound <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 向 TC 注册资源</span>    <span class="token keyword">void</span> <span class="token function">registerResource</span><span class="token punctuation">(</span>Resource resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">unregisterResource</span><span class="token punctuation">(</span>Resource resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Resource<span class="token operator">></span> <span class="token function">getManagedResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取分支事务类型。例如：AT、TCC等</span>    BranchType <span class="token function">getBranchType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ============================== ResourceManagerInbound ==============================</span>    <span class="token comment" spellcheck="true">// 处理 TC（事务协调器）发起的分支事务commit请求</span>    BranchStatus <span class="token function">branchCommit</span><span class="token punctuation">(</span>BranchType branchType<span class="token punctuation">,</span> String xid<span class="token punctuation">,</span> <span class="token keyword">long</span> branchId<span class="token punctuation">,</span> String resourceId<span class="token punctuation">,</span> String applicationData<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理 TC（事务协调器）发起的分支事务roillback请求</span>    BranchStatus <span class="token function">branchRollback</span><span class="token punctuation">(</span>BranchType branchType<span class="token punctuation">,</span> String xid<span class="token punctuation">,</span> <span class="token keyword">long</span> branchId<span class="token punctuation">,</span> String resourceId<span class="token punctuation">,</span> String applicationData<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ============================== ResourceManagerOutbound功能 ==============================</span>    <span class="token comment" spellcheck="true">// 向 TC 注册分支事务</span>    Long <span class="token function">branchRegister</span><span class="token punctuation">(</span>BranchType branchType<span class="token punctuation">,</span> String resourceId<span class="token punctuation">,</span> String clientId<span class="token punctuation">,</span> String xid<span class="token punctuation">,</span> String applicationData<span class="token punctuation">,</span> String lockKeys<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 向 TC 上报分支事务状态</span>    <span class="token keyword">void</span> <span class="token function">branchReport</span><span class="token punctuation">(</span>BranchType branchType<span class="token punctuation">,</span> String xid<span class="token punctuation">,</span> <span class="token keyword">long</span> branchId<span class="token punctuation">,</span> BranchStatus status<span class="token punctuation">,</span> String applicationData<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 向 TC 查询指定锁是否已被占用</span>    <span class="token keyword">boolean</span> <span class="token function">lockQuery</span><span class="token punctuation">(</span>BranchType branchType<span class="token punctuation">,</span> String resourceId<span class="token punctuation">,</span> String xid<span class="token punctuation">,</span> String lockKeys<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h6><p>​<code>RMClient#init</code> 方法触发 RMClient 初始化，其创建的 <code>RmNettyRemotingClient</code> 和 TMClient 的 <code>TmNettyRemotingClient</code> 都继承自 <code>AbstractNettyRemotingClient</code>，所以整体流程类似 TMClient。不同点主要有：</p><ol><li><p>设置DefaultRMHandler为其AbstractNettyRemotingClient#transactionMessageHandler</p><blockquote><p>​<code>DefaultRMHandler</code> 本身是一个适配器，内部通过 SPI 加载对应 <code>BranchType</code> 的真正处理器（如 AT 模式使用 <code>RMHandlerAT</code>）。当接收到 TC 消息时，会根据 <code>BranchType</code> 找到对应的 RMHandler 去处理请求</p></blockquote></li><li><p>注册的ResponseProcessor不同，registerProcessor方法如下，可以发现<strong>对分支事务的commit,rollback和UndoLog的删除都是用了messageExecutor来异步处理，这三个功能都会访问数据库，这里采用异步处理以避免网络IO阻塞 Netty IO 线程，导致Channel的吞吐量下降</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注册客户端事务 commit,rollback，undo log信息处理器（服务端主动发送的消息，对全局事务进行提交，回滚等操作）</span>    RmBranchCommitProcessor rmBranchCommitProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RmBranchCommitProcessor</span><span class="token punctuation">(</span><span class="token function">getTransactionMessageHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span>MessageType<span class="token punctuation">.</span>TYPE_BRANCH_COMMIT<span class="token punctuation">,</span> rmBranchCommitProcessor<span class="token punctuation">,</span> messageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    RmBranchRollbackProcessor rmBranchRollbackProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RmBranchRollbackProcessor</span><span class="token punctuation">(</span><span class="token function">getTransactionMessageHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span>MessageType<span class="token punctuation">.</span>TYPE_BRANCH_ROLLBACK<span class="token punctuation">,</span> rmBranchRollbackProcessor<span class="token punctuation">,</span> messageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    RmUndoLogProcessor rmUndoLogProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RmUndoLogProcessor</span><span class="token punctuation">(</span><span class="token function">getTransactionMessageHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span>MessageType<span class="token punctuation">.</span>TYPE_RM_DELETE_UNDOLOG<span class="token punctuation">,</span> rmUndoLogProcessor<span class="token punctuation">,</span> messageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册服务端响应消息的处理器（RM发送事务相关请求，服务端会响应）</span>    ClientOnResponseProcessor onResponseProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientOnResponseProcessor</span><span class="token punctuation">(</span>mergeMsgMap<span class="token punctuation">,</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getFutures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">getTransactionMessageHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span>MessageType<span class="token punctuation">.</span>TYPE_SEATA_MERGE_RESULT<span class="token punctuation">,</span> onResponseProcessor<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span>MessageType<span class="token punctuation">.</span>TYPE_BRANCH_REGISTER_RESULT<span class="token punctuation">,</span> onResponseProcessor<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span>MessageType<span class="token punctuation">.</span>TYPE_BRANCH_STATUS_REPORT_RESULT<span class="token punctuation">,</span> onResponseProcessor<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span>MessageType<span class="token punctuation">.</span>TYPE_GLOBAL_LOCK_QUERY_RESULT<span class="token punctuation">,</span> onResponseProcessor<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span>MessageType<span class="token punctuation">.</span>TYPE_REG_RM_RESULT<span class="token punctuation">,</span> onResponseProcessor<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span>MessageType<span class="token punctuation">.</span>TYPE_BATCH_RESULT_MSG<span class="token punctuation">,</span> onResponseProcessor<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5.registry heartbeat message processor</span>    ClientHeartbeatProcessor clientHeartbeatProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientHeartbeatProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span>MessageType<span class="token punctuation">.</span>TYPE_HEARTBEAT_MSG<span class="token punctuation">,</span> clientHeartbeatProcessor<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="SeataDataSourceAutoConfiguration"><a href="#SeataDataSourceAutoConfiguration" class="headerlink" title="SeataDataSourceAutoConfiguration"></a>SeataDataSourceAutoConfiguration</h3><p>​这个配置类主要是为了支持 <strong>AT</strong> 或 <strong>XA</strong> 事务模式。它内部引入了 <code>SeataAutoDataSourceProxyCreator</code>，这是个带代理功能的 Bean，专门负责对 <strong>DataSource</strong> 进行代理。这个类会创建一个 <code>SeataAutoDataSourceProxyAdvice</code> 切面，把对 DataSource 的调用转发给对应的代理类（AT 模式用 <code>DataSourceProxy</code>，XA 模式用 <code>DataSourceProxyXA</code>）</p><h4 id="SQL执行代理"><a href="#SQL执行代理" class="headerlink" title="SQL执行代理"></a>SQL执行代理</h4><p>​在 Java 的 SQL 执行流程里，其实一直是这一套： <strong>DataSource -&gt; Connection -&gt; PreparedStatement</strong></p><p>​DataSource 负责拿 Connection，Connection 负责创建 PreparedStatement 并处理事务，PreparedStatement 执行 SQL。所以 Seata 就对这几个关键接口都做了代理，目的就是 <strong>加上分布式事务的控制逻辑</strong></p><ul><li><p><strong>DataSource  →  DataSourceProxy</strong></p><blockquote><p>​DataSourceProxy 会在原有逻辑上，额外把<strong>当前 RM 注册到 TC，并把原始 Connection 包装成 ConnectionProxy</strong>，用于支持后续事务功能</p></blockquote></li><li><p><strong>Connection  →  ConnectionProxy</strong></p><blockquote><p>​ConnectionProxy 会增强 commit 和 rollback 的逻辑。还会对获取PreparedStatement时将其包装成 PreparedStatementProxy用于其SQL执行的增强</p><ul><li><strong>commit</strong>：不仅提交，还会<strong>注册分支事务、刷新 undo_log</strong></li><li><strong>rollback</strong>：除了回滚，还会<strong>上报当前分支事务的状态，驱动全局事务回滚</strong></li></ul></blockquote></li><li><p><strong>PreparedStatement →  PreparedStatementProxy</strong></p><blockquote><p>主要是在 <strong>SQL 执行前后做镜像查询，用来生成 undo_log，以便后续能回滚</strong></p></blockquote></li></ul><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>​Seata 作为分布式事务解决方案，需要一个 <strong>服务端协调者</strong> 来统一管理整个分布式事务上下文中各微服务的事务状态。因此，Seata 提供了一个独立的 Spring Boot 服务，由 <code>seata-server</code> 模块中的 <code>ServerApplication</code> 启动，最终触发 <code>io.seata.server.Server#start</code> 方法来启动服务端</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化参数解析器，解析启动参数</span>    ParameterParser parameterParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterParser</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 统计相关功能初始化</span>    MetricsManager<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ThreadPoolExecutor workingThreads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>NettyServerConfig<span class="token punctuation">.</span><span class="token function">getMinServerPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            NettyServerConfig<span class="token punctuation">.</span><span class="token function">getMaxServerPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NettyServerConfig<span class="token punctuation">.</span><span class="token function">getKeepAliveTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>NettyServerConfig<span class="token punctuation">.</span><span class="token function">getMaxTaskQueueSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">NamedThreadFactory</span><span class="token punctuation">(</span><span class="token string">"ServerHandlerThread"</span><span class="token punctuation">,</span> NettyServerConfig<span class="token punctuation">.</span><span class="token function">getMaxServerPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 确定 Server 的 IP</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>NetUtil<span class="token punctuation">.</span><span class="token function">isValidIp</span><span class="token punctuation">(</span>parameterParser<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        XID<span class="token punctuation">.</span><span class="token function">setIpAddress</span><span class="token punctuation">(</span>parameterParser<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        String preferredNetworks <span class="token operator">=</span> ConfigurationFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>REGISTRY_PREFERED_NETWORKS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>preferredNetworks<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            XID<span class="token punctuation">.</span><span class="token function">setIpAddress</span><span class="token punctuation">(</span>NetUtil<span class="token punctuation">.</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span>preferredNetworks<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>REGEX_SPLIT_CHAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            XID<span class="token punctuation">.</span><span class="token function">setIpAddress</span><span class="token punctuation">(</span>NetUtil<span class="token punctuation">.</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建 Netty 服务端对象，负责接收客户端（RM/TM）的请求</span>    NettyRemotingServer nettyRemotingServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyRemotingServer</span><span class="token punctuation">(</span>workingThreads<span class="token punctuation">)</span><span class="token punctuation">;</span>    XID<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>nettyRemotingServer<span class="token punctuation">.</span><span class="token function">getListenPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UUIDGenerator<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>parameterParser<span class="token punctuation">.</span><span class="token function">getServerNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SessionHolder<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LockerManagerFactory<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建TC</span>    DefaultCoordinator coordinator <span class="token operator">=</span> DefaultCoordinator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>nettyRemotingServer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启动一些定时任务，包括异步全局事务commit操作、超时检查等</span>    coordinator<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将 Coordinator 设置为 Netty 的消息处理器</span>    nettyRemotingServer<span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span>coordinator<span class="token punctuation">)</span><span class="token punctuation">;</span>    ServerRunner<span class="token punctuation">.</span><span class="token function">addDisposable</span><span class="token punctuation">(</span>coordinator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册消息处理器并构建netty的ServerBootstrap，开启端口的监听</span>    nettyRemotingServer<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​功能看着挺多的，我们只需重点关注服务端Netty的配置、TC的创建和初始化，还有接收到客户端的请求后是如何协调TC来处理对应的逻辑</p><h3 id="NettyRemotingServer创建"><a href="#NettyRemotingServer创建" class="headerlink" title="NettyRemotingServer创建"></a>NettyRemotingServer创建</h3><p>NettyRemotingServer实例化做的事情不多，包括如下：</p><ul><li>提供一个messageExecutor线程池，用于异步处理客户端请求的部分消息，避免阻塞 Netty IO 线程</li><li>构建 Netty <code>ServerBootstrap</code>，创建 <code>bossGroup</code> 和 <code>workerGroup</code>，并使用 <code>ServerHandler</code> 处理客户端消息。<strong>这个 <code>ServerHandler</code> 处理消息的逻辑和客户端的 <code>ClientHandler</code> 一致，都是调用 <code>AbstractNettyRemoting#processMessage</code>，再由后续配置的消息 Processor和对应的线程池去执行具体的业务处理</strong></li></ul><h3 id="TC创建和初始化"><a href="#TC创建和初始化" class="headerlink" title="TC创建和初始化"></a>TC创建和初始化</h3><p>​TC（Transaction Coordinator，事务协调者）负责维护 <strong>全局事务</strong> 和 <strong>分支事务</strong> 的状态，并驱动全局事务的提交或回滚，其实现了TransactionMessageHandler接口，是服务端所有消息处理的入口，实现为DefaultCoordinator。其主要职责分类为：</p><ul><li><strong>与 RM 交互</strong>：处理分支事务的注册、提交和回滚，当 <strong>TM 发起全局事务的 commit 或 rollback 时，TC 会进一步驱动各分支事务完成相应操作</strong></li><li><strong>与 TM 交互</strong>：负责<strong>全局事务的开启、提交、回滚等</strong>操作，保证全局事务状态一致</li></ul><p>​TC内部有很多单线程定时任务线程池，在其初始化阶段为启动一些列的定时任务，包括：全局事务的异步commit、客户端undo_log的删除等等</p><h3 id="服务端Netty启动"><a href="#服务端Netty启动" class="headerlink" title="服务端Netty启动"></a>服务端Netty启动</h3><ul><li>和 TMClient、RMClient 类似，服务端同样需要注册一系列消息处理器（Processor）。这些处理器最终会<strong>委托给 <code>DefaultCoordinator</code>（实现了 <code>TransactionMessageHandler</code>）来完成消息处理逻辑</strong></li><li>启动 <code>NettyRemotingServer</code>，其内部<strong>基于 <code>ServerBootstrap</code> 初始化并绑定到本地端口</strong>。<strong>绑定成功后，通过 <code>RegistryService#register</code> 将当前服务节点注册到注册中心</strong>（如 Nacos、Consul、Zookeeper 等）。到此服务端的整体就启动完成了，可以对外提供服务了</li></ul>]]></content>
      
      
      <categories>
          
          <category> Seata </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudFlare-CDN缓存清除</title>
      <link href="/2024-06-14/cloudflare-cdn-huan-cun-qing-chu/"/>
      <url>/2024-06-14/cloudflare-cdn-huan-cun-qing-chu/</url>
      
        <content type="html"><![CDATA[<hr><p>​给出了一些api用于清除Cloudflare的CDN缓存方式</p> <span id="more"></span><p>​搭建个人博客网站时，域名托管到CF，会使用CF的CDN。当你重新修改博客网站的样式css和js文件等再重新部署，一般都不会立马生效，因为CDN里的缓存还在，前端访问用的还是旧css和js文件。这时我们需要主动清除CDN的缓存，来让缓存重新加载，以便让我们修改的样式在网站立马生效</p><h2 id="1-purgeUrl"><a href="#1-purgeUrl" class="headerlink" title="1 purgeUrl"></a>1 purgeUrl</h2><p><img src="/img/cloudflare-purge-url.png"></p><h2 id="2-使用ApiKey清除（不推荐）"><a href="#2-使用ApiKey清除（不推荐）" class="headerlink" title="2 使用ApiKey清除（不推荐）"></a>2 使用ApiKey清除（不推荐）</h2><ul><li>ZONE_ID：区域id，即你在CF上托管的根域名id</li><li>EMAIL：你的邮箱</li><li>API_KEY：可自建apiKey，也可使用CF默认有的GlobalApiKey（<strong>个人资料 -&gt; API令牌 -&gt; API密钥 -&gt; Global API Key</strong>）</li></ul><h3 id="2-1-全部清除"><a href="#2-1-全部清除" class="headerlink" title="2.1 全部清除"></a>2.1 全部清除</h3><pre class="line-numbers language-bash"><code class="language-bash">curl https://api.cloudflare.com/client/v4/zones/<span class="token variable">$ZONE_ID</span>/purge_cache \    -H <span class="token string">'Content-Type: application/json'</span> \    -H <span class="token string">"X-Auth-Email: <span class="token variable">$EMAIL</span>"</span> \    -H <span class="token string">"X-Auth-Key: <span class="token variable">$API_KEY</span>"</span> \    -d <span class="token string">'{"purge_everything": true}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-批量清除具体文件"><a href="#2-2-批量清除具体文件" class="headerlink" title="2.2 批量清除具体文件"></a>2.2 批量清除具体文件</h3><p>一次性调用有文件数量限制： <strong>Free&#x2F;Pro&#x2F;Business一次上限30个，Enterprise一次上限500个</strong></p><pre class="line-numbers language-bash"><code class="language-bash">curl https://api.cloudflare.com/client/v4/zones/<span class="token variable">$ZONE_ID</span>/purge_cache \    -H <span class="token string">'Content-Type: application/json'</span> \    -H <span class="token string">"X-Auth-Email: <span class="token variable">$EMAIL</span>"</span> \    -H <span class="token string">"X-Auth-Key: <span class="token variable">$API_KEY</span>"</span> \    -d <span class="token string">'{    "files": [        "https://blog.shanzhao.site/css/my.css",        "https://blog.shanzhao.site/libs/others/snow.js"    ]}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-自定义token清除（推荐）"><a href="#3-自定义token清除（推荐）" class="headerlink" title="3 自定义token清除（推荐）"></a>3 自定义token清除（推荐）</h2><p>自定义token不仅<strong>可以最小化的控制权限，也可以设置token的有效时常</strong>。使用如下方式创建一个专用于清理指定根域名的token</p><p><img src="/img/couldflare-purge-token.png"></p><h3 id="3-1-验证token是否生效"><a href="#3-1-验证token是否生效" class="headerlink" title="3.1 验证token是否生效"></a>3.1 验证token是否生效</h3><pre class="line-numbers language-bash"><code class="language-bash">curl -X GET <span class="token string">"https://api.cloudflare.com/client/v4/user/tokens/verify"</span> \     -H <span class="token string">"Authorization: Bearer <span class="token variable">$API_TOKEN</span>"</span> \     -H <span class="token string">"Content-Type:application/json"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-2-全部清除"><a href="#3-2-全部清除" class="headerlink" title="3.2 全部清除"></a>3.2 全部清除</h3><pre class="line-numbers language-bash"><code class="language-bash">curl https://api.cloudflare.com/client/v4/zones/<span class="token variable">$ZONE_ID</span>/purge_cache \    -H <span class="token string">'Content-Type: application/json'</span> \    -H <span class="token string">"Authorization: Bearer <span class="token variable">$API_TOKEN</span>"</span> \    -d <span class="token string">'{"purge_everything": true}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-批量清除具体文件"><a href="#3-3-批量清除具体文件" class="headerlink" title="3.3 批量清除具体文件"></a>3.3 批量清除具体文件</h3><p>一次性调用有文件数量限制： <strong>Free&#x2F;Pro&#x2F;Business一次上限30个，Enterprise一次上限500个</strong></p><pre class="line-numbers language-bash"><code class="language-bash">curl https://api.cloudflare.com/client/v4/zones/<span class="token variable">$ZONE_ID</span>/purge_cache \    -H <span class="token string">'Content-Type: application/json'</span> \    -H <span class="token string">"Authorization: Bearer <span class="token variable">$API_TOKEN</span>"</span> \    -d <span class="token string">'{    "files": [        "https://blog.shanzhao.site/css/my.css",        "https://blog.shanzhao.site/libs/others/snow.js"    ]}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4 其他"></a>4 其他</h2><p>还有其他的参数，比如tags，hosts，prefixes，但这些都是企业版的用户才能使用，这里就不写了</p><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5 参考链接"></a>5 参考链接</h2><ul><li><a href="https://developers.cloudflare.com/api/resources/cache/methods/purge/">官方清除缓存文档</a></li><li><a href="https://dash.cloudflare.com/profile/api-tokens">cloudflare dashboard创建token和查看ApiKey</a></li><li><a href="https://developers.cloudflare.com/fundamentals/setup/find-account-and-zone-ids/">ZoneId获取</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> cloudflare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cdn缓存清除 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redisson — 分布式本地缓存RLocalCachedMap的实现</title>
      <link href="/2023-08-19/redisson-redissonlocalcachedmap/"/>
      <url>/2023-08-19/redisson-redissonlocalcachedmap/</url>
      
        <content type="html"><![CDATA[<p>​基于 Redisson 3.16.8，对 <strong>RedissonLocalCachedMap</strong> 的功能及核心方法进行了深入解析，并重点探讨其关键参数对整体缓存行为的影响，为后续定向优化提供参考</p><span id="more"></span><h2 id="RLocalCachedMap"><a href="#RLocalCachedMap" class="headerlink" title="RLocalCachedMap"></a>RLocalCachedMap</h2><p>​在看 Redisson 源码时发现一个挺有意思的工具：<strong>RLocalCachedMap</strong>，它的主要实现类是 <strong>RedissonLocalCachedMap</strong>。简单来说，它是一个<strong>既在本地内存缓存数据、又能和 Redis 同步的 Map</strong>，也可以理解成 <strong>带本地缓存的分布式 Map</strong></p><p>它的核心思路很简单：</p><ul><li><strong>读操作</strong>：优先从 JVM 本地内存获取，如果本地没有，就fallback到从远程Redis中获取，再把结果缓存到本地。这样大多数情况下<strong>直接走内存，不走网络IO，速度非常快</strong></li><li><strong>写操作</strong>（新增、更新、删除）：不仅写入 Redis，还会通过 Redis 的 <strong>Pub&#x2F;Sub</strong> 通知其他节点，把它们本地的副本中对应的缓存数据更新掉，从而保持多节点数据一致性</li></ul><p>​换句话说，就是<strong>用客户端内存换取网络开销</strong>，非常适合那些<strong>读多写少</strong>、<strong>缓存数据量不大</strong>的分布式场景。比如：经常访问的配置、热点字典数据等等。接下来我重点分析下其实现类RedissonLocalCachedMap的一些核心方法</p><h3 id="RedissonLocalCachedMap"><a href="#RedissonLocalCachedMap" class="headerlink" title="RedissonLocalCachedMap"></a>RedissonLocalCachedMap</h3><h4 id="核心字段"><a href="#核心字段" class="headerlink" title="核心字段"></a>核心字段</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 本地缓存更新日志的有效期（毫秒），默认 10 分钟。</span><span class="token comment" spellcheck="true">// 用于 LOAD 类型的重连策略，判断缓存是否需要全量清理。</span><span class="token keyword">private</span> <span class="token keyword">long</span> cacheUpdateLogTime <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前RedissonLocalCachedMap实例的id</span><span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> instanceId<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 本地缓存，提供了三方的caffeine缓存和redisson内部自己设计的缓存</span><span class="token comment" spellcheck="true">// 默认用redisson自己设计的缓存：org.redisson.api.LocalCachedMapOptions.EvictionPolicy</span><span class="token keyword">private</span> ConcurrentMap<span class="token operator">&lt;</span>CacheKey<span class="token punctuation">,</span> CacheValue<span class="token operator">></span> cache<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认为1</span><span class="token keyword">private</span> <span class="token keyword">int</span> invalidateEntryOnChange<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 同步策略，默认为SyncStrategy#INVALIDATE。 即变更时删除本地缓存，下一次访问再从 Redis 拉取，属于懒加载策略</span><span class="token keyword">private</span> SyncStrategy syncStrategy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存储模式，决定数据存放的位置</span><span class="token comment" spellcheck="true">// 默认为org.redisson.api.LocalCachedMapOptions.StoreMode#LOCALCACHE_REDIS，即本地缓存和redis缓存都使用</span><span class="token keyword">private</span> LocalCachedMapOptions<span class="token punctuation">.</span>StoreMode storeMode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 是否缓存 value 为 null 的结果，默认 false（不缓存空值）</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> storeCacheMiss<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 负责订阅 Redis 通知并处理本地缓存同步的监听器</span><span class="token keyword">private</span> LocalCacheListener listener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 提供本地缓存的只读视图，用于遍历和调试</span><span class="token keyword">private</span> LocalCacheView<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> localCacheView<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>​在 <code>RedissonLocalCachedMap</code> 的构造方法里，<code>init</code> 会创建一个 <strong>LocalCacheListener</strong>，这是非常核心的组件。我们重点看它的 <code>add</code> 方法，它负责<strong>订阅 Redis Channel 并注册消息监听器</strong>，后续所有写操作发出的通知都会通过这个 Channel，被 MessageListener 接收并最终更新本地缓存。核心逻辑如下：</p><ul><li><p>根据 ReconnectionStrategy 决定是否添加 StatusListener</p><blockquote><p>​当客户端订阅 Redis Channel 成功（包括断开重连）时，会触发 <code>onSubscribe</code> 方法。RLocalCachedMap 会根据策略处理本地缓存，策略行为如下</p><ul><li>ReconnectionStrategy.CLEAR：重连后<strong>直接清空本地缓存</strong>，不保留任何旧数据</li><li>ReconnectionStrategy.LOAD：如果上次更新距今超过 10 分钟，则<strong>直接清空本地缓存</strong>；<strong>否则只清空断开期间有变动的 key</strong>（用了一个Redis <strong>ScoredSortedSet数据结构和ScoredSetEvictionTask定时任务保存最近11分钟的操作key，用于增量失效</strong>）</li></ul></blockquote></li><li><p>只有同步策略不是 SyncStrategy.NONE 才会添加 MessageListener，内部处理不同消息的逻辑如下</p><blockquote><ul><li><code>LocalCachedMapDisable</code>：<strong>禁用</strong>指定 key</li><li><code>LocalCachedMapEnable</code>：<strong>启用</strong>指定 key</li><li><code>LocalCachedMapClear</code>：<strong>清空</strong>本地缓存</li><li><code>LocalCachedMapInvalidate</code>：<strong>删除</strong>本地缓存中的某些 key</li><li><code>LocalCachedMapUpdate</code>：<strong>增加或更新</strong>本地缓存</li></ul></blockquote></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> cache<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用专属的LocalCachedMessageCodec编解码器处理channel里发布的消息</span>    <span class="token comment" spellcheck="true">// topic格式为，默认也是channelName -> {RLocalCachedMap的name}:topic</span>    invalidationTopic <span class="token operator">=</span> RedissonTopic<span class="token punctuation">.</span><span class="token function">createRaw</span><span class="token punctuation">(</span>LocalCachedMessageCodec<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">,</span> commandExecutor<span class="token punctuation">,</span><span class="token function">getInvalidationTopicName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果设置了重连策略，则在重新订阅时触发处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">getReconnectionStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ReconnectionStrategy<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        reconnectionListenerId <span class="token operator">=</span> invalidationTopic<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaseStatusListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>String channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">getReconnectionStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ReconnectionStrategy<span class="token punctuation">.</span>CLEAR<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">getReconnectionStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ReconnectionStrategy<span class="token punctuation">.</span>LOAD <span class="token operator">&amp;&amp;</span> lastInvalidate <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">loadAfterReconnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果启用同步策略，则注册消息监听器</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">getSyncStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SyncStrategy<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 开始subscribe redis的channel并注册对应的listener</span>        syncListenerId <span class="token operator">=</span> invalidationTopic<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>CharSequence channel<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">LocalCachedMapDisable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    LocalCachedMapDisable m <span class="token operator">=</span> <span class="token punctuation">(</span>LocalCachedMapDisable<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>                    String requestId <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Set<span class="token operator">&lt;</span>CacheKey<span class="token operator">></span> keysToDisable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>CacheKey<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyHash <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>LocalCachedMapDisable<span class="token punctuation">)</span> msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKeyHashes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        CacheKey key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheKey</span><span class="token punctuation">(</span>keyHash<span class="token punctuation">)</span><span class="token punctuation">;</span>                        keysToDisable<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">disableKeys</span><span class="token punctuation">(</span>requestId<span class="token punctuation">,</span> keysToDisable<span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    RedissonTopic topic <span class="token operator">=</span> RedissonTopic<span class="token punctuation">.</span><span class="token function">createRaw</span><span class="token punctuation">(</span>LocalCachedMessageCodec<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">,</span>                            commandExecutor<span class="token punctuation">,</span> RedissonObject<span class="token punctuation">.</span><span class="token function">suffixName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requestId <span class="token operator">+</span> DISABLED_ACK_SUFFIX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    topic<span class="token punctuation">.</span><span class="token function">publishAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LocalCachedMapDisableAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">LocalCachedMapEnable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    LocalCachedMapEnable m <span class="token operator">=</span> <span class="token punctuation">(</span>LocalCachedMapEnable<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyHash <span class="token operator">:</span> m<span class="token punctuation">.</span><span class="token function">getKeyHashes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        CacheKey key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheKey</span><span class="token punctuation">(</span>keyHash<span class="token punctuation">)</span><span class="token punctuation">;</span>                        disabledKeys<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 清空缓存的消息。比如Map的clear和delete等方法</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">LocalCachedMapClear</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    LocalCachedMapClear clearMsg <span class="token operator">=</span> <span class="token punctuation">(</span>LocalCachedMapClear<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clearMsg<span class="token punctuation">.</span><span class="token function">getExcludedId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instanceId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 排除指定的实例。因为发起方客户端已经操作过了，不再需要从订阅中获取到消息后再处理一次</span>                        cache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>clearMsg<span class="token punctuation">.</span><span class="token function">isReleaseSemaphore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            RSemaphore semaphore <span class="token operator">=</span> <span class="token function">getClearSemaphore</span><span class="token punctuation">(</span>clearMsg<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            semaphore<span class="token punctuation">.</span><span class="token function">releaseAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 删除key的消息</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">LocalCachedMapInvalidate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    LocalCachedMapInvalidate invalidateMsg <span class="token operator">=</span> <span class="token punctuation">(</span>LocalCachedMapInvalidate<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>invalidateMsg<span class="token punctuation">.</span><span class="token function">getExcludedId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instanceId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 首先排除指定的实例</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyHash <span class="token operator">:</span> invalidateMsg<span class="token punctuation">.</span><span class="token function">getKeyHashes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            CacheKey key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheKey</span><span class="token punctuation">(</span>keyHash<span class="token punctuation">)</span><span class="token punctuation">;</span>                            cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 添加、更新key的消息（操作本地缓存）</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">LocalCachedMapUpdate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    LocalCachedMapUpdate updateMsg <span class="token operator">=</span> <span class="token punctuation">(</span>LocalCachedMapUpdate<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>updateMsg<span class="token punctuation">.</span><span class="token function">getExcludedId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instanceId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 首先排除指定的实例</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>LocalCachedMapUpdate<span class="token punctuation">.</span>Entry entry <span class="token operator">:</span> updateMsg<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            ByteBuf keyBuf <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">wrappedBuffer</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            ByteBuf valueBuf <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">wrappedBuffer</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                <span class="token function">updateCache</span><span class="token punctuation">(</span>keyBuf<span class="token punctuation">,</span> valueBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Can't decode map entry"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                                keyBuf<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                valueBuf<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 更新 lastInvalidate 时间，用于 LOAD 重连策略判断</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">getReconnectionStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ReconnectionStrategy<span class="token punctuation">.</span>LOAD<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    lastInvalidate <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String disabledKeysName <span class="token operator">=</span> RedissonObject<span class="token punctuation">.</span><span class="token function">suffixName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> DISABLED_KEYS_SUFFIX<span class="token punctuation">)</span><span class="token punctuation">;</span>        RListMultimapCache<span class="token operator">&lt;</span>LocalCachedMapDisabledKey<span class="token punctuation">,</span> String<span class="token operator">></span> multimap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedissonListMultimapCache</span><span class="token operator">&lt;</span>LocalCachedMapDisabledKey<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>                null<span class="token punctuation">,</span> codec<span class="token punctuation">,</span> commandExecutor<span class="token punctuation">,</span> disabledKeysName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>LocalCachedMapDisabledKey key <span class="token operator">:</span> multimap<span class="token punctuation">.</span><span class="token function">readAllKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Set<span class="token operator">&lt;</span>CacheKey<span class="token operator">></span> keysToDisable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>CacheKey<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String hash <span class="token operator">:</span> multimap<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                CacheKey cacheKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheKey</span><span class="token punctuation">(</span>ByteBufUtil<span class="token punctuation">.</span><span class="token function">decodeHexDump</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                keysToDisable<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">disableKeys</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keysToDisable<span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><h5 id="get"><a href="#get" class="headerlink" title="get"></a>get</h5><p>​<code>get</code> 方法整体逻辑很直接：<strong>先从本地缓存拿，如果有就直接返回</strong>；如果本地没有，再根据 <code>storeMode</code> 判断是否需要去远程 Redis 获取数据。拿到远程数据后，会<strong>顺便缓存到本地</strong>，方便下次直接读取。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> RFuture<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">getAsync</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    CacheKey cacheKey <span class="token operator">=</span> localCacheView<span class="token punctuation">.</span><span class="token function">toCacheKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 优先从本地缓存获取</span>    CacheValue cacheValue <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheValue <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>storeCacheMiss <span class="token operator">||</span> cacheValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> RedissonPromise<span class="token punctuation">.</span><span class="token function">newSucceededFuture</span><span class="token punctuation">(</span><span class="token punctuation">(</span>V<span class="token punctuation">)</span> cacheValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. 仅使用本地缓存模式的情况（StoreMode.LOCALCACHE）来构建结果</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>storeMode <span class="token operator">==</span> LocalCachedMapOptions<span class="token punctuation">.</span>StoreMode<span class="token punctuation">.</span>LOCALCACHE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasNoLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 无Loader直接构建null</span>            <span class="token keyword">return</span> RedissonPromise<span class="token punctuation">.</span><span class="token function">newSucceededFuture</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 有Loader：异步加载并写入本地缓存</span>        CompletableFuture<span class="token operator">&lt;</span>V<span class="token operator">></span> future <span class="token operator">=</span> <span class="token function">loadValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span> key<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CompletableFuture<span class="token operator">&lt;</span>V<span class="token operator">></span> f <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>value <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>storeCacheMiss <span class="token operator">||</span> value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cachePut</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFutureWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 从远程Redis获取并缓存到本地</span>    RPromise<span class="token operator">&lt;</span>V<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedissonPromise</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RFuture<span class="token operator">&lt;</span>V<span class="token operator">></span> future <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    future<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">tryFailure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 缓存到本地</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>storeCacheMiss <span class="token operator">||</span> value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">cachePut</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        result<span class="token punctuation">.</span><span class="token function">trySuccess</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><h5 id="put"><a href="#put" class="headerlink" title="put"></a>put</h5><p>​源码里 <code>put</code> 的整体流程是：<strong>先写本地缓存，再根据 <code>syncStrategy</code> 构建要发布的消息（LocalCachedMapUpdate或LocalCachedMapInvalidate），最后通过 Lua 脚本操作 Redis</strong>。重点逻辑如下：</p><ol><li>在 Redis 的<strong>哈希表里设置对应字段的值</strong></li><li>根据 <code>invalidateEntryOnChange</code> 判断：<ul><li>如果<strong>是 <code>1</code>，只发布消息通知其他节点更新本地缓存</strong></li><li>如果<strong>是 <code>2</code>，除了发布消息，还会把 key 添加到 ScoredSortedSet，用于断线重连时增量更新</strong></li></ul></li><li><strong>返回字段原来的旧值</strong></li></ol><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">local</span> v <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'hget'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 从 Redis 哈希表中获取字段的当前值</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'hset'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 将哈希表中的字段设置为新值</span><span class="token keyword">if</span> ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token keyword">then</span> <span class="token comment" spellcheck="true">-- invalidateEntryOnChange == 1，则只发布消息</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">if</span> ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'2'</span> <span class="token keyword">then</span> <span class="token comment" spellcheck="true">-- invalidateEntryOnChange == 2，则向ScoredSortedSet添加元素，用于后续断连恢复数据；再发布消息</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'zadd'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">return</span> v<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 返回旧值</span><span class="token comment" spellcheck="true">--[[     KEYS[1]: RLocalCachedMap的name    KEYS[2]: 订阅的channel，即 -> {RLocalCachedMap的name}:topic    KEYS[3]: ScoredSortedSet的keyName        ARGV[1]：mapKey    ARGV[2]：mapValue    ARGV[3]：向Channel发送的消息    ARGV[4]：invalidateEntryOnChange    ARGV[5]：System.currentTimeMillis()    ARGV[6]：entryId，可定位到mapKey]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="fastPut"><a href="#fastPut" class="headerlink" title="fastPut"></a>fastPut</h5><p>​fastPut的代码逻辑和put一样，只是lua脚本略有区别。它是<strong>先发布消息，再写 Redis</strong>，并<strong>在最后只返回 <code>0/1</code> 表示值是更新还是新增</strong>，从而加快整体的响应</p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">if</span> ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token keyword">then</span> <span class="token comment" spellcheck="true">-- invalidateEntryOnChange == 1</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 向频道 KEYS[2] 发布消息 ARGV[3]</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">if</span> ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'2'</span> <span class="token keyword">then</span> <span class="token comment" spellcheck="true">-- invalidateEntryOnChange == 2</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'zadd'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 向有序集合 KEYS[3] 添加元素 ARGV[6]，分值为 ARGV[5]</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 向频道 KEYS[2] 发布消息 ARGV[3]</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'hset'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">then</span> <span class="token comment" spellcheck="true">-- 将哈希表 KEYS[1] 的字段 ARGV[1] 设置为 ARGV[2]。如果返回 0 表示是更新</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 更新操作</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 添加操作</span><span class="token comment" spellcheck="true">--[[     KEYS[1]: RLocalCachedMap的name    KEYS[2]: 订阅的channel，即 -> {RLocalCachedMap的name}:topic    KEYS[3]: ScoredSortedSet的keyName        ARGV[1]：mapKey    ARGV[2]：mapValue    ARGV[3]：向Channel发送的消息    ARGV[4]：invalidateEntryOnChange    ARGV[5]：System.currentTimeMillis()    ARGV[6]：entryId，可定位到mapKey]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><h5 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h5><p>​<code>remove</code> 的整体流程是：<strong>先删除本地缓存</strong>，然后根据 <code>storeMode</code> 决定是否只发消息还是同时操作 Redis。Lua逻辑如下：</p><ol><li>删除 Redis 的<strong>哈希表里对应字段</strong></li><li>删除成功则根据 <code>invalidateEntryOnChange</code> 判断：<ul><li>如果<strong>是 <code>1</code>，只发布LocalCachedMapInvalidate消息，通知其他节点删除本地缓存</strong></li><li>如果<strong>是 <code>2</code>，除了发布消息，还会把 key 添加到 ScoredSortedSet，用于断线重连时增量操作</strong></li></ul></li><li><strong>返回字段原来的旧值</strong></li></ol><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">local</span> v <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'hget'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 获取哈希表 KEYS[1] 中字段 ARGV[1] 的值</span><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'hdel'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token comment" spellcheck="true">-- 成功删除哈希表 KEYS[1] 中字段 ARGV[1]</span>    <span class="token keyword">if</span> ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token keyword">then</span> <span class="token comment" spellcheck="true">-- invalidateEntryOnChange == 1</span>        redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 向频道 KEYS[2] 发布消息 ARGV[2]</span>    <span class="token keyword">end</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'2'</span> <span class="token keyword">then</span> <span class="token comment" spellcheck="true">-- invalidateEntryOnChange == 2</span>        redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'zadd'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 向有序集合 KEYS[3] 添加一个元素 ARGV[5]，分数为 ARGV[4]</span>        redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 向频道 KEYS[2] 发布消息 ARGV[2]</span>    <span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">return</span> v <span class="token comment" spellcheck="true">-- 返回旧值</span><span class="token comment" spellcheck="true">--[[     KEYS[1]: RLocalCachedMap的name    KEYS[2]: 订阅的channel，即 -> {RLocalCachedMap的name}:topic    KEYS[3]: ScoredSortedSet的keyName        ARGV[1]：mapKey    ARGV[2]：向Channel发送的消息    ARGV[3]：invalidateEntryOnChange    ARGV[4]：System.currentTimeMillis()    ARGV[5]：entryId，可定位到mapKey]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="fastRemove"><a href="#fastRemove" class="headerlink" title="fastRemove"></a>fastRemove</h5><p>​<code>fastRemove</code> 支持批量删除，核心逻辑和 <code>remove</code> 类似，优化操作和fastPut类似：<strong>不返回旧值</strong>，只返回删除成功的数量，源码就没必要分析了。适合<strong>只关心操作结果而不需要旧数据的场景</strong></p><h4 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h4><h5 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h5><p>​<code>clear</code> 非常直接：先<strong>清空本地缓存，然后删除 Redis 中整个 hash key，并通过 Channel 发布一条 <code>LocalCachedMapClear</code> 消息，让其他节点也清空它们的本地缓存</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​整体来看这个工具实现还是挺健壮的，<strong>ReconnectionStrategy</strong> 搭配 <strong>ScoredSortedSet</strong>，很好地处理了断线重连后的本地缓存策略；本地缓存可以选择性能更强的 <strong>CAFFEINE</strong>，或者使用 Redisson 自带的多种策略实现；如果只想用本地缓存，可以设置为 <strong>StoreMode.LOCALCACHE</strong>；再加上丰富的 API，操作也很灵活。总的来说，这个工具还是非常值得一试</p><h3 id="构建示例"><a href="#构建示例" class="headerlink" title="构建示例"></a>构建示例</h3><p>​SpringBoot场景下，简单创建一个CAFFEINE作为本地缓存，缓存策略为本地 + 远程，断线重连策略为 LOAD，同步策略为 INVALIDATE的分布式本地缓存Map</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> RLocalCachedMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">buildRLocalCachedMap</span><span class="token punctuation">(</span>RedissonClient redisson<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LocalCachedMapCacheOptions<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> options <span class="token operator">=</span> LocalCachedMapCacheOptions<span class="token punctuation">.</span>&lt;String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 断线重连策略：10分钟内决定是否clear操作</span>            <span class="token punctuation">.</span><span class="token function">reconnectionStrategy</span><span class="token punctuation">(</span>LocalCachedMapCacheOptions<span class="token punctuation">.</span>ReconnectionStrategy<span class="token punctuation">.</span>LOAD<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 使用CAFFEINE作为本地缓存</span>            <span class="token punctuation">.</span><span class="token function">cacheProvider</span><span class="token punctuation">(</span>LocalCachedMapCacheOptions<span class="token punctuation">.</span>CacheProvider<span class="token punctuation">.</span>CAFFEINE<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">syncStrategy</span><span class="token punctuation">(</span>LocalCachedMapCacheOptions<span class="token punctuation">.</span>SyncStrategy<span class="token punctuation">.</span>INVALIDATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> redisson<span class="token punctuation">.</span><span class="token function">getLocalCachedMapCache</span><span class="token punctuation">(</span><span class="token string">"countryDictCache"</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redisson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redisson — 红锁的实现与思考</title>
      <link href="/2023-07-27/redisson-hong-suo-de-shi-xian-yu-si-kao/"/>
      <url>/2023-07-27/redisson-hong-suo-de-shi-xian-yu-si-kao/</url>
      
        <content type="html"><![CDATA[<p>​基于 Redisson 3.16.8版本，深入分析了<strong>红锁的设计背景</strong>及其<strong>在 Redisson 中的实现</strong>，最后讨论了<strong>红锁的局限性</strong>，并介绍了可能的替代方案。同时，还详细的分析了 <strong>Redisson 如何通过引入 <code>WAIT</code> 命令来优化普通分布式锁的可靠性</strong></p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>​在生产环境中，为了实现 Redis 高可用，通常会采用 <strong>主从架构</strong>（比如分片集群、哨兵模式），即每个主节点都有一个或多个从节点。问题在于，<strong>主从复制是异步的</strong>：当我们把分布式锁写到 master 节点时，它还没来得及同步到 slave，如果此时 master 宕机，slave 被选举为新的 master，那么这把锁的信息就丢了。结果就是：</p><ol><li><p>原来持有锁的客户端以为自己还处于加锁成功的状态，继续处理业务</p></li><li><p>新选出的 master 不知道这回事，允许其他客户端再来加锁</p></li></ol><p>这种情况就导致了分布式互斥锁彻底失效</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>​<strong>红锁（RedLock）</strong> 诞生就是为了避免这个问题。它的核心思路是：<strong>不要把希望寄托在单个 Redis 实例上，而是在多个独立的 Redis 节点上同时加锁</strong>，这几个分锁组合起来形成一把主锁。其加锁规则如下：</p><ul><li>客户端会依次尝试在 <strong>N</strong> 个 Redis 节点上加锁</li><li>如果在规定时间内，至少有 <strong>超过 N&#x2F;2 的节点加锁成功</strong>，就算加锁成功</li><li>否则，释放已经加上的锁，并返回失败</li></ul><p>​只要满足以上的规则加锁成功后，即使某个 Redis 节点挂了，只要多数节点状态一致，锁的有效性依然能保证，也可以推断出<strong>分锁数量越多，容错率越高，锁也更可靠</strong>。<strong>但同时资源开销也更大，性能也会受到影响</strong></p><h2 id="RedissonRedLock"><a href="#RedissonRedLock" class="headerlink" title="RedissonRedLock"></a>RedissonRedLock</h2><p>​<code>RedissonRedLock</code> 是 Redisson 对 <strong>RedLock 红锁算法</strong> 的具体实现，它继承自 <code>RedissonMultiLock</code>，本质上仍然是一个多锁机制。在创建 <code>RedissonRedLock</code> 时，需要传入<strong>多个 <code>RLock</code> 实例，每个实例应该用在一个redis节点上</strong>。整体逻辑仍然<strong>基于半数以上节点加锁成功才算加锁成功</strong>的原则。我们主要关注它的 加锁和解锁逻辑就行</p><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p>​不管是<strong>尝试加锁（tryLock）还是阻塞加锁（lock）</strong>，底层最终都会走到 <code>org.redisson.RedissonMultiLock#tryLock(long waitTime, long leaseTime, TimeUnit unit)</code> 方法。区别只是：<strong>尝试加锁失败就直接返回 false</strong>；但<strong>阻塞加锁失败不会立刻放弃，而是 while 循环不停重试，直到成功或者超时</strong>。根据源码，可以把核心逻辑拆成以下几步：</p><ol><li><p>计算每个分锁的最大等待时间</p><blockquote><p>​总体的 <code>waitTime</code> 会平分给所有分锁，每个锁都有自己的最大等待时限（不会超过剩余的总等待时间<code>remainTime</code>）。可以避免在某个分锁上浪费太多时间，导致整体超时</p></blockquote></li><li><p>逐个尝试加锁，并记录成功的分锁</p><blockquote><p>​这些存起来的分锁后面会用于判断整体加锁成功与否，以及重新加锁时的解锁操作、设置过期时间等</p></blockquote></li><li><p>如果某个分锁加锁失败</p><blockquote><p>​先判断<strong>加锁成功数是否已达到最小成功阈值</strong>，如果达到，说明总锁获取成功，可返回了</p><p>​否则继续<strong>判断允许失败的分锁数量是否已用尽，如果用尽则需要重置状态（释放已成功的锁、重置允许失败的分锁数量），再重新尝试一轮</strong></p></blockquote></li><li><p><strong>动态计算剩余总等待时间<code>remainTime</code>，避免整体的超时</strong></p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">long</span> newLeaseTime <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newLeaseTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            newLeaseTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> time <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> remainTime <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        remainTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 每个分锁的最大等待时间（把总的 waitTime 平均分到每个锁上）</span>    <span class="token keyword">long</span> lockWaitTime <span class="token operator">=</span> <span class="token function">calcLockWaitTime</span><span class="token punctuation">(</span>remainTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取允许分锁失败数（分锁个数的小一半）</span>    <span class="token keyword">int</span> failedLocksLimit <span class="token operator">=</span> <span class="token function">failedLocksLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>RLock<span class="token operator">></span> acquiredLocks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>locks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用ListIterator方便重置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ListIterator<span class="token operator">&lt;</span>RLock<span class="token operator">></span> iterator <span class="token operator">=</span> locks<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RLock lock <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> lockAcquired<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> leaseTime <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lockAcquired <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 再计算下这个锁能等待多久。锁获取失败会重置，但总等待时间还是不能超过remainTime</span>                <span class="token keyword">long</span> awaitTime <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>lockWaitTime<span class="token punctuation">,</span> remainTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                lockAcquired <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>awaitTime<span class="token punctuation">,</span> newLeaseTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RedisResponseTimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">unlockInner</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lockAcquired <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lockAcquired <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lockAcquired<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前分锁获取成功</span>            acquiredLocks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前分锁失败，但不一定代表总锁获取失败</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>locks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> acquiredLocks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">failedLocksLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 虽然当前分锁获取失败，但成功总数已经到达了最低成功个数阈值，直接break，返回获取锁成功</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>failedLocksLimit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 允许失败数量已用尽，则此时不允许分锁再获取失败了，但还是出现了分锁获取失败</span>                <span class="token comment" spellcheck="true">// 解锁掉所有已获取到的锁</span>                <span class="token function">unlockInner</span><span class="token punctuation">(</span>acquiredLocks<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// ============ 重置一些关键参数，让下次循环重头遍历再尝试获取锁 ============</span>                failedLocksLimit <span class="token operator">=</span> <span class="token function">failedLocksLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                acquiredLocks<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    iterator<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 倒回到第一个锁</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 减少一次允许失败数量</span>                failedLocksLimit<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainTime <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 计算剩余等待时间，如果没有了（超时），释放所有获取到的锁，再返回失败</span>            remainTime <span class="token operator">-=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> time<span class="token punctuation">;</span>            time <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>remainTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 超时了，释放已获取的锁，返回失败</span>                <span class="token function">unlockInner</span><span class="token punctuation">(</span>acquiredLocks<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============== 到这说明整体锁获取成功，给每个获取到的锁设置过期时间 ===============</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        acquiredLocks<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>l <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>RedissonLock<span class="token punctuation">)</span> l<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>l <span class="token operator">-</span><span class="token operator">></span> l<span class="token punctuation">.</span><span class="token function">expireAsync</span><span class="token punctuation">(</span>unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>f <span class="token operator">-</span><span class="token operator">></span> f<span class="token punctuation">.</span><span class="token function">toCompletableFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h3><p>​解锁部分的实现就简单多了，核心逻辑集中在 <code>org.redisson.RedissonMultiLock#unlockInner</code> 方法中。它会遍历所有分锁，对每个分锁调用 <code>unlockAsync</code> 进行异步解锁。</p><p>​即便某些分锁在加锁阶段没有成功获取，也不会影响整体解锁流程，因为<strong>在 <code>forEach</code> 中捕获并吞掉了异常，避免未上锁的分锁在解锁时抛出错误</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">unlockInner</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>RLock<span class="token operator">></span> locks<span class="token punctuation">)</span> <span class="token punctuation">{</span>    locks<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>RLockAsync<span class="token operator">:</span><span class="token operator">:</span>unlockAsync<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>f <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 同步等待解锁的Future</span>                    f<span class="token punctuation">.</span><span class="token function">toCompletableFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 忽略异常，避免部分分锁未获取到的情况</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思考与优化"><a href="#思考与优化" class="headerlink" title="思考与优化"></a>思考与优化</h2><h3 id="有必要使用红锁吗？"><a href="#有必要使用红锁吗？" class="headerlink" title="有必要使用红锁吗？"></a>有必要使用红锁吗？</h3><p>​红锁的使用前提是：<strong>必须有多个完全独立、互不影响的 Redis 实例</strong>，以降低单点故障导致锁丢失的风险。<br> 然而在实际项目中，大多数 Redis 部署模式是 <strong>哨兵（Sentinel）</strong> 或 <strong>分片集群（Cluster）</strong>：</p><ul><li><strong>哨兵模式</strong>：本质是一主多从，锁数据会通过复制同步，完全不具备独立节点的语义，<strong>红锁在这里没意义</strong></li><li><strong>分片集群模式</strong>：理论上能做，但得保证每个 Lock 的 Key 分布在不同的槽（slot）上，让它们落到不同分片。实现上很麻烦，Key 设计要非常小心</li></ul><p>除此之外，红锁的使用成本也不小：</p><ul><li><strong>资源消耗高</strong>：需要多个独立 Redis 实例。</li><li><strong>性能损耗</strong>：客户端每次加锁、解锁都需要与多个节点通信，增加请求延迟</li></ul><p>​因此，虽然红锁理论看似完美，但在生产环境中，<strong>部署和使用的复杂性、资源和性能成本都非常高</strong>，真正落地的场景基本没有</p><p>​回想一下，我们是因为担心<strong>主从切换或复制延迟</strong>导致锁丢失才思考出红锁的这种方案的，那么有没有一种方法可以对此优化从而避免使用红锁？有的，当客户端操作带有从节点的 Redis 时，<strong>Redisson 会在写入命令后追加 <code>WAIT</code> 命令，根据返回的同步成功的从节点数量来决定整体操作是否成功</strong>。这样就能降低复制延迟带来的风险，从而避免引入多节点红锁的复杂性</p><h3 id="wait优化"><a href="#wait优化" class="headerlink" title="wait优化"></a>wait优化</h3><h4 id="wait命令"><a href="#wait命令" class="headerlink" title="wait命令"></a>wait命令</h4><p>​其命令格式如下。该命令用来阻塞当前客户端，直到<strong>之前的写操作被同步到指定数量的从节点，或超时为止</strong>。  WAIT 命令<strong>返回的数字表示实际同步成功的从节点数量，其&lt;&#x3D; numreplicas</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># numreplicas：要求同步的从节点数量</span><span class="token comment" spellcheck="true"># timeout：最大等待时间（毫秒值）</span>WAIT <span class="token operator">&lt;</span>numreplicas<span class="token operator">></span>  <span class="token operator">&lt;</span>timeout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>​锁相关的操作最终都会走到<strong>org.redisson.RedissonBaseLock#evalWriteAsync方法</strong>去，这个方法就是 Redisson 的关键点：<strong>给锁的写操作加了 WAIT 保障，确保数据不只是写到 Master，还同步到一定数量的 Slave 后才算成功</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> RFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">evalWriteAsync</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Codec codec<span class="token punctuation">,</span> RedisCommand<span class="token operator">&lt;</span>T<span class="token operator">></span> evalCommandType<span class="token punctuation">,</span> String script<span class="token punctuation">,</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> keys<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 获取当前 key 所在分片的 Master-Slave 配置项</span>    MasterSlaveEntry entry <span class="token operator">=</span> commandExecutor<span class="token punctuation">.</span><span class="token function">getConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token function">getRawName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 获取该 Master 对应的可用 Slave 数量（用于 WAIT 命令判断）</span>    <span class="token keyword">int</span> availableSlaves <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getAvailableSlaves</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 创建批处理命令执行器（CommandBatchService）</span>    <span class="token comment" spellcheck="true">// 使用批处理模式是为了后续追加 WAIT 命令（保证写入同步）</span>    <span class="token comment" spellcheck="true">// 注意：启用批处理意味着不能使用 Redis Script 缓存了。</span>    CommandBatchService executorService <span class="token operator">=</span> <span class="token function">createCommandBatchService</span><span class="token punctuation">(</span>availableSlaves<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. 这里并不会直接执行命令，而是将命令保存起来，等待后续添加其他命令（比如WAIT）后再一起执行</span>    RFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> result <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">evalWriteAsync</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> codec<span class="token punctuation">,</span> evalCommandType<span class="token punctuation">,</span> script<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>commandExecutor <span class="token keyword">instanceof</span> <span class="token class-name">CommandBatchService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 5. 如果外层本身就是批处理环境（例如用户手动开启），直接返回，不再提交批处理</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 6. 真正的执行（此时会将原命令 + WAIT等 命令一起发送给 Redis）</span>    RFuture<span class="token operator">&lt;</span>BatchResult<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">executeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 7. 添加回调监听，判断 WAIT 的同步结果是否达到要求。如果同步的 Slave 数量不足，则抛出 IllegalStateException</span>    <span class="token comment" spellcheck="true">// fixme 感觉这种实现方式不好，所以最新的版本已经让用户来选择是否抛异常了</span>    CompletionStage<span class="token operator">&lt;</span>T<span class="token operator">></span> f <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> ex<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">getSyncedSlaves</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> availableSlaves<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CompletionException</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Only "</span>                    <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">getSyncedSlaves</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" of "</span> <span class="token operator">+</span> availableSlaves <span class="token operator">+</span> <span class="token string">" slaves were synced"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFutureWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="细节解释"><a href="#细节解释" class="headerlink" title="细节解释"></a>细节解释</h5><ol><li><p>为什么第4步不会直接执行？</p><blockquote><p>​虽然第4步里调用了CommandAsyncService#evalWriteAsync方法，但内部创建的是<strong>RedisBatchExecutor这个执行器，RedisBatchExecutor#execute里不会直接执行命令</strong>，而是先将命令缓存起来，等到后续的 <code>executeAsync()</code> 一次性发出，这样可以把 EVAL 和 WAIT 放在同一批里</p></blockquote></li><li><p>WAIT 命令在哪加的？</p><blockquote><p>​第6步里会在如下位置添加WAIT命令，并在最后构建<strong>每个节点的RedisCommonBatchExecutor来将批量的命令一起发送到对应的Redis节点</strong></p></blockquote> <img src="https://img.shanzhao.site/file/1755851164496_redisson-add-wait.png" alt="redisson-add-wait.png" width=100% /></li><li><p>如何处理结果?</p><blockquote><p>​第7步里判断了<strong>如果同步成功的 slave 数量没达到预期，就直接抛异常</strong>。问题在于，这样就算原始命令本身成功了，整体也算失败。说实话这个限制要求太严且太死板了，完全可以做成根据用户的配置来决定是否抛异常，或许等新版本会有优化吧</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redisson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 红锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redisson — 分布式锁的实现</title>
      <link href="/2023-06-18/redisson-fen-bu-shi-suo-de-shi-xian/"/>
      <url>/2023-06-18/redisson-fen-bu-shi-suo-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>​基于 Redisson 3.16.8版本，对互斥型分布式锁的源码做了详细分析，主要包括：<strong>Lua 脚本的加解锁逻辑</strong>、<strong>看门狗机制的背景与实现</strong>，以及<strong>如何通过 Redis 的 pub&#x2F;sub 功能配合 JDK Semaphore 来实现线程阻塞与唤醒，从而避免忙等待</strong></p><p>另外，也简单分析了一下共享型分布式锁的实现思路，比如 <strong>RCountDownLatch 和 RSemaphore</strong></p><span id="more"></span><h2 id="RLock"><a href="#RLock" class="headerlink" title="RLock"></a>RLock</h2><p>​<code>RLock</code> 可以看作是 JDK <code>java.util.concurrent.locks.Lock</code> 接口在分布式场景下的实现，功能上和本地锁一样完整。除此之外，它还实现了 <code>RLockAsync</code> 接口，提供了一系列异步加锁的方法，使用起来更加灵活。它的核心实现类是 <code>RedissonLock</code>，对应的是 JDK 里的非公平 <code>ReentrantLock</code>，这也是我们在实际开发中最常用的分布式锁方案。我们重点看一下RedissonLock的核心实现细节与优化</p><h3 id="RedissonLock"><a href="#RedissonLock" class="headerlink" title="RedissonLock"></a>RedissonLock</h3><h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><p>​在调用 <code>lock</code> 或 <code>tryLock</code> 的时候，Redisson会先跑一段 Lua 脚本来尝试加锁。如果脚本返回 <code>null</code>，那就代表锁拿到了，方法也会立马返回。 所以说，整个加锁过程的关键，其实就藏在下面这段 Lua 脚本里</p><h5 id="加锁脚本"><a href="#加锁脚本" class="headerlink" title="加锁脚本"></a>加锁脚本</h5><p>​这段加锁脚本的逻辑其实很简单，可以分成三种情况</p><ol><li><p><strong>锁不存在 → 第一次加锁</strong></p><blockquote><p>​<code>exists</code> 判断锁是否存在，如果不存在，说明是第一次加锁</p><p>​此时以锁名作为作为 Redis 的 hash key，并存放一对键值对。<strong>键表示具体某个节点的某个线程</strong>，即<strong>节点id:线程id</strong>格式；<strong>值初始化为数字1，可表示锁的重入次数</strong>。最后再设置整体hash结构的过期时间</p></blockquote></li><li><p><strong>锁已存在，且是当前线程持有 → 锁重入</strong></p><blockquote><p>直接让重入次数 <code>+1</code>，并重置锁的过期时间</p></blockquote></li><li><p><strong>锁已存在，但被其他线程占用</strong></p><blockquote><p>​直接返回过期时间（这个<strong>时间可以用来判断锁是否获取成功；</strong>也能作为下一次重试的延时参考时间，但实际意义并不大）</p></blockquote></li></ol><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'exists'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token comment" spellcheck="true">-- 初次加锁</span>   redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'hset'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'pexpire'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">nil</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'hexists'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token comment" spellcheck="true">-- 锁重入</span>   redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'hincrby'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'pexpire'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">nil</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'pttl'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 锁被其他线程占用，返回剩余过期时间</span><span class="token comment" spellcheck="true">--[[     keys:        keys[1]：锁名    argv:        argv[1]：过期时间（毫秒，比如30000）        argv[2]：lockName（节点id:线程id，节点id通常是UUID）]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="锁续约"><a href="#锁续约" class="headerlink" title="锁续约"></a>锁续约</h4><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>​给锁设置过期时间，主要是为了避免一种极端情况：线程拿到了锁，但还没来得及释放，结果节点突然挂了，跟 Redis 断开了连接。要是这个锁一直不过期，那后面所有线程都会被堵死，谁都拿不到。</p><p>​但另一个问题是，如果业务执行时间比较长，锁的过期时间先到了，又没给它续约，就可能导致多个线程同时拿到锁，直接破坏了互斥效果。</p><p>​为了解决这两个矛盾，Redisson实现了看门狗机制：只要线程还在持有锁，就会定时自动续约，保证业务逻辑还没跑完，锁就不会提前过期</p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p>​加锁成功后，如果没有指定 <strong>leaseTime</strong>（即锁的固定过期时间），才会启动续约逻辑。核心机制如下：</p><ul><li>获取到锁的线程会缓存一个 <code>ExpirationEntry</code>，里面记录了<strong>续约任务、正在续约的线程</strong>，<strong>以及对应的重入次数</strong>（<strong>互斥锁情况下只有 1 个线程</strong>）</li><li>系统会按照 <strong><code>internalLockLeaseTime / 3</code></strong> 的间隔定时执行<ul><li>运行 Lua 续约脚本：如果<strong>续约成功，就继续下一轮</strong>；如果失败（说明锁 key 已不存在），则直接取消当前锁的续约任务</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> RFuture<span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token function">tryAcquireAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">,</span> <span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    RFuture<span class="token operator">&lt;</span>Long<span class="token operator">></span> ttlRemainingFuture<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. ============ 尝试执行 Lua 加锁脚本 ============</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ttlRemainingFuture <span class="token operator">=</span> <span class="token function">tryLockInnerAsync</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">,</span> RedisCommands<span class="token punctuation">.</span>EVAL_LONG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ttlRemainingFuture <span class="token operator">=</span> <span class="token function">tryLockInnerAsync</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> internalLockLeaseTime<span class="token punctuation">,</span>                TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span> threadId<span class="token punctuation">,</span> RedisCommands<span class="token punctuation">.</span>EVAL_LONG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 1. ============ 处理加锁结果 ============</span>    CompletionStage<span class="token operator">&lt;</span>Long<span class="token operator">></span> f <span class="token operator">=</span> ttlRemainingFuture<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>ttlRemaining <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// lock acquired</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ttlRemaining <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// key的ttl返回为空，代表加锁成功</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                internalLockLeaseTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 没有指定 leaseTime，才启用“看门狗”机制</span>                <span class="token comment" spellcheck="true">// 设置定时任务自动续期，确保锁在任务执行期间不会过期</span>                <span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ttlRemaining<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFutureWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ExpirationEntry entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpirationEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ExpirationEntry oldEntry <span class="token operator">=</span> EXPIRATION_RENEWAL_MAP<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span><span class="token function">getEntryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEntry <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 锁重入，增加计数</span>        oldEntry<span class="token punctuation">.</span><span class="token function">addThreadId</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第一次加锁</span>        entry<span class="token punctuation">.</span><span class="token function">addThreadId</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">renewExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 开始续约 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">renewExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从全局的续约任务里拿当前锁对应的任务</span>    ExpirationEntry ee <span class="token operator">=</span> EXPIRATION_RENEWAL_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getEntryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ee <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定时任务：每隔 internalLockLeaseTime / 3 时间就跑一次（默认10秒一次）</span>    Timeout task <span class="token operator">=</span> commandExecutor<span class="token punctuation">.</span><span class="token function">getConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newTimeout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>Timeout timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            ExpirationEntry ent <span class="token operator">=</span> EXPIRATION_RENEWAL_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getEntryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ent <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Long threadId <span class="token operator">=</span> ent<span class="token punctuation">.</span><span class="token function">getFirstThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>threadId <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 执行续约的lua脚本</span>            RFuture<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> future <span class="token operator">=</span> <span class="token function">renewExpirationAsync</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            future<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Can't update lock "</span> <span class="token operator">+</span> <span class="token function">getRawName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" expiration"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    EXPIRATION_RENEWAL_MAP<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token function">getEntryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// true 表示续约成功 -> 继续下一轮定时续约</span>                    <span class="token function">renewExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// lua脚本返回 false，说明 Redis 里的锁 key 已经不存在了</span>                    <span class="token comment" spellcheck="true">// 传 null 表示直接取消当前锁的所有续约任务（锁都没了，就没必要再续约了）</span>                    <span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> internalLockLeaseTime <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把这次定时任务保存下来，方便后续取消</span>    ee<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="订阅等待"><a href="#订阅等待" class="headerlink" title="订阅等待"></a>订阅等待</h4><p>​当线程加锁失败、需要阻塞等待或超时阻塞时，Redisson 会结合 Redis 的 <strong>pub&#x2F;sub</strong> 功能和 JDK 的 <strong>Semaphore</strong> 来实现：</p><ul><li>通过 pub&#x2F;sub 订阅锁的释放通知，让等待线程在锁释放时被唤醒</li><li>利用 Semaphore 来管理线程阻塞和超时等待，保证阻塞线程能被安全唤醒</li></ul><p>这种设计让分布式锁的阻塞等待既可靠又健壮，避免了传统轮询或 busy-wait 的低效问题。</p><h5 id="subscribe操作"><a href="#subscribe操作" class="headerlink" title="subscribe操作"></a>subscribe操作</h5><p>​<code>org.redisson.pubsub.PublishSubscribe#subscribe</code> 是一个通用的订阅方法（无论是 <strong>Semaphore</strong>、<strong>CountDownLatch</strong> 还是 <strong>Lock</strong>，它们内部都会涉及到订阅）。它的核心逻辑可以拆成四步</p><ul><li><p>获取 channel 对应的 AsyncSemaphore</p><blockquote><p>​每种锁都有自己的 <code>channelName</code>，一个节点在持有锁期间只需要订阅一次这个 channel</p><p>​<code>AsyncSemaphore</code> 内部维护了一个 listener 队列，保证同一个 channel 的订阅任务能按顺序执行，不会乱套。</p></blockquote></li><li><p>构造channel的PubSubEntry</p><blockquote><p>​具体实现由子类提供。例如 Lock 对应的 <code>RedissonLockEntry</code>，其构造方法里初始化了一个 permits 为 0 的 Semaphore，这一步非常关键</p></blockquote></li><li><p>构造 channel 的 RedisPubSubListener</p><blockquote><p>​当 Redis 往这个 channel 里发布消息时，就会触发对应的 <code>RedisPubSubListener</code>，其内部会调用到 <code>org.redisson.pubsub.PublishSubscribe#onMessage</code>，具体处理逻辑由子类实现</p></blockquote></li><li><p>完成对应的Promise，方便调用方继续后续逻辑</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">subscribe</span><span class="token punctuation">(</span>String entryName<span class="token punctuation">,</span> String channelName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AsyncSemaphore semaphore <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getSemaphore</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelName</span><span class="token punctuation">(</span>channelName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CompletableFuture<span class="token operator">&lt;</span>E<span class="token operator">></span> newPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置一个超时检测的定时任务</span>    <span class="token keyword">int</span> timeout <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Timeout lockTimeout <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newTimeout</span><span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        newPromise<span class="token punctuation">.</span><span class="token function">completeExceptionally</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisTimeoutException</span><span class="token punctuation">(</span>                <span class="token string">"Unable to acquire subscription lock after "</span> <span class="token operator">+</span> timeout <span class="token operator">+</span> <span class="token string">"ms. "</span> <span class="token operator">+</span>                        <span class="token string">"Increase 'subscriptionsPerConnection' and/or 'subscriptionConnectionPoolSize' parameters."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lockTimeout<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        E entry <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entryName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 已经订阅过，说明当前节点有其他线程在使用这个订阅（可能锁重入）</span>            entry<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            entry<span class="token punctuation">.</span><span class="token function">getPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    newPromise<span class="token punctuation">.</span><span class="token function">completeExceptionally</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                newPromise<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ============= 到这就代表当前客户端是第一次订阅 =====================</span>        E value <span class="token operator">=</span> <span class="token function">createEntry</span><span class="token punctuation">(</span>newPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引用计数 + 1</span>        E oldValue <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>entryName<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前节点内的其他线程抢先 put 成功了，就用老的 entry</span>            oldValue<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oldValue<span class="token punctuation">.</span><span class="token function">getPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    newPromise<span class="token punctuation">.</span><span class="token function">completeExceptionally</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                newPromise<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ===================== 到这一步，说明真正需要发起一次新的 Redis 订阅 =========================</span>        <span class="token comment" spellcheck="true">// 创建监听器：当 Redis 端有消息 publish 到 channel，会触发 listener 回调</span>        RedisPubSubListener<span class="token operator">&lt;</span>Object<span class="token operator">></span> listener <span class="token operator">=</span> <span class="token function">createListener</span><span class="token punctuation">(</span>channelName<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发起订阅请求</span>        CompletableFuture<span class="token operator">&lt;</span>PubSubConnectionEntry<span class="token operator">></span> s <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>LongCodec<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">,</span> channelName<span class="token punctuation">,</span> semaphore<span class="token punctuation">,</span>                listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 订阅请求完成后，更新 promise 的状态</span>        s<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                value<span class="token punctuation">.</span><span class="token function">getPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">completeExceptionally</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            value<span class="token punctuation">.</span><span class="token function">getPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newPromise<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Semaphore阻塞"><a href="#Semaphore阻塞" class="headerlink" title="Semaphore阻塞"></a>Semaphore阻塞</h5><p>​ <code>org.redisson.RedissonLock#lock(long, TimeUnit, boolean)</code> 方法中，如果获取锁失败，会进入阻塞等待逻辑。其核心流程如下</p><ul><li>订阅锁对应的 channel，即<strong>redisson_lock__channel:{锁名}</strong> 频道，并同步等待结果</li><li>定时阻塞并尝试获取锁<ul><li>利用了 <code>RedissonLockEntry</code> 内的 <code>Semaphore</code>（<strong>初始许可为 0</strong>），对线程进行阻塞</li><li>当<strong>其他线程释放锁时，会增加 <code>Semaphore</code> 的许可，从而唤醒阻塞线程，再次尝试获取锁</strong></li></ul></li><li>获取锁成功后在finally里尝试取消订阅<ul><li>如果当前节点上没有其他线程仍在等待，这个订阅就可以取消（内部通过 <code>RedissonLockEntry</code> 的计数器判断是否还需要保留订阅）</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">,</span> <span class="token keyword">boolean</span> interruptibly<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 异步订阅频道：redisson_lock__channel:{锁名}</span>        CompletableFuture<span class="token operator">&lt;</span>RedissonLockEntry<span class="token operator">></span> future <span class="token operator">=</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ============= 同步等待订阅完成  =============</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptibly<span class="token punctuation">)</span> <span class="token punctuation">{</span>            commandExecutor<span class="token punctuation">.</span><span class="token function">syncSubscriptionInterrupted</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            commandExecutor<span class="token punctuation">.</span><span class="token function">syncSubscription</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 走到这，就代表订阅成功。死循环获取锁，直到获取成功或抛异常才跳出循环</span>                <span class="token comment" spellcheck="true">// 再次尝试获取锁</span>                ttl <span class="token operator">=</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// lock acquired</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ttl <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 获取锁成功，直接返回</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ttl <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// redis的key存在ttl，定时尝试 + publish的通知 两种方法</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 利用jdk的Semaphore，定时尝试获取锁，时间为ttl。</span>                        <span class="token comment" spellcheck="true">// 因为获取到锁的客户端可能宕机导致不能publish解锁的消息，所以这里也需要定时ttl的时间来尝试加锁来解决这种情况</span>                        <span class="token comment" spellcheck="true">/*                            这个Semaphore初始值就是0，是会阻塞的。                            只有等待获取到锁的线程解锁时，向这个订阅的频道发送一条解锁消息，Semaphore的有效值才加一                            这时，当前客户端阻塞在这等待获取锁的线程会被立即唤醒一个，继续尝试获取锁 */</span>                        commandExecutor<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>ttl<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptibly<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        commandExecutor<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>ttl<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// redis的key不存在过期时间，只有等待 publish的通知 这一种方法</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptibly<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        commandExecutor<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        commandExecutor<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acquireUninterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 根据当前客户端是否还有其它线程在阻塞获取锁来决定是否需要取消订阅（引用计数思想）</span>            <span class="token function">unsubscribe</span><span class="token punctuation">(</span>commandExecutor<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h4><p>解锁的逻辑相对比较简单，核心如下：</p><ul><li>利用之前订阅的 channel 发送解锁通知，所有订阅了这个 channel 的节点都能收到消息。</li><li>对于 <strong>Lock 来说，<code>LockPubSub</code>（<code>RedisPubSubListener</code> 的子类）会收到解锁消息，并将对应 <code>Semaphore</code> 的许可数 (<code>permits</code>) +1，从而唤醒节点内阻塞等待的线程，让它继续尝试获取锁</strong></li><li>最后，还需要<strong>取消锁的续约任务</strong>，避免锁已释放但续约任务仍在运行</li></ul><h5 id="解锁脚本"><a href="#解锁脚本" class="headerlink" title="解锁脚本"></a>解锁脚本</h5><p>这段解锁脚本的逻辑也简单，逻辑如下</p><ol><li>锁不存在，直接返回null</li><li>锁存在并减少重入次数<ol><li>重入次数还是大于0，则返回0表示解锁失败</li><li><strong>重入次数 &lt;&#x3D; 0，即解锁成功</strong>。<strong>删除锁</strong>并再<strong>向加锁时订阅的频道发布一个解锁信号（值为0）</strong>，最终返回1表示解锁成功</li></ol></li></ol><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'hexists'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token comment" spellcheck="true">-- 锁不存在</span>    <span class="token keyword">return</span> <span class="token keyword">nil</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span> <span class="token keyword">local</span> counter <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'hincrby'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token comment" spellcheck="true">-- 锁重入</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'pexpire'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token comment" spellcheck="true">-- 删除锁并publish信号：0</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">nil</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--[[    keys:        keys[1]：锁名        keys[2]：channelName，频道名。格式：redisson_lock__channel:{锁名}    argv:        argv[1]：0 （解锁信号）        argv[2]：30000        argv[3]：真实的lockName（客户端id:线程id）]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> RFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">unlockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// lua进行解锁</span>    RFuture<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> future <span class="token operator">=</span> <span class="token function">unlockInnerAsync</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    CompletionStage<span class="token operator">&lt;</span>Void<span class="token operator">></span> f <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>opStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 无论是否解锁成功，都取消锁续约的定时任务</span>        <span class="token comment" spellcheck="true">// 可能出现redis服务器重启导致锁消失，虽然当前线程获取了锁，但锁已不存在，解锁就会失败</span>        <span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CompletionException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opStatus <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            IllegalMonitorStateException cause <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span>                    <span class="token string">"attempt to unlock lock, not locked by current thread by node id: "</span>                            <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" thread-id: "</span> <span class="token operator">+</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CompletionException</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFutureWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RCountDownLatch"><a href="#RCountDownLatch" class="headerlink" title="RCountDownLatch"></a>RCountDownLatch</h2><p>​这是 Redisson 在分布式环境下对 CountDownLatch 功能的实现，实现类是 <strong>RedissonCountDownLatch</strong>，整体比锁的实现要简单很多。</p><p>​<strong>共享锁的实现无需区分具体由哪个线程获取</strong>，因此只需 <strong>用 Redis 的 string 存储计数值</strong>，同时结合 <strong>JDK 的 AQS 和 Redis 的 pub&#x2F;sub 机制</strong> 来完成线程的阻塞与唤醒。在使用前，需要调用 <code>org.redisson.RedissonCountDownLatch#trySetCount</code> 方法来设置初始计数值。而内部基于 AQS 的 <strong>ReclosableLatch</strong> 还支持 RCountDownLatch 的重复使用</p><h3 id="设置初始值"><a href="#设置初始值" class="headerlink" title="设置初始值"></a>设置初始值</h3><p>​初始时使用<code>org.redisson.RedissonCountDownLatch#trySetCount</code>方法设置计数值，其lua脚本如下。如果已有订阅channel的节点，则其对应的CountDownLatchPubSub收到message后会阻塞ReclosableLatch，已实现重置的功能</p><h4 id="lua脚本"><a href="#lua脚本" class="headerlink" title="lua脚本"></a>lua脚本</h4><pre class="line-numbers language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- 如果 RCountDownLatch 对应的 key 在 Redis 中不存在</span><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'exists'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">then</span>      <span class="token comment" spellcheck="true">-- 设置 key 的初始计数值（ARGV[2] 即 count）</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 发送一个 pub/sub 消息，将RCountDownLatch关联的ReclosableLatch设为阻塞状态</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">-- 返回 1 表示设置成功</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">else</span>    <span class="token comment" spellcheck="true">-- 如果 key 已经存在，则说明计数值已经初始化过了，直接返回 0</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="await和countDown"><a href="#await和countDown" class="headerlink" title="await和countDown"></a>await和countDown</h3><p>​这两个方法实现较为简单，本质套路与 Lock 类似：</p><ul><li><strong>await</strong>：通过 <code>ReclosableLatch</code> 阻塞当前线程，等待计数值归零</li><li><strong>countDown</strong>：递减计数值，当值减至 0 时，会通过 <code>publish</code> 发送一条解锁消息，由 <code>CountDownLatchPubSub</code> 负责处理，从而唤醒所有阻塞在 <code>ReclosableLatch</code> 上的线程，实现同步</li></ul><h2 id="RSemaphore"><a href="#RSemaphore" class="headerlink" title="RSemaphore"></a>RSemaphore</h2><p>​RSemaphore 是 Redisson 在分布式环境下对 <strong>JDK Semaphore</strong> 功能的实现，默认实现类为 <strong>RedissonSemaphore</strong>。它的机制与 RCountDownLatch 类似：<strong>通过 Redis 的 string 存储 permits 数量</strong>，再结合 <strong>JDK Semaphore 与 Redis pub&#x2F;sub 机制</strong> 来完成节点线程的阻塞与唤醒</p><p>​整体实现套路和前面介绍的基本一致，所以无需展开分析。只需记住，在使用前要先调用 <strong><code>org.redisson.api.RSemaphore#trySetPermits</code></strong> 来设置初始的 permits 数量</p>]]></content>
      
      
      <categories>
          
          <category> Redisson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty（四） — 异步编程的实现和思考</title>
      <link href="/2022-11-19/netty-yi-bu-bian-cheng-zhi-promise/"/>
      <url>/2022-11-19/netty-yi-bu-bian-cheng-zhi-promise/</url>
      
        <content type="html"><![CDATA[<p>​分析了 Netty 的 Future 与 Promise 的实现与设计理念，并在此基础上总结了异步编程概念的应用及个人思考</p><span id="more"></span><h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p>​Netty 的 <code>Future</code> 在继承 JDK 标准接口 <code>java.util.concurrent.Future</code> 的基础上，扩展了一系列方法。其中最核心的扩展是 <strong><code>addListeners</code></strong> 接口</p><p>​JDK的 <code>Future</code> 主要通过阻塞或轮询方式获取结果，而Netty 提供的 <strong><code>GenericFutureListener</code></strong> 支持在 <code>Future</code> 完成时（无论是成功、失败还是取消）自动触发回调</p><pre class="line-numbers language-java"><code class="language-java">Future<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">addListeners</span><span class="token punctuation">(</span>GenericFutureListener<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token operator">>></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>​Promise继承了Netty的Future接口，同时新增了如下接口，用于主动设置结果</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Promise</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 设置结果并标记为成功状态，同时通知所有监听器。不成功会抛异常     */</span>    Promise<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">setSuccess</span><span class="token punctuation">(</span>V result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 尝试设置结果并标记为成功状态     */</span>    <span class="token keyword">boolean</span> <span class="token function">trySuccess</span><span class="token punctuation">(</span>V result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置异常并标记为失败状态，同时通知所有监听器。不成功会抛异常     */</span>    Promise<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">setFailure</span><span class="token punctuation">(</span>Throwable cause<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 尝试设置异常并标记为失败状态，同时通知所有监听器。     *     */</span>    <span class="token keyword">boolean</span> <span class="token function">tryFailure</span><span class="token punctuation">(</span>Throwable cause<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DefaultPromise"><a href="#DefaultPromise" class="headerlink" title="DefaultPromise"></a>DefaultPromise</h4><p>Netty中对Promise的默认实现类为DefaultPromise，我们看一下一些核心功能是如何实现的</p><h5 id="核心字段"><a href="#核心字段" class="headerlink" title="核心字段"></a>核心字段</h5><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * listener 嵌套调用的最大深度。   *    * Netty 在触发回调时，允许 listener 调用 listener。   * 为避免递归过深导致 StackOverflow，这里限制最大调用深度，默认值为 8   * 可通过系统属性 "io.netty.defaultPromise.maxListenerStackDepth" 修改   */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_LISTENER_STACK_DEPTH <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>          SystemPropertyUtil<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"io.netty.defaultPromise.maxListenerStackDepth"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// result 字段的原子更新器，用于实现无锁 CAS 更新</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicReferenceFieldUpdater<span class="token operator">&lt;</span>DefaultPromise<span class="token punctuation">,</span> Object<span class="token operator">></span> RESULT_UPDATER <span class="token operator">=</span>          AtomicReferenceFieldUpdater<span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span>DefaultPromise<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// void 类型 Promise 的统一成功标记</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object SUCCESS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 中间状态：标记当前 Promise 已经不可取消（Uncancellable）</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object UNCANCELLABLE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// canceled状态的固定结果，封装了CancellationException异常</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> CauseHolder CANCELLATION_CAUSE_HOLDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CauseHolder</span><span class="token punctuation">(</span>ThrowableUtil<span class="token punctuation">.</span><span class="token function">unknownStackTrace</span><span class="token punctuation">(</span>          <span class="token keyword">new</span> <span class="token class-name">CancellationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DefaultPromise<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"cancel(...)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Promise 当前的执行结果（既用来表示最终的结果，也可用来获取当前Promise的执行状态）</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> Object result<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// listener的执行器</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> EventExecutor executor<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 多个listeners是DefaultFutureListeners，单个是GenericFutureListener</span>  <span class="token keyword">private</span> Object listeners<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 等待 Promise 完成的线程数</span>  <span class="token keyword">private</span> <span class="token keyword">short</span> waiters<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 标记当前是否正在通知 listener。避免并发下重复触发</span>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> notifyingListeners<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h5><p>​实现比较简单，老一套的<strong>状态检查 + Object#wait 挂起等待</strong>操作。只是调用时需要<strong>确保当前调用线程不能是该 Promise 绑定的 EventExecutor 线程</strong></p><p>​其余的超时阻塞也差不多，没必要看了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Promise<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 确保当前Promise的EventExecutor线程不能wait</span>        <span class="token function">checkDeadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 通过检测result字段判断是否已完结</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// waiters++</span>                <span class="token function">incWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Object的wait方法</span>                    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token function">decWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="listener触发"><a href="#listener触发" class="headerlink" title="listener触发"></a>listener触发</h5><p>​整体逻辑不复杂，主要有以下几个关键点：</p><ul><li><strong>线程调度</strong>：保证 Listener 始终在当前 Promise 绑定的 <code>EventExecutor</code> 线程中执行</li><li><strong>递归保护</strong>：通过 <code>ThreadLocal</code> 维护调用栈深度，防止过深的嵌套触发</li><li><strong>并发控制</strong>：依赖 <code>synchronized</code> 和 <code>notifyingListeners</code> 标志位，确保同一批 Listener 不会被重复执行</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    EventExecutor executor <span class="token operator">=</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 确保 listener 在对应的 EventExecutor 线程中执行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> InternalThreadLocalMap threadLocals <span class="token operator">=</span> InternalThreadLocalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> stackDepth <span class="token operator">=</span> threadLocals<span class="token punctuation">.</span><span class="token function">futureListenerStackDepth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用 ThreadLocal 跟踪调用栈深度，避免递归过深导致栈溢出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stackDepth <span class="token operator">&lt;</span> MAX_LISTENER_STACK_DEPTH<span class="token punctuation">)</span> <span class="token punctuation">{</span>            threadLocals<span class="token punctuation">.</span><span class="token function">setFutureListenerStackDepth</span><span class="token punctuation">(</span>stackDepth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">notifyListenersNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                threadLocals<span class="token punctuation">.</span><span class="token function">setFutureListenerStackDepth</span><span class="token punctuation">(</span>stackDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">safeExecute</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">notifyListenersNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notifyListenersNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object listeners<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 已在执行 listener 或没有待处理的 listener，直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>notifyingListeners <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        notifyingListeners <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        listeners <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 首先安全的调用所有listener（不会抛出异常）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>listeners <span class="token keyword">instanceof</span> <span class="token class-name">DefaultFutureListeners</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">notifyListeners0</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DefaultFutureListeners<span class="token punctuation">)</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">notifyListener0</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>GenericFutureListener<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 本轮 listener 全部执行完成，重置状态并结束</span>                notifyingListeners <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 期间可能有新的 listener 被添加，继续执行</span>            listeners <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h5><p>​其它设置结果的接口基本都是CAS更新result字段，再notify所有的waiter线程和内部的listeners。都比较简单就不展示了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​<code>Future</code> 本质上是 <strong>只读视图</strong>，而其子接口 <code>Promise</code> 在此基础上增加了 <strong>写能力</strong>，允许调用方主动设置结果。</p><p>与JDK的FutureTask相比，Netty 的 <code>DefaultPromise</code> 实现要简单的多： </p><ul><li><strong>状态与结果合一</strong>：通过一个 <code>result</code> 字段同时表示状态与保存结果，而不是维护一整套复杂的状态机</li><li><strong>同步机制更轻量</strong>：阻塞与唤醒基于 <code>Object#wait</code> &#x2F; <code>notify</code>，由 <code>synchronized</code> 保证并发安全，不依赖 AQS</li><li><strong>事件驱动友好</strong>：内置回调机制（<code>addListener</code>），与 Netty 的异步&#x2F;事件模型天然契合</li></ul><p>​</p><img src="https://img.shanzhao.site/file/1755421108525_netty-future-state.png" alt="netty-future-state.png" width=70% height=60%/><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>​通过前面的实现分析可以看到，<code>DefaultPromise</code> 本身非常轻量，所以 Netty 才能放心地在框架里到处使用 Future 和 Promise。它们<strong>已经不再是只有做异步操作时才会用到的工具，而更像是一种通用的 异步编程规范</strong></p><p>​无论一个接口内部到底是不是异步实现的，只要它返回一个 <code>Future</code>，调用方就能用统一的方式来判断：任务是不是完成了、结果是否正确、有没有抛异常。如果还没完成，还<strong>可以配合定时任务、超时控制，甚至加上 fallback 策略，让调用逻辑更健壮</strong></p><p>​更加灵活的是我们甚至可以 <strong>先有 Promise，后有结果</strong>。<strong>哪怕操作还没开始，就能提前创建好一个 Promise，再挂上监听器，等未来某个时刻真正触发结果时，回调会第一时间触发</strong>。比如 <code>io.netty.channel.Channel#closeFuture</code> 就是经典例子：我们在代码里随时都能拿到 <code>closeFuture</code>，只要一旦 Channel 真关闭，Netty 内部调用 <code>trySuccess</code> 触发完成，所有在等它的逻辑（无论是阻塞线程还是异步监听器）都会立刻被唤醒</p><p>​所以<strong>Netty 的 Future&#x2F;Promise 并不只是异步 IO 的产物，更多的是一种通用异步语义的工具</strong>。有了它，整个框架里<strong>无论是异步还是同步，正常结果还是异常情况，都能通过统一的方式来表达和处理</strong>。也正因如此，在很多基于 Netty 的框架中（比如 Redisson），可以看到异步编程被广泛采用，充分利用了这种统一的语义优势</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步编程 </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty（三） — EventLoopGroup和EventLoop</title>
      <link href="/2022-10-13/netty-eventloop/"/>
      <url>/2022-10-13/netty-eventloop/</url>
      
        <content type="html"><![CDATA[<p>​ 基于Netty 4.1.34版本，分析了 Netty 中NIO相关的 <strong>EventLoopGroup</strong> 与 <strong>EventLoop</strong> 的核心功能和实现原理，重点涵盖了<strong>JDK Selector 的性能瓶颈与 Netty 优化策略</strong>、<strong>事件循环线程的阻塞与唤醒机制（含空轮询 Bug 修复方案）、IO 事件与任务调度细节</strong>，并配套流程图直观展示 EventLoop 工作流程</p><span id="more"></span><h2 id="EventLoopGroup"><a href="#EventLoopGroup" class="headerlink" title="EventLoopGroup"></a>EventLoopGroup</h2><p>在 NIO 模型中，Netty 默认的实现是 <strong><code>NioEventLoopGroup</code><strong>，它是 <strong><code>NioEventLoop</code></strong> 的管理组件，本质上就是一个</strong>线程池</strong>（每个线程绑定一个 EventLoop）。它实现的核心接口 <code>EventExecutorGroup</code>，具备以下特点：</p><ul><li><strong>投递普通任务</strong>：提交Runnable到指定的 EventLoop 执行</li><li><strong>投递延时任务到EventLoop中执行</strong></li><li><strong>轮询选择 EventLoop</strong>：通过内部的 <strong>EventExecutorChooser</strong>，为新注册的 Channel 分配下一个可用的 EventLoop</li></ul><p><strong>职责总结</strong>：</p><blockquote><p>​EventLoopGroup 只负责：<strong>维护 EventLoop 数组</strong> → <strong>轮询分配Runnable &#x2F; Channel</strong> → <strong>交给目标 EventLoop 线程处理</strong><br>​具体的 IO 读写、任务执行和定时任务调度由 EventLoop 自己完成。</p></blockquote><h3 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数"></a>关键参数</h3><pre class="line-numbers language-ini"><code class="language-ini"><span class="token constant">io.netty.eventLoopThreads</span> <span class="token attr-value"><span class="token punctuation">=</span> CPU核心数 * 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过NioEventLoopGroup的构造方法可以看到，默认线程数为<strong>CPU核心数 * 2</strong>，可以通过上面的<strong>系统参数</strong>设置</p><h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><p>​<code>EventLoop</code> 是 Netty 最核心的组件，NIO 模式下的实现类为 <strong><code>NioEventLoop</code><strong>。 每个 <code>NioEventLoop</code> 在实例化时都会创建一个 <code>Selector</code>，所有注册到该 <code>NioEventLoop</code> 的 <code>Channel</code> 都会绑定到它的内部 <code>Selector</code>；并且只会启动 <strong>一个专属线程</strong>，该线程循环执行三类任务（</strong>事件循环机制</strong>）：</p><ol><li><strong>处理 <code>Selector</code> 上已就绪的 IO 事件</strong></li><li><strong>执行普通任务队列中的 Runnable</strong></li><li><strong>执行延时任务队列中到期的定时任务</strong></li></ol><h3 id="Selector优化"><a href="#Selector优化" class="headerlink" title="Selector优化"></a>Selector优化</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>​调用 JDK <code>Selector#select</code> 系列方法时，已就绪的 IO 事件会被封装成 <code>SelectionKey</code> 对象，并存放到 <code>sun.nio.ch.SelectorImpl#selectedKeys</code> 集合中，同时通过 <code>publicSelectedKeys</code> 暴露给外部遍历。这两个集合都是 <strong>HashSet</strong>，在高频 IO 场景下存在几个性能问题：</p><ul><li><p><strong>增删开销</strong>：<code>add</code>、<code>remove</code> 操作不是绝对 O(1)时间复杂度，存在hash冲突，且可能<strong>触发链表&#x2F;红黑树调整</strong></p></li><li><p><strong>GC 压力</strong>：操作过程中需要<strong>频繁地创建一些辅助的数据结构（Node, TreeNode等）</strong></p></li><li><p><strong>遍历效率</strong>：HashSet 的迭代器访问模式不够连续（链表或红黑树），CPU 缓存命中率低</p></li></ul><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>​Netty 在 <code>NioEventLoop</code> 构造时会通过 <code>openSelector</code> 方法反射替换 <code>SelectorImpl</code> 的 <code>selectedKeys</code> 和 <code>publicSelectedKeys</code>，其实现为SelectedSelectionKeySet，具有如下特征：</p><ul><li><p><strong>数组实现</strong>：<strong>不会有其他辅助的数据结构，减少GC</strong>。<strong>且是绝对的 O(1) 插入（直接放入数组末尾），没有哈希运算</strong></p></li><li><p><strong>不支持 remove</strong>：因为一次事件循环中 Netty 会处理完所有就绪事件，所以SelectedSelectionKeySetSelector在select前都会调用reset来清空数组，避免了逐个删除的开销</p></li><li><p><strong>遍历时顺序访问数组</strong>，CPU 缓存友好</p></li></ul><p>​这种替换极大减少了 Selector 就绪事件处理过程中的 <strong>对象创建、Hash 运算和结构调整</strong>，在高并发场景下性能收益显著</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// SelectedSelectionKeySetSelector包装后的Selector，每次调用select时都进行reset</span><span class="token keyword">private</span> Selector selector<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// JDK原生的Selector实现</span><span class="token keyword">private</span> Selector unwrappedSelector<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sun.nio.ch.SelectorImpl内部字段selectedKeys和publicSelectedKeys的替代品</span><span class="token keyword">private</span> SelectedSelectionKeySet selectedKeys<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> SelectorProvider provider<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Channel注册"><a href="#Channel注册" class="headerlink" title="Channel注册"></a>Channel注册</h3><p>​<code>EventLoopGroup#register</code> 用于将 <code>Channel</code> 绑定到当前 <code>EventLoop</code> 线程，核心调用链如下</p><blockquote><ol><li>io.netty.channel.SingleThreadEventLoop#register(io.netty.channel.Channel)</li><li>io.netty.channel.AbstractChannel.AbstractUnsafe#register</li><li>io.netty.channel.AbstractChannel.AbstractUnsafe#register0</li><li>io.netty.channel.nio.AbstractNioChannel#doRegister</li></ol></blockquote><p>​在 <code>AbstractNioChannel#doRegister</code> 中，<code>Channel</code> 会被注册到当前 <code>EventLoop</code> 的 <code>Selector</code> 上（此时<strong>仅完成绑定，并未关注任何事件</strong>）。<strong>自此，<code>Channel</code> 生命周期中的所有 IO 事件都将由该 <code>EventLoop</code> 线程独立处理</strong></p><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p>​EventLoop 线程是 Netty 的核心执行单元，不仅负责 <strong>Channel 的 I&#x2F;O 事件处理</strong>，还实现了 <code>ScheduledExecutorService</code> 接口，可同时处理 <strong>延时任务</strong> 与 <strong>普通 Runnable 任务</strong>。</p><p>​EventLoop线程采用 <strong>懒启动</strong> 机制：只有首次调用 <code>execute()</code> 提交任务时，才会通过 <strong>CAS 启动专属线程</strong>，并在 <code>io.netty.channel.nio.NioEventLoop#run</code> 方法中进入循环</p><h4 id="线程的阻塞和唤醒"><a href="#线程的阻塞和唤醒" class="headerlink" title="线程的阻塞和唤醒"></a>线程的阻塞和唤醒</h4><p>事件循环开始时，会先<strong>根据当前任务队列状态决定本轮的 <code>select</code> 策略，</strong>具体逻辑如下：</p><ul><li><strong>有任务</strong> → 调用 <code>selectNow()</code>，立即返回已就绪事件数（<strong>非阻塞</strong>）。提高任务响应速度</li><li><strong>无任务</strong> → 返回 <code>SelectStrategy.SELECT</code>，随后<strong>调用阻塞的 <code>select()</code> 等待 IO 事件</strong>。减少CPU空转</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>selectStrategy<span class="token punctuation">.</span><span class="token function">calculateStrategy</span><span class="token punctuation">(</span>selectNowSupplier<span class="token punctuation">,</span> <span class="token function">hasTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> SelectStrategy<span class="token punctuation">.</span>CONTINUE<span class="token operator">:</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> SelectStrategy<span class="token punctuation">.</span>BUSY_WAIT<span class="token operator">:</span>            <span class="token comment" spellcheck="true">// fall-through to SELECT since the busy-wait is not supported with NIO</span>        <span class="token comment" spellcheck="true">// ============= NIO只会走如下两种case ===================</span>        <span class="token keyword">case</span> SelectStrategy<span class="token punctuation">.</span>SELECT<span class="token operator">:</span>            <span class="token function">select</span><span class="token punctuation">(</span>wakenUp<span class="token punctuation">.</span><span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wakenUp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                selector<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">// 其他策略不做处理</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">rebuildSelector0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">handleLoopException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="阻塞select"><a href="#阻塞select" class="headerlink" title="阻塞select"></a>阻塞select</h5><p>核心方法NioEventLoop#select代码如下，总结下其主要功能：</p><ol><li><p>超时阻塞Selector</p><blockquote><p>​首先会根据<strong>最近的延时任务来算超时时间（没任务就默认1秒）</strong>，保证不会因为一直堵在那里</p></blockquote></li><li><p>解决<a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6670302">早期JDK NIO的空轮询bug</a></p><blockquote><p>​早期JDK（6,7,8） NIO的Selector在<strong>调用超时select方法时，可能触发空轮询的bug，即立即返回，造成CPU的空转，利用率飙升</strong></p><p>​Netty 为了解决这个问题，会对连续调用 <code>select()</code> 过程中<strong>空返回的次数进行计数</strong>。如果<strong>连续超过 512 次（io.netty.selectorAutoRebuildThreshold），说明可能触发了空轮询的 bug</strong>。此时，Netty 会<strong>重建一个新的 Selector，并将之前注册的所有 Channel 迁移到新 Selector 上，类似于给 Selector 做一次重启</strong>，避免空轮询导致的 CPU 空转</p></blockquote></li><li><p><strong>满足以下任意条件时退出阻塞循环，开始处理事件和任务</strong></p><blockquote><ol><li>有<strong>IO事件准备好</strong></li><li><strong>外部线程触发的唤醒</strong>（oldWakenUp为true）</li><li><strong>内部被标记为已唤醒</strong>（wakenUp标志）</li><li><strong>存在待执行的普通Runnable任务</strong></li><li><strong>存在已到期的延时任务</strong></li></ol></blockquote></li><li><p>中断响应</p><blockquote><p>如果当前线程被中断，立马退出阻塞，保证能及时响应中断信号，不被卡住</p></blockquote></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> oldWakenUp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    Selector selector <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selector<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 本次循环调用select的次数统计，用于检测过早返回现象（即select无效唤醒）</span>        <span class="token keyword">int</span> selectCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> currentTimeNanos <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// select阻塞截止时间（deadLine）</span>        <span class="token comment" spellcheck="true">// 1. 取决于最近的定时任务时间，保证select不会阻塞超过这段时间，避免错过定时任务</span>        <span class="token comment" spellcheck="true">// 2. 没有定时任务则默认为1秒后</span>        <span class="token keyword">long</span> selectDeadLineNanos <span class="token operator">=</span> currentTimeNanos <span class="token operator">+</span> <span class="token function">delayNanos</span><span class="token punctuation">(</span>currentTimeNanos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 定时检测Selector的时间</span>            <span class="token keyword">long</span> timeoutMillis <span class="token operator">=</span> <span class="token punctuation">(</span>selectDeadLineNanos <span class="token operator">-</span> currentTimeNanos <span class="token operator">+</span> 500000L<span class="token punctuation">)</span> <span class="token operator">/</span> 1000000L<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 超时判断：如果截止时间已到或超时。保证至少调用了一次select再跳出循环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeoutMillis <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>selectCnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    selector<span class="token punctuation">.</span><span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    selectCnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 若有待执行任务且未被唤醒，立即非阻塞selectNow再跳出循环，避免长时间阻塞</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> wakenUp<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                selector<span class="token punctuation">.</span><span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                selectCnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 调用阻塞select，最多阻塞timeoutMillis毫秒，等待IO事件或被唤醒</span>            <span class="token keyword">int</span> selectedKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>            selectCnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*             * 检测是否满足退出阻塞循环条件：             * 1. 有IO事件准备好             * 2. 外部线程触发的唤醒（oldWakenUp为true）             * 3. 内部被标记为已唤醒（wakenUp标志）             * 4. 存在待执行的普通任务             * 5. 存在已到期的定时任务             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedKeys <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> oldWakenUp <span class="token operator">||</span> wakenUp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasScheduledTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 中断支持，跳出循环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                selectCnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">long</span> time <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">-</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeoutMillis<span class="token punctuation">)</span> <span class="token operator">>=</span> currentTimeNanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// select本次阻塞时长正常，超过了预期timeout</span>                <span class="token comment" spellcheck="true">// 说明未出现select过早返回（空轮询）问题，重置计数器避免误判</span>                selectCnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>SELECTOR_AUTO_REBUILD_THRESHOLD <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                    selectCnt <span class="token operator">>=</span> SELECTOR_AUTO_REBUILD_THRESHOLD<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// select连续过早返回次数超过了阈值（默认512次），则重建Selector以避免CPU空转导致的死循环</span>                selector <span class="token operator">=</span> <span class="token function">selectRebuildSelector</span><span class="token punctuation">(</span>selectCnt<span class="token punctuation">)</span><span class="token punctuation">;</span>                selectCnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            currentTimeNanos <span class="token operator">=</span> time<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当select连续过早返回次数过多，打印调试日志，方便问题排查</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>selectCnt <span class="token operator">></span> MIN_PREMATURE_SELECTOR_RETURNS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Selector.select() returned prematurely {} times in a row for Selector {}."</span><span class="token punctuation">,</span>selectCnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancelledKeyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// debug日志</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="唤醒"><a href="#唤醒" class="headerlink" title="唤醒"></a>唤醒</h5><p>​<code>addTaskWakesUp</code> 与 <code>wakenUp</code> 都用于控制 EventLoop 的唤醒逻辑。当<strong>主线程通过 <code>execute()</code> 向 EventLoop 提交 非 NonWakeupRunnable</strong> 任务时：</p><ol><li>如果 <code>addTaskWakesUp</code> 为 <code>false</code>（如 NioEventLoop），表示仅向任务队列添加任务不会自动唤醒，需要显式唤醒</li><li>此时会<strong>尝试将 <code>wakenUp</code> 从 <code>false</code> 设置为 <code>true</code>，成功则调用 <code>Selector#wakeup()</code>，唤醒阻塞在 <code>select()</code> 上的 EventLoop 线程</strong></li><li>被唤醒的线程会从阻塞中恢复，继续执行包括普通 Runnable 在内的后续任务</li></ol><p>注意：<strong>定时任务在投递时会被包装为普通 <code>Runnable</code>，由该 <code>Runnable</code> 负责向延时队列提交任务，因此同样具备触发 <code>wakeUp</code> 的能力</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * * 1. addTaskWakesUp *    表示向 taskQueue 添加任务时，是否能自动唤醒 EventLoop 线程 *    - true  ：添加任务即可唤醒线程（由任务队列本身负责唤醒，例如 DefaultEventLoop 使用的阻塞队列） *    - false ：添加任务不会自动唤醒，需要手动调用 wakeup()。如 NioEventLoop，线程阻塞在 Selector#select，而不是 taskQueue *  *  NioEventLoop设为了false * */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> addTaskWakesUp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *  一个原子标志，用于避免重复调用 Selector#wakeup() *    - 当需要唤醒时，如果之前未设置为 true，则设置为 true 并实际唤醒 *    - 事件循环开始时会重置为 false */</span><span class="token keyword">private</span> <span class="token keyword">final</span> AtomicBoolean wakenUp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="IO事件处理"><a href="#IO事件处理" class="headerlink" title="IO事件处理"></a>IO事件处理</h4><p>​<code>NioEventLoop</code> 既能管 <code>SocketChannel</code>，也能管 <code>ServerSocketChannel</code>。<br> 所以它的 <code>processSelectedKey</code> 方法是通用的，会去检查四种事件类型，但实际上<strong>每个 Channel 只会注册自己感兴趣的事件</strong>，因此一个 <code>SelectionKey</code> 只会触发自己该处理的那几种：</p><ul><li><strong>SocketChannel</strong><ul><li><strong>OP_CONNECT</strong>：确保连接建立，并触发 Netty 的 <code>ChannelActive</code> 事件</li><li><strong>OP_WRITE</strong>：把发送缓冲区里的数据刷出去</li><li><strong>OP_READ</strong>：从Channel里读数据</li></ul></li><li><strong>ServerSocketChannel</strong><ul><li><strong>OP_ACCEPT</strong>：接收新连接，并把它注册到对应的 <code>EventLoop</code> 上</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processSelectedKey</span><span class="token punctuation">(</span>SelectionKey k<span class="token punctuation">,</span> AbstractNioChannel ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ... 省略SelectionKey无效的处理</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// bitmask数据结构，检测每一位可知对于的事件是否就绪</span>        <span class="token keyword">int</span> readyOps <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">readyOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先处理 OP_CONNECT：确保 TCP 连接已经完成</span>        <span class="token comment" spellcheck="true">// SocketChannel专属：SocketChannel在connect服务端时，如果未及时连接成功，才注册OP_CONNECT事件。代码在NioSocketChannel.doConnect里</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readyOps <span class="token operator">&amp;</span> SelectionKey<span class="token punctuation">.</span>OP_CONNECT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取消OP_CONNECT的监听（避免JDK的OP_CONNECT未取消导致 select() 永远立即返回的bug）</span>            <span class="token keyword">int</span> ops <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ops <span class="token operator">&amp;=</span> <span class="token operator">~</span>SelectionKey<span class="token punctuation">.</span>OP_CONNECT<span class="token punctuation">;</span>            k<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>ops<span class="token punctuation">)</span><span class="token punctuation">;</span>            unsafe<span class="token punctuation">.</span><span class="token function">finishConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 处理SocketChannel的OP_WRITE事件：尝试发送积压的数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readyOps <span class="token operator">&amp;</span> SelectionKey<span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ch<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forceFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 特殊情况：JDK 的 bug 可能导致 readyOps == 0，但实际上还是有事件需要处理</span>        <span class="token comment" spellcheck="true">// OP_READ(SocketChannel)：从 socket 读取数据</span>        <span class="token comment" spellcheck="true">// OP_ACCEPT(ServerSocketChannel)：接收新连接并注册到 EventLoop</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readyOps <span class="token operator">&amp;</span> <span class="token punctuation">(</span>SelectionKey<span class="token punctuation">.</span>OP_READ <span class="token operator">|</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> readyOps <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            unsafe<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancelledKeyException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unsafe<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">voidPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="普通和延时任务处理"><a href="#普通和延时任务处理" class="headerlink" title="普通和延时任务处理"></a>普通和延时任务处理</h4><p>​每个 EventLoop 都有自己的<strong>普通任务队列</strong>和<strong>延时任务队列</strong>，它们在一次循环中能占用的执行时间由 <code>ioRatio</code> 控制。其表示 <strong>IO 处理时间在一次循环中的比例</strong>，<strong>默认 50%，也就是 IO 时间 &#x3D; 任务执行时间</strong></p><p>​<strong>为了减少 <code>nanoTime()</code> 的性能开销，Netty 会</strong>每执行 64 （硬编码的）个任务<strong>才检查一次是否超时。所以，如果某个 Runnable 本身执行很慢，就会拖长任务阶段的时间，从而</strong>影响 IO 事件的及时处理</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * IO 事件处理时间占总循环时间的比例（百分比） *  * EventLoop 既要处理 Channel 的 IO 事件，也要执行普通任务（Runnable）和定时任务， * 这个比例决定了一次循环中 IO 事件和任务执行的时间分配，默认 50:50 */</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> ioRatio <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前EventLoop线程的普通任务队列（调用 execute() 提交的 Runnable 会进入这里）</span><span class="token keyword">private</span> <span class="token keyword">final</span> Queue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> taskQueue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前EventLoop线程的定时任务队列（小顶堆），定时任务会封装成 ScheduledFutureTask 放在这里</span>PriorityQueue<span class="token operator">&lt;</span>ScheduledFutureTask<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> scheduledTaskQueue<span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">runAllTasks</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeoutNanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把已到期的定时任务转移到普通任务队列</span>    <span class="token function">fetchFromScheduledTaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Runnable task <span class="token operator">=</span> <span class="token function">pollTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">afterRunningAllTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> ScheduledFutureTask<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timeoutNanos<span class="token punctuation">;</span>    <span class="token keyword">long</span> runTasks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> lastExecutionTime<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 安全执行任务（捕获并吞掉 Throwable，防止任务异常影响循环）</span>        <span class="token function">safeExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        runTasks<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每执行 64 个任务检查一次是否超时（减少调用 nanoTime() 的频率，避免性能开销）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>runTasks <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lastExecutionTime <span class="token operator">=</span> ScheduledFutureTask<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastExecutionTime <span class="token operator">>=</span> deadline<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 超时就结束任务执行</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        task <span class="token operator">=</span> <span class="token function">pollTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有任务了，直接跳出循环</span>            lastExecutionTime <span class="token operator">=</span> ScheduledFutureTask<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// after hook：即执行tailTasks里的任务</span>    <span class="token function">afterRunningAllTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastExecutionTime <span class="token operator">=</span> lastExecutionTime<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="shutdown检测"><a href="#shutdown检测" class="headerlink" title="shutdown检测"></a>shutdown检测</h4><p>​每轮循环结束时都会检测 <code>isShuttingDown()</code>，以实现 <strong>优雅关闭</strong>。其主要做了如下几件事：</p><ul><li><strong>关闭当前 EventLoop 管理的所有 Channel</strong></li><li>取消所有定时任务</li><li>执行剩余普通任务，无任务时运行 shutdownHooks</li><li>满足静默期或超时条件后才退出线程</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​综合上面的分析，可发现Netty 在 <code>NioEventLoop</code> 上做了不少魔改和优化，不仅绕开了 JDK NIO 的一些坑，还顺带提升了性能：</p><ul><li>先说空轮询 bug —— Netty 会监控空轮询的次数，一旦发现触发了这个问题，就直接重建 Selector，彻底规避早期 JDK NIO 里 <code>Selector.select()</code> 立刻返回导致的 CPU 空转</li><li>再说提速 —— 它会<strong>用反射把 JDK Selector 内部的关键字段</strong>（<code>selectedKeys</code>、<code>publicSelectedKeys</code>）换成自己优化过的版本，这样不仅处理速度更快，还能明显减少 GC 压力</li></ul><p>另外，EventLoop 线程跟普通的线程池不一样：</p><ul><li><strong>每个 EventLoop 都有自己独立的任务队列和延时队列</strong></li><li><strong>普通任务的特点是多线程投递、单线程消费</strong>，所以Netty 选择用 <strong>MpscQueue</strong>（多生产者单消费者的无锁队列）来减少竞争和锁开销</li><li>延时任务都是 EventLoop 自己投递（外部投递也会包装成普通 Runnable 再投递），这种<strong>单线程生产和消费的场景</strong>下，Netty 就用上了自己实现的 <strong>无锁 <code>DefaultPriorityQueue</code></strong> 来处理延时任务，既简单又高效</li></ul><h2 id="事件循环流程图"><a href="#事件循环流程图" class="headerlink" title="事件循环流程图"></a>事件循环流程图</h2><img src="https://img.shanzhao.site/file/1755176323750_netty-eventloop-process.png" alt="netty-eventloop-process.png" width=60% height=60%><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6670302">早期JDK NIO空轮询bug</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NIO </tag>
            
            <tag> 事件循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty（二） — Pipeline和Handler</title>
      <link href="/2022-08-16/netty-pipeline-he-handler/"/>
      <url>/2022-08-16/netty-pipeline-he-handler/</url>
      
        <content type="html"><![CDATA[<p>​分析了 Netty 中 <strong>ChannelPipeline、ChannelHandler、ChannelHandlerContext</strong> 各自的作用和实现原理，重点讲了下<strong>解码器基类 ByteToMessageDecoder 是怎么解决粘包&#x2F;拆包的问题</strong>以及在<strong>实际使用时该如何考虑</strong>。最后用一张<strong>流程图总结了这三个核心组件在实际数据处理过程中的组合和协作方式</strong></p><span id="more"></span><h2 id="ChannelPipeline"><a href="#ChannelPipeline" class="headerlink" title="ChannelPipeline"></a>ChannelPipeline</h2><p>​ChannelPipeline是 Netty 中用于处理 I&#x2F;O 事件和数据流的核心组件，表示 <strong>Channel 的事件处理链</strong>。每个 <code>Channel</code> 都绑定一个唯一的 <code>ChannelPipeline</code>，它实现了 <code>ChannelInboundInvoker</code> 和 <code>ChannelOutboundInvoker</code> 接口，默认实现类为 <code>DefaultChannelPipeline</code>。这个工具主要做两件事：</p><ol><li><p>维护ChannelHandler的双向链表结构</p><blockquote><p>添加、移除、和替换Handler，并触发相关的事件（handlerAdded、handerRemoved）</p></blockquote></li><li><p>传播所有出入站事件</p><blockquote><ul><li>outbound从tail开始传播</li><li>inbound从head开始传播</li></ul></blockquote></li></ol><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultChannelPipeline</span> <span class="token keyword">implements</span> <span class="token class-name">ChannelPipeline</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 固定的head，实现为HeadContext</span>    <span class="token keyword">final</span> AbstractChannelHandlerContext head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 固定的tail，实现为TailContext</span>    <span class="token keyword">final</span> AbstractChannelHandlerContext tail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 和当前pipeline关联的Channel</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Channel channel<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">final</span> ChannelPipeline <span class="token function">addFirst</span><span class="token punctuation">(</span>EventExecutorGroup group<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> AbstractChannelHandlerContext newCtx<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 检查这个handler是否可以被多线程共享（被@Sharable标记）。避免多实例共享了不可共享的对象</span>            <span class="token comment" spellcheck="true">// 也就是handler默认下是每个Channel使用一个</span>            <span class="token function">checkMultiplicity</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建唯一的name并检查重名</span>            name <span class="token operator">=</span> <span class="token function">filterName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建handlerContext</span>            newCtx <span class="token operator">=</span> <span class="token function">newContext</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 作为head的下一个节点</span>            <span class="token function">addFirst0</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registered<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 表示当前channel还未注册到eventLoop中，添加个handlerAdded的回调接口就直接返回</span>                newCtx<span class="token punctuation">.</span><span class="token function">setAddPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">callHandlerCallbackLater</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// channel已经注册到eventLoop中，根据当前线程是否是eventLoop线程来决定是否直接调用handlerAdded事件</span>            EventExecutor executor <span class="token operator">=</span> newCtx<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">callHandlerAddedInEventLoop</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">callHandlerAdded0</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h2><p>​是所有Handler的顶层接口。<strong>内部定义了个@Sharable注解，表示只有加了这个注解的 Handler，才能被多个 Channel 共享使用</strong></p><p>​除了这个，ChannelHandler还定义了两个常见的生命周期回调：</p><ul><li><p><strong>handlerAdded</strong>：当前Handler被添加到ChannelPipeline里，且对应的Channel已注册到EventLoop后调用</p></li><li><p><strong>handlerRemoved</strong>：当前Handler从ChannelPipeline中移除后，且Channel已注册到EventLoop后调用</p></li></ul><h3 id="ChannelInboundHandler"><a href="#ChannelInboundHandler" class="headerlink" title="ChannelInboundHandler"></a>ChannelInboundHandler</h3><p>​这是入站事件的接口，也就是那些 <strong>外部（客户端）进来的操作</strong>，大多数方法（比如注册、激活）只会触发一次，而像 <code>channelRead</code>、<code>userEventTriggered</code> 这种则可能多次触发</p><p>重点关注如下两个方法</p><ol><li><p>channelRead：从Socket中读取数据（<strong>多次触发</strong>）</p><blockquote><ol><li>SocketChannel的一次请求可能由于<strong>网络的拆包、预分配的ByteBuf容量不够等原因触发多次channelRead</strong>。其<strong>参数msg是Object类型的，是因为这次读取可能是解码后的结果</strong>（如果是ByteBuf对象，则表示还未解码完毕）。这也<strong>是业务Handler的主要实现接口，很多自定义逻辑都会放在这里处理读取到的消息</strong>。触发点为<strong>NioByteUnsafe#read</strong></li><li>ServerSocketChannel在这里处理与客户端创建的连接对象，所以<strong>其msg是SocketChannel</strong>。触发点为<strong>NioMessageUnsafe#read</strong></li></ol></blockquote></li><li><p>channelReadComplete：本轮读取完毕后触发（<strong>一次</strong>）</p><blockquote><p>​所有可读的字节都已经从 Channel 中读取之后，将会调用该方法。一般可以再这个方法里<strong>对Socket进行wirte和flush</strong>了</p></blockquote></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ChannelInboundHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当前Channel注册到Selector时触发（此时还未注册感兴趣的事件）</span>    <span class="token keyword">void</span> <span class="token function">channelRegistered</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前Channel从Selector注销时触发</span>    <span class="token keyword">void</span> <span class="token function">channelUnregistered</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前Channel激活时触发。</span>    <span class="token comment" spellcheck="true">// 对于ServerSocketChannel，表示绑定了地址和端口。对于SocketChannel，代表已经连接了服务端</span>    <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Channel 变为非活跃状态时触发，比如连接断开了</span>    <span class="token keyword">void</span> <span class="token function">channelInactive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从Socket中读取数据</span>    <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 一次读操作完成时触发（意味着 channelRead 不会再进来了）</span>    <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用户定义的事件触发（比如检测心跳连接事件）</span>    <span class="token keyword">void</span> <span class="token function">userEventTriggered</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object evt<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">channelWritabilityChanged</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 异常触发</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ByteToMessageDecoder"><a href="#ByteToMessageDecoder" class="headerlink" title="ByteToMessageDecoder"></a>ByteToMessageDecoder</h4><p>​是<strong>解码器的顶级抽象类</strong>，用于<strong>处理 TCP 拆包&#x2F;粘包问题</strong>。通过重写 <code>ChannelInboundHandler#channelRead</code> 方法，实现将入站的 <code>ByteBuf</code> 解码为业务需要的消息对象。</p><p>​内部的<strong>cumulation字段为累积的ByteBuf缓冲区</strong>，通过内置的MERGE_CUMULATOR将其和本次读取到的ByteBuf进行合并（分配一个新的ByteBuf，将旧的cumulation和本次的ByteBuf复制进来，最终替换为新的cumulation）。</p><p>​<strong>ByteToMessageDecoder#decode这个模板方法是子类解码器需要唯一实现的接口。</strong>子类只需根据自己的协议来尝试解码，每次decode应该只尝试解析一次请求的数据，具体考虑如下：</p><ol><li><strong>ByteBuf数据不够（拆包）：不做任何处理，保留数据等待下一次读事件触发</strong></li><li><strong>ByteBuf可读字节数 &gt;&#x3D; 当前请求的数据（粘包）：说明至少包含一个完整的报文，进行解码并将解码后的数据放入out这个List中</strong>。（不需要一次解码全部数据，多余的数据等待下次decode再进行解析）</li></ol><p>​所以，通过ByteToMessageDecoder的功能可以推断出其<strong>不能在Channel中共享（构造方法中校验）</strong>。而且，<strong>应该将其放在Pipeline中尽量靠近head的位置，尽早完成 ByteBuf 到业务对象的转换</strong>，方便后续 Handler 的处理</p><h5 id="核心方法-1"><a href="#核心方法-1" class="headerlink" title="核心方法"></a>核心方法</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ByteToMessageDecoder</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 累积的ByteBuf缓冲区</span>    ByteBuf cumulation<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ByteBuf合并器</span>    <span class="token keyword">private</span> Cumulator cumulator <span class="token operator">=</span> MERGE_CUMULATOR<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否是一次请求中的第一次读取</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> first<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> discardAfterReads <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numReads<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token function">ByteToMessageDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解码器一定不能被多个Channel共享，否则就可能读到多个Channel的数据</span>        <span class="token function">ensureNotSharable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * ByteBuf合并器，通过合并两个ByteBuf返回一个新的ByteBuf     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Cumulator MERGE_CUMULATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> ByteBuf <span class="token function">cumulate</span><span class="token punctuation">(</span>ByteBufAllocator alloc<span class="token punctuation">,</span> ByteBuf cumulation<span class="token punctuation">,</span> ByteBuf in<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> ByteBuf buffer<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// cumulation这个ByteBuf容量不够了 或被多个Handler引用了或只读模式，都需要新建一个扩容后的ByteBuf</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cumulation<span class="token punctuation">.</span><span class="token function">writerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> cumulation<span class="token punctuation">.</span><span class="token function">maxCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token operator">||</span> cumulation<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> cumulation<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 使用ByteBufAllocator分配新的更大容量的ByteBuf，并将cumulation写入到新的ByteBuf中</span>                    buffer <span class="token operator">=</span> <span class="token function">expandCumulation</span><span class="token punctuation">(</span>alloc<span class="token punctuation">,</span> cumulation<span class="token punctuation">,</span> in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    buffer <span class="token operator">=</span> cumulation<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                buffer<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                in<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这个out的数据结构就是我们解码后存放解码对象的容器（因为一次read可能解码出多条数据，所以需要List结构）</span>            CodecOutputList out <span class="token operator">=</span> CodecOutputList<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                ByteBuf data <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>                first <span class="token operator">=</span> cumulation <span class="token operator">==</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第一次读</span>                    cumulation <span class="token operator">=</span> data<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 代表不是第一次读取了，可能由拆包，现需要组合两个ByteBuf</span>                    cumulation <span class="token operator">=</span> cumulator<span class="token punctuation">.</span><span class="token function">cumulate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cumulation<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 开始尝试解码</span>                <span class="token function">callDecode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cumulation<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DecoderException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DecoderException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cumulation <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cumulation<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 数据读完了，需要释放</span>                    numReads <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    cumulation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cumulation <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>numReads <span class="token operator">>=</span> discardAfterReads<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 默认连续读了16次都没有完全读完数据，就丢弃一部分已读的数据以免内存溢出</span>                    <span class="token comment" spellcheck="true">// 出现这种情况一般都是一直有拆包，导致每次读取的ByteBuf组合后都不能完全解码掉</span>                    numReads <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token function">discardSomeReadBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> size <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                decodeWasNull <span class="token operator">=</span> <span class="token operator">!</span>out<span class="token punctuation">.</span><span class="token function">insertSinceRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">fireChannelRead</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> out<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存在解码后的数据才会将解码对象向后传播</span>                out<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 到了这里，out一定为空了，回收当前的CodecOutputList以便下次使用</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 说明已经被解码了，直接向后传递msg</span>            ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">callDecode</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> ByteBuf in<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只要还有数据可读，就应该继续尝试解码</span>                <span class="token keyword">int</span> outSize <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>outSize <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 有解码后的数据，应该通过调用channelRead来处理这些数据</span>                    <span class="token function">fireChannelRead</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> out<span class="token punctuation">,</span> outSize<span class="token punctuation">)</span><span class="token punctuation">;</span>                    out<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传播完了，清空容器，等待后续可能的添加</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">isRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    outSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 可读的字节数</span>                <span class="token keyword">int</span> oldInputLength <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 让子类取去尝试解码</span>                <span class="token function">decodeRemovalReentryProtection</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> in<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">isRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>outSize <span class="token operator">==</span> out<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有解码出数据</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldInputLength <span class="token operator">==</span> in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有解码数据，代表可能拆包了，还不够一次的数据。</span>                        <span class="token comment" spellcheck="true">// 跳出循环，等待下一次的channelRead一起处理数据</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldInputLength <span class="token operator">==</span> in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DecoderException</span><span class="token punctuation">(</span>                            StringUtil<span class="token punctuation">.</span><span class="token function">simpleClassName</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>                                    <span class="token string">".decode() did not read anything but decoded a message."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingleDecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DecoderException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DecoderException</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 模板方法接口，等待子类去实现真正的解码，如果有待解码的数据，就将ByteBuf读取并进行解码，再将解码后的数据放入out就行</span>    <span class="token comment" spellcheck="true">// 如果没有待解码的数据（可能网络的拆包导致数据不完整），不用做任何操作</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> ByteBuf in<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="常见解码器"><a href="#常见解码器" class="headerlink" title="常见解码器"></a>常见解码器</h5><h6 id="FixedLengthFrameDecoder"><a href="#FixedLengthFrameDecoder" class="headerlink" title="FixedLengthFrameDecoder"></a>FixedLengthFrameDecoder</h6><p>​固定长度帧解码器。通过构造方法指定帧长 <code>frameLength</code>，每次从 <code>ByteBuf</code> 中读取固定字节数作为一帧进行解码</p><h6 id="LineBasedFrameDecoder"><a href="#LineBasedFrameDecoder" class="headerlink" title="LineBasedFrameDecoder"></a>LineBasedFrameDecoder</h6><p>​行分隔符解码器。以换行符 <code>\n</code>（或 <code>\r\n</code>）作为帧的结束标志，适用于基于文本行的协议解析</p><h6 id="DelimiterBasedFrameDecoder"><a href="#DelimiterBasedFrameDecoder" class="headerlink" title="DelimiterBasedFrameDecoder"></a>DelimiterBasedFrameDecoder</h6><p>​分隔符解码器。支持自定义一个或多个分隔符（<code>ByteBuf</code> 类型）作为帧边界，从 <code>ByteBuf</code> 中提取每帧数据</p><h6 id="LengthFieldBasedFrameDecoder"><a href="#LengthFieldBasedFrameDecoder" class="headerlink" title="LengthFieldBasedFrameDecoder"></a>LengthFieldBasedFrameDecoder</h6><p>​比上面三个都更加灵活的解码器，<strong>基于某个字段指定整帧长度的通用解码器</strong>。重要参数如下</p><blockquote><ul><li>maxFrameLength：最大帧长度，超过此长度的帧将被丢弃</li><li>lengthFieldOffset：长度域偏移。就是说数据开始的几个字节可能不是表示数据长度，需要后移几个字节才是长度域。</li><li>lengthFieldLength：长度域字节数。用几个字节来表示数据长度。</li><li>lengthAdjustment：数据长度修正。因为长度域指定的长度可以是header + body的整个长度，也可以只是body的长度。如果表示header+body的整个长度，那么我们需要修正数据长度。</li><li>initialBytesToStrip：跳过的字节数。如果你需要接收header+body的所有数据，此值就是0，如果你只想接收body数据，那么需要跳过header所占用的字节数。</li></ul></blockquote><h3 id="ChannelOutboundHandler"><a href="#ChannelOutboundHandler" class="headerlink" title="ChannelOutboundHandler"></a>ChannelOutboundHandler</h3><p>​这是<strong>出站事件的接口</strong>，也就是我们<strong>主动发起的操作</strong>。大多数方法（比connect、bind、read）只会触发一次，而像 <code>write</code>、<code>flush</code> 才可能多次触发</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ChannelOutboundHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Channel绑定到本地地址时触发（仅ServerSocketChannel触发一次）</span>    <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> SocketAddress localAddress<span class="token punctuation">,</span> ChannelPromise promise<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当 SocketChannel 连接远程地址时触发，仅触发一次</span>    <span class="token comment" spellcheck="true">// 触发地点：Bootstrap#doConnect</span>    <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span>            ChannelHandlerContext ctx<span class="token punctuation">,</span> SocketAddress remoteAddress<span class="token punctuation">,</span>            SocketAddress localAddress<span class="token punctuation">,</span> ChannelPromise promise<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 主动断开连接时触发（如 SocketChannel.disconnect()）</span>    <span class="token keyword">void</span> <span class="token function">disconnect</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> ChannelPromise promise<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> ChannelPromise promise<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">deregister</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> ChannelPromise promise<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开始监听感兴趣的 IO 事件：</span>    <span class="token comment" spellcheck="true">// - 对 ServerSocketChannel 是 ACCEPT 事件</span>    <span class="token comment" spellcheck="true">// - 对 SocketChannel 是 READ 事件</span>    <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写数据到 Channel 的缓冲区，仅适用于 SocketChannel</span>    <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">,</span> ChannelPromise promise<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将缓冲区中的数据刷新到底层网络，仅适用于 SocketChannel</span>    <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="MessageToByteEncoder"><a href="#MessageToByteEncoder" class="headerlink" title="MessageToByteEncoder"></a>MessageToByteEncoder</h4><p>​是<strong>出站方向编码器的抽象基类</strong>，相比解码器其逻辑更简单，没有太多复杂场景。</p><p>​子类只需实现encode这个模板方法，将消息对象 <code>msg</code> 编码为二进制数据写入 <code>out</code> 即可，Netty 会负责后续的写出逻辑</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MessageToByteEncoder</span><span class="token operator">&lt;</span>I<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">ChannelOutboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">,</span> ChannelPromise promise<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf buf <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acceptOutboundMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// msg类型匹配</span>                I cast <span class="token operator">=</span> <span class="token punctuation">(</span>I<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 分配一个空的 ByteBuf（preferDirect 表示是否优先使用直接内存）</span>                buf <span class="token operator">=</span> <span class="token function">allocateBuffer</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cast<span class="token punctuation">,</span> preferDirect<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 子类实现。将消息编码写入到ByteBuf中</span>                    <span class="token function">encode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cast<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    ReferenceCountUtil<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>cast<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// buf被写入了数据，即编码了。触发write操作</span>                    ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 释放</span>                    buf<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span>EMPTY_BUFFER<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                buf <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 不是对应的编码器，则向前继续传递</span>                ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EncoderException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EncoderException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 兜底释放资源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                buf<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ChannelHandlerContext"><a href="#ChannelHandlerContext" class="headerlink" title="ChannelHandlerContext"></a>ChannelHandlerContext</h2><p>​<code>ChannelHandlerContext</code> 是每个 <code>ChannelHandler</code> 的上下文容器，本质上<strong>是 Netty 中 <code>ChannelPipeline</code> 双向链表结构的一个节点（Node）</strong>，其默认实现类为<code>DefaultChannelHandlerContext</code></p><p>​它不仅维护了当前 <code>Handler</code> 的状态信息，还实现了 <code>ChannelInboundInvoker</code> 和 <code>ChannelOutboundInvoker</code> 接口，具备<strong>将入站、出站事件沿链路传递到下一个合适的 <code>Handler</code> 的能力</strong></p><h3 id="核心字段"><a href="#核心字段" class="headerlink" title="核心字段"></a>核心字段</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 当前 Context 所包装的 ChannelHandler</span><span class="token keyword">private</span> <span class="token keyword">final</span> ChannelHandler handler<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指向下一个 HandlerContext，入站使用</span><span class="token keyword">volatile</span> AbstractChannelHandlerContext next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指向前一个 HandlerContext，出站使用</span><span class="token keyword">volatile</span> AbstractChannelHandlerContext prev<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 能否处理inbound事件</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> inbound<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 能否处理outbound事件</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> outbound<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> DefaultChannelPipeline pipeline<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前handler的名字</span><span class="token keyword">private</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 当前 handler 是否应按顺序触发事件，一般都为true *  * 为 true 时，只有在 handler 被完整添加到 Pipeline 并执行了 handlerAdded() 回调后， * 才会触发该 handler 的其他事件（如 channelRead 等） * * 如果为 false，即便 handlerAdded() 尚未被调用，只要已添加到 Pipeline 中， * 就允许立即触发其事件方法。通常用于一些内部 handler 的优化场景 */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> ordered<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// handler 已添加到 pipeline 中，但尚未调用 handlerAdded（即还未激活）</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ADD_PENDING <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// handler 已添加到 pipeline 且 handlerAdded 已调用（已激活）</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ADD_COMPLETE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// handler 已从 pipeline 中移除，不能再触发事件</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> REMOVE_COMPLETE <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化状态</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前context的状态</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> handlerState <span class="token operator">=</span> INIT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特殊的HandlerContext"><a href="#特殊的HandlerContext" class="headerlink" title="特殊的HandlerContext"></a>特殊的HandlerContext</h3><p>​在 Netty 的 ChannelPipeline 中，除了我们自定义的 ChannelHandlerContext ，框架还内置了两个特殊的 Context：<strong>HeadContext</strong> 和 <strong>TailContext</strong>，分别作为出站和入站事件处理链的<strong>起始和终点</strong>，对事件传播机制进行收尾</p><h4 id="HeadContext"><a href="#HeadContext" class="headerlink" title="HeadContext"></a>HeadContext</h4><p>​<strong>出站事件链的终点，负责将最终的出站操作（如connect、bind、write、flush等）委托给底层的 Channel.Unsafe</strong></p><p>​虽然也实现了ChannelInboundHandler，但对入站事件基本没特殊的处理，仅向后续的Handler传播</p><h4 id="TailContext"><a href="#TailContext" class="headerlink" title="TailContext"></a>TailContext</h4><p>​<strong>入站事件链的终点，通常用于收尾处理，例如资源释放、日志记录等</strong>（如入站事件的异常（exceptionCaught）如果不做任何处理，继续向后传播的话，最终也只会记录日志，并不会抛出异常）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://img.shanzhao.site/file/1754465202848_netty-pipeline-handler.png" alt="netty-pipeline-handler.png"></p><p>​Pipeline + Handler是基于<strong>责任链模式</strong>设计的，主要用于网络事件的<strong>传递、处理和拦截</strong>。类似于Tomcat的Pipeline + Value。但 <strong>Netty 更底层、通用，它既能作为服务端，也可以作为客户端使用</strong>。</p><p>​Netty将网络通信中的<strong>被动接收和主动发起相关IO操作抽象成了inbound和outbound事件</strong>，使其在对应的handler中传递，具体为：</p><blockquote><p>出站(outbound)：<strong>tail  →  …各种OutboundHandler  →  head</strong>。bind, connect, write, flush等<strong>主动触发的IO操</strong></p><p>入站(inbound)：<strong>head  →  …各种InboundHandler  →  tail</strong>。channelRead，channelActive, channelRegistered等<strong>被动接收的IO操作</strong></p></blockquote><p>​同时它基于自身的架构设计了<strong>顶层的解码器ByteToMessageDecoder帮我们解决了网络中拆包粘包的问题，使我们在使用过程中只需关注具体的协议解析和业务处理部分</strong></p><h3 id="Handler使用tips"><a href="#Handler使用tips" class="headerlink" title="Handler使用tips"></a>Handler使用tips</h3><ol><li>Handler 的添加顺序决定其在 Pipeline 中的执行顺序，会影响事件的处理逻辑。使用时需根据具体依赖关系进行编排，比如：解码器应在业务处理器之前，编码器应在之后</li><li><strong>Handler 默认不可复用</strong>（每个 Channel 一个实例）。如果 Handler 是线程安全的，可以加 @ChannelHandler.Sharable 注解，让这个Handler实例在多个Channel中共享使用</li></ol>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解码器 </tag>
            
            <tag> 责任链模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty（一） — Channel和Unsafe</title>
      <link href="/2022-07-20/netty-channel-he-unsafe/"/>
      <url>/2022-07-20/netty-channel-he-unsafe/</url>
      
        <content type="html"><![CDATA[<p>​基于 Netty 4.1.34，从 Channel 的整体架构入手，分析了 Channel 与 Unsafe 的配合机制，以及底层对应的 NIO 实现类。在分析过程中也穿插了对关键方法的说明，最后总结了 Netty Channel 相比原生 JDK Channel 在使用体验和扩展性上的优势。</p><span id="more"></span><h2 id="NIO基础"><a href="#NIO基础" class="headerlink" title="NIO基础"></a>NIO基础</h2><table><thead><tr><th align="center">Origin</th><th align="center">Channel</th><th align="center">OP_ACCEPT</th><th align="center">OP_CONNECT</th><th align="center">OP_WRITE</th><th align="center">OP_READ</th></tr></thead><tbody><tr><td align="center">client</td><td align="center">SocketChannel</td><td align="center"></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">server</td><td align="center">ServerSocketChannel</td><td align="center">Y</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">server</td><td align="center">SocketChannel</td><td align="center"></td><td align="center"></td><td align="center">Y</td><td align="center">Y</td></tr></tbody></table><ul><li><p><code>OP_ACCEPT</code>：当收到一<strong>个客户端的连接请求时，该操作就绪</strong>。这是<code>ServerSocketChannel</code>上唯一有效的操作。</p></li><li><p><code>OP_CONNECT</code>：只有客户端<code>SocketChannel</code>会注册该操作，<strong>当客户端调用<code>SocketChannel.connect()</code>时，该操作会就绪</strong></p></li><li><p><code>OP_READ</code>：该操作对客户端和服务端的<code>SocketChannel</code>都有效，当<strong>OS的读缓冲区中有数据可读时，该操作就绪</strong></p></li><li><p><code>OP_WRITE</code>：该操作对客户端和服务端的<code>SocketChannel</code>都有效，当<strong>OS的写缓冲区中有空闲的空间时(大部分时候都有)，该操作就绪</strong></p><blockquote><p> ​OP_WRITE  事件相对特殊，一般情况，不应该注册<code>OP_WRITE事件</code>，<code>OP_WRITE</code>的就绪条件为<strong>操作系统内核缓冲区有空闲空间</strong>(<code>OP_WRITE事件</code>是在<code>Socket</code>发送缓冲区中的可用字节数大于或等于其低水位标记<code>SO_SNDLOWAT</code>时发生)，而写缓冲区绝大部分事件都是有空闲空间的，所以当你注册写事件后，写操作一直就是就绪的，这样会导致<code>Selector</code>处理线程会占用整个CPU的资源。所以<strong>OP_WRITE的使用方式是当你确实有数据写入时再注册<code>OP_WRITE事件</code>，并且在写完以后马上取消注册</strong></p></blockquote></li></ul><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><p>​<code>io.netty.channel.Channel</code> 是 Netty 中抽象出来的顶层网络连接接口，表示<strong>一个客户端连接</strong>或<strong>一个服务端监听通道</strong>（ServerSocket）。<strong>Netty 中所有的连接类型（ <code>NioSocketChannel</code>、<code>NioServerSocketChannel</code>等）都会实现该接口</strong>。</p><p>​Channel提供了访问其<strong>生命周期状态</strong>、<strong>绑定地址</strong>、<strong>所属线程模型</strong>（<code>EventLoop</code>）、<strong>事件处理链</strong>（<code>ChannelPipeline</code>）等通用能力。</p><p>​并且其还<strong>实现了ChannelOutboundInvoker，表示它具有出站事件驱动能力</strong>。例如 <code>bind()</code>、<code>connect()</code>、<code>write()</code>、<code>flush()</code> 等方法，实际调用时会从 <code>pipeline</code> 的尾部（<code>TailContext</code>）开始，逐步向前传递，最终由 <code>HeadContext</code> 使用 <code>Channel.Unsafe</code> 完成真正的底层 IO 操作。</p><h3 id="核心接口"><a href="#核心接口" class="headerlink" title="核心接口"></a>核心接口</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Channel</span> <span class="token keyword">extends</span> <span class="token class-name">AttributeMap</span><span class="token punctuation">,</span> ChannelOutboundInvoker<span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>Channel<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当前channel的唯一id</span>    ChannelId <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回分配给 当前Channel 的 EventLoop（事件循环线程）</span>    EventLoop <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 父channel，即创建当前Channel的Channel</span>    <span class="token comment" spellcheck="true">// 对于客户端连接（如 NioSocketChannel），其 parent 通常是 NioServerSocketChannel（服务端监听连接）</span>    <span class="token comment" spellcheck="true">// 而顶层的Channel则为null（NioServerSocketChannel）</span>    Channel <span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Channel 的配置信息，包含连接参数（如 TCP_NODELAY、SO_KEEPALIVE 等）</span>    ChannelConfig <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对于NIO来说，即是否把jdk的Channel注册到Selector上</span>    <span class="token keyword">boolean</span> <span class="token function">isRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对于ServerSocketChannel，表示绑定了地址和端口。</span>    <span class="token comment" spellcheck="true">// 对于SocketChannel，代表已经连接了服务端</span>    <span class="token keyword">boolean</span> <span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// bind的本地SokcetAddress</span>    SocketAddress <span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回远程的 SocketAddress。</span>    <span class="token comment" spellcheck="true">// 对于server端来说，没有远端地址，返回null</span>    SocketAddress <span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 一个固定的 ChannelFuture，用于监听当前 Channel 的close事件</span>    <span class="token comment" spellcheck="true">// 一旦 Channel close了，该 Future 会完成（成功），可注册监听器处理资源释放等逻辑。</span>    ChannelFuture <span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 真的的IO操作接口</span>    Unsafe <span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分配给 当前Channel 的 ChannelPipeline</span>    ChannelPipeline <span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AbstractChannel"><a href="#AbstractChannel" class="headerlink" title="AbstractChannel"></a>AbstractChannel</h3><p>​是所有 Netty Channel实现类的公共基类，像 <code>NioSocketChannel</code>、<code>EpollSocketChannel</code>、<code>KQueueSocketChannel</code> 都是基于它扩展的。主要负责<strong>抽象出所有 Channel 通用的字段和功能，避免重复代码，也是 <code>ChannelOutboundInvoker</code> 接口的默认实现（转发给Pipeline处理）</strong>。其构造方法和常见公共字段如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token function">AbstractChannel</span><span class="token punctuation">(</span>Channel parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>    id <span class="token operator">=</span> <span class="token function">newId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建Unsafe</span>    unsafe <span class="token operator">=</span> <span class="token function">newUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建DefaultChannelPipeline</span>    pipeline <span class="token operator">=</span> <span class="token function">newChannelPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">final</span> Channel parent<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> ChannelId id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> Unsafe unsafe<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> DefaultChannelPipeline pipeline<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 内部无回调的 IO 操作</span><span class="token keyword">private</span> <span class="token keyword">final</span> VoidChannelPromise unsafeVoidPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VoidChannelPromise</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 监听 Channel 关闭状态的 future</span><span class="token keyword">private</span> <span class="token keyword">final</span> CloseFuture closeFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CloseFuture</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> SocketAddress localAddress<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> SocketAddress remoteAddress<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> EventLoop eventLoop<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 是否已注册到 Selector</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> registered<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AbstractNioChannel"><a href="#AbstractNioChannel" class="headerlink" title="AbstractNioChannel"></a>AbstractNioChannel</h4><p>​这是所有基于 <strong>Java NIO</strong> 的 Netty Channel 的抽象基类，像 <code>NioSocketChannel</code>、<code>NioServerSocketChannel</code> 都基于它实现。<strong>配置Channel非阻塞、注册Selector、添加感兴趣的事件</strong>等都在里面完成的。其主要字段和方法如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractNioChannel</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractChannel</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// java原生的channel：SocketChannel和ServerSocketChannel</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> SelectableChannel ch<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 感兴趣的事件，Server是OP_ACCEPT,SocketChannel是OP_READ</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> readInterestOp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// jdk的channel注册到selector上返回的SelectionKey，用于后续的事件控制</span>    <span class="token keyword">volatile</span> SelectionKey selectionKey<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> readPending<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// connect 操作的 promise，即connect的结果回调</span>    <span class="token keyword">private</span> ChannelPromise connectPromise<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// connect操作的超时定时器</span>    <span class="token keyword">private</span> ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> connectTimeoutFuture<span class="token punctuation">;</span>    <span class="token keyword">private</span> SocketAddress requestedRemoteAddress<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token function">AbstractNioChannel</span><span class="token punctuation">(</span>Channel parent<span class="token punctuation">,</span> SelectableChannel ch<span class="token punctuation">,</span> <span class="token keyword">int</span> readInterestOp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ch <span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>readInterestOp <span class="token operator">=</span> readInterestOp<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在这里设置为非阻塞模式</span>            ch<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ... 省略异常</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 仅注册到Selector上，不监听任何事件     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> selected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 将java原生的ServerSocketChannel注册到selector上</span>                <span class="token comment" spellcheck="true">// 初始没有感兴趣的事件，后续通过 doBeginRead 等方法设置</span>                selectionKey <span class="token operator">=</span> <span class="token function">javaChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrappedSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancelledKeyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selected<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第一次注册抛出异常，删除当前的selectionKey，继续注册</span>                    <span class="token comment" spellcheck="true">// Force the Selector to select now as the "canceled" SelectionKey may still be</span>                    <span class="token comment" spellcheck="true">// cached and not removed because no Select.select(..) operation was called yet.</span>                    <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    selected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// We forced a select operation on the selector before but the SelectionKey is</span>                    <span class="token comment" spellcheck="true">// still cached</span>                    <span class="token comment" spellcheck="true">// for whatever reason. JDK bug ?</span>                    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 真正操作Channel.read() 或 ChannelHandlerContext.read()时才注册注册事件     * SocketChannel为OP_READ，ServerSocketChannel为OP_ACCEPT     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doBeginRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">final</span> SelectionKey selectionKey <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectionKey<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selectionKey<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Channel 已失效，忽略</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        readPending <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> interestOps <span class="token operator">=</span> selectionKey<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interestOps <span class="token operator">&amp;</span> readInterestOp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果当前未监听感兴趣的事件，则添加（避免重复设置）</span>            selectionKey<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>interestOps <span class="token operator">|</span> readInterestOp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="NioSocketChannel"><a href="#NioSocketChannel" class="headerlink" title="NioSocketChannel"></a>NioSocketChannel</h5><p>​是 Netty 中基于 NIO 实现的 TCP 客户端连接类，最终负责与远程建立连接并进行读写通信。它继承自 <code>AbstractNioByteChannel</code>，本质上是对 JDK 的 <code>SocketChannel</code> 的一层封装。</p><p>该类主要<strong>通过实现 <code>doReadBytes</code>、<code>doWriteBytes</code> 和 <code>doWriteFileRegion</code> 这三个模板方法，完成与底层 <code>java.nio.channels.SocketChannel</code> 的数据交互，使用 Netty 的 <code>ByteBuf</code> 进行读取和写入</strong>：</p><ul><li><code>doReadBytes(ByteBuf)</code>：<strong>从 JDK Channel 中读取数据填充到 ByteBuf</strong></li><li><code>doWriteBytes(ByteBuf)</code>：<strong>从 ByteBuf 中取出数据写入到底层 Channel</strong></li><li><code>doWriteFileRegion(FileRegion)</code>：支持将文件直接写入到 SocketChannel，提高传输效率（zero-copy）。</li></ul><p>此外，它还负责实现bind和connect操作、Channel的close、本地和远程地址获取等功能</p><h5 id="NioServerSocketChannel"><a href="#NioServerSocketChannel" class="headerlink" title="NioServerSocketChannel"></a>NioServerSocketChannel</h5><p>​是 Netty 中基于 NIO 实现的服务端监听通道类，<strong>负责处理 TCP 连接的接入</strong>。它继承自 <code>AbstractNioMessageChannel</code>，封装了 JDK 的 <code>ServerSocketChannel</code>。</p><p>​该类的核心职责非常单一：<strong>监听 OP_ACCEPT 事件并接受新连接</strong>。当有客户端连接到来时，会触发 <code>doReadMessages()</code> 方法：</p><ul><li><code>doReadMessages(List&lt;Object&gt; buf)</code>：<strong>接受底层的 JDK  <code>SocketChannel</code>，并将其封装成 Netty 的 <code>NioSocketChannel</code> 实例添加到 <code>buf</code> 中，后续由 Acceptor 继续处理</strong>。</li></ul><p>​<code>ServerSocketChannel</code>不会参与具体的数据发送，因此像 <code>connect()</code>、<code>write()</code> 等出站操作在该类中是不支持的（抛 <code>UnsupportedOperationException</code>）</p><h2 id="Unsafe"><a href="#Unsafe" class="headerlink" title="Unsafe"></a>Unsafe</h2><p>​首先其命名和JDK的Unsafe一样，表示它是<strong>不安全</strong>的，其作为io.netty.channel.Channel的<strong>内部接口</strong>，同时它的所有实现类也在对应的Channel实现类里，且都是private级别的，也表示了<strong>Netty不希望这个类在其他地方使用</strong><br>​<strong>JDK的Unsafe是用来操作内存中的指针，而这个Unsafe是用来处理IO的。Netty将处理底层IO的细节都封装在里面，tail和head这两个端点Handler的功能就依赖Unsafe来完成read、connect、write、flush等IO操作</strong></p><h3 id="NioByteUnsafe"><a href="#NioByteUnsafe" class="headerlink" title="NioByteUnsafe"></a>NioByteUnsafe</h3><p>​<code>NioSocketChannel</code> 的专属 <code>Unsafe</code> 实现，负责与底层 <code>SocketChannel</code> 的读写交互和 Netty 的事件触发</p><p>​重点关注其 <code>read()</code> 方法，该方法会把数据读进 <code>ByteBuf</code>，期间可能多次触发 <code>channelRead</code>（网络可能拆包），用来处理<strong>解码和业务逻辑</strong>。读完后再触发一次 <code>channelReadComplete</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">class</span> <span class="token class-name">NioByteUnsafe</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractNioUnsafe</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * NioSocketChannel 的实际读取逻辑，从底层 Channel 中读取字节数据并触发后续处理流程。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ChannelConfig config <span class="token operator">=</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldBreakReadReady</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clearReadPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> ChannelPipeline pipeline <span class="token operator">=</span> <span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ByteBufAllocator allocator <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> RecvByteBufAllocator<span class="token punctuation">.</span>Handle allocHandle <span class="token operator">=</span> <span class="token function">recvBufAllocHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allocHandle<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuf byteBuf <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> close <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 由于我们不知道当前Channel能读取到多少字节的数据，所以需要分配一个估值容量的ByteBuf（容量过大会浪费，容量过小会读取多次）</span>                <span class="token comment" spellcheck="true">// 根据配置参数分配一个具有特定容量ByteBuf，当这个ByteBuf容量小于Channel中的数据时，就会触发多次读取</span>                byteBuf <span class="token operator">=</span> allocHandle<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>allocator<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将Channel中的数据读取到ByteBuf中，并且设置读取到的字节数大小</span>                allocHandle<span class="token punctuation">.</span><span class="token function">lastBytesRead</span><span class="token punctuation">(</span><span class="token function">doReadBytes</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>allocHandle<span class="token punctuation">.</span><span class="token function">lastBytesRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有读取到数据</span>                    <span class="token comment" spellcheck="true">// nothing was read. release the buffer.</span>                    byteBuf<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    byteBuf <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 读取的字节数小于0，通常表示连接已关闭（EOF）</span>                    close <span class="token operator">=</span> allocHandle<span class="token punctuation">.</span><span class="token function">lastBytesRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>close<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// There is nothing left to read as we received an EOF.</span>                        readPending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 读取数据的次数 + 1</span>                allocHandle<span class="token punctuation">.</span><span class="token function">incMessagesRead</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                readPending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 传入读取到的ByteBuf作为参数，触发ChannelRead事件（解码、处理业务逻辑等操作）</span>                pipeline<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>                byteBuf <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断是否应该继续从Channel中读取数据</span>                <span class="token comment" spellcheck="true">// 当上次读取到的数据容量等于我们准备的ByteBuf容量时，代表很大可能还没读取完，返回true继续读取数据</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>allocHandle<span class="token punctuation">.</span><span class="token function">continueReading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 这次Channel发送的数据已被读取完毕，触发一次readComplete事件</span>            allocHandle<span class="token punctuation">.</span><span class="token function">readComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pipeline<span class="token punctuation">.</span><span class="token function">fireChannelReadComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>close<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">closeOnRead</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">handleReadException</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> byteBuf<span class="token punctuation">,</span> t<span class="token punctuation">,</span> close<span class="token punctuation">,</span> allocHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 没有待处理的read请求 且 当前不再自动读取，则取消 READ 事件监听</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>readPending <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token function">isAutoRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">removeReadOp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NioMessageUnsafe"><a href="#NioMessageUnsafe" class="headerlink" title="NioMessageUnsafe"></a>NioMessageUnsafe</h3><p>​这是 <code>NioServerSocketChannel</code> 专用的 <code>Unsafe</code> 实现类，主要负责处理底层 <code>ServerSocketChannel</code> 的 OP_ACCEPT 事件。其read的逻辑如下：</p><ol><li><p>从<strong>底层 <code>ServerSocketChannel</code> 接受连接</strong></p></li><li><p>为<strong>每个连接创建对应的 <code>NioSocketChannel</code> 实例</strong></p></li><li><p>通过 <code>pipeline.fireChannelRead</code> 触发事件，<strong>把每个NioSocketChannel交给NioServerSocketChannel中唯一的 <code>ServerBootstrapAcceptor</code> 这个Handler处理</strong></p><blockquote><p>​<code>ServerBootstrapAcceptor</code> 会将该 <code>NioSocketChannel</code> 绑定自定义 handler，并注册到对应的 <code>EventLoop</code> 上</p></blockquote></li><li><p>最后触发服务端的readComplete事件（里面啥都没做）</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面Channel和Unsafe的分析，总结一下相比普通的JDK Channel，Netty的Channel提供了如下特性</p><ol><li><strong>EventLoop线程的绑定</strong>：Channel的所有IO操作都<strong>在该EventLoop绑定的线程中执行</strong>，不会有并发问题</li><li><strong>事件分发</strong>机制：Channel的IO操作基本都会被<strong>包装为Netty事件，由对应的ChannelPipeline进行分发</strong></li><li>更<strong>高级的异步编程</strong>：Channel的IO操作都是<strong>返回的异步结果</strong>，方便链式调用与回调监听（就算内部是同步的也是封装成异步结果，保持风格的统一）</li><li><strong>接口的统一抽象</strong>：为了更大力度的能<strong>复用代码和最小化代价切换实现类</strong>，Channel进行了分层抽象：<strong>通用顶层接口和基类 -&gt; 具体的传输层接口和基类（NIO、Epoll、KQueue）-&gt; 具体的 server&#x2F;客户端 Channel 实现类</strong></li><li><strong>安全考虑</strong>：将操作IO的能力抽象到了Unsafe这个内部类中，算是一种变相的警告</li></ol>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（五） — 嵌入式Tomcat</title>
      <link href="/2022-05-13/springboot-qian-ru-shi-tomcat-de-shi-yong/"/>
      <url>/2022-05-13/springboot-qian-ru-shi-tomcat-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>​主要分析了嵌入式 Tomcat 的构建流程，重点对比了它<strong>和传统 Tomcat 启动方式的差异</strong>，也梳理了 SpringBoot 提供的相关扩展点，比如 <strong>ServletContextInitializerBeans 的处理逻辑</strong>。最后<strong>结合 Tomcat 启动和 Spring 单例 Bean 初始化的整体流程，对延迟绑定端口，以及整个启动顺序背后的依赖关系做了系统性的分析和思考</strong></p><span id="more"></span><h2 id="Tomcat自动配置"><a href="#Tomcat自动配置" class="headerlink" title="Tomcat自动配置"></a>Tomcat自动配置</h2><p>​Spring Boot 的 <code>spring-boot-starter-web</code> 模块默认会引入<strong>自动配置、Spring MVC，以及最关键的嵌入式 Servlet 容器（Tomcat）依赖</strong>。其中，<code>ServletWebServerFactoryAutoConfiguration</code> 是嵌入式容器自动配置的核心类，其定义如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfiguration</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>ServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ServletWebServerFactoryAutoConfiguration<span class="token punctuation">.</span>BeanPostProcessorsRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedTomcat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedJetty<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedUndertow<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletWebServerFactoryAutoConfiguration</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ... 省略</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​这个配置类<strong>导入了ServletWebServerFactoryConfiguration.EmbeddedTomcat</strong>，其定义如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Servlet和Tomcat相关class必须存在</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Tomcat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> UpgradeProtocol<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 确保单例</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> ServletWebServerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedTomcat</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    TomcatServletWebServerFactory <span class="token function">tomcatServletWebServerFactory</span><span class="token punctuation">(</span>            ObjectProvider<span class="token operator">&lt;</span>TomcatConnectorCustomizer<span class="token operator">></span> connectorCustomizers<span class="token punctuation">,</span>            ObjectProvider<span class="token operator">&lt;</span>TomcatContextCustomizer<span class="token operator">></span> contextCustomizers<span class="token punctuation">,</span>            ObjectProvider<span class="token operator">&lt;</span>TomcatProtocolHandlerCustomizer<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> protocolHandlerCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TomcatServletWebServerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 收集程序中自定义的 三个Tomcat组件：Connector,Context,ProtocolHandler 的后置处理器</span>        factory<span class="token punctuation">.</span><span class="token function">getTomcatConnectorCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>connectorCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">getTomcatContextCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>contextCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">getTomcatProtocolHandlerCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>protocolHandlerCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​EmbeddedTomcat核心是注册一个 <code>TomcatServletWebServerFactory</code> 单例 Bean，该 Bean 是 SpringBoot 中创建嵌入式 Tomcat 的关键工厂类</p><h2 id="Tomcat构建"><a href="#Tomcat构建" class="headerlink" title="Tomcat构建"></a>Tomcat构建</h2><p>容器refresh时，在<strong>内部的onRefresh是正式创建和启动Tomcat的时机</strong>（这时还未实例化容器中的所有单例bean），创建Tomcat的具体方法为TomcatServletWebServerFactory#getWebServer，其被调用链路为：</p><blockquote><ol><li>ServletWebServerApplicationContext#onRefresh</li><li>ServletWebServerApplicationContext#createWebServer</li></ol></blockquote><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatServletWebServerFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractServletWebServerFactory</span>        <span class="token keyword">implements</span> <span class="token class-name">ConfigurableTomcatWebServerFactory</span><span class="token punctuation">,</span> ResourceLoaderAware <span class="token punctuation">{</span>    <span class="token keyword">public</span> WebServer <span class="token function">getWebServer</span><span class="token punctuation">(</span>ServletContextInitializer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>disableMBeanRegistry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Registry<span class="token punctuation">.</span><span class="token function">disableRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建Tomcat</span>        Tomcat tomcat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File baseDir <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory <span class="token operator">:</span> <span class="token function">createTempDir</span><span class="token punctuation">(</span><span class="token string">"tomcat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">setBaseDir</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>LifecycleListener listener <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverLifecycleListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tomcat<span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLifecycleListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建Connector组件</span>        Connector connector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>        connector<span class="token punctuation">.</span><span class="token function">setThrowOnFailure</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 内部会创建Service组件</span>        tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">customizeConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">setConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 内部会创建Host组件，并设置autoDeploy=false，不进行webapps的部署</span>        tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoDeploy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 内部会创建Engine</span>        <span class="token function">configureEngine</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Connector additionalConnector <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>additionalTomcatConnectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>additionalConnector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">prepareContext</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getTomcatWebServer</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">customizeConnector</span><span class="token punctuation">(</span>Connector connector<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connector<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token function">getServerHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            connector<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token function">getServerHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connector<span class="token punctuation">.</span><span class="token function">getProtocolHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">AbstractProtocol</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">customizeProtocol</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractProtocol<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> connector<span class="token punctuation">.</span><span class="token function">getProtocolHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 容器里的TomcatProtocolHandlerCustomizer bean 调用，后置处理ProtocolHandler组件</span>        <span class="token function">invokeProtocolHandlerCustomizers</span><span class="token punctuation">(</span>connector<span class="token punctuation">.</span><span class="token function">getProtocolHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getUriEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            connector<span class="token punctuation">.</span><span class="token function">setURIEncoding</span><span class="token punctuation">(</span><span class="token function">getUriEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 重要：bindOnInit设为false，在Tomcat的init阶段不会将Connector与端口进行绑定</span>        connector<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"bindOnInit"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getHttp2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">getHttp2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            connector<span class="token punctuation">.</span><span class="token function">addUpgradeProtocol</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Http2Protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getSsl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">getSsl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">customizeSsl</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TomcatConnectorCustomizer compression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompressionConnectorCustomizer</span><span class="token punctuation">(</span><span class="token function">getCompression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        compression<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 容器里的TomcatConnectorCustomizer bean调用，后置处理8080端口的Connector组件</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>TomcatConnectorCustomizer customizer <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tomcatConnectorCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareContext</span><span class="token punctuation">(</span>Host host<span class="token punctuation">,</span> ServletContextInitializer<span class="token punctuation">[</span><span class="token punctuation">]</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File documentRoot <span class="token operator">=</span> <span class="token function">getValidDocumentRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TomcatEmbeddedContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatEmbeddedContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>documentRoot <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">setResources</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoaderHidingResourceRoot</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        context<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setDisplayName</span><span class="token punctuation">(</span><span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File docBase <span class="token operator">=</span> <span class="token punctuation">(</span>documentRoot <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> documentRoot <span class="token operator">:</span> <span class="token function">createTempDir</span><span class="token punctuation">(</span><span class="token string">"tomcat-docbase"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setDocBase</span><span class="token punctuation">(</span>docBase<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">addLifecycleListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixContextListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重要，将当前ClassLoader设置到Context里，作为后续TomcatEmbeddedWebappClassLoader的parentClassLoader</span>        context<span class="token punctuation">.</span><span class="token function">setParentClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">:</span> ClassUtils<span class="token punctuation">.</span><span class="token function">getDefaultClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resetDefaultLocaleMapping</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addLocaleMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">setCreateUploadTargets</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodError</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Tomcat is &lt; 8.5.39. Continue.</span>        <span class="token punctuation">}</span>        <span class="token function">configureTldPatterns</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        WebappLoader loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebappLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loader<span class="token punctuation">.</span><span class="token function">setLoaderClass</span><span class="token punctuation">(</span>TomcatEmbeddedWebappClassLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TomcatEmbeddedWebappClassLoader直接委派给父类加载class</span>        loader<span class="token punctuation">.</span><span class="token function">setDelegate</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setLoader</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRegisterDefaultServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">addDefaultServlet</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldRegisterJspServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">addJspServlet</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addJasperInitializer</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        context<span class="token punctuation">.</span><span class="token function">addLifecycleListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StaticResourceConfigurer</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletContextInitializer<span class="token punctuation">[</span><span class="token punctuation">]</span> initializersToUse <span class="token operator">=</span> <span class="token function">mergeInitializers</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>        host<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">configureContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> initializersToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postProcessContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureContext</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> ServletContextInitializer<span class="token punctuation">[</span><span class="token punctuation">]</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将ServletContextInitializer合起来包装为TomcatStarter这个javax.servlet.ServletContainerInitializer</span>        TomcatStarter starter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatStarter</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">TomcatEmbeddedContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TomcatEmbeddedContext embeddedContext <span class="token operator">=</span> <span class="token punctuation">(</span>TomcatEmbeddedContext<span class="token punctuation">)</span> context<span class="token punctuation">;</span>            embeddedContext<span class="token punctuation">.</span><span class="token function">setStarter</span><span class="token punctuation">(</span>starter<span class="token punctuation">)</span><span class="token punctuation">;</span>            embeddedContext<span class="token punctuation">.</span><span class="token function">setFailCtxIfServletStartFails</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 重要，后续的DispatcherServlet会在里面注册到Context</span>        context<span class="token punctuation">.</span><span class="token function">addServletContainerInitializer</span><span class="token punctuation">(</span>starter<span class="token punctuation">,</span> NO_CLASSES<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>LifecycleListener lifecycleListener <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>contextLifecycleListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">addLifecycleListener</span><span class="token punctuation">(</span>lifecycleListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Valve valve <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>contextValves<span class="token punctuation">)</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">getPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addValve</span><span class="token punctuation">(</span>valve<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ErrorPage errorPage <span class="token operator">:</span> <span class="token function">getErrorPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>descriptor<span class="token punctuation">.</span>web<span class="token punctuation">.</span>ErrorPage tomcatErrorPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>descriptor<span class="token punctuation">.</span>web<span class="token punctuation">.</span>ErrorPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tomcatErrorPage<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>errorPage<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tomcatErrorPage<span class="token punctuation">.</span><span class="token function">setErrorCode</span><span class="token punctuation">(</span>errorPage<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tomcatErrorPage<span class="token punctuation">.</span><span class="token function">setExceptionType</span><span class="token punctuation">(</span>errorPage<span class="token punctuation">.</span><span class="token function">getExceptionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">addErrorPage</span><span class="token punctuation">(</span>tomcatErrorPage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MimeMappings<span class="token punctuation">.</span>Mapping mapping <span class="token operator">:</span> <span class="token function">getMimeMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">addMimeMapping</span><span class="token punctuation">(</span>mapping<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mapping<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">configureSession</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">configureCookieProcessor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">DisableReferenceClearingContextCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String webListenerClassName <span class="token operator">:</span> <span class="token function">getWebListenerClassNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span>webListenerClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Context组件配置完毕，可以调用容器里的TomcatContextCustomizer bean了，后置处理Context组件</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>TomcatContextCustomizer customizer <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tomcatContextCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="差异和拓展"><a href="#差异和拓展" class="headerlink" title="差异和拓展"></a>差异和拓展</h3><p>​SpringBoot以编程方式创建、配置和组合了 Tomcat 核心组件（Server、Service、Connector、Engine、Host、Context），不依赖 <code>server.xml</code> 或 <code>webapps</code> 目录。</p><p>我们只需关注其嵌入式Tomcat最关键的部分：<strong>和传统tomcat启动的区别</strong>和<strong>SpringBoot提供的拓展</strong></p><h4 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h4><ol><li><p><strong>端口绑定延迟</strong></p><blockquote><p>​AbstractEndpoint#bindOnInit&#x3D;false，在Connector初始化阶段不会创建Socket和绑定8080端口</p></blockquote></li><li><p><strong>禁用自动部署机制</strong></p><blockquote><p>​StandardHost#autoDeploy&#x3D;false，则不再扫描和部署 <code>webapps</code> 目录、war包、xml文件</p></blockquote></li><li><p><strong>自定义类加载器</strong></p><blockquote><p>​StandardContext#parentClassLoader被设置为 SpringBoot 提供的类加载器，如 fatJar 模式下的 LaunchedURLClassLoader，以支持class加载</p></blockquote></li><li><p><strong>类加载器委托优先级修改</strong></p><blockquote><p>​<code>WebappLoader#delegate = true</code>：让Tomcat的ParallelWebappClassLoader直接走父classLoader加载class（即StandardContext的parentClassLoader）</p></blockquote></li></ol><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><ol><li><p><strong>Servlet 容器初始化器</strong>：<code>ServletContextInitializer</code></p><blockquote><p>​所有的 ServletContextInitializer Bean 会被收集、包装成一个统一的 <code>TomcatStarter</code> 实例，并添加为StandardContext的ServletContainerInitializer，在 <code>StandardContext#startInternal</code> 阶段被调用。常见ServletContextInitializer实现类：</p><ul><li>ServletRegistrationBean</li><li>FilterRegistrationBean</li><li>ServletListenerRegistrationBean</li><li>DelegatingFilterProxyRegistrationBean</li></ul></blockquote></li><li><p><strong>三种Customizer后置处理</strong>（即等待对应的组件配置完毕再处理）</p><blockquote><ul><li>TomcatConnectorCustomizer：Connector组件</li><li>TomcatContextCustomizer：Context组件</li><li>TomcatProtocolHandlerCustomizer：ProtocolHandler组件</li></ul></blockquote></li></ol><h2 id="ServletContextInitializer处理"><a href="#ServletContextInitializer处理" class="headerlink" title="ServletContextInitializer处理"></a>ServletContextInitializer处理</h2><p>​ServletWebServerApplicationContext#getSelfInitializer方法构建了一个 <code>ServletContextInitializer</code> 类型的函数式接口实例，其内部通过 <code>ServletContextInitializerBeans</code> 收集并统一处理所有容器中的 <code>ServletContextInitializer</code>  Bean及进行web组件的兜底适配</p><p>​DispatcherServletAutoConfiguration就是一个典型的例子，它是SpringBoot提供的自动配置类，负责<strong>实例化 DispatcherServlet</strong>，并<strong>通过 DispatcherServletRegistrationBean 将其注册到 StandardContext 中</strong>。</p><h3 id="ServletContextInitializerBeans"><a href="#ServletContextInitializerBeans" class="headerlink" title="ServletContextInitializerBeans"></a>ServletContextInitializerBeans</h3><p>该类用于统一处理所有 <code>ServletContextInitializer</code> 类型的组件，其核心作用包括：</p><ul><li><strong>收集</strong>：自动从容器中收集所有 <code>ServletContextInitializer</code> （DispatcherServletRegistrationBean）</li><li><strong>适配兜底</strong>：对于未直接实现 <code>ServletContextInitializer</code>的常见web组件Bean（如 <code>Servlet</code>、<code>Filter</code>、<code>EventListener</code>），将其适配封装为相应的<code>...RegistrationBean</code></li><li><strong>配置</strong>：应用 <code>MultipartConfigElement</code>  Bean到所有 <code>ServletRegistrationBean</code>中</li><li><strong>排序</strong>：对所有 <code>ServletContextInitializer</code> 进行排序，确保执行顺序可控</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletContextInitializerBeans</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractCollection</span><span class="token operator">&lt;</span>ServletContextInitializer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> MultiValueMap<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> ServletContextInitializer<span class="token operator">></span> initializers<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最终排好序的ServletContextInitializer集合</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>ServletContextInitializer<span class="token operator">></span> sortedList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ServletContextInitializerBeans</span><span class="token punctuation">(</span>ListableBeanFactory beanFactory<span class="token punctuation">,</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ServletContextInitializer</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializerTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initializers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initializerTypes <span class="token operator">=</span> <span class="token punctuation">(</span>initializerTypes<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>initializerTypes<span class="token punctuation">)</span>                <span class="token operator">:</span> Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>ServletContextInitializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 收集所有类型为 ServletContextInitializer 的 bean</span>        <span class="token function">addServletContextInitializerBeans</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 适配其他剩下的web Bean组件（如 MultipartConfig、Servlet、Filter、Listener 等），适配成对应的ServletContextInitializer</span>        <span class="token function">addAdaptableBeans</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ServletContextInitializer排序</span>        List<span class="token operator">&lt;</span>ServletContextInitializer<span class="token operator">></span> sortedInitializers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initializers<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> value<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>AnnotationAwareOrderComparator<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sortedList <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>sortedInitializers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// debug日志记录</span>        <span class="token function">logMappings</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addServletContextInitializerBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> ServletContextInitializer initializer<span class="token punctuation">,</span>            ListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例化ServletRegistrationBean</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initializer <span class="token keyword">instanceof</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Servlet source <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ServletRegistrationBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> initializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addServletContextInitializerBean</span><span class="token punctuation">(</span>Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> initializer<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 处理FilterRegistrationBean</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initializer <span class="token keyword">instanceof</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Filter source <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>FilterRegistrationBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> initializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addServletContextInitializerBean</span><span class="token punctuation">(</span>Filter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> initializer<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 处理DelegatingFilterProxyRegistrationBean</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initializer <span class="token keyword">instanceof</span> <span class="token class-name">DelegatingFilterProxyRegistrationBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String source <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DelegatingFilterProxyRegistrationBean<span class="token punctuation">)</span> initializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTargetBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addServletContextInitializerBean</span><span class="token punctuation">(</span>Filter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> initializer<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 处理ServletListenerRegistrationBean</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initializer <span class="token keyword">instanceof</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            EventListener source <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ServletListenerRegistrationBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> initializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addServletContextInitializerBean</span><span class="token punctuation">(</span>EventListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> initializer<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 其它</span>            <span class="token function">addServletContextInitializerBean</span><span class="token punctuation">(</span>ServletContextInitializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> initializer<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span>                    initializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addAdaptableBeans</span><span class="token punctuation">(</span>ListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 只获取一个MultipartConfigElement Bean，将其适配为ServletRegistrationBean</span>        MultipartConfigElement multipartConfig <span class="token operator">=</span> <span class="token function">getMultipartConfig</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取未处理的Servlet Bean（即不是ServletRegistrationBean），将其适配为ServletRegistrationBean</span>        <span class="token function">addAsRegistrationBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBeanAdapter</span><span class="token punctuation">(</span>multipartConfig<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取未处理的Filter Bean（即不是FilterRegistrationBean），将其适配为 FilterRegistrationBean</span>        <span class="token function">addAsRegistrationBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> Filter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBeanAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 其它Servlet相关的Listener，适配为ServletListenerRegistrationBean</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> listenerType <span class="token operator">:</span> ServletListenerRegistrationBean<span class="token punctuation">.</span><span class="token function">getSupportedTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">addAsRegistrationBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> EventListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>EventListener<span class="token operator">></span><span class="token punctuation">)</span> listenerType<span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBeanAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tomcat启动"><a href="#Tomcat启动" class="headerlink" title="Tomcat启动"></a>Tomcat启动</h2><p>​在 <code>TomcatServletWebServerFactory#getWebServer</code> 方法中，最终会创建一个 <code>TomcatWebServer</code> 实例。在其构造方法中，会调用 <code>TomcatWebServer#initialize</code> 方法启动 Tomcat，但<strong>在启动前，Tomcat 会先注册一个 <code>LifecycleListener</code>。该监听器会在 <code>Tomcat</code> 的 <code>start</code> 阶段移除 <code>Service</code> 中的 <code>Connector</code>，以防止 Tomcat 过早绑定端口、过早接收请求</strong>。</p><p>​随后，<code>ServletWebServerFactory#getWebServer</code> 方法返回，SpringBoot 立即<strong>注册一个 <code>WebServerStartStopLifecycle</code> Bean</strong>。这个 Bean <strong>实现了 <code>SmartLifecycle</code> 接口，因此会在所有单例 Bean 完成初始化之后再触发其 <code>start()</code> 方法</strong></p><p>​<strong>WebServerStartStopLifecycle#start()方法会将之前移除的 <code>Connector</code> 重新注册回 <code>Service</code>，并真正启动 Connector，此时 Tomcat 才会绑定端口、开始对外提供服务</strong>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> WebServerException <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>monitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">addInstanceIdToEngineName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Context context <span class="token operator">=</span> <span class="token function">findContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加一个LifecycleListener，职责为在tomcat的start阶段移除Service里的connector组件，避免过早绑定端口</span>            context<span class="token punctuation">.</span><span class="token function">addLifecycleListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Lifecycle<span class="token punctuation">.</span>START_EVENT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">removeServiceConnectors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 启动tomcat</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// ...省略</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ...省略</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="端口绑定延迟"><a href="#端口绑定延迟" class="headerlink" title="端口绑定延迟"></a>端口绑定延迟</h3><p>​从上面的分析可以看出，Tomcat 本身的启动是在所有单例 Bean 实例化之前完成的，但真正的端口绑定（也就是 Connector 的启动）却是在所有单例 Bean 实例化之后才进行的。</p><p>​这其实挺好理解的，因为<strong>一旦端口对外暴露，整个服务就应该是就绪的状态。如果 Spring 的 Bean 还没初始化完，结果服务先收到了请求，就会出问题</strong></p><h3 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h3><p>​那问题来了：为什么不干脆把 Tomcat 的启动放在最后，等所有单例 Bean 都初始化完了再启动？这样就不用搞什么移除 Connector 的骚操作了，流程也简单些。</p><p>这个其实可以<strong>从依赖关系的角度来理解，也就是拓扑排序的思路</strong>来看整个流程：</p><p>​SpringBoot 提供了<strong>非常方便的方式来注册 Servlet、Filter 等 Web 组件，只要把它们声明成 Bean 就行了</strong>。但这些组件要想发挥作用，<strong>必须注册到 <code>StandardContext</code> 上</strong>。而 <code>StandardContext</code> 是嵌套在 Tomcat 启动过程中的，也就是说，Servlet 和 Filter 的初始化是依赖于 Tomcat 已经就绪的</p><p>​而我们都知道，Spring 的单例 Bean 初始化顺序是不可控的，如果你把 Tomcat 放在所有 Bean 都加载完再启动，那这些 Servlet、Filter 类型的 Bean 初始化时就找不到 <code>StandardContext</code>，初始化逻辑就会出错。所以核心逻辑其实很简单：<strong>既然 Servlet、Filter 等 Bean 依赖 Tomcat 的内部结构（比如 <code>StandardContext</code>），那就得确保 Tomcat 先初始化，Spring 在实例化相关 Bean 的时候才能正确地把这些组件注册进去</strong>。</p><h2 id="个人感想"><a href="#个人感想" class="headerlink" title="个人感想"></a>个人感想</h2><p>​综上，这一连串看起来很复杂的操作背后，其实都有深刻的理由。你可能觉得自己能想出更好的方案，但那往往是因为没站在全局思考，想清楚整个系统的依赖链和所有可能的场景。</p><p>​但我们不用为此感到沮丧，因为我们在思考，我们在尝试，我们不满足于能跑就行，我们在努力从不同角度拆解系统的结构与逻辑。最后，我们才能真正的驾驭它</p><h2 id="其它链接"><a href="#其它链接" class="headerlink" title="其它链接"></a>其它链接</h2><ul><li><a href="https://blog.shanzhao.site/categories/Tomcat/">Tomcat源码分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（四） — Condition相关原理</title>
      <link href="/2022-04-21/springboot-conditional-zhu-jie-xiang-guan-yuan-li/"/>
      <url>/2022-04-21/springboot-conditional-zhu-jie-xiang-guan-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>​基于Spring Boot 2.7.x 版本，深入分析了<strong>OnBean、OnClass、OnProperty这三类常见Condition的源码实现</strong>，在此基础上，探讨了 <code>@Conditional</code> 注解的<strong>组合用法</strong>（<strong>与、或、非</strong>逻辑）的处理机制。</p><p>​同时，分析了<strong>Condition匹配结果的debug支持</strong>实现，以及 <code>ConfigurationClassPostProcessor</code> 中<strong>Condition判断的触发流程</strong>，重点关注其<strong>通过 <code>importedBy</code> 链支持的 <code>TrackedConditionEvaluator</code> 回溯与剪枝优化策略</strong></p><p>​最后，提供了逻辑<strong>或</strong><code>@Conditional</code>组合与 <strong>importedBy路径 skip 判定的测试用例</strong>，以验证整体逻辑的正确性</p><span id="more"></span><h2 id="Conditional注解"><a href="#Conditional注解" class="headerlink" title="Conditional注解"></a>Conditional注解</h2><p>​项目中<strong>常用的@ConditionalOnBean，@ConditionalOnClass，@ConditionalOnProperty等注解都有一个共同的元注解@Conditional</strong>，Spring通过这个<strong>元注解@Conditional中指定的<code>Condition</code>类来判断某个配置类或Bean 是否应该被加载</strong>。<code>Condition</code>接口定义如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​其中参数作用如下：</p><ul><li><strong>ConditionContext</strong>：提供**<code>Condition</code>评估所需的上下文环境**。包括BeanFactory，BeanDefinitionRegistry和Environment等组件</li><li><strong>AnnotatedTypeMetadata</strong>：当前@Conditional所标注的类或方法上的所有注解元信息</li></ul><p>我这里只分析了常用的bean，properties，和class相关的<code>Condition</code>。套路都一样，剩下的可自行分析</p><h3 id="OnBeanCondition"><a href="#OnBeanCondition" class="headerlink" title="OnBeanCondition"></a>OnBeanCondition</h3><p>​<strong>是@ConditionalOnBean、@ConditionalOnSingleCandidate、@ConditionalOnMissingBean</strong>专用的<code>Condition</code>实现类，核心作用是根据注解中指定的 <strong>type &#x2F; name &#x2F; annotation</strong> 等参数，判断<strong>当前容器中是否存在匹配的 Bean，并根据注解功能来解析结果</strong></p><h4 id="Spec"><a href="#Spec" class="headerlink" title="Spec"></a>Spec</h4><p>​是<strong>对上述三个注解的统一解析封装结构，用于抽象出注解中的条件信息</strong>，每一个配置类或方法上存在的相关注解，最终都会被解析为一个 <code>Spec</code> 实例，其具体参数如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Spec</span><span class="token operator">&lt;</span>A <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ClassLoader classLoader<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> annotationType<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> names<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> types<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> annotations<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> ignoredTypes<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> parameterizedContainers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> SearchStrategy strategy<span class="token punctuation">;</span>    <span class="token function">Spec</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">,</span> MergedAnnotations annotations<span class="token punctuation">,</span>            Class<span class="token operator">&lt;</span>A<span class="token operator">></span> annotationType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attributes <span class="token operator">=</span> annotations<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>annotationType<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>MergedAnnotationPredicates<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span>MergedAnnotation<span class="token operator">:</span><span class="token operator">:</span>getMetaTypes<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>MergedAnnotationCollectors<span class="token punctuation">.</span><span class="token function">toMultiValueMap</span><span class="token punctuation">(</span>Adapt<span class="token punctuation">.</span>CLASS_TO_STRING<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MergedAnnotation<span class="token operator">&lt;</span>A<span class="token operator">></span> annotation <span class="token operator">=</span> annotations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>annotationType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>classLoader <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>annotationType <span class="token operator">=</span> annotationType<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// name属性解析，即beanName</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token function">extract</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// annotation属性，即bean上的注解</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>annotations <span class="token operator">=</span> <span class="token function">extract</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> <span class="token string">"annotation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ignoredTypes <span class="token operator">=</span> <span class="token function">extract</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> <span class="token string">"ignored"</span><span class="token punctuation">,</span> <span class="token string">"ignoredType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parameterizedContainers <span class="token operator">=</span> <span class="token function">resolveWhenPossible</span><span class="token punctuation">(</span><span class="token function">extract</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> <span class="token string">"parameterizedContainer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">,</span> SearchStrategy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// value和type解析，即bean class</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> types <span class="token operator">=</span> <span class="token function">extractTypes</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanTypeDeductionException deductionException <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 未配置value和type时，对@Bean方法使用其returnType作为types</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                types <span class="token operator">=</span> <span class="token function">deducedBeanType</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanTypeDeductionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                deductionException <span class="token operator">=</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>types <span class="token operator">=</span> types<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 校验types，names，annotations至少要有存在一个</span>        <span class="token function">validate</span><span class="token punctuation">(</span>deductionException<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="MatchResult"><a href="#MatchResult" class="headerlink" title="MatchResult"></a>MatchResult</h4><p>​表示<strong>某个 <code>Spec</code> 在指定容器上下文中的匹配结果</strong>，不同类型的注解会根据自身定义对 <code>MatchResult</code> 的结果进行判断，来决定是否匹配成功</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MatchResult</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * annotation对应的bean集合（在容器里）     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">>></span> matchedAnnotations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在容器里的beanName     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> matchedNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * type对应的bean集合（在容器里）     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">>></span> matchedTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * annotation对应的bean不在容器中     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> unmatchedAnnotations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * beanName对应的bean不在容器中     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> unmatchedNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * type对应的bean不在容器中     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> unmatchedTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> namesOfAllMatches <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="getMatchingBeans"><a href="#getMatchingBeans" class="headerlink" title="getMatchingBeans"></a>getMatchingBeans</h4><p>​<strong>getMatchingBeans是根据 <code>Spec</code> 提供的条件，在容器里找出符合要求 Bean 的核心方法</strong>。可通过如下代码总结出OnBeanCondition支持的核心匹配能力包括：</p><ul><li>按<strong>type、beanName、annotation搜索对应的bean是否存在</strong></li><li>支持<strong>搜索父容器（</strong>SpringCloud中存在）</li><li>支持<strong>泛型</strong></li><li>支持<strong>忽略指定type的bean</strong>（等价于搜索结果会remove掉这些ignoreType的bean）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> MatchResult <span class="token function">getMatchingBeans</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> Spec<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> spec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ClassLoader classLoader <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 父容器搜索判断（比如SpringCloud环境下存在父容器）</span>    <span class="token keyword">boolean</span> considerHierarchy <span class="token operator">=</span> spec<span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 泛型判断支持（示例：@ConditionalOnMissingFilterBean）</span>    Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> parameterizedContainers <span class="token operator">=</span> spec<span class="token punctuation">.</span><span class="token function">getParameterizedContainers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>spec<span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> SearchStrategy<span class="token punctuation">.</span>ANCESTORS<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanFactory parent <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span>                <span class="token string">"Unable to use SearchStrategy.ANCESTORS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory <span class="token operator">=</span> <span class="token punctuation">(</span>ConfigurableListableBeanFactory<span class="token punctuation">)</span> parent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 匹配结果</span>    MatchResult result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MatchResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取需要被忽略的bean的beanName</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> beansIgnoredByType <span class="token operator">=</span> <span class="token function">getNamesOfBeansIgnoredByType</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> considerHierarchy<span class="token punctuation">,</span>            spec<span class="token punctuation">.</span><span class="token function">getIgnoredTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameterizedContainers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ----------------- 处理类型匹配部分 ------------------</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String type <span class="token operator">:</span> spec<span class="token punctuation">.</span><span class="token function">getTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取类型对应的beanName</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> typeMatches <span class="token operator">=</span> <span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> considerHierarchy<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> type<span class="token punctuation">,</span>                parameterizedContainers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 移除被忽略的 Bean 以及scope的代理bean</span>        typeMatches<span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> beansIgnoredByType<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token operator">||</span> ScopedProxyUtils<span class="token punctuation">.</span><span class="token function">isScopedTarget</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>typeMatches<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// type过滤后没有对应的bean在容器中，记录为不匹配</span>            result<span class="token punctuation">.</span><span class="token function">recordUnmatchedType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">recordMatchedType</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> typeMatches<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ----------------- 处理注解匹配部分 ------------------</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String annotation <span class="token operator">:</span> spec<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取被指定注解标记的beanName</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> annotationMatches <span class="token operator">=</span> <span class="token function">getBeanNamesForAnnotation</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> annotation<span class="token punctuation">,</span>                considerHierarchy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 移除掉被忽略的 bean</span>        annotationMatches<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>beansIgnoredByType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotationMatches<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// annotation过滤后没有对应的bean在容器中，记录为不匹配</span>            result<span class="token punctuation">.</span><span class="token function">recordUnmatchedAnnotation</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">recordMatchedAnnotation</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> annotationMatches<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ----------------- 处理按beanName匹配部分 ------------------</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> spec<span class="token punctuation">.</span><span class="token function">getNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beansIgnoredByType<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">containsBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> considerHierarchy<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 没被忽略，切在容器中存在这个beanName。匹配命中</span>            result<span class="token punctuation">.</span><span class="token function">recordMatchedName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 匹配失败</span>            result<span class="token punctuation">.</span><span class="token function">recordUnmatchedName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="getMatchOutcome"><a href="#getMatchOutcome" class="headerlink" title="getMatchOutcome"></a>getMatchOutcome</h4><p>​getMatchOutcome会拿 <code>Spec</code> 的匹配结果，结合具体是哪种 <code>@ConditionalOn*</code> 注解，来决定条件是否满足。我这里对getMatchOutcome方法按注解拆分一下，不影响其逻辑</p><h5 id="ConditionalOnBean"><a href="#ConditionalOnBean" class="headerlink" title="@ConditionalOnBean"></a>@ConditionalOnBean</h5><p>​要求<strong>所有指定的参数都必须存在对应的bean（即全匹配）</strong>。如果有任意一个参数没有对应的bean存在于指定容器中，则不匹配，返回noMatch</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ConditionOutcome <span class="token function">getMatchOutcome</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ConditionMessage matchMessage <span class="token operator">=</span> ConditionMessage<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MergedAnnotations annotations <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>annotations<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span>ConditionalOnBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Spec<span class="token operator">&lt;</span>ConditionalOnBean<span class="token operator">></span> spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spec</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> metadata<span class="token punctuation">,</span> annotations<span class="token punctuation">,</span> ConditionalOnBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 进行匹配</span>        MatchResult matchResult <span class="token operator">=</span> <span class="token function">getMatchingBeans</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> spec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchResult<span class="token punctuation">.</span><span class="token function">isAllMatched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 任意一个条件没匹配到bean，则返回noMatch</span>            String reason <span class="token operator">=</span> <span class="token function">createOnBeanNoMatchReason</span><span class="token punctuation">(</span>matchResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span>spec<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">because</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        matchMessage <span class="token operator">=</span> spec<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span>matchMessage<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">found</span><span class="token punctuation">(</span><span class="token string">"bean"</span><span class="token punctuation">,</span> <span class="token string">"beans"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>Style<span class="token punctuation">.</span>QUOTE<span class="token punctuation">,</span> matchResult<span class="token punctuation">.</span><span class="token function">getNamesOfAllMatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// matched</span>    <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>matchMessage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ConditionalOnSingleCandidate"><a href="#ConditionalOnSingleCandidate" class="headerlink" title="@ConditionalOnSingleCandidate"></a>@ConditionalOnSingleCandidate</h5><p>​校验<strong>指定参数对应的bean在容器中只存在一个bean或一个primary bean</strong>，所以@ConditionalOnSingleCandidate的参数也是单个的，仅支持type匹配</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ConditionOutcome <span class="token function">getMatchOutcome</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ConditionMessage matchMessage <span class="token operator">=</span> ConditionMessage<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MergedAnnotations annotations <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">isAnnotated</span><span class="token punctuation">(</span>ConditionalOnSingleCandidate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Spec<span class="token operator">&lt;</span>ConditionalOnSingleCandidate<span class="token operator">></span> spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleCandidateSpec</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> metadata<span class="token punctuation">,</span> annotations<span class="token punctuation">)</span><span class="token punctuation">;</span>        MatchResult matchResult <span class="token operator">=</span> <span class="token function">getMatchingBeans</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> spec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchResult<span class="token punctuation">.</span><span class="token function">isAllMatched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span>spec<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">didNotFind</span><span class="token punctuation">(</span><span class="token string">"any beans"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> allBeans <span class="token operator">=</span> matchResult<span class="token punctuation">.</span><span class="token function">getNamesOfAllMatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>allBeans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只匹配到一个bean，则matched</span>            matchMessage <span class="token operator">=</span> spec<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span>matchMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">found</span><span class="token punctuation">(</span><span class="token string">"a single bean"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>Style<span class="token punctuation">.</span>QUOTE<span class="token punctuation">,</span> allBeans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 多个bean，再校验是否只有一个primary bean</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> primaryBeans <span class="token operator">=</span> <span class="token function">getPrimaryBeans</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> allBeans<span class="token punctuation">,</span>                    spec<span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> SearchStrategy<span class="token punctuation">.</span>ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>primaryBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> ConditionOutcome                        <span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span>spec<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">didNotFind</span><span class="token punctuation">(</span><span class="token string">"a primary bean from beans"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>Style<span class="token punctuation">.</span>QUOTE<span class="token punctuation">,</span> allBeans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>primaryBeans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> ConditionOutcome                        <span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span>spec<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">found</span><span class="token punctuation">(</span><span class="token string">"multiple primary beans"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>Style<span class="token punctuation">.</span>QUOTE<span class="token punctuation">,</span> primaryBeans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            matchMessage <span class="token operator">=</span> spec<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span>matchMessage<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">found</span><span class="token punctuation">(</span><span class="token string">"a single primary bean '"</span> <span class="token operator">+</span> primaryBeans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' from beans"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>Style<span class="token punctuation">.</span>QUOTE<span class="token punctuation">,</span> allBeans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// matched</span>    <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>matchMessage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ConditionalOnMissingBean"><a href="#ConditionalOnMissingBean" class="headerlink" title="@ConditionalOnMissingBean"></a>@ConditionalOnMissingBean</h5><p>和@ConditionalOnBean完全相反，<strong>所有参数都不能存在对应的bean在指定容器里（全不匹配）才matched</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ConditionOutcome <span class="token function">getMatchOutcome</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ConditionMessage matchMessage <span class="token operator">=</span> ConditionMessage<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MergedAnnotations annotations <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// -------------- @ConditionalOnMissingBean 注解处理 --------------</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">isAnnotated</span><span class="token punctuation">(</span>ConditionalOnMissingBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Spec<span class="token operator">&lt;</span>ConditionalOnMissingBean<span class="token operator">></span> spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spec</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> metadata<span class="token punctuation">,</span> annotations<span class="token punctuation">,</span>                ConditionalOnMissingBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MatchResult matchResult <span class="token operator">=</span> <span class="token function">getMatchingBeans</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> spec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matchResult<span class="token punctuation">.</span><span class="token function">isAnyMatched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 任意一个条件匹配到了bean，apply注解逻辑返回noMatch</span>            String reason <span class="token operator">=</span> <span class="token function">createOnMissingBeanNoMatchReason</span><span class="token punctuation">(</span>matchResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span>spec<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">because</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        matchMessage <span class="token operator">=</span> spec<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span>matchMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">didNotFind</span><span class="token punctuation">(</span><span class="token string">"any beans"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// matched</span>    <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>matchMessage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="OnClassCondition"><a href="#OnClassCondition" class="headerlink" title="OnClassCondition"></a>OnClassCondition</h3><p>​<strong>被@ConditionalOnClass和@ConditionalOnMissingClass使用，用来判断指定的class是否存在于指定ClassLoader的classpath里</strong></p><h4 id="ClassNameFilter"><a href="#ClassNameFilter" class="headerlink" title="ClassNameFilter"></a>ClassNameFilter</h4><p>两个Filter，<strong>PRESENT</strong>和<strong>MISSING</strong>，内部<strong>通过Class#forName方法</strong>判断指定的class能否被指定的ClassLoader加载（即在其classpath下）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">enum</span> ClassNameFilter <span class="token punctuation">{</span>    PRESENT <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">isPresent</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    MISSING <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isPresent</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> ClassLoader classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPresent</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            classLoader <span class="token operator">=</span> ClassUtils<span class="token punctuation">.</span><span class="token function">getDefaultClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用Class.forName检测class是否存在。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不存的在会抛ClassNotFoundException，被异常捕获返回false</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="getMatchOutcome-1"><a href="#getMatchOutcome-1" class="headerlink" title="getMatchOutcome"></a>getMatchOutcome</h4><h5 id="ConditionalOnClass"><a href="#ConditionalOnClass" class="headerlink" title="@ConditionalOnClass"></a>@ConditionalOnClass</h5><p>利用ClassNameFilter.MISSING校验<strong>指定的class都必须存在</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ConditionOutcome <span class="token function">getMatchOutcome</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ClassLoader classLoader <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ConditionMessage matchMessage <span class="token operator">=</span> ConditionMessage<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析@ConditionalOnClass的value和name</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> onClasses <span class="token operator">=</span> <span class="token function">getCandidates</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> ConditionalOnClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>onClasses <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ClassNameFilter.MISSING过滤器得到的结果表示 在指定ClassLoader下不存在对应的class</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> missing <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>onClasses<span class="token punctuation">,</span> ClassNameFilter<span class="token punctuation">.</span>MISSING<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>missing<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 任意一个class不存在，不满足@ConditionalOnClass逻辑，返回noMatch</span>            <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span>ConditionMessage<span class="token punctuation">.</span><span class="token function">forCondition</span><span class="token punctuation">(</span>ConditionalOnClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">didNotFind</span><span class="token punctuation">(</span><span class="token string">"required class"</span><span class="token punctuation">,</span> <span class="token string">"required classes"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>Style<span class="token punctuation">.</span>QUOTE<span class="token punctuation">,</span> missing<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        matchMessage <span class="token operator">=</span> matchMessage<span class="token punctuation">.</span><span class="token function">andCondition</span><span class="token punctuation">(</span>ConditionalOnClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">found</span><span class="token punctuation">(</span><span class="token string">"required class"</span><span class="token punctuation">,</span> <span class="token string">"required classes"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>Style<span class="token punctuation">.</span>QUOTE<span class="token punctuation">,</span> <span class="token function">filter</span><span class="token punctuation">(</span>onClasses<span class="token punctuation">,</span> ClassNameFilter<span class="token punctuation">.</span>PRESENT<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>matchMessage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ConditionalOnMissingClass"><a href="#ConditionalOnMissingClass" class="headerlink" title="@ConditionalOnMissingClass"></a>@ConditionalOnMissingClass</h5><p>利用ClassNameFilter.PRESENT校验<strong>指定的class都不能存在</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ConditionOutcome <span class="token function">getMatchOutcome</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ClassLoader classLoader <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ConditionMessage matchMessage <span class="token operator">=</span> ConditionMessage<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析@ConditionalOnMissingClass的value和name</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> onMissingClasses <span class="token operator">=</span> <span class="token function">getCandidates</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> ConditionalOnMissingClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>onMissingClasses <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ClassNameFilter.PRESENT过滤器得到的结果表示 在指定ClassLoader下存在对应的class</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> present <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>onMissingClasses<span class="token punctuation">,</span> ClassNameFilter<span class="token punctuation">.</span>PRESENT<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>present<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 任意一个class存在，不满足@ConditionalOnMissingClass逻辑，返回noMatch</span>            <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span>ConditionMessage<span class="token punctuation">.</span><span class="token function">forCondition</span><span class="token punctuation">(</span>ConditionalOnMissingClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">found</span><span class="token punctuation">(</span><span class="token string">"unwanted class"</span><span class="token punctuation">,</span> <span class="token string">"unwanted classes"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>Style<span class="token punctuation">.</span>QUOTE<span class="token punctuation">,</span> present<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        matchMessage <span class="token operator">=</span> matchMessage<span class="token punctuation">.</span><span class="token function">andCondition</span><span class="token punctuation">(</span>ConditionalOnMissingClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">didNotFind</span><span class="token punctuation">(</span><span class="token string">"unwanted class"</span><span class="token punctuation">,</span> <span class="token string">"unwanted classes"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>Style<span class="token punctuation">.</span>QUOTE<span class="token punctuation">,</span> <span class="token function">filter</span><span class="token punctuation">(</span>onMissingClasses<span class="token punctuation">,</span> ClassNameFilter<span class="token punctuation">.</span>MISSING<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>matchMessage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="OnPropertyCondition"><a href="#OnPropertyCondition" class="headerlink" title="OnPropertyCondition"></a>OnPropertyCondition</h3><p>被@ConditionalOnProperty使用，可根据指定的属性判断是否存在对应的value在Spring的Environment中</p><h4 id="Spec-1"><a href="#Spec-1" class="headerlink" title="Spec"></a>Spec</h4><p>是对@ConditionalOnProperty注解的统一解析封装结构，并通过内部的collectProperties方法进行配置匹配</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Spec</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String prefix<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String havingValue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> names<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> matchIfMissing<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">collectProperties</span><span class="token punctuation">(</span>PropertyResolver resolver<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> missing<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> nonMatching<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对每个属性添加prefix</span>            String key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prefix <span class="token operator">+</span> name<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolver<span class="token punctuation">.</span><span class="token function">containsProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 有这个属性，根据value是否匹配校验</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isMatch</span><span class="token punctuation">(</span>resolver<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>havingValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nonMatching<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 没这个属性，则根据matchIfMissing来判断</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>matchIfMissing<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    missing<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> String requiredValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>requiredValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> requiredValue<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// havingValue未配值时</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token string">"false"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="getMatchOutcome-2"><a href="#getMatchOutcome-2" class="headerlink" title="getMatchOutcome"></a>getMatchOutcome</h4><p>只关注内部核心determineOutcome方法，并根据其对配置匹配结果的处理，可总结出如下规则（<strong>满足任意规则都会返回noMatch</strong>）：</p><ul><li><strong>不存在对应配置key时</strong>：<strong>matchIfMissing&#x3D;false</strong></li><li><strong>存在对应配置key时</strong>：<strong>其value和havingValue不匹配</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> ConditionOutcome <span class="token function">determineOutcome</span><span class="token punctuation">(</span>AnnotationAttributes annotationAttributes<span class="token punctuation">,</span> PropertyResolver resolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Spec spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spec</span><span class="token punctuation">(</span>annotationAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> missingProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> nonMatchingProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    spec<span class="token punctuation">.</span><span class="token function">collectProperties</span><span class="token punctuation">(</span>resolver<span class="token punctuation">,</span> missingProperties<span class="token punctuation">,</span> nonMatchingProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>missingProperties<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 没对应的属性，且matchIfMissing=false。返回noMatch</span>        <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span>ConditionMessage<span class="token punctuation">.</span><span class="token function">forCondition</span><span class="token punctuation">(</span>ConditionalOnProperty<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> spec<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">didNotFind</span><span class="token punctuation">(</span><span class="token string">"property"</span><span class="token punctuation">,</span> <span class="token string">"properties"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>Style<span class="token punctuation">.</span>QUOTE<span class="token punctuation">,</span> missingProperties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nonMatchingProperties<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 有对应的属性，但其value不匹配。也返回noMatch</span>        <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span>ConditionMessage<span class="token punctuation">.</span><span class="token function">forCondition</span><span class="token punctuation">(</span>ConditionalOnProperty<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> spec<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">found</span><span class="token punctuation">(</span><span class="token string">"different value in property"</span><span class="token punctuation">,</span> <span class="token string">"different value in properties"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>Style<span class="token punctuation">.</span>QUOTE<span class="token punctuation">,</span> nonMatchingProperties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ConditionOutcome            <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>ConditionMessage<span class="token punctuation">.</span><span class="token function">forCondition</span><span class="token punctuation">(</span>ConditionalOnProperty<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> spec<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">because</span><span class="token punctuation">(</span><span class="token string">"matched"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Conditional组合"><a href="#Conditional组合" class="headerlink" title="Conditional组合"></a>Conditional组合</h2><p>​前面介绍的条件注解默认是与逻辑：多个 <code>@Conditional</code> 注解应用在同一个配置类或方法上时，只有全部满足，才会注册对应的 Bean</p><p>​但在某些场景下，我们可能需要<strong>更复杂的组合判断逻辑（任意满足 -&gt; 或，全部不满足 -&gt; 非）</strong>。SpringBoot 为此提供了一个通用的组合条件抽象工具：<code>AbstractNestedCondition</code>，并基于它提供了三种常用组合实现</p><h3 id="AbstractNestedCondition"><a href="#AbstractNestedCondition" class="headerlink" title="AbstractNestedCondition"></a>AbstractNestedCondition</h3><p>这是一个抽象类，SpringBoot 用它来实现条件组合的能力。它的核心逻辑为：</p><ul><li>查找该当前<code>Condition</code>类中所有的<strong>内部类</strong></li><li>对内部类上定义的 <code>Condition</code> 逐个执行 <code>matches</code> 匹配</li><li>收集<strong>每个内部类整体的匹配结果</strong>（<strong>内部类上多个 <code>Condition</code> 是与逻辑</strong>）</li><li>最终<strong>调用模板方法 <code>getFinalMatchOutcome()</code>，由子类决定这些匹配结果是否通过（实现“与”、“或”、“非”逻辑）</strong></li></ul><p>​需要注意的是在收集某个内部类的ConditionOutcome结果时调用了getUltimateOutcome这个方法，其<strong>会对内部类所有的ConditionOutcome做与逻辑判断并返回成一个ConditionOutcome</strong>。因此要想实现更细粒度的组合，应<strong>将每个Conditional注解拆分到不同的内部类中</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractNestedCondition</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootCondition</span> <span class="token keyword">implements</span> <span class="token class-name">ConfigurationCondition</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ConfigurationPhase configurationPhase<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ConfigurationPhase <span class="token function">getConfigurationPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configurationPhase<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ConditionOutcome <span class="token function">getMatchOutcome</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String className <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构造内部条件集合（每个内部类及其 @Condition）</span>        MemberConditions memberConditions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberConditions</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configurationPhase<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取所有内部条件的匹配结果</span>        MemberMatchOutcomes memberOutcomes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberMatchOutcomes</span><span class="token punctuation">(</span>memberConditions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 委托给子类决定最终结果（与、或、非逻辑）</span>        <span class="token keyword">return</span> <span class="token function">getFinalMatchOutcome</span><span class="token punctuation">(</span>memberOutcomes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 留给子类实现的逻辑，参数为内部所有 Condition 的匹配结果集合。     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> ConditionOutcome <span class="token function">getFinalMatchOutcome</span><span class="token punctuation">(</span>MemberMatchOutcomes memberOutcomes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MemberMatchOutcomes</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 全部结果</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>ConditionOutcome<span class="token operator">></span> all<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 匹配成功的</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>ConditionOutcome<span class="token operator">></span> matches<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 匹配失败的</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>ConditionOutcome<span class="token operator">></span> nonMatches<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MemberConditions</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> ConditionContext context<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> MetadataReaderFactory readerFactory<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>AnnotationMetadata<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Condition<span class="token operator">>></span> memberConditions<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// key：内部类的注解元数据；value：其上声明的所有 Condition 实例</span>        <span class="token function">MemberConditions</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> ConfigurationPhase phase<span class="token punctuation">,</span> String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>readerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMetadataReaderFactory</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取这个className所有的内部类</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> members <span class="token operator">=</span> <span class="token function">getMetadata</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMemberClassNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化内部类上的所有Condition</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>memberConditions <span class="token operator">=</span> <span class="token function">getMemberConditions</span><span class="token punctuation">(</span>members<span class="token punctuation">,</span> phase<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 进行Condition的匹配并返回结果</span>        List<span class="token operator">&lt;</span>ConditionOutcome<span class="token operator">></span> <span class="token function">getMatchOutcomes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>ConditionOutcome<span class="token operator">></span> outcomes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理每个内部类对应的所有Condition</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>memberConditions<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> conditions<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> outcomes                    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MemberOutcomes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> metadata<span class="token punctuation">,</span> conditions<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUltimateOutcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>outcomes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MemberOutcomes</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> ConditionContext context<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> AnnotationMetadata metadata<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>ConditionOutcome<span class="token operator">></span> outcomes<span class="token punctuation">;</span>        <span class="token function">MemberOutcomes</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotationMetadata metadata<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Condition<span class="token operator">></span> conditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>metadata <span class="token operator">=</span> metadata<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>outcomes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>conditions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Condition condition <span class="token operator">:</span> conditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>outcomes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getConditionOutcome</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> ConditionOutcome <span class="token function">getConditionOutcome</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span> Condition condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token keyword">instanceof</span> <span class="token class-name">SpringBootCondition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SpringBootCondition<span class="token punctuation">)</span> condition<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMatchOutcome</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConditionOutcome</span><span class="token punctuation">(</span>condition<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">,</span> ConditionMessage<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 将某个内部类中所有 Condition 的匹配结果整合为一个最终结果：         * - 全部匹配才算 match         * - 否则 noMatch         */</span>        ConditionOutcome <span class="token function">getUltimateOutcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ConditionMessage<span class="token punctuation">.</span>Builder message <span class="token operator">=</span> ConditionMessage                    <span class="token punctuation">.</span><span class="token function">forCondition</span><span class="token punctuation">(</span><span class="token string">"NestedCondition on "</span> <span class="token operator">+</span> ClassUtils<span class="token punctuation">.</span><span class="token function">getShortName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>outcomes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ConditionOutcome outcome <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>outcomes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConditionOutcome</span><span class="token punctuation">(</span>outcome<span class="token punctuation">.</span><span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">because</span><span class="token punctuation">(</span>outcome<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            List<span class="token operator">&lt;</span>ConditionOutcome<span class="token operator">></span> match <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>ConditionOutcome<span class="token operator">></span> nonMatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>ConditionOutcome outcome <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>outcomes<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span>outcome<span class="token punctuation">.</span><span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> match <span class="token operator">:</span> nonMatch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>outcome<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nonMatch<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">found</span><span class="token punctuation">(</span><span class="token string">"matching nested conditions"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">found</span><span class="token punctuation">(</span><span class="token string">"non-matching nested conditions"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>nonMatch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AllNestedConditions"><a href="#AllNestedConditions" class="headerlink" title="AllNestedConditions"></a>AllNestedConditions</h4><p>​内部逻辑很简单就不展示源码了，就是个与逻辑，全部的内部类match才算match。它的逻辑其实和这个Conditional注解一起用在某个配置类上一样，都是与逻辑。</p><p>​但SpringBoot还是提供了这个类，试想一下，现在有个极其复杂的与逻辑Conditional注解组合要用在多个配置类上，我们就可以用AllNestedConditions来组合这些Conditional注解，<strong>将公共的功能抽出来作为一个共享的逻辑模块，就是一种模块化的思想，不论是还是功能熟悉还是后期维护，都更加的方便</strong></p><h4 id="AnyNestedCondition"><a href="#AnyNestedCondition" class="headerlink" title="AnyNestedCondition"></a>AnyNestedCondition</h4><p>​只要<strong>任意一个内部类</strong>的条件匹配，就返回 <code>match</code>，实现的是或逻辑。是<strong>最常用的一个Condition组合工具</strong></p><p>​正如前面提到的，内部类的ConditionOutcome计算是与逻辑，所以在使用AnyNestedCondition时，<strong>建议每个内部类只写一个 <code>@Conditional</code> 注解</strong></p><h4 id="NoneNestedConditions"><a href="#NoneNestedConditions" class="headerlink" title="NoneNestedConditions"></a>NoneNestedConditions</h4><p>​只有<strong>所有内部类</strong>的条件都<strong>不匹配</strong>时，才返回 <code>match</code>，相当于<strong>非逻辑</strong></p><h2 id="Report和Listener"><a href="#Report和Listener" class="headerlink" title="Report和Listener"></a>Report和Listener</h2><p>​在SpringBoot中可以通过如下配置，开启<code>Condition</code>的匹配详情日志。其对于排查<code>Condition</code>未生效的问题非常有帮助，是调试 SpringBoot 自动装配机制的重要手段。其原理主要依赖于<strong>ConditionEvaluationReport（ConditionOutcome缓存）和ConditionEvaluationReportLoggingListener（ConditionOutcome日志打印）</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">org.springframework.boot.autoconfigure.logging</span><span class="token punctuation">:</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ConditionEvaluationReport"><a href="#ConditionEvaluationReport" class="headerlink" title="ConditionEvaluationReport"></a>ConditionEvaluationReport</h3><p>在 Spring Boot 中，所有的 <code>Condition</code> 实现类都继承自抽象类 <code>SpringBootCondition</code>。其中：</p><ul><li><strong>各个子类通过实现 <code>getMatchOutcome()</code> 模板方法，完成具体的匹配逻辑判断</strong>，并生成标准化的 <code>ConditionOutcome</code>（用于描述匹配结果及原因）</li><li><code>SpringBootCondition</code> 会将这些 <code>ConditionOutcome</code> <strong>缓存到ConditionEvaluationReport</strong>这个单例bean中</li></ul><p>​这个 <code>ConditionEvaluationReport</code> 用于汇总记录所有条件的匹配结果。SpringBoot 的日志监听器（<code>ConditionEvaluationReportLoggingListener</code>）正是基于这个 bean，在日志级别为 <code>debug</code> 时，输出详细的自动配置条件匹配情况</p><h3 id="ConditionEvaluationReportLoggingListener"><a href="#ConditionEvaluationReportLoggingListener" class="headerlink" title="ConditionEvaluationReportLoggingListener"></a>ConditionEvaluationReportLoggingListener</h3><p>​这是一个配置在 spring.factories 里的 ApplicationContextInitializer，启动时会往容器里注册一个 ConditionEvaluationReportListener，专门<strong>监听 ContextRefreshedEvent 和 ApplicationFailedEvent 事件</strong></p><p>​一旦这两个事件有一个触发，它就会根据配置的 <strong>logLevelForReport（默认是 DEBUG）把所有<code>Condition</code>匹配情况打印出来</strong>。打印的数据来自 ConditionEvaluationReport 这个 Bean 里缓存的内容，也就是每个配置类的@Conditional 条件到底有没有命中的原因</p><h2 id="Condition触发机制"><a href="#Condition触发机制" class="headerlink" title="Condition触发机制"></a>Condition触发机制</h2><h3 id="ConditionEvaluator"><a href="#ConditionEvaluator" class="headerlink" title="ConditionEvaluator"></a>ConditionEvaluator</h3><p>​<code>ConditionEvaluator</code> 是匹配某个配置类或 <code>@Bean</code> 方法上 <code>Condition</code> 条件注解的核心入口。它依据传入的 <code>ConfigurationPhase</code> 参数来判断当前所处的处理阶段（ <strong>解析配置类</strong> 或 <strong>注册 Bean</strong> 阶段）</p><p>其核心方法shouldSkip逻辑如下：</p><ul><li><strong>实例化并排序</strong>该元素上声明的所有 <code>Condition</code> 类</li><li><strong>匹配当前phase或不存在phase</strong> 的 <code>Condition</code><ul><li>匹配过程中，<strong>只要有一个 <code>Condition</code> 不满足</strong>，即返回 <code>true</code> 表示需要跳过，该元素将不会被进一步处理（不再解析配置或注册Bean）</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ConditionEvaluator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> AnnotatedTypeMetadata metadata<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ConfigurationPhase phase<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没有@Conditional注解，则表示不需要skip</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>metadata<span class="token punctuation">.</span><span class="token function">isAnnotated</span><span class="token punctuation">(</span>Conditional<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解析phase，决定当前配置类是在哪个阶段应用的Condition（解析阶段 or 注册bean阶段）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata <span class="token keyword">instanceof</span> <span class="token class-name">AnnotationMetadata</span> <span class="token operator">&amp;&amp;</span>                    ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">isConfigurationCandidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AnnotationMetadata<span class="token punctuation">)</span> metadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> ConfigurationPhase<span class="token punctuation">.</span>PARSE_CONFIGURATION<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> ConfigurationPhase<span class="token punctuation">.</span>REGISTER_BEAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Condition<span class="token operator">></span> conditions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> conditionClasses <span class="token operator">:</span> <span class="token function">getConditionClasses</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String conditionClass <span class="token operator">:</span> conditionClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 实例化Condition</span>                Condition condition <span class="token operator">=</span> <span class="token function">getCondition</span><span class="token punctuation">(</span>conditionClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                conditions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 根据@Order排序Condition</span>        AnnotationAwareOrderComparator<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>conditions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Condition condition <span class="token operator">:</span> conditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断 Condition 的作用阶段</span>            ConfigurationPhase requiredPhase <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurationCondition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                requiredPhase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ConfigurationCondition<span class="token punctuation">)</span> condition<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfigurationPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 不存在phase（即不论什么作用阶段，都需要进行匹配）或phase等于指定的阶段才进行匹配</span>            <span class="token comment" spellcheck="true">// 但凡任意一个Condition匹配失败，则返回true，表示需要skip</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>requiredPhase <span class="token operator">==</span> null <span class="token operator">||</span> requiredPhase <span class="token operator">==</span> phase<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>condition<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TrackedConditionEvaluator"><a href="#TrackedConditionEvaluator" class="headerlink" title="TrackedConditionEvaluator"></a>TrackedConditionEvaluator</h3><p>​这是 Spring 在<strong>注册配置类 Bean 之前</strong>，用于评估 <code>@Conditional</code> 是否匹配的辅助工具。与普通 ConditionEvaluator 不同，它特殊的支持了<strong>根据导入当前配置类的其他配置类（即 importedBy）的<code>Condition</code>匹配情况，来共同决定当前类是否应跳过注册（skip）</strong></p><p>​其核心方法shouldSkip是一个基于 <strong>记忆搜索优化 + 剪枝的回溯算法</strong>（我们将参数configClass想象为当前节点，其importedBy想象为子节点，形成一棵由导入关系构成的树形结构），其核心逻辑为：</p><ul><li><strong>某个节点其任意一个importedBy不需要skip时，转而直接判断当前节点配置类的<code>Condition</code>决定其是否skip（break进行剪枝，不再判断其它importedBy的skip情况）</strong></li><li><strong>某个节点所有importedBy都skip时，则不再判断当前节点的<code>Condition</code>，直接确认skip</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">TrackedConditionEvaluator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>ConfigurationClass<span class="token punctuation">,</span> Boolean<span class="token operator">></span> skipped <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>ConfigurationClass configClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Boolean skip <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>skipped<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>skip <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若该配置类是通过 @Import 导入的，优先判断导入它的配置类是否应被skip</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">isImported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">boolean</span> allSkipped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>ConfigurationClass importedBy <span class="token operator">:</span> configClass<span class="token punctuation">.</span><span class="token function">getImportedBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 回溯</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>importedBy<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 但凡有一个导入者不需要skip，转而判断自身并剪枝</span>                        allSkipped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>allSkipped<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 所有导入者都被跳过，则让当前配置类直接skip</span>                    skip <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>skip <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断自己的Condition，决定是否需要skip</span>                skip <span class="token operator">=</span> conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ConfigurationPhase<span class="token punctuation">.</span>REGISTER_BEAN<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 缓存优化</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>skipped<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> skip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> skip<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="触发地点"><a href="#触发地点" class="headerlink" title="触发地点"></a>触发地点</h3><p>前置文章：<a href="https://blog.shanzhao.site/2021-05-13/spring-configurationclasspostprocessor/">ConfigurationClassPostProcessor解析配置类</a></p><ul><li><p>ConditionEvaluator触发</p><ol><li><p>ConfigurationClassParser#processConfigurationClass</p><blockquote><p> ​所有配置类解析的起点，此处触发 <code>ConfigurationPhase.PARSE_CONFIGURATION</code> 阶段的 <code>Condition</code> 判断</p></blockquote></li><li><p>ConfigurationClassParser#doProcessConfigurationClass：</p><blockquote><p> ​解析配置类上的 <code>@ComponentScan</code> 注解时触发。该注解所扫描的组件将直接注册为 Bean，此阶段对应 <code>ConfigurationPhase.REGISTER_BEAN</code></p></blockquote></li><li><p>ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForBeanMethod</p><blockquote><p>​在注册配置类中的 <code>@Bean</code> 方法时触发。每个 <code>BeanMethod</code> 都根据其方法上的 <code>Condition</code>进行匹配，为 <code>ConfigurationPhase.REGISTER_BEAN</code> 阶段</p></blockquote></li></ol><p></p></li><li><p>TrackedConditionEvaluator触发</p><ol><li><p>ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForConfigurationClass</p><blockquote><p>​在注册配置类内部所有 Bean（包括 <code>@Bean</code> 方法、通过 <code>@Import</code> 引入的 <code>ImportBeanDefinitionRegistrar</code>、以及 <code>@ImportResource</code> 导入的 XML Bean）前，会调用 <code>TrackedConditionEvaluator</code> 判断该配置类是否整体满足 <code>Condition</code>，从而决定是否跳过整个类的 Bean 注册流程。</p></blockquote></li></ol></li></ul><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><h3 id="Condition组合-AnyNestedCondition"><a href="#Condition组合-AnyNestedCondition" class="headerlink" title="Condition组合-AnyNestedCondition"></a>Condition组合-AnyNestedCondition</h3><p>​这是一个<strong>组合<code>Condition</code>（或逻辑）</strong>的测试用例，只要condition.or.enable&#x3D;true或condition.or.use&#x3D;yes任意条件满足，则可注册C对象到容器中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NestedOrConditionDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OrCondition</span> <span class="token keyword">extends</span> <span class="token class-name">AnyNestedCondition</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">OrCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>ConfigurationPhase<span class="token punctuation">.</span>REGISTER_BEAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"condition.or.enable"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PropertyOrEnable</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"condition.or.use"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"yes"</span><span class="token punctuation">)</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PropertyOrUse</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NestedOrConditionDemo$C initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"init"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>OrCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> C <span class="token function">buildC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">condition</span><span class="token punctuation">:</span>  <span class="token key atrule">or</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token string">"false"</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> <span class="token string">"yes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TrackedConditionEvaluator测试"><a href="#TrackedConditionEvaluator测试" class="headerlink" title="TrackedConditionEvaluator测试"></a>TrackedConditionEvaluator测试</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>D<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportTrackedConditionDemo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>C<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>D<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​这个测试用例用来验证 <code>TrackedConditionEvaluator#shouldSkip</code> 的执行逻辑，能<strong>完整模拟它的skip机制，并覆盖到 记忆搜索、剪枝等优化逻辑</strong>。A对象的整个importBy链路图如下，其整体流程可以总结为：</p><ul><li>C 的 <code>Condition</code> 不满足（@ConditionalOnBean 没匹配上），直接标记为 skip</li><li><strong>B 是被唯一一个C  @Import 的，发现 C 被 skip 后，B 自己也不再判断 <code>Condition</code>，直接也 skip</strong></li><li>然后判断 A，因为 A -&gt; B 这条链断了，就继续看 A -&gt; D<ul><li>由于D的结果已被缓存为不被skip，所以A转而判断自身的<code>Condition</code>，最终得到不需要skip的结果</li></ul></li></ul><p>打开condition debug，也能从日志看出：</p><ul><li>A 和 D 都走了 <code>Condition</code> 匹配逻辑</li><li>C 被判定不匹配</li><li>B 根本没触发 <code>Condition</code> 判断</li></ul><pre class="line-numbers language-log"><code class="language-log">A matched:   - @ConditionalOnMissingBean (types: site.shanzhao.soil.spring.config.A; SearchStrategy: all) did not find any beans (OnBeanCondition)D matched:   - @ConditionalOnMissingBean (types: site.shanzhao.soil.spring.config.D; SearchStrategy: all) did not find any beans (OnBeanCondition)      C Did not match:   - @ConditionalOnBean (types: site.shanzhao.soil.spring.config.C; SearchStrategy: all) did not find any beans of type site.shanzhao.soil.spring.config.C (OnBeanCondition)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img.shanzhao.site/file/1752843742235_springboot-import-tracked-condition.png" alt="springboot-import-tracked-condition.png"></p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>​本来只是打算简单写写几个常见的 <code>@Conditional</code> 注解实现，结果一深入源码，才发现背后藏着这么多细节。不知不觉间内容越写越多，也越写越上头</p><p>​让我感慨的是，这不过是 Spring 中一个小小的功能点，却被设计得这么精巧。像灵活的条件组合机制，几乎能支持任何类型的 Condition 实现；又比如通过模板方法模式抽象出的 <code>ConditionOutcome</code>，不仅解耦了逻辑判断，还天然支持调试信息输出；再比如 <code>importedBy</code> 链路配合 <code>TrackedConditionEvaluator</code> 做到的递归判断与算法优化，每个功能看起来简单，但组合在一起就是工程化的思路体现</p><p>​写到最后，不得不感叹一句：<strong>麻雀虽小，五脏俱全</strong>。只能说越看越觉得厉害，代码之路任重而道远啊</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://blog.shanzhao.site/2021-05-13/spring-configurationclasspostprocessor/">ConfigurationClassPostProcessor解析配置类</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Condition </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（三）— 自动配置源码解析</title>
      <link href="/2022-03-26/springboot-zi-dong-pei-zhi-yuan-ma-jie-xi/"/>
      <url>/2022-03-26/springboot-zi-dong-pei-zhi-yuan-ma-jie-xi/</url>
      
        <content type="html"><![CDATA[<p>​基于 Spring Boot 2.7.x 版本，深入剖析了 <code>@EnableAutoConfiguration</code> 注解的实现原理，重点解析了其背后通过 <code>DeferredImportSelector</code> 实现的自动配置机制。特别对 <code>@AutoConfigureBefore</code> 与 <code>@AutoConfigureAfter</code> 所涉及的 <strong>DFS 拓扑排序逻辑</strong> 进行了详细的分析，揭示了自动配置类加载顺序的核心控制机制</p><p>​最后，还分析了 2.7.0 版本新增的 <code>@AutoConfiguration</code> 注解的<strong>特殊语义</strong>，包括其与<strong>新的 <code>.imports</code> SPI 文件的绑定</strong>、<strong>默认排除扫描机制</strong>（<code>AutoConfigurationExcludeFilter</code>）。并给出了自己的使用建议</p><span id="more"></span><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><p>​Spring Boot 之所以能实现开箱即用，核心在于其自动配置机制，具体体现在 <code>@EnableAutoConfiguration</code> 注解的作用上。该<strong>注解会为项目注册大量默认的 Bean，从而简化开发的配置工作</strong></p><p>​<code>@EnableAutoConfiguration</code> 本身并不直接生效，它是依赖了如下这个元注解（<strong>Spring 在处理配置类时会通过 AnnotationUtils递归解析所有注解的元注解，从而将所有元注解的功能集成到一个组合注解上</strong>）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​通过<a href="https://blog.shanzhao.site/2021-05-13/spring-configurationclasspostprocessor/?highlight=spring#4-Import">前面分析的章节</a>，可知<code>@Import</code>注解会在ConfigurationClassPostProcessor解析配置类阶段生效。其注册的AutoConfigurationImportSelector这才是真正的获取自动配置类的核心，它实现了DeferredImportSelector</p><p>​与其它 <code>@Import</code> 导入的class不同，<strong>DeferredImportSelector会在所有常规的配置类（包括 @Configuration 的 full和@Component和lite模式）处理完成之后，再统一处理并解析其导入的相关配置类，这机制确保了自动配置不会抢占开发者自定义的配置解析和注册Bean的顺序，始终遵循用户配置优先原则</strong></p><h2 id="DeferredImportSelector"><a href="#DeferredImportSelector" class="headerlink" title="DeferredImportSelector"></a>DeferredImportSelector</h2><p>​<code>DeferredImportSelector</code> 是 <code>ImportSelector</code> 的一个子接口，它扩展了一个关键方法 <code>getImportGroup()</code>，用于支持按Group延迟导入配置类</p><p>​<code>getImportGroup()</code>会返回 <code>DeferredImportSelector.Group</code> 对象，这才是真正处理用来DeferredImportSelector逻辑，这个Group包含了如下特征</p><ul><li>Group加载的class可以理解为一个包，其中的类会在一起做<strong>过滤、排序</strong>等操作</li><li>最终返回结果交给上层 <code>ConfigurationClassParser</code> 统一执行其配置类的解析</li></ul><p>​到现在2.7.x版本位置，也就只有一个Group为<strong>AutoConfigurationImportSelector.AutoConfigurationGroup，是SpringBoot 为自动配置机制专门提供的 <code>Group</code> 实现，用于处理.imports和spring.factories里的自动配置类，并应用 <code>AutoConfigurationImportFilter</code>、排序等核心逻辑</strong></p><h3 id="AutoConfigurationImportSelector"><a href="#AutoConfigurationImportSelector" class="headerlink" title="AutoConfigurationImportSelector"></a>AutoConfigurationImportSelector</h3><p>其核心方法为getAutoConfigurationEntry，主要逻辑如下。在此之前，可以先看看<a href="https://blog.shanzhao.site/2022-03-04/springboot-spi-he-starter-you-hua-qi/#SPI%E6%9C%BA%E5%88%B6">SPI机制这篇文章</a></p><ol><li><p>利用SPI机制，加载如下配置类</p><blockquote><ol><li><strong>META-INF&#x2F;spring.factories</strong>配置文件里的<strong>org.springframework.boot.autoconfigure.EnableAutoConfiguration</strong></li><li>从2.7.0新增的 <strong>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</strong>获取配置类</li></ol></blockquote></li><li><p>去重和排除excluded相关类</p></li><li><p><strong>应用AutoConfigurationImportFilter逻辑，对自动配置类部分Condition进行校验并过滤</strong>（AutoConfigurationImportFilter实例也是配置在spring.factories里的）</p></li></ol><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">DeferredImportSelector</span><span class="token punctuation">,</span> BeanClassLoaderAware<span class="token punctuation">,</span>        ResourceLoaderAware<span class="token punctuation">,</span> BeanFactoryAware<span class="token punctuation">,</span> EnvironmentAware<span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> NO_IMPORTS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        AutoConfigurationEntry autoConfigurationEntry <span class="token operator">=</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>autoConfigurationEntry<span class="token punctuation">.</span><span class="token function">getConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> AutoConfigurationEntry <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断spring.boot.enableautoconfiguration配置是否开启</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> EMPTY_ENTRY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        AnnotationAttributes attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 从 META-INF/spring.factories配置文件里获取org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>        <span class="token comment" spellcheck="true">// 2. 从2.7.0新增的 META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports获取配置类</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 去重</span>        configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// apply excluded逻辑</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>        configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         通过配置在spring.factories里的AutoConfigurationImportFilter过滤一遍，提前剔除明显不满足条件的配置类，提高启动性能。有如下三个Filter：             1. org.springframework.boot.autoconfigure.condition.OnBeanCondition：apply @ConditionalOnSingleCandidate和@ConditionalOnBean逻辑             2. org.springframework.boot.autoconfigure.condition.OnClassCondition：apply @ConditionalOnClass逻辑             3. org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition：apply @ConditionalOnWebApplication逻辑         */</span>        configurations <span class="token operator">=</span> <span class="token function">getConfigurationClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发布AutoConfigurationImportEvent</span>        <span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfigurationEntry</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AutoConfigurationGroup"><a href="#AutoConfigurationGroup" class="headerlink" title="AutoConfigurationGroup"></a>AutoConfigurationGroup</h3><p>是自动配置类导入的最终调度执行者，由 <code>ConfigurationClassParser</code> 在配置类解析流程的最后阶段统一触发，调用链如下：：</p><blockquote><ol><li>ConfigurationClassParser#parse</li><li>ConfigurationClassParser.DeferredImportSelectorHandler#process</li><li>ConfigurationClassParser.DeferredImportSelectorGroupingHandler#processGroupImports</li><li>ConfigurationClassParser.DeferredImportSelectorGrouping#getImports</li></ol></blockquote><p>其主要有两个方法：</p><ol><li><p>AutoConfigurationGroup#process：主要是<strong>利用AutoConfigurationImportSelector获取自动配置类，并缓存到其内部的entries中</strong></p></li><li><p>AutoConfigurationGroup#selectImports：<strong>使用AutoConfigurationSorter对自动配置类进行排序</strong>，排序的优先级为：</p><blockquote><p><strong>@AutoConfigureBefore和@AutoConfigureAfter &gt; @AutoConfigureOrder</strong></p></blockquote></li></ol><h4 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationGroup</span>        <span class="token keyword">implements</span> <span class="token class-name">DeferredImportSelector<span class="token punctuation">.</span>Group</span><span class="token punctuation">,</span> BeanClassLoaderAware<span class="token punctuation">,</span> BeanFactoryAware<span class="token punctuation">,</span> ResourceLoaderAware <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>AnnotationMetadata annotationMetadata<span class="token punctuation">,</span> DeferredImportSelector deferredImportSelector<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>deferredImportSelector <span class="token keyword">instanceof</span> <span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Only %s implementations are supported, got %s"</span><span class="token punctuation">,</span>                        AutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        deferredImportSelector<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取自动配置类并缓存到entries里</span>        AutoConfigurationEntry autoConfigurationEntry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AutoConfigurationImportSelector<span class="token punctuation">)</span> deferredImportSelector<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationEntries<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>autoConfigurationEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String importClassName <span class="token operator">:</span> autoConfigurationEntry<span class="token punctuation">.</span><span class="token function">getConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>importClassName<span class="token punctuation">,</span> annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Entry<span class="token operator">></span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationEntries<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> allExclusions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationEntries<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>AutoConfigurationEntry<span class="token operator">:</span><span class="token operator">:</span>getExclusions<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Collection<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> processedConfigurations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationEntries<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>AutoConfigurationEntry<span class="token operator">:</span><span class="token operator">:</span>getConfigurations<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Collection<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span>LinkedHashSet<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 排除excluded配置类</span>        processedConfigurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>allExclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关键排序：@AutoConfigureBefore和@AutoConfigureAfter优先级 > @AutoConfigureOrder</span>        <span class="token keyword">return</span> <span class="token function">sortAutoConfigurations</span><span class="token punctuation">(</span>processedConfigurations<span class="token punctuation">,</span> <span class="token function">getAutoConfigurationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>importClassName<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>importClassName<span class="token punctuation">)</span><span class="token punctuation">,</span> importClassName<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AutoConfigurationSorter"><a href="#AutoConfigurationSorter" class="headerlink" title="AutoConfigurationSorter"></a>AutoConfigurationSorter</h4><p>​自动配置类的解析顺序是非常重要的，尤其是在使用 <code>@ConditionalOnBean</code>、<code>@ConditionalOnMissingBean</code> 等条件注解时，<strong>先加载的配置类有优先对Bean的注册决定权，从而影响后续自动配置类中相同类型Bean的注册</strong>。且由于所有自动配置类都统一通过 <code>DeferredImportSelector</code> 延迟导入，因此必须在导入前进行统一排序，保证顺序稳定且可控。</p><p>​所以，SpringBoot提供了如下三个注解，来决定自动配置类解析的先后顺序</p><blockquote><ol><li><strong>@AutoConfigureBefore</strong>：当前配置类应当 <strong>在指定类之前加载</strong></li><li><strong>@AutoConfigureAfter</strong>：当前配置类应当 <strong>在指定类之后加载</strong></li><li>@AutoConfigureOrder：指定一个整数顺序值，数字越小，优先级越高</li></ol></blockquote><p><code>@AutoConfigureAfter</code>和<code>@AutoConfigureBefore</code>这两个注解构成了一个类之间的依赖图，SpringBoot 会对这些依赖关系进行<strong>拓扑排序</strong>。不同于常见的入度统计法，SpringBoot用了<strong>深度优先遍历（DFS）+ 判环</strong>的方式实现排序。</p><h5 id="排序原理"><a href="#排序原理" class="headerlink" title="排序原理"></a>排序原理</h5><ol><li><p><strong>按 <code>@AutoConfigureOrder</code> 初步排序</strong></p><blockquote><p>​所有配置类根据注解的数值顺序进行一次粗排序，为后续 DFS 提供遍历顺序。 </p></blockquote></li><li><p>依赖链补齐</p><blockquote><p>​收集所有声明在 <code>@AutoConfigureBefore</code>和 <code>@AutoConfigureAfter</code> 中提到的类（尽管它们可能被excluded），将其一并加入拓扑图，保证排序图完整</p></blockquote></li><li><p>执行 DFS 拓扑排序（带判环）</p><blockquote><p>​对每个配置类递归处理其前置依赖类（**@AutoConfigureAfter直接解析当前配置类就行，但@AutoConfigureBefore需要解析所有的自动配置类<strong>。我上一篇讲的starter优化器在这里会发挥作用，获取相关注解的预解析结果，间接提升启动速度），在</strong>递归中动态构造有向图，并检测循环依赖**（若存在环则抛出异常）</p></blockquote></li><li><p><strong>过滤出最终导入的配置类</strong></p><blockquote><p>​拓扑排序后将得到一个全有序列表，SpringBoot 再从中筛选出当前实际需要导入的类，作为最终结果返回。</p></blockquote></li></ol><h5 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">AutoConfigurationSorter</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getInPriorityOrder</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> classNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AutoConfigurationClasses classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfigurationClasses</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">,</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationMetadata<span class="token punctuation">,</span> classNames<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> orderedClassNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>classNames<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Initially sort alphabetically</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>orderedClassNames<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Then sort by order</span>        <span class="token comment" spellcheck="true">// 先按@AutoConfigureOrder排序</span>        orderedClassNames<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i1 <span class="token operator">=</span> classes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i2 <span class="token operator">=</span> classes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Then respect @AutoConfigureBefore @AutoConfigureAfter</span>        orderedClassNames <span class="token operator">=</span> <span class="token function">sortByAnnotation</span><span class="token punctuation">(</span>classes<span class="token punctuation">,</span> orderedClassNames<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> orderedClassNames<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">sortByAnnotation</span><span class="token punctuation">(</span>AutoConfigurationClasses classes<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> classNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 待排列表</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> toSort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>classNames<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加入所有参与排序的相关类。比如说某个配置类的@AutoConfigureBefore中的value不是配置类或者被excluded了，此时也要加入进来，使拓扑排序的链路更完整</span>        toSort<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>classes<span class="token punctuation">.</span><span class="token function">getAllNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 已排序列表</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sorted <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理中（检测循环依赖）</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> processing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始排序</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>toSort<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">doSortByAfterAnnotation</span><span class="token punctuation">(</span>classes<span class="token punctuation">,</span> toSort<span class="token punctuation">,</span> sorted<span class="token punctuation">,</span> processing<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 排序完毕，按顺序只保留classNames相关类</span>        sorted<span class="token punctuation">.</span><span class="token function">retainAll</span><span class="token punctuation">(</span>classNames<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>sorted<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 拓扑排序的dfs实现方案（非统计入度方式实现）     * 排序规则：     *   1. 若类 A 上标注 @AutoConfigureAfter(B)，则 B 必须排在 A 之前     *   2. 若类 A 上标注 @AutoConfigureBefore(B)，则 A 必须排在 B 之前     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSortByAfterAnnotation</span><span class="token punctuation">(</span>AutoConfigurationClasses classes<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> toSort<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sorted<span class="token punctuation">,</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> processing<span class="token punctuation">,</span> String current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            current <span class="token operator">=</span> toSort<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        processing<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 依次处理每个current类的依赖类（也就是说需要确保current 排在 after 之后）</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String after <span class="token operator">:</span> classes<span class="token punctuation">.</span><span class="token function">getClassesRequestedAfter</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 拓扑排序中判环操作，避免循环依赖</span>            <span class="token function">checkForCycles</span><span class="token punctuation">(</span>processing<span class="token punctuation">,</span> current<span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 只有当该类还没被排序，且在待排序列表中，才递归处理依赖类after</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sorted<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> toSort<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">doSortByAfterAnnotation</span><span class="token punctuation">(</span>classes<span class="token punctuation">,</span> toSort<span class="token punctuation">,</span> sorted<span class="token punctuation">,</span> processing<span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        processing<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// current的依赖都已处理完毕，此时可以放入current了</span>        sorted<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkForCycles</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> processing<span class="token punctuation">,</span> String current<span class="token punctuation">,</span> String after<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token operator">!</span>processing<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"AutoConfigure cycle detected between "</span> <span class="token operator">+</span> current <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationClasses</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 获取某个类的所有排序依赖类（即必须排在className之前的类）         */</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getClassesRequestedAfter</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// @AutoConfigureAfter处理</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> classesRequestedAfter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// @AutoConfigureBefore只能遍历所有的配置类，依次判断是否包含当前的className</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> autoConfigurationClass<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>autoConfigurationClass<span class="token punctuation">.</span><span class="token function">getBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    classesRequestedAfter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> classesRequestedAfter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AutoConfiguration"><a href="#AutoConfiguration" class="headerlink" title="@AutoConfiguration"></a>@AutoConfiguration</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureBefore</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">AutoConfiguration</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ... 省略</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是2.7.0版本新增的自动配置相关的注解，专门用于声明自动配置类。从定义上看，它是一个<strong>组合注解</strong>，整合了：</p><ul><li><code>@Configuration</code>：标识该类是一个配置类</li><li><code>@AutoConfigureBefore</code> &#x2F; <code>@AutoConfigureAfter</code>：用于声明自动配置类之间的依赖顺序</li></ul><p>但它并不只是简单的注解组合，而是具备了<strong>特殊语义</strong></p><h3 id="特殊语义"><a href="#特殊语义" class="headerlink" title="特殊语义"></a>特殊语义</h3><h4 id="新的SPI"><a href="#新的SPI" class="headerlink" title="新的SPI"></a>新的SPI</h4><p>​支持新的 SPI 加载机制（<code>.imports</code> 文件），可以从META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports文件里加载自动配置类。从另一方面来说，其把自动配置类从spring.factories文件里解耦出来了</p><h4 id="AutoConfigurationExcludeFilter"><a href="#AutoConfigurationExcludeFilter" class="headerlink" title="AutoConfigurationExcludeFilter"></a>AutoConfigurationExcludeFilter</h4><p><code>@SpringBootApplication</code>有如下这个元注解，对包扫描器增加了AutoConfigurationExcludeFilter这个过滤器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>AutoConfigurationExcludeFilter会自动排出满足一下任意条件的类：</p><blockquote><ol><li>有@AutoConfiguration注解</li><li>SPI文件里的自动配置类</li></ol></blockquote><p>也就是说：所有使用 <code>@AutoConfiguration</code> 的类将被默认包扫描排除，不会参与常规的组件扫描逻辑</p><h5 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isAutoConfiguration</span><span class="token punctuation">(</span>MetadataReader metadataReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// @AutoConfiguration注解是否存在</span>    <span class="token keyword">boolean</span> annotatedWithAutoConfiguration <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">isAnnotated</span><span class="token punctuation">(</span>AutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> annotatedWithAutoConfiguration            <span class="token operator">||</span> <span class="token function">getAutoConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">.</span><span class="token function">getClassMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getAutoConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurations <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// spring.factories里的自动配置类</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> autoConfigurations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>                SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span>EnableAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// .imports文件里的自动配置类</span>        ImportCandidates<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>AutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>autoConfigurations<span class="token operator">:</span><span class="token operator">:</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurations <span class="token operator">=</span> autoConfigurations<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurations<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​从源码来反推<code>@AutoConfiguration</code>的使用场景，可以得出一个明确的使用约定：</p><blockquote><p><strong><code>@AutoConfiguration</code> 注解的类必须通过 SPI文件注册，不能依赖常规的包扫描导入。</strong></p></blockquote><p>​无论该类是来自第三方 starter 还是当前项目模块，只要标注了 <code>@AutoConfiguration</code>，就<strong>不会被<code>@SpringBootApplication</code> 自动注册</strong>，而只能走自动配置的延迟导入机制（<code>DeferredImportSelector</code>）流程。</p><p>​所以，<strong>在当前SpringBoot启动项目中，谨慎使用<code>@AutoConfiguration</code><strong>，尽管它内部组合了 <code>@Configuration</code>，但</strong>它不等价于普通的配置类</strong></p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://blog.shanzhao.site/2021-05-13/spring-configurationclasspostprocessor/?highlight=clas#4-Import">@Import处理</a></li><li><a href="https://blog.shanzhao.site/2022-03-04/springboot-spi-he-starter-you-hua-qi/#SPI%E6%9C%BA%E5%88%B6">SPI机制</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓扑排序 </tag>
            
            <tag> 自动配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（二）— SPI和starter优化器原理</title>
      <link href="/2022-03-04/springboot-spi-he-starter-you-hua-qi/"/>
      <url>/2022-03-04/springboot-spi-he-starter-you-hua-qi/</url>
      
        <content type="html"><![CDATA[<p>​算是一篇SrpingBoot自动配置原理解析的前置文章。首先从源码角度回顾了早期的 <code>spring.factories</code> SPI 加载机制，接着分析了 Spring Boot 2.7.x 引入的基于注解粒度的 <code>.imports</code> 文件机制，展示了其在自动配置解耦方面的优势。并介绍了两个常被 starter 使用的辅助组件：</p><ul><li>spring-boot-configuration-processor：生成配置元数据，IDE使用</li><li>spring-boot-autoconfigure-processor：加速自动配置加载</li></ul><p>​最后，结合自定义 starter 的实践，附上了完整的测试用例，验证上述机制在实际开发中的可用性</p><span id="more"></span><h2 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h2><p>可先看看<a href="https://blog.shanzhao.site/2022-02-15/springboot-fatjar-qi-dong-he-launchedurlclassloader-jia-zai-class-de-yuan-li/#URLClassLoader">这篇文章</a>，了解下如何从ClassLoader的classpath读取到指定资源</p><h3 id="SpringFactoriesLoader"><a href="#SpringFactoriesLoader" class="headerlink" title="SpringFactoriesLoader"></a>SpringFactoriesLoader</h3><p>​SpringBoot 早期采用的 SPI 扩展机制实现，整体加载逻辑相对简单，负责<strong>从指定 <code>ClassLoader</code> 的所有 <code>classpath</code> 路径中加载并缓存<code>META-INF/spring.factories</code> 文件</strong></p><p>​这个文件本质上是一个 <code>Properties</code> 格式的配置文件，支持一个 key 对应多个 value，多个 value 之间使用英文逗号分隔</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SpringFactoriesLoader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FACTORIES_RESOURCE_LOCATION <span class="token operator">=</span> <span class="token string">"META-INF/spring.factories"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 加载并缓存指定ClassLoader下的所有META-INF/spring.factories里的配置     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token function">loadSpringFactories</span><span class="token punctuation">(</span>ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从缓存里取</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> result <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 返回classpath下所有的META-INF/spring.factories文件URL形式</span>            Enumeration<span class="token operator">&lt;</span>URL<span class="token operator">></span> urls <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>FACTORIES_RESOURCE_LOCATION<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                URL url <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                UrlResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 读取为Properties</span>                Properties properties <span class="token operator">=</span> PropertiesLoaderUtils<span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> entry <span class="token operator">:</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String factoryTypeName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String<span class="token punctuation">[</span><span class="token punctuation">]</span> factoryImplementationNames <span class="token operator">=</span> StringUtils                            <span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>String factoryImplementationName <span class="token operator">:</span> factoryImplementationNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        result<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>factoryTypeName<span class="token punctuation">,</span> key <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factoryImplementationName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 去重后再转化为不可修改的List</span>            result<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span>factoryType<span class="token punctuation">,</span> implementations<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> implementations<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">collectingAndThen</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Collections<span class="token operator">:</span><span class="token operator">:</span>unmodifiableList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 缓存</span>            cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                    <span class="token string">"Unable to load factories from location ["</span> <span class="token operator">+</span> FACTORIES_RESOURCE_LOCATION <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ImportCandidates"><a href="#ImportCandidates" class="headerlink" title="ImportCandidates"></a>ImportCandidates</h3><p>​是SpringBoot 2.7.x版本引入的新的SPI，替代早期的 <code>META-INF/spring.factories</code> 里的部分配置。传统的 <code>spring.factories</code> 文件中将所有自动配置、监听器等内容集中在一个文件中，内容有些杂。为了更加精细化，Spring Boot 引入了基于注解粒度的 <code>.imports</code> 配置机制：<strong>每个注解对应一个独立的配置文件，配置文件名为META-INF&#x2F;spring&#x2F;注解全类名.imports</strong></p><p>​但SpringBoot现阶段也就@AutoConfiguration和@ManagementContextConfiguration这两个注解用了这个SPI</p><p>​以常用的@AutoConfiguration为例，其配置文件名如下，是专门替换META-INF&#x2F;spring.factories中org.springframework.boot.autoconfigure.EnableAutoConfiguration的配置</p><blockquote><p>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ImportCandidates</span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LOCATION <span class="token operator">=</span> <span class="token string">"META-INF/spring/%s.imports"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注释符号</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String COMMENT_START <span class="token operator">=</span> <span class="token string">"#"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> candidates<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 支持迭代</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>candidates<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ImportCandidates <span class="token function">load</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> annotation<span class="token punctuation">,</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// annotation一般为注解全类名</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> <span class="token string">"'annotation' must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader classLoaderToUse <span class="token operator">=</span> <span class="token function">decideClassloader</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        String location <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>LOCATION<span class="token punctuation">,</span> annotation<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从classLoader的classpath下查找指定文件URL</span>        Enumeration<span class="token operator">&lt;</span>URL<span class="token operator">></span> urls <span class="token operator">=</span> <span class="token function">findUrlsInClasspath</span><span class="token punctuation">(</span>classLoaderToUse<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> importCandidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            URL url <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析文件（每行为一个class，并跳过注释）</span>            importCandidates<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">readCandidateConfigurations</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImportCandidates</span><span class="token punctuation">(</span>importCandidates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="starter优化器"><a href="#starter优化器" class="headerlink" title="starter优化器"></a>starter优化器</h2><h3 id="spring-boot-configuration-processor"><a href="#spring-boot-configuration-processor" class="headerlink" title="spring-boot-configuration-processor"></a>spring-boot-configuration-processor</h3><h4 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 避免被传递依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>​这个组件对项目的<strong>运行时没有任何影响</strong>，它的作用如下：</p><blockquote><p>​会在<strong>编译期</strong> 自动解析使用了 <code>@ConfigurationProperties</code> 等注解的配置类，将配置项的 <strong>属性名、类型、默认值、Javadoc 注释</strong> 等信息生成到<br> <code>META-INF/spring-configuration-metadata.json</code> 文件中</p></blockquote><p>​这个文件主要供IDE使用（如IDEA），用于在编辑 <code>application.yml</code>时提供<strong>配置自动补全、类型校验和快速跳转到对应配置类</strong>，所以也没必要把这个依赖传递下去</p><h3 id="spring-boot-autoconfigure-processor"><a href="#spring-boot-autoconfigure-processor" class="headerlink" title="spring-boot-autoconfigure-processor"></a>spring-boot-autoconfigure-processor</h3><h4 id="引入组件-1"><a href="#引入组件-1" class="headerlink" title="引入组件"></a>引入组件</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-autoconfigure-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>​一个作用在编译期，用于<strong>扫描自动配置类上的部分注解，将解析结果提前生成到<code>META-INF/spring-autoconfigure-metadata.properties</code>文件</strong></p><p>​ 通过解析工具AutoConfigureAnnotationProcessor可知，支持的注解如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SupportedAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"org.springframework.boot.autoconfigure.condition.ConditionalOnClass"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.boot.autoconfigure.condition.ConditionalOnBean"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.boot.autoconfigure.AutoConfigureBefore"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.boot.autoconfigure.AutoConfigureAfter"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.boot.autoconfigure.AutoConfigureOrder"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.boot.autoconfigure.AutoConfiguration"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>META-INF/spring-autoconfigure-metadata.properties</code>文件内部信息格式如下，<strong>每一行表示某个自动配置类的某个注解信息</strong>：</p><blockquote><p>配置类全类名.上述注解简单名&#x3D;注解值</p><p>site.xxx.Demo.ConditionalOnClass&#x3D;org.springframework.boot.context.event.ApplicationReadyEvent</p></blockquote><p>​<strong>该文件会在SpringBoot启动时被AutoConfigurationMetadataLoader加载，这种预解析的结果比反射或asm实时解析相关注解更快，以此来加速程序的启动。</strong></p><h2 id="实现一个starter"><a href="#实现一个starter" class="headerlink" title="实现一个starter"></a>实现一个starter</h2><p>一个简单的starter，主要目的是在项目成功启动后打印成功信息和耗费时间的日志，且提供可配置的开关和时间格式。时间统计方式：ApplicationStartingEvent到ApplicationReadyEvent这段时间</p><h3 id="自动配置类"><a href="#自动配置类" class="headerlink" title="自动配置类"></a>自动配置类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfiguration</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>StartupLoggerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>ApplicationReadyEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"startup.logger"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupLoggerAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ApplicationListener<span class="token operator">&lt;</span>ApplicationReadyEvent<span class="token operator">></span> <span class="token function">startupLoggerListener</span><span class="token punctuation">(</span>StartupLoggerProperties props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> event <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> cost <span class="token operator">=</span> StartupCostTimeRecorder<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String timeStr <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getTimeUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>cost <span class="token operator">/</span> <span class="token number">1000.0</span> <span class="token operator">+</span> <span class="token string">"s"</span><span class="token punctuation">)</span> <span class="token operator">:</span> cost <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">;</span>            String appName <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.application.name"</span><span class="token punctuation">,</span> <span class="token string">"Application"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"StartupLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"========================================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"========================================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=======   {} startup successful, cost time：{}   ======="</span><span class="token punctuation">,</span> appName<span class="token punctuation">,</span> timeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"========================================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"========================================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开关配置"><a href="#开关配置" class="headerlink" title="开关配置"></a>开关配置</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"startup.logger"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupLoggerProperties</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 是否开启     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 时间格式：ms, s     */</span>    <span class="token keyword">private</span> String timeUnit <span class="token operator">=</span> <span class="token string">"ms"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> enabled<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> enabled<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getTimeUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> timeUnit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTimeUnit</span><span class="token punctuation">(</span>String timeUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeUnit <span class="token operator">=</span> timeUnit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动时间监听器"><a href="#启动时间监听器" class="headerlink" title="启动时间监听器"></a>启动时间监听器</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupStartListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>ApplicationStartingEvent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ApplicationStartingEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StartupCostTimeRecorder<span class="token punctuation">.</span><span class="token function">recordStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间记录实体类"><a href="#时间记录实体类" class="headerlink" title="时间记录实体类"></a>时间记录实体类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupCostTimeRecorder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Long startTime <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">recordStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ol><li><p>META-INF&#x2F;spring.factories</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">org.springframework.context.ApplicationListener</span><span class="token punctuation">=</span><span class="token attr-value">\site.shanzhao.startup.logger.config.StartupStartListener</span><span class="token comment" spellcheck="true"># 还是兼容下2.7.x版本以下的自动配置</span><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">\site.shanzhao.startup.logger.config.StartupLoggerAutoConfiguration</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><pre class="line-numbers language-java"><code class="language-java">site<span class="token punctuation">.</span>shanzhao<span class="token punctuation">.</span>startup<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>config<span class="token punctuation">.</span>StartupLoggerAutoConfiguration<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-autoconfigure-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://blog.shanzhao.site/2022-02-15/springboot-fatjar-qi-dong-he-launchedurlclassloader-jia-zai-class-de-yuan-li/#URLClassLoader">从ClassLoader的classpath读取指定资源</a></li><li><a href="https://github.com/ShanHeWanZhao/soil/tree/master/spring-boot-startup-logger-starter">starter示例完整代码</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> starter </tag>
            
            <tag> SPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-事物NOT_SUPPORTED策略下多数据源切换的问题</title>
      <link href="/2022-03-03/spring-shi-wu-not-supported-ce-lue-xia-duo-shu-ju-yuan-qie-huan-de-wen-ti/"/>
      <url>/2022-03-03/spring-shi-wu-not-supported-ce-lue-xia-duo-shu-ju-yuan-qie-huan-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>​从案例中分析了NOT_SUPPORTED默认情况下为什么不能进行多数据源切换以及优雅的解决办法，以及给出了自己的思考</p><span id="more"></span><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天写代码时遇到一个多数据源的切换问题，框架为Spring和Mybatus-Plus。在完全没事物的情况下pgsql和mysql切换没问题，但<strong>在@Transactional(propagation &#x3D; Propagation.NOT_SUPPORTED)下却切换不了</strong>。翻了以前的<a href="https://blog.shanzhao.site/2021/02/23/spring-transactional/">Spring-Transactional文章</a>和代码，遂记录一下原因和解决思路，以及整体的思考</p><p>​在有事物的情况下多数据源切换不了这是很正常的，毕竟Connection绑定到ThreadLocal了。但我开始简单的认为只要使用<strong>Propagation.NOT_SUPPORTED</strong>传播策略，毕竟这都不支持事物了，应该就能进行数据源切换。实际就是代码报错了，还是切换不了</p><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>ProductService#recommend被调用在一个事物里</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>NOT_SUPPORTED<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recommend</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// pgsqlMapper这个mapper有注解 @DS("postgresql")，走pqsql库</span>        pgsqlMapper<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 走mysql库</span>        msyqlMapper<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h2><p>​ProductService#recommend使用了@Transactional(propagation &#x3D; Propagation.NOT_SUPPORTED)注解，它构造出来的DefaultTransactionStatus中有如下两个字段需要重点关注。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultTransactionStatus</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTransactionStatus</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 是否开启了真实的物理事物</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> newTransaction<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否由当前事务初始化并管理事务同步器（如注册连接绑定、hook 回调）</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> newSynchronization<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<strong>其中newTransaction&#x3D;false, newSynchronization&#x3D;true（受AbstractPlatformTransactionManager.transactionSynchronization字段控制）。</strong></p><blockquote><p><strong>表示尽管当前未开启物理事务，但事务管理器仍会初始化事务同步器（<code>TransactionSynchronizationManager.initSynchronization()</code>），并允许资源绑定（如 <code>ConnectionHolder</code>）与注册事务hook（<code>TransactionSynchronization</code>）。</strong></p><p>换句话说，<strong>“没有物理事务，但仍可进行事务性资源管理和 hook 回调”</strong></p></blockquote><p>​所以当触发pgsqlMapper.queryById(i)方法时，会绑定如下资源。（<strong>这一切必须要newSynchronization&#x3D;true</strong>）</p><blockquote><ul><li>获取SqlSession时（SqlSessionUtils#getSqlSession）将<strong>SqlSessionFactory -&gt; SqlSessionHolder 给缓存到TransactionSynchronizationManager#resources中</strong></li><li>获取Connection时（DataSourceUtils#doGetConnection）将<strong>DataSource -&gt; ConnectionHolder 也缓存到TransactionSynchronizationManager#resources中</strong></li></ul></blockquote><p>​<strong>所以，当走到第二个方法msyqlMapper.queryById(i)时，会拿到上一步中缓存的SqlSessionHolder，内部操作的是同一个Connection（具体为DefaultSqlSession.executor.transaction.connection），即pgsql的Connection，所以报错了</strong></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>​<strong>将这个字段AbstractPlatformTransactionManager.transactionSynchronization由默认的SYNCHRONIZATION_ALWAYS改为SYNCHRONIZATION_ON_ACTUAL_TRANSACTION</strong>。直接获取这个AbstractPlatformTransactionManager bean再进行改动有些不优雅，我翻了一遍发现有这个<strong>PlatformTransactionManagerCustomizer接口，可以对PlatformTransactionManager的子类进行定制化修改</strong>。所以可以添加如下的bean到容器中即可</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionSynchronizationCustomizer</span> <span class="token keyword">implements</span> <span class="token class-name">PlatformTransactionManagerCustomizer</span><span class="token operator">&lt;</span>AbstractPlatformTransactionManager<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>AbstractPlatformTransactionManager transactionManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解决Propagation.NOT_SUPPORTED下多数据源不能切换动态切换的问题</span>        transactionManager<span class="token punctuation">.</span><span class="token function">setTransactionSynchronization</span><span class="token punctuation">(</span>AbstractPlatformTransactionManager<span class="token punctuation">.</span>SYNCHRONIZATION_ON_ACTUAL_TRANSACTION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思考（重点）"><a href="#思考（重点）" class="headerlink" title="思考（重点）"></a>思考（重点）</h2><p>​在 Spring 的事务模型中，<code>Propagation.NOT_SUPPORTED</code> 虽然会挂起当前事务，但默认配置下（<code>SYNCHRONIZATION_ALWAYS</code>）仍会注册事务同步器。<br> 这导致<strong>即使没有物理事务，依然会出现线程绑定连接的行为（</strong>如通过 <code>DataSourceUtils.getConnection()</code> 获得的 Connection 会复用）。</p><p>​所以<strong>如果希望这个方法在语义上和“非事务环境”（即不使用@Transactional等情况）一致，避免隐式连接绑定，应将 <code>transactionSynchronization</code> 设置为 <code>SYNCHRONIZATION_ON_ACTUAL_TRANSACTION</code>。</strong></p><p>​看样子应该是<strong>Spring 为了支持某些非事务性方法（Propagation.NOT_SUPPORTED）也能参与事务资源控制</strong>才这样设计的</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（一）— fatJar启动和LaunchedURLClassLoader加载class的原理</title>
      <link href="/2022-02-15/springboot-fatjar-qi-dong-he-launchedurlclassloader-jia-zai-class-de-yuan-li/"/>
      <url>/2022-02-15/springboot-fatjar-qi-dong-he-launchedurlclassloader-jia-zai-class-de-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>​基于 Spring Boot 2.7.x，从整体架构角度出发，梳理并串联了 fatjar 模式下的关键组件：<code>Archive</code>、<code>JarFile</code>、<code>JarEntry</code>、<code>Handler</code>、<code>JarURLConnection</code>，重点<strong>分析它们在类加载过程中的职责与协作关系</strong>。全文<strong>不聚焦具体 jar 包结构解析细节，而是深入源码层面解析 fatjar 启动流程及 <code>LaunchedURLClassLoader#loadClass</code> 实现机制</strong>，并辅以实际测试用例进行debug和验证。</p><span id="more"></span><h2 id="fatjar结构"><a href="#fatjar结构" class="headerlink" title="fatjar结构"></a>fatjar结构</h2><p>​SpringBoot 使用 <code>spring-boot-maven-plugin</code> 插件可以将项目打包成一个可执行的 <strong>fatjar</strong>，其内部结构不仅符合标准的 jar 规范，还增加了 SpringBoot 特有的扩展结构，以支持其定制的类加载机制</p><pre class="line-numbers language-bash"><code class="language-bash">├── BOOT-INF│   ├── classes/               <span class="token comment" spellcheck="true"># 你的 class 文件和 resource 资源</span>│   └── lib/                   <span class="token comment" spellcheck="true"># 所有依赖 jar 包</span>│       ├── spring-context-5.3.31.jar│       ├── spring-web-5.3.31.jar├── META-INF│   └── MANIFEST.MF            <span class="token comment" spellcheck="true"># 包含 Main-Class 配置（默认指向 JarLauncher）</span>├── org│   └── springframework│       └── boot│           └── loader         <span class="token comment" spellcheck="true"># SpringBoot 提供的加载器逻辑</span>│               ├── JarLauncher.class│               ├── LaunchedURLClassLoader.class│               ├── ExecutableArchiveLauncher.class│               ├── Launcher.class│               ├── MainMethodRunner.class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fatjar解压后如上，其中包含：</p><ul><li>当前项目编译后的 <code>.class</code> 文件和资源</li><li>项目的所有依赖 jar 文件</li><li>SpringBoot 提供的启动器和类加载器（位于 <code>org.springframework.boot.loader</code> 包下）</li></ul><h3 id="标准jar部分"><a href="#标准jar部分" class="headerlink" title="标准jar部分"></a>标准jar部分</h3><ol><li><strong>&#x2F;META-INF&#x2F;MANIFEST.MF文件</strong>：jar的元信息文件（包含项目结构和启动类）。比如<strong>java -jar命令就是执行其中Main-Class的main方法</strong></li><li><strong>SpringBoot Loader 相关类放在 jar 根路径</strong>：让LaunchedURLClassLoader相关依赖可以直接被AppClassLoader加载，无需特殊处理</li></ol><h3 id="特有的拓展"><a href="#特有的拓展" class="headerlink" title="特有的拓展"></a>特有的拓展</h3><ol><li><strong>所有业务资源都被封装在 <code>/BOOT-INF/</code> 下而不直接在跟路径</strong>：这部分资源不是标准的JVM classpath路径，不能被AppClassLoader加载，只能由SpringBoot提供的LaunchedURLClassLoader加载</li><li><strong>jar嵌套</strong>：标准jar不支持嵌套结构。SpringBoot拓展了一系列组件的功能来支持&#x2F;BOOT-INF&#x2F;lib&#x2F;下嵌套jar的解析</li></ol><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><p>在正式进入源码前，先了解一些fatjar相关的核心组件和作用，对后续源码debug会有帮助。我这里主要关注fatjar启动方式，就不考虑exploded模式了</p><h3 id="Archive"><a href="#Archive" class="headerlink" title="Archive"></a>Archive</h3><p>​是SpringBoot Loader 模块中的一个抽象接口。<strong>可以表示 fatjar 本身，也可以表示 fatjar 内部的某个嵌套 jar（<code>BOOT-INF/lib/*.jar</code>），或特定目录（ <code>BOOT-INF/classes/</code>）</strong>，此时其实现为org.springframework.boot.loader.archive.JarFileArchive。两个核心方法如下：</p><ol><li><p><strong>Archive#getUrl：返回当前资源的URL，用于构造classpath</strong>。比如：</p><blockquote><p>jar:file:&#x2F;Users&#x2F;reef&#x2F;IdeaProjects&#x2F;soil&#x2F;target&#x2F;soil-1.0.0.jar!&#x2F;BOOT-INF&#x2F;classes!&#x2F;</p><p>jar:file:&#x2F;Users&#x2F;reef&#x2F;IdeaProjects&#x2F;soil&#x2F;target&#x2F;soil-1.0.0.jar!&#x2F;BOOT-INF&#x2F;lib&#x2F;spring-core-5.3.31.jar!&#x2F;</p></blockquote></li><li><p>Archive#getNestedArchives(EntryFilter filter)：遍历当前 Archive 内部结构，筛选出所有符合条件的子 Archive</p><blockquote><p>如<strong>SpringBoot中默认过滤出嵌套 jar（BOOT-INF&#x2F;lib&#x2F;*.jar文件）和指定目录（BOOT-INF&#x2F;classes&#x2F;）</strong></p></blockquote></li></ol><h3 id="JarFile"><a href="#JarFile" class="headerlink" title="JarFile"></a>JarFile</h3><p>​JDK 提供的java.util.jar.JarFile 类表示一个标准的 jar 文件，其本质是一个 classpath 元素，<strong>内部通常只包含 <code>.class</code> 文件和资源文件，不支持嵌套 jar结构</strong>。</p><p>​为了支持 fatjar 的结构，SpringBoot 自定义了 <code>org.springframework.boot.loader.jar.JarFile</code> 类，它<strong>同样表示一个 jar 文件，但支持访问 fatjar 内部嵌套的 jar（例如 <code>BOOT-INF/lib/*.jar</code>），并提供对嵌套 jar 内容的解包与访问能力</strong>。核心方法如下：</p><ol><li><strong>JarFile#getInputStream(java.util.zip.ZipEntry)：获取指定 entry 的InputStream，可用于读取 <code>.class</code> 文件、配置文件、资源等内容</strong></li><li>JarFile#getJarEntry(java.lang.String)：获取当前jar内部的指定资源对象（JarEntry）。支持查找 class 文件、配置文件、嵌套 jar 等</li><li><strong>JarFile#getNestedJarFile(JarEntry)：将fatjar内部某个嵌套 jar转换为一个新的 <code>JarFile</code> 对象，实现对嵌套 jar 的透明访问</strong></li></ol><h3 id="JarEntry"><a href="#JarEntry" class="headerlink" title="JarEntry"></a>JarEntry</h3><p>​jdk 提供的 <code>java.util.jar.JarEntry</code> 表示 <strong>jar 文件中的一个具体条目，可以是 <code>.class</code> 文件、配置文件、目录等</strong>。并<strong>支持通过 <code>JarFile#getInputStream(entry)</code> 读取其内容</strong></p><p>​但fatjar是一种嵌套的复杂结构，标准的 JarEntry无法支持对内部嵌套 jar 的进一步解析，所以SpringBoot对其拓展，定义了自己的<code>org.springframework.boot.loader.jar.JarEntry</code> 类，<strong>增加表示了fatjar 中嵌套的 jar 文件</strong>。其配合<code>JarFile#getNestedJarFile(JarEntry entry)</code> 方法，能够将某个嵌套 jar 条目转换为新的 <code>JarFile</code> 对象，实现对嵌套 jar 的透明访问</p><h3 id="URLStreamHandler"><a href="#URLStreamHandler" class="headerlink" title="URLStreamHandler"></a>URLStreamHandler</h3><p>​是 JDK 提供的抽象类，用于处理特定协议（如 <code>http</code>、<code>file</code>、<code>jar</code>）的 <code>URL</code>，并生成对应的 <code>URLConnection</code> 对象，以实现对资源的读取。</p><p>​对于 <code>jar</code> 协议，JDK 默认使用 <code>sun.net.www.protocol.jar.Handler</code> 创建标准的 <code>JarURLConnection</code>，用于读取普通 jar 文件中的资源。</p><p>​<strong>SpringBoot 自定义了 <code>org.springframework.boot.loader.jar.Handler</code>，用于替代 JDK 默认的 Handler。该 Handler 会创建支持嵌套 jar 的 <code>JarURLConnection</code>，以满足 fatjar 场景下的资源访问需求</strong></p><p>​SpringBoot通过<strong>设置如下系统属性，确保了当构造jar协议的URL时，会使用org.springframework.boot.loader.jar.Handler作为当前URL的URLStreamHandler</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// org.springframework.boot.loader.jar.JarFile#registerUrlProtocolHandler方法里</span>System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"java.protocol.handler.pkgs"</span><span class="token punctuation">,</span> <span class="token string">"org.springframework.boot.loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="JarURLConnection"><a href="#JarURLConnection" class="headerlink" title="JarURLConnection"></a>JarURLConnection</h3><p>表示jar协议URL的连接对象，但标准的java.net.JarURLConnection不支持解析多层嵌套的资源，如</p><blockquote><p> jar:file:&#x2F;soil-1.0.0.jar!&#x2F;BOOT-INF&#x2F;lib&#x2F;demo.jar!&#x2F;site.shanzhao.Demo.class</p></blockquote><p>为此，SpringBoot 提供了替代实现 <code>org.springframework.boot.loader.jar.JarURLConnection</code>，可<strong>直接在不解压 fatjar 的情况下访问嵌套 jar 内部的 class 和配置资源</strong>。核心方法如下</p><ol><li>JarURLConnection#getJarEntry：将当前URL资源解析为JarEntry</li><li>JarURLConnection#getInputStream：通过JarFile获取该资源对应的InputStream，以直接读取 <code>.class</code> 文件或配置资源</li></ol><h2 id="fatjar启动流程"><a href="#fatjar启动流程" class="headerlink" title="fatjar启动流程"></a>fatjar启动流程</h2><p>​入口为JarLauncher#main方法，JarLauncher继承了ExecutableArchiveLauncher</p><h3 id="ExecutableArchiveLauncher实例化"><a href="#ExecutableArchiveLauncher实例化" class="headerlink" title="ExecutableArchiveLauncher实例化"></a>ExecutableArchiveLauncher实例化</h3><p>主要做两件事：</p><ol><li>Launcher#createArchive：确定当前启动类是jar包还是目录启动，jar启动使用JarFileArchive，目录启动则使用ExplodedArchive</li><li>加载classpath.idx文件：只有目录启动模式（exploded）才会使用&#x2F;BOOF-INF&#x2F;classpath.idx文件来加速classpath URL的构建</li></ol><h3 id="Launcher-launch"><a href="#Launcher-launch" class="headerlink" title="Launcher#launch"></a>Launcher#launch</h3><p>启动器的核心入口，主要完成以下三项工作：</p><ol><li><strong>fatjar启动才注册JarFile.registerUrlProtocolHandler</strong>（exploded为解压模式下启动，这种不存在嵌套jar）。让jar协议的URL使用SpringBoot提供的Handler，去创建支持解析嵌套jar内容的URLConnection</li><li>解析classpath URL，并创建相关的LaunchedURLClassLoader</li><li><strong>绑定LaunchedURLClassLoader到当前线程上下文，并反射启动Start-Class</strong></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">launch</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isExploded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// fatjar模式启动，注册一个 java.protocol.handler.pkgs=org.springframework.boot.loader 的系统属性</span>            <span class="token comment" spellcheck="true">// 以便让jar protocol的URL使用org.springframework.boot.loader.jar.Handler来创建URLConnection</span>            JarFile<span class="token punctuation">.</span><span class="token function">registerUrlProtocolHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 遍历并筛选 fatjar 内部的 BOOT-INF/lib 和 BOOT-INF/classes，构建 URL 列表并创建LaunchedURLClassLoader</span>        ClassLoader classLoader <span class="token operator">=</span> <span class="token function">createClassLoader</span><span class="token punctuation">(</span><span class="token function">getClassPathArchivesIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String jarMode <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jarmode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取Start-Class，也就是我们主程序的启动类</span>        String launchClass <span class="token operator">=</span> <span class="token punctuation">(</span>jarMode <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>jarMode<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> fatjar_MODE_LAUNCHER <span class="token operator">:</span> <span class="token function">getMainClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绑定LaunchedURLClassLoader到当前thread（即main线程）里，以便在后续加载class时使用到。并启动项目的主启动类</span>        <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> launchClass<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ExecutableArchiveLauncher-getClassPathArchivesIterator"><a href="#ExecutableArchiveLauncher-getClassPathArchivesIterator" class="headerlink" title="ExecutableArchiveLauncher#getClassPathArchivesIterator"></a>ExecutableArchiveLauncher#getClassPathArchivesIterator</h3><p>是fatjar启动模式下构建classpath URL的关键代码，其定义的EntryFilter会构建出如下的Archive</p><ol><li>BOOT-INF&#x2F;lib&#x2F; 下所有jar分别各自对应一个Archive</li><li>BOOT-INF&#x2F;classes 文件夹对应一个Archive</li></ol><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Iterator<span class="token operator">&lt;</span>Archive<span class="token operator">></span> <span class="token function">getClassPathArchivesIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 以 BOOT-INF/ 开头</span>        Archive<span class="token punctuation">.</span>EntryFilter searchFilter <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>isSearchCandidate<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当存在 BOOT-INF/classpath.idx 文件时，跳过其中已列出的 jar 文件，不再走常规的扫描构建 Archive 路径。</span>        <span class="token comment" spellcheck="true">// 会在后续步骤里（ExecutableArchiveLauncher.createClassLoader方法）直接通过 BOOT-INF/classpath.idx 文件把这些jar转成URL加入classpath，从而提升启动效率。</span>        <span class="token comment" spellcheck="true">// 重点注意：只有在exploded模式下（解压了），才会使用BOOT-INF/classpath.idx。以java -jar启动使用的JarFileArchive是不会用到 BOOT-INF/classpath.idx 文件的</span>        Iterator<span class="token operator">&lt;</span>Archive<span class="token operator">></span> archives <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>archive<span class="token punctuation">.</span><span class="token function">getNestedArchives</span><span class="token punctuation">(</span>searchFilter<span class="token punctuation">,</span>                <span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">isNestedArchive</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isEntryIndexed</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPostProcessingClassPathArchives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            archives <span class="token operator">=</span> <span class="token function">applyClassPathArchivePostProcessing</span><span class="token punctuation">(</span>archives<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> archives<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从 <code>JarLauncher#main</code> 启动到反射调用 <code>Start-Class</code> 的 <code>main</code> 方法，主要完成以下工作：</p><blockquote><p>​解析 fatjar，将其中的依赖 jar 和项目 class 封装为 <code>jar</code> 协议的 URL，并用这些 URL 构造 <code>LaunchedURLClassLoader</code>；随后将该类加载器绑定到 main 线程的上下文，确保在应用启动过程中可以加载所有 class 和资源</p></blockquote><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>可以跟着debug看看fatjar到底解析出了那些Archive，和这些Archive的URL格式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FatJarResolveArchiveDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String fatJarPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.home"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/IdeaProjects/soil/target/soil-1.0.0.jar"</span><span class="token punctuation">;</span>        JarFileArchive soilJar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JarFileArchive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fatJarPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Archive<span class="token punctuation">.</span>EntryFilter searchFilter <span class="token operator">=</span> entry <span class="token operator">-</span><span class="token operator">></span> entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"BOOT-INF/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// fatjar启动下ExecutableArchiveLauncher.classPathIndex字段为null，ExecutableArchiveLauncher.isEntryIndexed就默认返回true了</span>        Iterator<span class="token operator">&lt;</span>Archive<span class="token operator">></span> archives <span class="token operator">=</span> soilJar<span class="token punctuation">.</span><span class="token function">getNestedArchives</span><span class="token punctuation">(</span>searchFilter<span class="token punctuation">,</span> NESTED_ARCHIVE_ENTRY_FILTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>archives<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>archives<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        soilJar<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Archive<span class="token punctuation">.</span>EntryFilter NESTED_ARCHIVE_ENTRY_FILTER <span class="token operator">=</span> <span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"BOOT-INF/classes/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"BOOT-INF/lib/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LaunchedURLClassLoader"><a href="#LaunchedURLClassLoader" class="headerlink" title="LaunchedURLClassLoader"></a>LaunchedURLClassLoader</h2><p>这是SpringBoot项目的真正类加载器，主要关注其loadClass方法，顺着这个方法看看一个class文件是如何被找的</p><p>definePackage在当前类完成，随后真正loadClass还是调用父类URLClassLoader#loadClass方法</p><h3 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先单独处理jarmode</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot.loader.jarmode."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">loadClassInLaunchedClassLoader</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resolveClass</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>exploded<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// exploded解压模式，不是fatjar。可直接用传统的方式查找class</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Handler<span class="token punctuation">.</span><span class="token function">setUseFastConnectionExceptions</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 遍历所有可用的jar，并匹配到当前的name，最后定义为可用的Package</span>            <span class="token function">definePackageIfNecessary</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getPackage</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Package "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" has already been defined but it could not be found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 直接用父类URLClassLoader方法loadClass</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        Handler<span class="token punctuation">.</span><span class="token function">setUseFastConnectionExceptions</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">definePackageIfNecessary</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> lastDot <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastDot <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 截掉class的simpleName,只留下包名</span>        String packageName <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lastDot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getPackage</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 缓存中没查到，就define</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">definePackage</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getPackage</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span>                            <span class="token string">"Package "</span> <span class="token operator">+</span> packageName <span class="token operator">+</span> <span class="token string">" has already been defined but it could not be found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">definePackage</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> String packageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedExceptionAction<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 例：site/shanzhao/common/bean/</span>            String packageEntryName <span class="token operator">=</span> packageName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 例：site/shanzhao/common/bean/Demo.class</span>            String classEntryName <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>URL url <span class="token operator">:</span> <span class="token function">getURLs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遍历jar协议的URL（fatjar内的所有BOOT-INF/lib/*.jar和/BOOT-INF/classes/）</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 通过Handler创建JarURLConnection（返回的connection不会为空）</span>                    URLConnection connection <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token keyword">instanceof</span> <span class="token class-name">JarURLConnection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 如果不存在，内部会抛FileNotFoundException异常</span>                        JarFile jarFile <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>JarURLConnection<span class="token punctuation">)</span> connection<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJarFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>jarFile<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span>classEntryName<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> jarFile<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span>packageEntryName<span class="token punctuation">)</span> <span class="token operator">!=</span> null                                <span class="token operator">&amp;&amp;</span> jarFile<span class="token punctuation">.</span><span class="token function">getManifest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 找到了，定义这个Package并缓存</span>                            <span class="token function">definePackage</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> jarFile<span class="token punctuation">.</span><span class="token function">getManifest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 当前的classpath URL没找到className，忽略异常</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> AccessController<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>PrivilegedActionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Ignore</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h3><p>​其loadClass仍遵循双亲委派模型并优先查找缓存，这里聚焦其核心的 <code>findClass</code> 方法，分析如何通过 URL 加载资源并定义类。</p><p><strong>findClass核心逻辑总结</strong>：</p><ol><li>通过内部的URLClassPath查找指定类名对应的资源，封装为 <code>Resource</code></li><li>从Resource 中获InputStream，并转换为<code>ByteBuffer</code> 来读取 <code>.class</code> 字节，最终调用 <code>defineClass</code> 完成类的定义</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token keyword">final</span> String name<span class="token punctuation">)</span>        <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>    <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> result<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">PrivilegedExceptionAction</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 将类名转换为资源路径</span>                        String path <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 使用内部的URLClassPath加载资源</span>                        Resource res <span class="token operator">=</span> ucp<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 定义class</span>                                <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassFormatError</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getDataError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    e2<span class="token punctuation">.</span><span class="token function">addSuppressed</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getDataError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                <span class="token keyword">throw</span> e2<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>PrivilegedActionException</span> pae<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token punctuation">(</span>ClassNotFoundException<span class="token punctuation">)</span> pae<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">defineClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Resource res<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    URL url <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getCodeSourceURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String pkgname <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        Manifest man <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getManifest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 校验资源的Package</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getAndVerifyPackage</span><span class="token punctuation">(</span>pkgname<span class="token punctuation">,</span> man<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>man <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">definePackage</span><span class="token punctuation">(</span>pkgname<span class="token punctuation">,</span> man<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">definePackage</span><span class="token punctuation">(</span>pkgname<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> iae<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getAndVerifyPackage</span><span class="token punctuation">(</span>pkgname<span class="token punctuation">,</span> man<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Cannot find package "</span> <span class="token operator">+</span>                            pkgname<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 内部使用Resource#getInputStream，获取ByteBuffer，开始真正的数据读取和class定义</span>    java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer bb <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bb <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CodeSigner<span class="token punctuation">[</span><span class="token punctuation">]</span> signers <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getCodeSigners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CodeSource cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeSource</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> signers<span class="token punctuation">)</span><span class="token punctuation">;</span>        PerfCounter<span class="token punctuation">.</span><span class="token function">getReadClassBytesTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> bb<span class="token punctuation">,</span> cs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CodeSigner<span class="token punctuation">[</span><span class="token punctuation">]</span> signers <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getCodeSigners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CodeSource cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeSource</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> signers<span class="token punctuation">)</span><span class="token punctuation">;</span>        PerfCounter<span class="token punctuation">.</span><span class="token function">getReadClassBytesTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">,</span> cs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="URLClassPath"><a href="#URLClassPath" class="headerlink" title="URLClassPath"></a>URLClassPath</h4><p>​配合 <code>URLClassLoader</code> 使用，负责在所有 classpath URL 中<strong>懒加载并定位资源</strong>（如 <code>.class</code> 或配置文件）。其核心方法 <code>getResource</code> 的处理流程如下：</p><ol><li><strong>延迟创建并缓存</strong>每个 URL 对应的 <code>Loader</code></li><li>Loader构造具体目标资源的 URL，并通过其协议的 <code>URLStreamHandler</code> 创建URLConnection</li><li>若连接有效，返回封装好的 <code>Resource</code> 对象（包含 InputStream 等）</li><li>若未命中资源，继续遍历下一个 <code>Loader</code></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">URLClassPath</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// URLClassLoader里所有classpath下的URL</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>URL<span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// // 尚未初始化的 URL 列表（懒加载机制）</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ArrayDeque<span class="token operator">&lt;</span>URL<span class="token operator">></span> unopenedUrls<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// loader缓存，1个loader对应一个URL</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Loader<span class="token operator">></span> loaders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// loader和URL的关系缓存</span>    <span class="token comment" spellcheck="true">// key比如</span>    <span class="token comment" spellcheck="true">// jar://file:/Users/reef/IdeaProjects/soil/target/soil-1.0.0.jar!/BOOT-INF/lib/spring-context-5.3.31.jar!/</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Loader<span class="token operator">></span> lmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Resource <span class="token function">getResource</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> check<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Loader loader<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>loader <span class="token operator">=</span> <span class="token function">getLoader</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Resource res <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> check<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> Loader <span class="token function">getLoader</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 遍历完了loaders，尝试增加未open的URL</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>loaders<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> URL url<span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>unopenedUrls<span class="token punctuation">)</span> <span class="token punctuation">{</span>                url <span class="token operator">=</span> unopenedUrls<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// url为null则表示所有URL都以open了</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String urlNoFragString <span class="token operator">=</span> URLUtil<span class="token punctuation">.</span><span class="token function">urlNoFragString</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lmap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>urlNoFragString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Loader loader<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 创建URL的Loader</span>                loader <span class="token operator">=</span> <span class="token function">getLoader</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                URL<span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getClassPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>urls <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">push</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> se<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Failed to access "</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> se<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// loader缓存</span>            loaders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>            lmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>urlNoFragString<span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> loaders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Loader <span class="token function">getLoader</span><span class="token punctuation">(</span><span class="token keyword">final</span> URL url<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>                    <span class="token keyword">new</span> <span class="token class-name">PrivilegedExceptionAction</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">public</span> Loader <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                            String protocol <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            String file <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FileLoader</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"jar"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                                        <span class="token function">isDefaultJarHandler</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                                        file<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"!/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token comment" spellcheck="true">// JarHandler为jdk默认的sun.net.www.protocol.jar.Handler才会进入</span>                                    URL nestedUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JarLoader</span><span class="token punctuation">(</span>nestedUrl<span class="token punctuation">,</span> jarHandler<span class="token punctuation">,</span> lmap<span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    <span class="token comment" spellcheck="true">// SpringBoot fatjar会创建这个Loader</span>                                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Loader</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JarLoader</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> jarHandler<span class="token punctuation">,</span> lmap<span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PrivilegedActionException</span> pae<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token punctuation">(</span>IOException<span class="token punctuation">)</span> pae<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Loader</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>        Resource <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token keyword">final</span> String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> check<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> URL url<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 构造具体资源的URL，举例</span>                <span class="token comment" spellcheck="true">// base为 jar:file:/Users/reef/IdeaProjects/soil/target/soil-1.0.0.jar!/BOOT-INF/lib/hutool-core-5.8.25.jar!/</span>                <span class="token comment" spellcheck="true">// spec为 cn/hutool/core/thread/AsyncUtil.class</span>                url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> ParseUtil<span class="token punctuation">.</span><span class="token function">encodePath</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> URLConnection uc<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    URLClassPath<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 通过URL内部的Handler构造URLConnection</span>                uc <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// SpringBoot的JarURLConnection如果不存在指定的资源，这里面会抛异常</span>                InputStream in <span class="token operator">=</span> uc<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>uc <span class="token keyword">instanceof</span> <span class="token class-name">JarURLConnection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/*                     * Need to remember the jar file so it can be closed                     * in a hurry.                     */</span>                    JarURLConnection juc <span class="token operator">=</span> <span class="token punctuation">(</span>JarURLConnection<span class="token punctuation">)</span> uc<span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> firstLoad <span class="token operator">=</span> jarfile <span class="token operator">==</span> null<span class="token punctuation">;</span>                    jarfile <span class="token operator">=</span> JarLoader<span class="token punctuation">.</span><span class="token function">checkJar</span><span class="token punctuation">(</span>juc<span class="token punctuation">.</span><span class="token function">getJarFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstLoad <span class="token operator">&amp;&amp;</span> JarLoadEvent<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Tooling<span class="token punctuation">.</span><span class="token function">notifyEvent</span><span class="token punctuation">(</span>JarLoadEvent<span class="token punctuation">.</span><span class="token function">jarLoadEvent</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> jarfile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 找到了资源，构造对应的Resource</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> name<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> URL <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> url<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> URL <span class="token function">getCodeSourceURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> base<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> InputStream <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                    <span class="token keyword">return</span> uc<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getContentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                    <span class="token keyword">return</span> uc<span class="token punctuation">.</span><span class="token function">getContentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试用例-1"><a href="#测试用例-1" class="headerlink" title="测试用例"></a>测试用例</h3><p>可以跟着这个用例debug一下，看看整体的LaunchedURLClassLoader的loadClass流程</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LaunchedURLClassLoaderDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String fatJarPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.home"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/IdeaProjects/soil/target/soil-1.0.0.jar"</span><span class="token punctuation">;</span>        File fatJar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span> fatJarPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>fatJar<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Fat jar not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JarFile jarFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JarFile</span><span class="token punctuation">(</span>fatJar<span class="token punctuation">)</span><span class="token punctuation">;</span>        JarFile nestedJar <span class="token operator">=</span> jarFile<span class="token punctuation">.</span><span class="token function">getNestedJarFile</span><span class="token punctuation">(</span>jarFile<span class="token punctuation">.</span><span class="token function">getJarEntry</span><span class="token punctuation">(</span><span class="token string">"BOOT-INF/lib/hutool-json-5.8.25.jar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 内部会直接创建org.springframework.boot.loader.jar.handler，所以在这里可以先不注册java.protocol.handler.pkgs</span>        URL jsonUrl <span class="token operator">=</span> nestedJar<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ======== 此时必须注册jar包处理器org.springframework.boot.loader.jar.handler，才能读取fatjar =========</span>        JarFile<span class="token punctuation">.</span><span class="token function">registerUrlProtocolHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// eg: jar:file:/Users/reef/IdeaProjects/soil/target/soil-1.0.0.jar!/BOOT-INF/lib/hutool-core-5.8.25.jar!/</span>        URL coreUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"jar:file:"</span> <span class="token operator">+</span> fatJarPath <span class="token operator">+</span> <span class="token string">"!/BOOT-INF/lib/hutool-core-5.8.25.jar!/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 LaunchedURLClassLoader</span>        ClassLoader appClassLoader <span class="token operator">=</span> LaunchedURLClassLoaderDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>LaunchedURLClassLoader classLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LaunchedURLClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>jsonUrl<span class="token punctuation">,</span> coreUrl<span class="token punctuation">}</span><span class="token punctuation">,</span> appClassLoader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String coreJarClass <span class="token operator">=</span> <span class="token string">"cn.hutool.core.thread.AsyncUtil"</span><span class="token punctuation">;</span>            String jsonJarClass <span class="token operator">=</span> <span class="token string">"cn.hutool.json.JSONUtil"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 确保当前运行环境的classpath没有指定的class</span>            Assertions<span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span>ClassNotFoundException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> appClassLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>coreJarClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assertions<span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span>ClassNotFoundException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> appClassLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>jsonJarClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用自定义的LaunchedURLClassLoader加载class</span>            <span class="token function">loadAndAssert</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> coreJarClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">loadAndAssert</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> jsonJarClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        jarFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadAndAssert</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> String className<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assertions<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assertions<span class="token punctuation">.</span><span class="token function">assertSame</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Class not loaded from expected classloader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Loaded class: %-40s → %s%n"</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getProtectionDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCodeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>通过上诉启动流程和LaunchedURLClassLoader#loadClass源码的分析，现在可以对前面的核心组件进行串联一下</p><ol><li><p><strong>Archive组件仅在fatjar启动阶段使用</strong>，负责<strong>将fatjar内所有资源解析为jar协议的classpath URL</strong>，并用其构造LaunchedURLClassLoader，用于后续类加载的使用</p></li><li><p><strong>JarFile &#x2F; JarEntry &#x2F; URLStreamHandler &#x2F; JarURLConnection</strong>：用于类加载阶段，流程如下</p><blockquote><p>​LaunchedURLClassLoader#loadClass  →  URLClassPath#getResource → URL#openConnection → <strong>URLStreamHandler 创建 JarURLConnection</strong> → <strong>解析和获取 JarFile 和 JarEntry</strong> → <strong>JarURLConnection#getInputStream</strong> -&gt; <strong>InputStream加载 .class 字节</strong> → defineClass</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fatjar </tag>
            
            <tag> LaunchedURLClassLoader </tag>
            
            <tag> URLClassLoader </tag>
            
            <tag> 类加载器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-Session管理</title>
      <link href="/2022-01-09/tomcat-session-guan-li/"/>
      <url>/2022-01-09/tomcat-session-guan-li/</url>
      
        <content type="html"><![CDATA[<hr><p>​本文从源码出发，剖析 Tomcat 中 Session 的懒加载、保活与生命周期控制机制，并解析了 StandardManager 如何借助序列化完成热部署场景下的 Session 持久化与自动恢复</p><span id="more"></span><p>​在 <code>StandardContext#start()</code> 阶段，Tomcat 会默认创建一个 <code>StandardManager</code> 实例作为 Session 管理器。它是一个<strong>基于本地 JVM 内存的实现</strong>，负责：</p><ul><li>实例化和缓存Session</li><li>定期检查并清理过期的 Session</li><li>在 Context 热加载触发时，将 Session 序列化持久化到磁盘。并在启动后，尝试从磁盘恢复上一次的 Session 数据</li></ul><p>那么这些功能具体是怎么实现的呢？我们接下来结合源码逐一分析，也顺便看看有没有什么值得优化的地方。</p><h2 id="Session创建、缓存和刷新"><a href="#Session创建、缓存和刷新" class="headerlink" title="Session创建、缓存和刷新"></a>Session创建、缓存和刷新</h2><h3 id="获取和创建"><a href="#获取和创建" class="headerlink" title="获取和创建"></a>获取和创建</h3><p>Tomcat 中的 Session 采用 <strong>懒加载策略</strong>，即只有在显式调用 <code>HttpServletRequest#getSession()</code>时，才会触发 Session 的<strong>获取或创建、绑定到当前Request</strong>等操作。该逻辑核心实现位于 <code>org.apache.catalina.connector.Request#doGetSession</code> 方法，其处理流程如下：</p><ol><li><strong>已绑定有效 Session</strong>：若当前 Request 已绑定有效 Session，直接返回；</li><li><strong>尝试查找已有 Session</strong>：从全局缓存中查找session，如果存在则刷新访问时间，在绑定到当前Request并返回</li><li><strong>按需创建新 Session</strong>：create&#x3D;true才创建session。先进行sessionId的校验（避免伪造攻击），再创建默认的StandardSession并全局缓存，记录访问时间后返回</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Session <span class="token function">doGetSession</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> create<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Context context <span class="token operator">=</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当前request中已获取过session切session有效，则直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>session <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>session<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        session <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> session<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Manager manager <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>manager <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestedSessionId <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从缓存中找session</span>            session <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">findSession</span><span class="token punctuation">(</span>requestedSessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            session <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>session <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>session<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            session <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// session找到了且有效，刷新访问时间后返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            session<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> session<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不许要创建则直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>create<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> trackModesIncludesCookie <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEffectiveSessionTrackingModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>SessionTrackingMode<span class="token punctuation">.</span>COOKIE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trackModesIncludesCookie <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isCommitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"coyoteRequest.sessionCreateCommitted"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ====================== 到这里，表示需要创建session ================</span>    <span class="token comment" spellcheck="true">// 对客户端提供的sessionId进行校验，一般来说是不允许使用客户端提供的sessionId创建session的</span>    String sessionId <span class="token operator">=</span> <span class="token function">getRequestedSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestedSessionSSL<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 一般不会走这</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getSessionCookiePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token function">isRequestedSessionIdFromCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持跨 Context 共享 sessionId（必须配置 cookiePath="/" 且启用校验，默认已启用）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getValidateClientProvidedNewSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Container container <span class="token operator">:</span> <span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Manager m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span> container<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">findSession</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>found<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 未找到则清空，避免伪造攻击</span>                sessionId <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        sessionId <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 新建session（默认StandardSession）</span>    session <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置cookie到response中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> trackModesIncludesCookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cookie cookie <span class="token operator">=</span> ApplicationSessionCookieConfig<span class="token punctuation">.</span><span class="token function">createSessionCookie</span><span class="token punctuation">(</span>                context<span class="token punctuation">,</span> session<span class="token punctuation">.</span><span class="token function">getIdInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isSecure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">addSessionCookieInternal</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    session<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> session<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * org.apache.catalina.session.ManagerBase#createSession中真正创建session */</span><span class="token keyword">public</span> Session <span class="token function">createSession</span><span class="token punctuation">(</span>String sessionId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// session数量较校验（默认-1无上限）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>maxActiveSessions <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token function">getActiveSessions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> maxActiveSessions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rejectedSessions<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TooManyActiveSessionsException</span><span class="token punctuation">(</span>                sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"managerBase.createSession.ise"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                maxActiveSessions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Session session <span class="token operator">=</span> <span class="token function">createEmptySession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">setNew</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">setValid</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">setCreationTime</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// session最大不活跃的时间（默认30分钟）</span>    session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSessionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String id <span class="token operator">=</span> sessionId<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        id <span class="token operator">=</span> <span class="token function">generateSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置id并将这个session缓存到ManagerBase#sessions里</span>    session<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    sessionCounter<span class="token operator">++</span><span class="token punctuation">;</span>    SessionTiming timing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SessionTiming</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getCreationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>sessionCreationTiming<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sessionCreationTiming<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>timing<span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionCreationTiming<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> session<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="刷新"><a href="#刷新" class="headerlink" title="刷新"></a>刷新</h3><p>只有<strong>在一次 HTTP 请求中真正访问了 Session，Tomcat 才会刷新它的访问时间</strong>，具体如下：</p><blockquote><ol><li>当请求中第一次调用 <code>request.getSession()</code> 或相关方法时，会触发 <code>org.apache.catalina.Session#access()</code>，记录这次访问的时间</li><li>而在请求结束的时候，会调用 <code>Session#endAccess()</code> 来记录会话访问的结束时间。调用链为：<br> <code>CoyoteAdapter#service（方法最后部分） → Request#recycle → Request#recycleSessionInfo → Session#endAccess()</code></li></ol></blockquote><p>通过这套机制，Tomcat 仅在<strong>真正使用了Session的请求中才刷新它的访问时间，从而实现只在用到时才保活</strong></p><h2 id="Session过期清理"><a href="#Session过期清理" class="headerlink" title="Session过期清理"></a>Session过期清理</h2><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>被StandardEngine的backgroundThread定期触发，调用路径为：ContainerBackgroundProcessor#run -&gt; ContainerBackgroundProcessor#processChildren -&gt; StandardContext.backgroundProcess -&gt; Manager#backgroundProcess -&gt; ManagerBase#processExpires</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processExpires</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> timeNow <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 所有session</span>    Session sessions<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">findSessions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> expireHere <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Session session <span class="token operator">:</span> sessions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对session校验是否式或并清理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>session<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            expireHere<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> timeEnd <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    processingTime <span class="token operator">+=</span> <span class="token punctuation">(</span>timeEnd <span class="token operator">-</span> timeNow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="校验清理"><a href="#校验清理" class="headerlink" title="校验清理"></a>校验清理</h3><p>StandardSession#isValid为<strong>校验session是否有效，如果无效则进行清理</strong>。整体逻辑比较简单，稍微关注下会被触发的如下三个EventListener，如果有session和其attribute的监听需求就可以用到：</p><ol><li><strong>HttpSessionListener#sessionDestroyed</strong>：Session 被销毁时触发。适合用于监听整体 Session 生命周期的结束</li><li><strong>HttpSessionBindingListener#valueUnbound</strong>：当某个属性从 Session 中移除，且<strong>该属性实现了该接口时触发。偏个体</strong></li><li><strong>HttpSessionAttributeListener#attributeRemoved</strong>：Session 中的属性被移除时触发，<strong>属性可以不实现这个Listener。偏集中</strong></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expiring<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ACTIVITY_CHECK <span class="token operator">&amp;&amp;</span> accessCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxInactiveInterval <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断空闲时间是否超过最大不活跃时间，并进行清理</span>        <span class="token keyword">int</span> timeIdle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">getIdleTimeInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> 1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeIdle <span class="token operator">>=</span> maxInactiveInterval<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">expire</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isValid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* *  使session过期（从缓存中移除），并根据是否notify决定是否通知相关EventListener */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> notify<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>expiring <span class="token operator">||</span> <span class="token operator">!</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>manager <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        expiring <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        Context context <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是否通知相关Listener</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>notify<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ClassLoader oldContextClassLoader <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                oldContextClassLoader <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>Globals<span class="token punctuation">.</span>IS_SECURITY_ENABLED<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                Object listeners<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getApplicationLifecycleListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>listeners <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> listeners<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    HttpSessionEvent event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpSessionEvent</span><span class="token punctuation">(</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listeners<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 触发HttpSessionListener的sessionDestroyed事件</span>                        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>listeners<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>listeners<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">HttpSessionListener</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        HttpSessionListener listener <span class="token operator">=</span> <span class="token punctuation">(</span>HttpSessionListener<span class="token punctuation">)</span> listeners<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            context<span class="token punctuation">.</span><span class="token function">fireContainerEvent</span><span class="token punctuation">(</span><span class="token string">"beforeSessionDestroyed"</span><span class="token punctuation">,</span>                                    listener<span class="token punctuation">)</span><span class="token punctuation">;</span>                            listener<span class="token punctuation">.</span><span class="token function">sessionDestroyed</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                            context<span class="token punctuation">.</span><span class="token function">fireContainerEvent</span><span class="token punctuation">(</span><span class="token string">"afterSessionDestroyed"</span><span class="token punctuation">,</span>                                    listener<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            manager<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"standardSession.sessionEvent"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span>Globals<span class="token punctuation">.</span>IS_SECURITY_ENABLED<span class="token punctuation">,</span> oldContextClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ACTIVITY_CHECK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            accessCount<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从缓存中移除</span>        manager<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>notify<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fireSessionEvent</span><span class="token punctuation">(</span>Session<span class="token punctuation">.</span>SESSION_DESTROYED_EVENT<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">setValid</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expiring <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        String keys<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader oldContextClassLoader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            oldContextClassLoader <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>Globals<span class="token punctuation">.</span>IS_SECURITY_ENABLED<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 触发session key相关Listener</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">removeAttributeInternal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> notify<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span>Globals<span class="token punctuation">.</span>IS_SECURITY_ENABLED<span class="token punctuation">,</span> oldContextClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Session持久化"><a href="#Session持久化" class="headerlink" title="Session持久化"></a>Session持久化</h2><p>众所周知，Tomcat 中Web 应用支持热部署，在热加载过程中，原来的Context会被卸载，它所持有的所有对象（包括HttpSession）都会被销毁。</p><p>但从业务逻辑角度来看，<strong>session 的生命周期不应该被应用自身的重部署打断</strong>。客户端用户都没登出，如果仅因为服务端代码热更新就丢失session数据，用户会难以接受</p><p>所以为了解决这个问题，Tomcat 的StandardManager实现了 <strong>session 的持久化机制</strong>。核心思想是：</p><ul><li>在 <code>Context</code> 停止前（如热部署时），将内存中的所有有效 <code>session</code> 序列化写入磁盘</li><li>在 <code>Context</code> 启动时，尝试从磁盘加载这些 session，并恢复到内存中</li></ul><p>两个核心方法如下：</p><ol><li>StandardManager#doUnload：context#stop时触发，将session序列化到磁盘</li><li>StandardManager#doLoad：context#start时触发，将磁盘的session文件反序列化到内存</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doUnload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// nothing to do</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 默认为当前context的 ${javax.servlet.context.tempdir}/SESSIONS.ser 文件</span>    File file <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 即将被卸载的 session 实例</span>    List<span class="token operator">&lt;</span>StandardSession<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>sessions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将session序列化到磁盘</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Session s <span class="token operator">:</span> sessions<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                StandardSession session <span class="token operator">=</span> <span class="token punctuation">(</span>StandardSession<span class="token punctuation">)</span> s<span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>                session<span class="token punctuation">.</span><span class="token function">passivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                session<span class="token punctuation">.</span><span class="token function">writeObjectData</span><span class="token punctuation">(</span>oos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 清楚session，但不触发通知（毕竟未真正失活）</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>StandardSession session <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            session<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            session<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    sessions<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File file <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 没有就返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Loader loader <span class="token operator">=</span> null<span class="token punctuation">;</span>    ClassLoader classLoader <span class="token operator">=</span> null<span class="token punctuation">;</span>    Log logger <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Context c <span class="token operator">=</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loader <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用当前contxet的WebappClassLoader，加载session</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            classLoader <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            classLoader <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>sessions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span>ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">,</span> classLoader<span class="token punctuation">,</span> logger<span class="token punctuation">,</span>                    <span class="token function">getSessionAttributeValueClassNamePattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token function">getWarnOnSessionAttributeFilterFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Integer count <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> n <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 反序列化到内存</span>                    StandardSession session <span class="token operator">=</span> <span class="token function">getNewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    session<span class="token punctuation">.</span><span class="token function">readObjectData</span><span class="token punctuation">(</span>ois<span class="token punctuation">)</span><span class="token punctuation">;</span>                    session<span class="token punctuation">.</span><span class="token function">setManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sessions<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getIdInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 通知 session 已激活</span>                    session<span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>session<span class="token punctuation">.</span><span class="token function">isValidInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        session<span class="token punctuation">.</span><span class="token function">setValid</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        session<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    sessionCounter<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 删除持久化文件，避免重复加载</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"standardManager.deletePersistedFileFail"</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-热加载之ThreadLocal内存泄漏篇（二）</title>
      <link href="/2021-12-23/tomcat-re-jia-zai-zhi-threadlocal-nei-cun-xie-lou-pian-er/"/>
      <url>/2021-12-23/tomcat-re-jia-zai-zhi-threadlocal-nei-cun-xie-lou-pian-er/</url>
      
        <content type="html"><![CDATA[<hr><p>​通过举例深入的分析了热加载场景下ThreadLocal使用不当造成的内存泄漏。并剖析了Tomcat通过实现<strong>无效的ThreadLocalMap.Entry清除</strong>、<strong>ThreadLocalLeakPreventionListener回收空闲worker线程</strong>和<strong>TaskQueue对取任务逻辑的重写来兜底剩余worker线程回收</strong>这三种策略来优雅的解决ThreadLocal内存泄漏的问题</p><span id="more"></span><p>​<a href="https://blog.shanzhao.site/2021-12-11/tomcat-re-jia-zai-he-xiang-guan-class-de-la-ji-hui-shou-tan-tao-yi/#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6">上一篇</a>讨论了Tomcat热加载期间垃圾的产生与分类，并且探讨了对Context线程回收的必要性以及Tomcat的实现。而这篇会来分析一个更棘手的问题：如果<strong>项目中ThreadLocal如果使用不当，热加载后是如何引起内存泄漏的，并着重分析基于这个问题，Tomcat的考量以及如何优雅的解决这个问题</strong></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>​Tomcat 在执行热加载时，会主动停止当前 <code>Context</code> 中由应用创建的线程（通过遍历 JVM 中所有线程并判断其 <code>contextClassLoader</code> 是否为当前 <code>WebappClassLoader</code> 来过滤）。但这并<strong>不包括用于处理 HTTP 请求的 Worker 线程。这些线程服务于整个 JVM 生命周期，</strong>不会被某个 Context 独占或绑定到某个特定的 <code>WebappClassLoader</code></p><p>​问题在于，<strong>ThreadLocal是和线程绑定的</strong>。如果某个应用将其资源（比如 Spring 的上下文、Class、Bean 等）放入了 Worker 线程的 <code>ThreadLocal</code> 中，而该资源又直接或间接引用了 <code>WebappClassLoader</code>，就会导致这个 <code>WebappClassLoader</code>和其加载的所有Class无法被 GC 回收。最终，随着热加载次数增加，最终触发 OOM</p><blockquote><p>换句话说：<strong>共享线程+ThreadLocal+Context类资源 &#x3D; 热加载内存泄漏的元凶之一。</strong></p></blockquote><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><p>所有案例中MyCounter一致，为计数器。目的是实现对Tomcat worker线程处理了多少次http请求的计数。</p><p><strong>分析之前可以看看我的<a href="https://blog.shanzhao.site/2020-11-21/tan-tan-threadlocal-wei-shi-me-bei-she-ji-wei-ruo-yin-yong/">这篇文章</a>，对ThreadLocal要有一个比较深刻的认识最好</strong></p><h3 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeakingServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>MyCounter<span class="token operator">></span> COUNTER_THREAD_LOCAL <span class="token operator">=</span> ThreadLocal<span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span>MyCounter<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyCounter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyCounter counter <span class="token operator">=</span> LeakingServlet<span class="token punctuation">.</span>COUNTER_THREAD_LOCAL<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// doBusiness...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字段<strong>COUNTER_THREAD_LOCAL 是一个静态变量，被LeakingServlet.class对象给持有</strong></p><blockquote><p>​当请求进入后，会触发一个如下的引用链图。ThreadLocal本身被Entry这个虚引用对象持有，但还被另一边的强引用LeakingServlet.class也持有了，会<strong>导致ThreadLocal不能触发虚引用的回收作用，致使对应的value（MyCounter对象）也不会回收，而MyCounter间接持有的WebappClassLoader和其所加载的所有class对象也都不能被回收，引发了内存泄漏</strong></p></blockquote><p><img src="https://img.shanzhao.site/file/1750681414458_tomcat-threadlocal-memory-leaking-sample-1.png" alt="tomcat-threadlocal-memory-leaking-sample-1.png"></p><p align="center" style="color: #888;">demo1引用链</p><h3 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeakingServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>MyCounter<span class="token operator">></span> COUNTER_THREAD_LOCAL <span class="token operator">=</span> ThreadLocal<span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span>MyCounter<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyCounter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyCounter counter <span class="token operator">=</span> COUNTER_THREAD_LOCAL<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// doBusiness...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​此时<strong>COUNTER_THREAD_LOCAL非静态，被LeakingServlet对象持有</strong>。引用链图如下，此案例中理论上不会有内存泄漏</p><blockquote><p>​<strong>持有ThreadLocal强引用的LeakingServlet对象会被置为null并被回收，回收后仅被虚引用持有的ThreadLocal就能被回收，那么其value（MyCounter对象）也能在后续ThreadLocalMap对Entry修改时被检测到并被手动释放后回收。上层引用链都断开，那么下面的WebappClassLoader也能被回收了</strong></p></blockquote><p>​但这并不意味着立即释放，<strong>虽然最终是可以回收的，但在回收检测发生之前，ThreadLocalMap中的 value（MyCounter）依旧存活</strong>，仍然<strong>间接引用着WebappClassLoader及其加载的所有类，就导致这段「悬挂时间」里依旧存在内存压力</strong></p><p><img src="https://img.shanzhao.site/file/1750681567769_tomcat-threadlocal-memory-leaking-sample-2.png" alt="tomcat-threadlocal-memory-leaking-sample-2.png"></p><p align="center" style="color: #888;">demo2引用链</p><h3 id="demo3"><a href="#demo3" class="headerlink" title="demo3"></a>demo3</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeakingServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> TransmittableThreadLocal<span class="token operator">&lt;</span>MyCounter<span class="token operator">></span> COUNTER_THREAD_LOCAL <span class="token operator">=</span> TransmittableThreadLocal<span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span>MyCounter<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyCounter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyCounter counter <span class="token operator">=</span> COUNTER_THREAD_LOCAL<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// doBusiness...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时COUNTER_THREAD_LOCAL还是非静态且被LeakingServlet对象持有，<strong>但ThreadLocal为第三方的TransmittableThreadLocal</strong>，其引用链图如下。<strong>核心分析其实和demo2一样，TransmittableThreadLocal对象还是能被回收，也同样具备因不能及时回收value而导致WebappClassLoader不能被回收的隐式风险</strong></p><p><img src="https://img.shanzhao.site/file/1750681418887_tomcat-threadlocal-memory-leaking-sample-3.png" alt="tomcat-threadlocal-memory-leaking-sample-3.png"></p><p align="center" style="color: #888;">demo3引用链</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="清除ThreadLocalMap-Entry"><a href="#清除ThreadLocalMap-Entry" class="headerlink" title="清除ThreadLocalMap$Entry"></a>清除ThreadLocalMap$Entry</h3><p><strong>核心方法在WebappClassLoaderBase#checkThreadLocalsForLeaks</strong>，调用链为：</p><blockquote><ol><li>WebappLoader#stop</li><li>WebappClassLoaderBase#stop</li><li>WebappClassLoaderBase#clearReferences </li><li>WebappClassLoaderBase#checkThreadLocalsForLeaks（需要clearReferencesThreadLocals&#x3D;true，默认也为true）</li></ol></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkThreadLocalsForLeaks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取JVM的所有线程</span>    Thread<span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token function">getThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取Thread中threadLocals与inheritableThreadLocals两个字段</span>        Field threadLocalsField <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"threadLocals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadLocalsField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field inheritableThreadLocalsField <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"inheritableThreadLocals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inheritableThreadLocalsField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ThreadLocalMap.table 数组字段（用于存储 Entry 的数组）</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> tlmClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ThreadLocal$ThreadLocalMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field tableField <span class="token operator">=</span> tlmClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tableField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ThreadLocalMap中删除过期Entry方法</span>        Method expungeStaleEntriesMethod <span class="token operator">=</span> tlmClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"expungeStaleEntries"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expungeStaleEntriesMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Thread thread <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object threadLocalMap<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 检查 threadLocals</span>                threadLocalMap <span class="token operator">=</span> threadLocalsField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> threadLocalMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 主动触发清理过期Entry（即key被回收的Entry）</span>                    expungeStaleEntriesMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>threadLocalMap<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">checkThreadLocalMapForLeaks</span><span class="token punctuation">(</span>threadLocalMap<span class="token punctuation">,</span> tableField<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 检查 inheritableThreadLocals</span>                threadLocalMap <span class="token operator">=</span> inheritableThreadLocalsField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> threadLocalMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    expungeStaleEntriesMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>threadLocalMap<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">checkThreadLocalMapForLeaks</span><span class="token punctuation">(</span>threadLocalMap<span class="token punctuation">,</span> tableField<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 异常处理...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkThreadLocalMapForLeaks</span><span class="token punctuation">(</span>Object map<span class="token punctuation">,</span>        Field internalTableField<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span>        NoSuchFieldException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> internalTableField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Object obj <span class="token operator">:</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">boolean</span> keyLoadedByWebapp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> valueLoadedByWebapp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 检查key（即为ThreadLocal对象或其子类）</span>                    Object key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Reference<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// loadedByThisOrChild用于检测指定的对象（也支持集合）及其所有父类是否有当前WebappClassLoader所加载</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">loadedByThisOrChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        keyLoadedByWebapp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 检查value（ThreadLocal里真正存放的对象）</span>                    Field valueField <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    valueField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object value <span class="token operator">=</span> valueField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">loadedByThisOrChild</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        valueLoadedByWebapp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// key 或 value 被当前 WebappClassLoader 加载，说明有潜在泄漏</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>keyLoadedByWebapp <span class="token operator">||</span> valueLoadedByWebapp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getContextName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getPrettyClassName</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// ...</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getPrettyClassName</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// ...</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// =========== 仅打日志。value泄漏用error打印，key泄漏则用debug打印 ================</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>valueLoadedByWebapp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>                                    <span class="token string">"webappClassLoader.checkThreadLocalsForLeaks"</span><span class="token punctuation">,</span>                                    args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>                                        <span class="token string">"webappClassLoader.checkThreadLocalsForLeaksNull"</span><span class="token punctuation">,</span>                                        args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>                                        <span class="token string">"webappClassLoader.checkThreadLocalsForLeaksNone"</span><span class="token punctuation">,</span>                                        args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>其核心逻辑只有两个：</p><ol><li>通过<strong>反射调用所有线程里ThreadLocalMap#expungeStaleEntry，来主动清除需要被GC的Entry</strong>。解决案例中demo2和demo3的隐式隐患</li><li>如果Entry里的key（ThreadLocal）和value的相关class由当前WebappClassLoader加载，也<strong>仅打日志</strong></li></ol><p><strong>为什么仅打日志呢？</strong></p><blockquote><p>​ 因为ThreadLocal中存放的通常是业务线程正在使用的上下文信息（如用户信息、缓存等）。<strong>Tomcat 无法判断这些值是否仍然有效或在使用中，如果直接释放掉可能导致运行中的Web程序抛出相关的空指针，因此选择了保守处理，只警告不干预</strong></p></blockquote><h3 id="线程回收"><a href="#线程回收" class="headerlink" title="线程回收"></a>线程回收</h3><h4 id="ThreadLocalLeakPreventionListener"><a href="#ThreadLocalLeakPreventionListener" class="headerlink" title="ThreadLocalLeakPreventionListener"></a>ThreadLocalLeakPreventionListener</h4><p>​Tomcat 默认启用了 <code>ThreadLocalLeakPreventionListener</code>（已在 <code>server.xml</code> 中配置）。在触发热加载时，该Listener 会监听 <code>Lifecycle.AFTER_STOP_EVENT</code> 事件，并在收到该事件后调用所有 Worker 线程池的 <code>contextStopping()</code> 方法，从而<strong>优雅地中断并清理空闲线程，避免ThreadLocal导致的内存泄漏问题</strong>。</p><p>​可以先看看这篇<a href="https://blog.shanzhao.site/2020-05-12/java-yuan-ma-pian-xian-cheng-chi/#1-2-%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95">线程池相关源码解析文章</a>。ThreadPoolExecutor#contextStopping代码如下，核心就1件事：<strong>对空闲线程进行中断并退出（通过设置corePoolSize&#x3D;0来保证）</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextStopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 非常重要：记录当前 Context 停止的时间，用于后续判断线程是否需要回收</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastContextStoppedTime<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> savedCorePoolSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCorePoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TaskQueue taskQueue <span class="token operator">=</span> <span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">TaskQueue</span> <span class="token operator">?</span> <span class="token punctuation">(</span>TaskQueue<span class="token punctuation">)</span> <span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>taskQueue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 临时设置任务队列剩余容量为0</span>        <span class="token comment" spellcheck="true">// 但ThreadPoolExecutor#setCorePoolSize内部没发现哪里有检查queue.remainingCapacity() ==</span>        <span class="token comment" spellcheck="true">// 0的逻辑，可能是为了兼容其他逻辑吧（offer和poll）？？？</span>        taskQueue<span class="token punctuation">.</span><span class="token function">setForcedRemainingCapacity</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将核心线程池设为0：内部会中断所有空闲线程并触发getTask()里的退出逻辑</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ======== 恢复线程池原始配置，避免影响http请求 ============</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>taskQueue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        taskQueue<span class="token punctuation">.</span><span class="token function">resetForcedRemainingCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>savedCorePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TaskQueue"><a href="#TaskQueue" class="headerlink" title="TaskQueue"></a>TaskQueue</h4><p>​单靠上述的 <code>ThreadLocalLeakPreventionListener</code> 并不足以关闭运行中的 worker 线程。为此，Tomcat 自定义了一个 <code>TaskQueue</code> 作为线程池的任务队列，并重写了几个关键方法，以精细控制 worker 线程的创建与回收策略。</p><p>​这里重点关注其重写的 <code>poll</code> 和 <code>take</code> 方法 —— 它们是线程池中 worker 线程获取任务的主要途径。Tomcat 在此做了一个巧妙的设计：<strong>仅对需要被回收的线程（即线程创建时间早于当前 Context 的上次 stop 时间）应用 fallback 策略</strong></p><ul><li><strong>take() 方法原本是阻塞式的，这里被 fallback 到poll()，即允许超时等待，从而避免永久阻塞</strong></li><li><strong>poll()若超时返回 null，则直接 fallback 到抛出异常，从而促使线程正常终止</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskQueue</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ================= 重写的offer方法，调整线程的创建策略 ====================</span>    <span class="token comment" spellcheck="true">/**     * 目的：尽量优先创建线程，而不是把任务直接塞进队列     * 原因：Tomcat 设计希望在线程数未满时尽可能创建新线程，提高吞吐量。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>Runnable o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果线程池已达到最大线程数，那只能乖乖入队列</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> parent<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 还有空闲线程（已提交任务数 &lt;= 当前线程数），也入队</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getSubmittedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 线程数没达到最大限制，并且提交的任务数已多余当前线程数（请求压力大）。则返回 false 触发线程池直接创建新建线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> parent<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 默认入队</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ================= 重写poll和take方法（仅对需要被终结的线程施加fallback策略，进而调整了线程的回收策略） =========================</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Runnable <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>runnable <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 内部会判断当前线程是否需要被终结，需要的话会抛出异常，最终终结当前线程</span>            parent<span class="token punctuation">.</span><span class="token function">stopCurrentThreadIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 只要有任务，还是直接返回，不影响活跃线程</span>        <span class="token keyword">return</span> runnable<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Runnable <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span><span class="token function">currentThreadShouldBeStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// fallback为poll方法，即允许超时</span>            <span class="token keyword">return</span> <span class="token function">poll</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getKeepAliveTime</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">,</span>                    TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 正常线程还是阻塞等待</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>​<strong><code>ThreadLocalLeakPreventionListener</code> 负责主动回收空闲的 worker 线程，而 <code>TaskQueue</code> 则通过重写 <code>poll</code> 和 <code>take</code> 方法，利用线程池的任务获取机制，实现对线程回收的兜底策略</strong>。两者配合，仅在 <strong>线程空闲时</strong> 才进行处理，<strong>不影响活跃线程的正常工作</strong>。通过这种机制，<strong>Tomcat 能够在热加载后安全且优雅的清理掉旧的所有worker 线程，从而避免因ThreadLocal残留导致的内存泄漏。</strong></p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://blog.shanzhao.site/2020-11-21/tan-tan-threadlocal-wei-shi-me-bei-she-ji-wei-ruo-yin-yong/">ThreadLocal弱引用原因</a></li><li><a href="https://blog.shanzhao.site/2020-05-12/java-yuan-ma-pian-xian-cheng-chi/#1-2-%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95">线程池源码解析</a></li><li><a href="https://cwiki.apache.org/confluence/display/tomcat/MemoryLeakProtection">Tomcat内存泄漏原文</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热加载 </tag>
            
            <tag> 垃圾回收 </tag>
            
            <tag> 内存泄漏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-热加载和相关Class的垃圾回收探讨（一）</title>
      <link href="/2021-12-11/tomcat-re-jia-zai-he-xiang-guan-class-de-la-ji-hui-shou-tan-tao-yi/"/>
      <url>/2021-12-11/tomcat-re-jia-zai-he-xiang-guan-class-de-la-ji-hui-shou-tan-tao-yi/</url>
      
        <content type="html"><![CDATA[<hr><p>​本文深入分析了 WebappClassLoader 的热加载整体流程，并<strong>对热加载过程中遗留的垃圾回收问题进行了系统性拆解</strong>。重点涵盖了：<strong>垃圾的分类、核心引用关系的梳理、各类资源的清理策略</strong>。最后<strong>详细解析了 Tomcat 如何通过兜底机制清理仍存活的线程，并结合实践给出了线程资源管理的最佳建议</strong></p><span id="more"></span><h2 id="热加载"><a href="#热加载" class="headerlink" title="热加载"></a>热加载</h2><p>​WebappLoader#backgroundProcess是负责检测和触发热加载的方法入口，其被standardEngine的backgroundThread线程周期性触发，被调用路径为：<strong>ContainerBackgroundProcessor#run -&gt; ContainerBackgroundProcessor#processChildren -&gt; StandardContext.backgroundProcess -&gt; Loader#backgroundProcess</strong></p><p>​<strong>当web可触发context的资源重加载时，backgroundThread线程会销毁（stop）当前context内部的所有资源，并进行重启context（start），start过程中使用了新的WebappClassLoader加载项目相关的class资源，因此可以在不重启整个 Tomcat 进程的前提下，以实现应用级别的热部署与资源更新</strong></p><h3 id="WebappLoader-backgroundProcess"><a href="#WebappLoader-backgroundProcess" class="headerlink" title="WebappLoader#backgroundProcess"></a>WebappLoader#backgroundProcess</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">backgroundProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// reloadable由StandardContext.reloadable设置，默认为false，也就表示需要在context.xml里主动配置reloadable=true才开启热加载检测资格</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>reloadable <span class="token operator">&amp;&amp;</span> <span class="token function">modified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Context里有class或jar改变了，需要进行热加载</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 临时切换到Tomcat的commonLoader，避免使用即将被卸载的WebappClassLoader</span>                <span class="token comment" spellcheck="true">// 确保reload过程中使用的是稳定的类加载器环境</span>                Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContextClassLoader</span><span class="token punctuation">(</span>WebappLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    context<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span><span class="token function">getLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 热加载完毕，将context里新的WebappClassLoader绑定到线程上下文中</span>                    Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContextClassLoader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="class资源变化监测"><a href="#class资源变化监测" class="headerlink" title="class资源变化监测"></a>class资源变化监测</h4><p><code>WebappClassLoaderBase#modified()</code> 负责监测当前 Web 应用中的 class 资源是否发生变更，用于触发 Context 重载。当以下任一变化发生时，Tomcat 会认为需要重新加载当前 Context：</p><ul><li><strong>&#x2F;WEB-INF&#x2F;classes 目录下已加载的 class 文件被修改</strong></li><li><strong>&#x2F;WEB-INF&#x2F;lib目录下的jar包有修改、新增和删除</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">modified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 遍历所有已加载的 class 文件，判断是否有被修改</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ResourceEntry<span class="token operator">></span> entry <span class="token operator">:</span> resourceEntries<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> cachedLastModified <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lastModified<span class="token punctuation">;</span>        <span class="token keyword">long</span> lastModified <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">getClassLoaderResource</span><span class="token punctuation">(</span>                entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastModified <span class="token operator">!=</span> cachedLastModified<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// class 文件修改时间变化，说明 class 被更新，需要重载 Context</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. 遍历 /WEB-INF/lib 下的 jar 包，判断是否有变动</span>    WebResource<span class="token punctuation">[</span><span class="token punctuation">]</span> jars <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">listResources</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/lib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> jarCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>WebResource jar <span class="token operator">:</span> jars<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jar<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".jar"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> jar<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> jar<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            jarCount<span class="token operator">++</span><span class="token punctuation">;</span>            Long recordedLastModified <span class="token operator">=</span> jarModificationTimes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>jar<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>recordedLastModified <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// jar包没有记录上次修改时间，代表这个jar是新增的，也需要重载context</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>recordedLastModified<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> jar<span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 时间变了，表示被修改过，也要重载context</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 检查是否有 jar 包被删除（jar 数量变少）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>jarCount <span class="token operator">&lt;</span> jarModificationTimes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4. 无任何资源变化，则不需要重载Context</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="context重加载"><a href="#context重加载" class="headerlink" title="context重加载"></a>context重加载</h4><p>Context 重加载的本质流程就是：先执行 <code>stop()</code>，再重新 <code>start()</code>。start流程可以看<a href="https://blog.shanzhao.site/2021-10-03/tomcat-context-contextconfig-he-wrapper/#start%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E6%80%BB%E7%BB%93">这里</a>，stop则负责关闭和清理已有资源，避免内存泄露。我这里简要梳理 下<code>stop()</code> 过程中各核心组件的销毁逻辑：</p><ol><li><strong>子容器 Servlet (StandardWrapper#stop)</strong><ul><li>依次销毁所有已加载的 Servlet 实例，调用其 <code>javax.servlet.Servlet#destroy()</code> 方法，完成业务资源释放</li></ul></li><li><strong>Filter组件销毁</strong><ul><li>调用所有已注册的 <code>javax.servlet.Filter#destroy()</code> 方法，清理过滤器资源。</li></ul></li><li><strong>Session 管理器 (StandardManager#stop)</strong><ul><li>触发 Session 持久化（等待context重启后再加载进来），同时清理过期的 Session 实例</li></ul></li><li><strong>Listener组件销毁</strong><ul><li>执行所有注册的 <code>javax.servlet.ServletContextListener#contextDestroyed()</code> 方法，通知应用关闭，释放监听资源。</li></ul></li><li><strong>类加载器资源清理 (WebappLoader#stop)</strong><ul><li>销毁 WebappClassLoader，清理已加载的 class 缓存、jar 缓存、资源引用</li><li>停止并回收与类加载器相关的线程，断开对外部资源的强引用，避免内存泄漏</li></ul></li></ol><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>​前面的都是铺垫，现在来探讨一个最重要的问题（当最终理解了这个问题后，任何java热加载工具如何垃圾回收探讨都不是难题）：</p><blockquote><p>​<strong>Tomcat 触发 Context 热加载后，系统中会产生哪些需要回收的垃圾？这些垃圾又该如何被回收？（如果回收不彻底，多次热加载最终可能引发 OOM 问题）</strong></p></blockquote><h3 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h3><p>首先我们可以将需要回收的资源粗分为如下两大类</p><h4 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h4><p>堆区由GC自动回收，记住一点，<strong>这个区内的对象能被回收的唯一方法是对象不可达</strong>（软引用和弱引用这些具有特定回收限制的实例不再考虑范围内）</p><ol><li><strong>Context 内部的对象实例</strong>：比如Servlet、Filter、Session、Spring容器里的bean等等，这部分是最多的</li><li><strong>线程相关对象</strong>：Context 内部自行启动的 Thread和线程池</li><li><strong>Class 对象</strong>：由 WebappClassLoader 加载的所有 Class 实例</li><li><strong>WebappClassLoader 实例本身</strong></li></ol><h4 id="非堆区"><a href="#非堆区" class="headerlink" title="非堆区"></a>非堆区</h4><ol><li>元空间 (Metaspace) 中的 klass 元数据：<strong>回收依赖JVM的class卸载机制</strong></li></ol><h3 id="回收探讨"><a href="#回收探讨" class="headerlink" title="回收探讨"></a>回收探讨</h3><p><strong>堆区垃圾回收的核心逻辑只有一点：对象是否可达（Reachable）。</strong>所以只要搞清楚对象的引用关系，就能推导出其回收条件。我们基于这个核心点，对上诉堆对内所有的对象进行追溯，看看到底它被哪些对象给持有</p><h4 id="Context-内部的对象实例"><a href="#Context-内部的对象实例" class="headerlink" title="Context 内部的对象实例"></a>Context 内部的对象实例</h4><p>​这部分是最简单的，这些对象都是应用程序中<strong>显示创建并赋值</strong>的对象。在context#stop期间，触发了各种内部组件的stop后，再<strong>对字段赋值为null就是在清除引用</strong>。Spring 容器则会在 <code>ApplicationContext#close()</code> 里统一销毁 Bean 并清理所有容器内引用。</p><h4 id="线程相关对象"><a href="#线程相关对象" class="headerlink" title="线程相关对象"></a>线程相关对象</h4><p>​Thread可作为GCRoot对象，所以<strong>对它的回收必须等Thread终结，否则任意一个存活的线程是不可能被回收的（其内部持有的contextClassLoader和其所有加载的class都不会被回收）</strong></p><h4 id="Class-对象"><a href="#Class-对象" class="headerlink" title="Class 对象"></a>Class 对象</h4><p>​Class对象稍复杂，它不仅有显示的引用（应用程序中显示使用），还有隐式的使用</p><table><thead><tr><th>引用链路</th><th>描述</th></tr></thead><tbody><tr><td><strong>A对象 → A.class</strong></td><td>所有基于 A.class 创建的对象，其对象头中都隐式持有指向 A.class 的指针。</td></tr><tr><td><strong>类加载器 → A.class</strong></td><td>加载 A.class 的类加载器持有一份强引用。</td></tr><tr><td><strong>其他显式引用</strong></td><td>例如缓存、反射、Class.forName() 结果等都可能让其他对象显示持有 A.class 引用。</td></tr></tbody></table><p>所以要回收Class对象，可以得出如下结论（以A.class为例）：</p><ol><li><strong>A.class创建的A对象都不可达，那么A对象头里的A.class指针也不可达</strong></li><li><strong>加载A.class的类加载器对象不可达</strong></li><li><strong>显示持有A.class的其他对象也不可达</strong></li></ol><h4 id="WebappClassLoader-实例"><a href="#WebappClassLoader-实例" class="headerlink" title="WebappClassLoader 实例"></a>WebappClassLoader 实例</h4><table><thead><tr><th>引用链路</th><th>描述</th></tr></thead><tbody><tr><td><strong>所有其加载的 Class → WebappClassLoader</strong></td><td>每个 Class 实例反向持有其加载器引用。</td></tr><tr><td><strong>线程的 contextClassLoader → WebappClassLoader</strong></td><td>活跃线程若未清理 contextClassLoader 也持有加载器引用。</td></tr></tbody></table><p>WebappClassLoader回收前提：</p><ol><li><strong>所有由其加载的 Class 都已不可达</strong></li><li><strong>没有任何活跃线程仍在使用该类加载器作为 contextClassLoader</strong></li><li><strong>显示持有此类加载器的其他对象不可达</strong></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="https://img.shanzhao.site/file/1749993196721_class-reference.png" alt="class-reference.png"></p><p align="center" style="color: #888;">class相关对象引用链</p><p>所以垃圾能别回收的本质，是让持有A.class和WebappClassLoader对象的链路断掉，在这里我们只要做好如下清理条件，相关垃圾即可被回收</p><ol><li><strong>context下创建的所有Thread需要终结</strong></li><li><strong>context内部强引用链全部断开（置为null）</strong></li></ol><h3 id="tomcat释放资源"><a href="#tomcat释放资源" class="headerlink" title="tomcat释放资源"></a>tomcat释放资源</h3><p>​在正式进入分析之前，先明确一点：<strong>子线程默认继承父线程的 <code>contextClassLoader</code>（Thread的构造方法）</strong></p><p>​通过前面<a href="https://blog.shanzhao.site/2021-11-02/tomcat-ze-ren-lian-zhi-pipeline-valve-he-filter/#StandardHostValve">文章的分析</a>，可知在Context内部创建的线程都会使用Context的WebappClassLoadLoader作为其contextClassLoader，所以，<strong>只要线程的 <code>Thread.contextClassLoader</code> 是当前 Context 对应的 <code>WebappClassLoader</code>，就可以判断它属于当前 Context 内部创建的线程。</strong></p><h4 id="线程清理"><a href="#线程清理" class="headerlink" title="线程清理"></a>线程清理</h4><p><strong>核心方法在WebappClassLoaderBase#clearReferencesThreads</strong>，调用链为：</p><blockquote><ol><li>WebappLoader#stop</li><li>WebappClassLoaderBase#stop</li><li>WebappClassLoaderBase#clearReferences </li><li>WebappClassLoaderBase#clearReferencesThreads</li></ol></blockquote><p>逻辑总结：</p><ol><li><strong>获取当前JVM所有线程</strong>：通过遍历根 ThreadGroup进行所有线程的枚举</li><li><strong>遍历并筛选出当前Context创建的线程</strong>：判断<strong>依据为Thread.contextClassLoader &#x3D;&#x3D; Context.WebappClassLoader</strong></li><li>根据是否是线程池创建的线程来分开处理<ol><li><strong>线程池创建的Thread：使用线程池的shutdownNow来优雅的关闭线程</strong></li><li><strong>非线程池线程：先发送中断信号，若无法中断则再直接调用Thread.stop方法来强制终结线程</strong></li></ol></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">clearReferencesThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取系统内所有活动线程</span>    Thread<span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token function">getThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Thread<span class="token operator">></span> threadsToStop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Thread thread <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ClassLoader ccl <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 只处理 contextClassLoader 是当前 WebappClassLoader 的线程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ccl <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 跳过当前线程自身，防止自杀</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">==</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">final</span> String threadName <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ThreadGroup tg <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> JVM_THREAD_GROUP_NAMES<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tg<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>clearReferencesHttpClientKeepAliveThread <span class="token operator">&amp;&amp;</span>                            threadName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Keep-Alive-Timer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Keep-Alive-Timer 特殊处理，仅替换其 contextClassLoader，避免泄露</span>                        thread<span class="token punctuation">.</span><span class="token function">setContextClassLoader</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// Don't warn about remaining JVM controlled threads</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// // 已经死亡的线程，则不需要再清理了</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>thread<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// TimerThread 可以被安全关闭</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"java.util.Timer"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        clearReferencesStopTimerThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">clearReferencesStopTimerThread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 仅当配置允许强制停止线程时才处理（clearReferencesStopThreads默认为false）</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clearReferencesStopThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 尝试检测是否为 ThreadPoolExecutor 的 worker 线程，优先关闭线程池本身</span>                <span class="token keyword">boolean</span> usingExecutor <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 兼容不同 JDK 实现，寻找包装的 runnable 字段</span>                    Object target <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>String fieldName <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"target"</span><span class="token punctuation">,</span> <span class="token string">"runnable"</span><span class="token punctuation">,</span> <span class="token string">"action"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            Field targetField <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            targetField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            target <span class="token operator">=</span> targetField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 判断是否为 ThreadPoolExecutor.Worker，如果是则使用线程池的shutdownNow方法来优雅关闭线程</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                            target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>                                    <span class="token string">"java.util.concurrent.ThreadPoolExecutor.Worker"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Field executorField <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"this$0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        executorField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Object executor <span class="token operator">=</span> executorField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token keyword">instanceof</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token punctuation">(</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">)</span> executor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            usingExecutor <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> IllegalAccessException <span class="token operator">|</span> RuntimeException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"webappClassLoader.stopThreadFail"</span><span class="token punctuation">,</span>                            thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getContextName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 非线程池线程，直接尝试 interrupt 终止</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>usingExecutor <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>thread<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 记录仍需等待确认终止的线程</span>                threadsToStop<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对需要stop的线程都直接终结</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Thread t <span class="token operator">:</span> threadsToStop<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Quit the while loop</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 存活才终结</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> Thread<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取当前线程所在的线程组</span>    ThreadGroup tg <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 向上遍历，找到根线程组（整个 JVM 的顶级线程组）</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tg<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tg <span class="token operator">=</span> tg<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> se<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> threadCountGuess <span class="token operator">=</span> tg<span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span>threadCountGuess<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 枚举所有的线程</span>    <span class="token keyword">int</span> threadCountActual <span class="token operator">=</span> tg<span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// enumerate 方法在数组空间不足时会默默丢弃多余的线程，</span>    <span class="token comment" spellcheck="true">// 因此当实际数量等于猜测数量时，说明数组可能装不下，需要扩容重试</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>threadCountActual <span class="token operator">==</span> threadCountGuess<span class="token punctuation">)</span> <span class="token punctuation">{</span>        threadCountGuess <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>        threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span>threadCountGuess<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 继续枚举</span>        threadCountActual <span class="token operator">=</span> tg<span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> threads<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>​通过上述<strong>对 Context 内线程资源的兜底清理</strong>（这一部分其实是热加载内存泄漏中最核心、最容易被忽略的风险点 —— 因为实际项目中，大量使用了自定义线程或线程池，且它们往往没能纳入 Spring.ApplicationContext 的生命周期管理），<strong>再加上在 <code>Context#stop</code> 阶段，对各个强引用对象统一置 <code>null</code>，主动断开引用链，基本可以保证 Context 在热加载时不会产生内存泄漏问题。</strong></p><p>最后需要特别强调一点：</p><p>​<strong>项目中使用线程池时，强烈建议将其纳入 Context 生命周期统一管理（例如通过 Spring 的 <code>ThreadPoolExecutorFactoryBean</code> 来创建线程池）。</strong></p><p>​因为 Tomcat 在兜底清理时，如果无法识别线程归属，最终可能会直接调用 <code>Thread.stop()</code> 强行终止线程 —— 这种方式极其不安全，容易导致数据不一致等问题。让线程池受控于 Spring 容器，借助 <code>shutdown()</code> 或 <code>shutdownNow()</code> 做平滑关闭，是最稳妥、安全的方案。</p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热加载 </tag>
            
            <tag> 垃圾回收 </tag>
            
            <tag> 内存泄漏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-类加载器</title>
      <link href="/2021-11-23/tomcat-lei-jia-zai-qi/"/>
      <url>/2021-11-23/tomcat-lei-jia-zai-qi/</url>
      
        <content type="html"><![CDATA[<hr><p>​以问题切入，深入剖析了commonLoader与WebappClassLoader各自的定位与设计初衷，重点分析了WebappClassLoader如何在保证JVM核心类安全的前提下，部分打破双亲委派机制，实现Web应用之间的真正隔离。</p><span id="more"></span><p>​以当前8.5.x版本为例，在具体分析之前，先想一个问题，带着这个问题再去思考为什么这么设计：</p><blockquote><p>​当我们把一个 Web 项目部署到 Tomcat 里后，项目里用到的各种 class 文件，Tomcat 到底是从哪些地方去加载它们的？以及为什么要用这些不同的类加载器去加载？</p></blockquote><p>整体上可以简单归类为三部分来源：</p><ol><li><strong>Tomcat 自己的依赖（由commonLoader加载）</strong>：<strong>安装目录里lib目录下所有jar</strong>，这些都是 Tomcat 启动和运行时所需要的核心库。</li><li><strong>Web 应用本身的依赖（由WebappClassLoader加载）</strong>，以context为user举例。<ol><li><code>webapps/user/WEB-INF/classes/</code>：存放应用自身编译后的 class 文件</li><li><code>webapps/user/WEB-INF/lib/</code> ：存放应用所依赖的第三方 jar 包</li></ol></li><li><strong>JDK依赖（由 BootstrapClassLoader 加载）</strong>：比如 <code>rt.jar</code>（JDK 8 及以下）或 <code>java.base</code>（JDK 9 及以后），这些属于 JVM 层面的标准库，</li></ol><p>​Web 应用在运行时所依赖的 class，基本都来自于上述几个目录。而 <strong>Tomcat 为了支持不同context之间的隔离、避免类冲突、支持热部署等需求，专门设计了一套层级化的类加载器体系，来负责加载这些不同来源的 class。</strong></p><h2 id="commonLoader"><a href="#commonLoader" class="headerlink" title="commonLoader"></a>commonLoader</h2><h3 id="conf-catalina-properties相关配置"><a href="#conf-catalina-properties相关配置" class="headerlink" title="conf&#x2F;catalina.properties相关配置"></a>conf&#x2F;catalina.properties相关配置</h3><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">common.loader</span><span class="token punctuation">=</span><span class="token attr-value">"${catalina.base}/lib","${catalina.base}/lib/*.jar","${catalina.home}/lib","${catalina.home}/lib/*.jar"</span><span class="token attr-name">server.loader</span><span class="token punctuation">=</span><span class="token attr-name">shared.loader</span><span class="token punctuation">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="初始化代码"><a href="#初始化代码" class="headerlink" title="初始化代码"></a>初始化代码</h3><p>调用路径为：Bootstrap#main -&gt; Bootstrap#start -&gt; Bootstrap#init -&gt; Bootstrap#initClassLoaders</p><p>默认的conf&#x2F;catalina.properties配置里server.loader和shared.loader都为空，所以catalinaLoader和sharedLoader都被赋值为了commonLoader</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 初始化三层类加载器：common、server（catalina）、shared */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initClassLoaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// commonLoader：公共类加载器，供 Tomcat 内部和所有 Web 应用共享</span>        <span class="token comment" spellcheck="true">// 默认搜索目录：</span>        <span class="token comment" spellcheck="true">//   ${catalina.base}/lib/</span>        <span class="token comment" spellcheck="true">//   ${catalina.base}/lib/*.jar</span>        <span class="token comment" spellcheck="true">//   ${catalina.home}/lib/</span>        <span class="token comment" spellcheck="true">//   ${catalina.home}/lib/*.jar</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">// 说明：</span>        <span class="token comment" spellcheck="true">//   - ${catalina.base}：运行时指定的工作目录，可以实现多实例共享一个 Tomcat 安装</span>        <span class="token comment" spellcheck="true">//   - ${catalina.home}：Tomcat 的安装目录</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">// 如果未在 catalina.properties 里配置 common.loader，则默认使用当前类的 ClassLoader</span>        commonLoader <span class="token operator">=</span> <span class="token function">createClassLoader</span><span class="token punctuation">(</span><span class="token string">"common"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>commonLoader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            commonLoader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 默认为上面的commonLoader</span>        catalinaLoader <span class="token operator">=</span> <span class="token function">createClassLoader</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> commonLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认为上面的commonLoader</span>        sharedLoader <span class="token operator">=</span> <span class="token function">createClassLoader</span><span class="token punctuation">(</span><span class="token string">"shared"</span><span class="token punctuation">,</span> commonLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Class loader creation threw exception"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> ClassLoader <span class="token function">createClassLoader</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ClassLoader parent<span class="token punctuation">)</span>        <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从 catalina.properties 读取对应的 loader 配置</span>    String value <span class="token operator">=</span> CatalinaProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">".loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// value为空，则使用parent</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> parent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// value解析和占位符替换</span>    value <span class="token operator">=</span> <span class="token function">replace</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Repository<span class="token operator">></span> repositories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> repositoryPaths <span class="token operator">=</span> <span class="token function">getPaths</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String repository <span class="token operator">:</span> repositoryPaths<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>repository<span class="token punctuation">)</span><span class="token punctuation">;</span>            repositories<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Repository</span><span class="token punctuation">(</span>repository<span class="token punctuation">,</span> RepositoryType<span class="token punctuation">.</span>URL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Ignore</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Local repository</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>repository<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"*.jar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            repository <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> repository<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">"*.jar"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            repositories<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Repository</span><span class="token punctuation">(</span>repository<span class="token punctuation">,</span> RepositoryType<span class="token punctuation">.</span>GLOB<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>repository<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".jar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            repositories<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Repository</span><span class="token punctuation">(</span>repository<span class="token punctuation">,</span> RepositoryType<span class="token punctuation">.</span>JAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            repositories<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Repository</span><span class="token punctuation">(</span>repository<span class="token punctuation">,</span> RepositoryType<span class="token punctuation">.</span>DIR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 根据class所在的位置，创建一个URLClassLoader</span>    <span class="token keyword">return</span> ClassLoaderFactory<span class="token punctuation">.</span><span class="token function">createClassLoader</span><span class="token punctuation">(</span>repositories<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="classLoader引用设置"><a href="#classLoader引用设置" class="headerlink" title="classLoader引用设置"></a>classLoader引用设置</h3><ol><li>在Bootstrap#init()方法里，会将catalinaLoader绑定到当前线程的contextClassLoader里，同时，通过反射将sharedLoader设置到Catalina.parentClassLoader字段里</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token function">initClassLoaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用catalinaLoader作为当前线程上下文的contextClassLoader，用于加载tomcat class</span>    Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContextClassLoader</span><span class="token punctuation">(</span>catalinaLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    SecurityClassLoad<span class="token punctuation">.</span><span class="token function">securityClassLoad</span><span class="token punctuation">(</span>catalinaLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> startupClass <span class="token operator">=</span> catalinaLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.startup.Catalina"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object startupInstance <span class="token operator">=</span> startupClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 使用反射将sharedLoader设置到Catalina.parentClassLoader字段</span>    String methodName <span class="token operator">=</span> <span class="token string">"setParentClassLoader"</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> paramTypes<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    paramTypes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ClassLoader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object paramValues<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    paramValues<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> sharedLoader<span class="token punctuation">;</span>    Method method <span class="token operator">=</span>        startupInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> paramTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>startupInstance<span class="token punctuation">,</span> paramValues<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>在 Catalina 中创建用于解析 <code>server.xml</code> 的 Digester 时，涉及到类加载器的一些关键配置。这里仅整理与类加载器相关的部分逻辑</p><ul><li><p><strong>设置Digester.useContextClassLoader&#x3D;true</strong></p><blockquote><p>​这一配置让 Digester 在解析 <code>server.xml</code> 并实例化各个 Tomcat 组件时，优先使用当前线程的 <code>contextClassLoader</code>（即 <code>catalinaLoader</code>，本质上就是 <code>commonLoader</code>）来加载类。这样可以确保 Tomcat 核心组件统一通过 common 层加载</p></blockquote></li><li><p><strong>设置 Engine 的 <code>parentClassLoader</code></strong></p><blockquote><p>​在实例化 <code>Engine</code> 时，会将其内部的 <code>ContainerBase.parentClassLoader</code> 设置为 <code>sharedLoader</code>（其实也是 <code>commonLoader</code>）。这一步非常关键，因为后续每个 <code>WebappClassLoader</code> 的父加载器就是从这里继承而来</p></blockquote></li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Digester <span class="token function">createStartDigester</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> t1<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Initialize the digester</span>    Digester digester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Digester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用当前Thead的contextClassLoader加载指定的class</span>    digester<span class="token punctuation">.</span><span class="token function">setUseContextClassLoader</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将sharedLoader设置到Engine里的parentClassLoader字段</span>    digester<span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">"Server/Service/Engine"</span><span class="token punctuation">,</span>                     <span class="token keyword">new</span> <span class="token class-name">SetParentClassLoaderRule</span><span class="token punctuation">(</span>parentClassLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> digester<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键要点"><a href="#关键要点" class="headerlink" title="关键要点"></a>关键要点</h3><p>通过上诉的配置解析和设置，可总结出如下关键要点，对后续的WebappClassLoader分析有很大作用：</p><ol><li><strong>sharedLoader 和 catalinaLoader 基本都被废弃了</strong>，最终它们都被统一设置为了 <code>commonLoader</code>，即默认只使用 common 层的类加载器。</li><li>Tomcat 主线程的 <code>contextClassLoader</code> 被设置为了 <code>catalinaLoader</code>（也就是 <code>commonLoader</code>），主要用于加载 Tomcat 自身运行所需的类（即 <code>lib</code> 目录下的 jar 或 class 文件）。</li><li><code>StandardEngine</code> 的 <code>parentClassLoader</code> 被设置为了 <code>sharedLoader</code>（实际上还是 <code>commonLoader</code>），用于作为后续每个 <code>WebappClassLoader</code>（即 web 应用类加载器）的父加载器</li></ol><h2 id="WebappClassLoader"><a href="#WebappClassLoader" class="headerlink" title="WebappClassLoader"></a>WebappClassLoader</h2><p>通过之前<a href="https://blog.shanzhao.site/2021-10-03/tomcat-context-contextconfig-he-wrapper/#start%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E6%80%BB%E7%BB%93">分析的文章</a>，StandardContext#start会触发WebappLoader#start，需要注意的是，<code>WebappLoader</code> 本身并不是一个类加载器，而是通过实现 <code>Loader</code> 和 <code>Lifecycle</code> 接口，负责在各个生命周期阶段对真正的 <code>WebappClassLoader</code> 进行管理和控制。其创建真正的WebappClassLoader在WebappLoader#start阶段，核心如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建真正的 Web 应用类加载器 WebappClassLoader</span>        classLoader <span class="token operator">=</span> <span class="token function">createClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classLoader<span class="token punctuation">.</span><span class="token function">setResources</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置类加载委托模型，决定优先使用父加载器还是自身加载器（默认为false，即不优先使用父加载器加载class）</span>        classLoader<span class="token punctuation">.</span><span class="token function">setDelegate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setClassPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动 WebappClassLoader（缓存/WEB-INF/classes和/WEB-INF/lib下的资源）</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...省略</span>    <span class="token punctuation">}</span>    <span class="token function">setState</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> WebappClassLoaderBase <span class="token function">createClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// loader为org.apache.catalina.loader.ParallelWebappClassLoader</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>loaderClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    WebappClassLoaderBase classLoader <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentClassLoader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内部会递归向上查找，也就是最终会使用Engine内部的parentClassLoader，即sharedLoader</span>        parentClassLoader <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getParentClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">setParentClassLoader</span><span class="token punctuation">(</span>parentClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用反射将sharedLoader作为构造参数，实例化出ParallelWebappClassLoader加载器</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> argTypes <span class="token operator">=</span> <span class="token punctuation">{</span> ClassLoader<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token punctuation">{</span> parentClassLoader <span class="token punctuation">}</span><span class="token punctuation">;</span>    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constr <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>argTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>    classLoader <span class="token operator">=</span> <span class="token punctuation">(</span>WebappClassLoaderBase<span class="token punctuation">)</span> constr<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> classLoader<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ParallelWebappClassLoader"><a href="#ParallelWebappClassLoader" class="headerlink" title="ParallelWebappClassLoader"></a>ParallelWebappClassLoader</h3><h4 id="start"><a href="#start" class="headerlink" title="start"></a>start</h4><p>相关字段和方法如下，主要是将当前项目里的&#x2F;WEB-INF&#x2F;classes和&#x2F;WEB-INF&#x2F;lib目录下的class资源缓存到localRepositories（可以理解为classpath），以供后续来实际加载class</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 当前 Web 应用的本地 classpath 资源（/WEB-INF/classes 以及 /WEB-INF/lib 下的所有 jar）</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>URL<span class="token operator">></span> localRepositories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 生命周期的start方法，缓存class目录资源 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>    state <span class="token operator">=</span> LifecycleState<span class="token punctuation">.</span>STARTING_PREP<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 扫描 /WEB-INF/classes 目录，将其加入本地 classpath</span>    WebResource<span class="token punctuation">[</span><span class="token punctuation">]</span> classesResources <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/classes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>WebResource classes <span class="token operator">:</span> classesResources<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classes<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> classes<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            localRepositories<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>classes<span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. 扫描 /WEB-INF/lib 目录下所有可读的 jar 包，将其加入本地 classpath，同时记录最后修改时间</span>    WebResource<span class="token punctuation">[</span><span class="token punctuation">]</span> jars <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">listResources</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/lib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>WebResource jar <span class="token operator">:</span> jars<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jar<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".jar"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> jar<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> jar<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            localRepositories<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jar<span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jarModificationTimes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>jar<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>jar<span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    state <span class="token operator">=</span> LifecycleState<span class="token punctuation">.</span>STARTED<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="loadClass"><a href="#loadClass" class="headerlink" title="loadClass"></a>loadClass</h4><p>核心字段和方法如下（已删除不重要的部分），通过如下源码可总结出loadClass的步骤：</p><ol><li><strong>缓存检查</strong><ul><li>先检查<strong>当前 WebappClassLoader 是否已加载过指定的类，如果已加载，直接返回已加载的类，避免重复加载</strong></li></ul></li><li><strong>检查是否应尝试使用 JVM 内部类加载器（类似传统的类加载器加载方式）</strong><ul><li>若<strong>JVM内部类加载器能找到指定class资源，则由其加载指定的class</strong></li></ul></li><li><strong>根据委派规则（delegateLoad）决定加载顺序</strong>，delegateLoad一般都为false（若为true则颠倒顺序）<ul><li><strong>先本地加载（当前 Web 应用内），尝试从&#x2F;WEB-INF&#x2F;classes、&#x2F;WEB-INF&#x2F;lib文件夹下加载指定class</strong></li><li><strong>否则交由父加载器（sharedLoader）兜底，即从tomcat的lib目录里的jar加载指定class</strong></li></ul></li><li>以上都没找到，则抛出ClassNotFoundException</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">WebappClassLoaderBase</span> <span class="token keyword">extends</span> <span class="token class-name">URLClassLoader</span>        <span class="token keyword">implements</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">,</span> InstrumentableClassLoader<span class="token punctuation">,</span> WebappProperties<span class="token punctuation">,</span> PermissionCheck <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 绑定的 Web 资源接口，实际提供 /WEB-INF/classes、/WEB-INF/lib 等资源访问能力</span>    <span class="token keyword">protected</span> WebResourceRoot resources <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前加载过的class的缓存(/WEB-INF/classes目录下)</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ResourceEntry<span class="token operator">></span> resourceEntries <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否强制委派给父类加载器优先加载。默认为false，表示优先当前类加载器先加载类</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> delegate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// /WEB-INF/lib 目录下jar包的修改时间（热加载使用）</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> jarModificationTimes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// tomcat的sharedLoader（URLClassLoader）</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> ClassLoader parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 标识是否有外部 repository 被注册（即 localRepositories 是否有值）</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> hasExternalRepositories <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前 Web 应用的本地 classpath 资源（/WEB-INF/classes 以及 /WEB-INF/lib 下的所有 jar）</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>URL<span class="token operator">></span> localRepositories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 把 webapp 的所有 classpath 资源（包括 /WEB-INF/classes 和 /WEB-INF/lib/*.jar）整理成 URL     * 数组，     * 供自己这个URLClassLoader实现去加载class。hasExternalRepositories也会被设置为true     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> URL<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getURLs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>URL<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>localRepositories<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getURLs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 父类URLClassLoader的方法，配合getURLs()方法，设置hasExternalRepositories为true     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addURL</span><span class="token punctuation">(</span>URL url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        hasExternalRepositories <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 先检查 Web 应用是否已停止，防止在已停止的 webapp 中加载类</span>            <span class="token function">checkStateForClassLoading</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 1、从缓存中resourceEntries查找当前类加载器是否已经加载了这个class</span>            clazz <span class="token operator">=</span> <span class="token function">findLoadedClass0</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">resolveClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 2、从当前类加载器的native中查找是否已经缓存过（范围比findLoadedClass0更大）</span>            clazz <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">resolveClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// class名转换为路径。比如：site.shanzhao.Demo => /site/shanzhao/Demo.class</span>            String resourceName <span class="token operator">=</span> <span class="token function">binaryNameToPath</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 检查jvm的类加载器是否加载过当前class</span>            ClassLoader javaseLoader <span class="token operator">=</span> <span class="token function">getJavaseClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> tryLoadingFromJavaseLoader<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                URL url <span class="token operator">=</span> javaseLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>                tryLoadingFromJavaseLoader <span class="token operator">=</span> <span class="token punctuation">(</span>url <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tryLoadingFromJavaseLoader <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 3. jvm类加载器加载过，直接从jvm类加载器获取这个Class</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tryLoadingFromJavaseLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    clazz <span class="token operator">=</span> javaseLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">resolveClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Ignore</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 强制委派父加载器加载 or 一些特定核心类 ：都先走父类加载器进行加载</span>            <span class="token comment" spellcheck="true">// 一般情况都应为false</span>            <span class="token keyword">boolean</span> delegateLoad <span class="token operator">=</span> delegate <span class="token operator">||</span> <span class="token function">filter</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4. 设置了delegate为true，则尝试使用父类加载器（默认即tomcat的common类加载器加载）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>delegateLoad<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">resolveClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Ignore</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// ================== 走到这，才开始尝试使用本类加载加载指定的class</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 5. 开始使用当前类加载器加载（即 /WEB-INF/classes 与 /WEB-INF/lib）</span>                clazz <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">resolveClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Ignore</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>delegateLoad<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 6. delegateLoad为false，再使用父类加载器（为sharedLoader，默认也是commonLoader）尝试加载指定的class</span>                    clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">resolveClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Ignore</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从当前项目的/WEB-INF/classes 与 /WEB-INF/lib中加载指定class     */</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 1. 从/WEB-INF/classes文件夹下加载class(如果找到，还会缓存到resourceEntries字段里)</span>                clazz <span class="token operator">=</span> <span class="token function">findClassInternal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ... 异常处理</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>clazz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hasExternalRepositories<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 2. 利用父类URLClassLoader的功能，加载/WEB-INF/lib文件夹下jar里的class</span>                    clazz <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// ... 异常处理</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// =========== 到这说明/WEB-INF/classes 和/WEB-INF/lib 里都没找到指定的class，直接抛异常 =========</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结和思考"><a href="#总结和思考" class="headerlink" title="总结和思考"></a>总结和思考</h2><ol><li><p>commonLoader存在的意义？</p><blockquote><p>​Tomcat 里其实<strong>只有一个 JVM，但可以部署多个 web 应用（多个 context）。这些应用共用 Tomcat 核心组件</strong>，比如：Server、Connector、Valve、Pipeline 等。<strong>这些 Tomcat 核心组件的 class 没必要每个应用都各自加载一份，只需 JVM 里统一加载一次就行</strong>。</p><p>​<strong>commonLoader 就起这个作用，它其实就是一个 URLClassLoader，负责加载 <code>$CATALINA_HOME/lib</code> 目录下的 jar，把 Tomcat 自己的核心代码加载进来，供所有 Web 应用共享</strong>。</p></blockquote></li><li><p>WebappClassLoader的意义？</p><blockquote><p>​这里就是隔离问题的核心：<strong>全限定类名是类加载器判定是否已加载的唯一依据</strong>。</p><p>​假设有多个 web 应用，它们各自依赖了同一个类 <code>site.shanzhao.Demo</code>，但版本不同。如果 JVM 里只有一份类加载器，那只能加载一份，版本冲突就没法解决了。</p><p>​所以 Tomcat 设计了 WebappClassLoader：每个 context 都有自己的类加载器，各自加载自己的 <code>/WEB-INF/classes</code> 和 <code>/WEB-INF/lib</code> 目录，互不影响。这样<strong>同一个类名的 class 文件可以在不同应用里加载出不同版本，实现真正的隔离</strong>。</p><p>​另外，<strong>有独立的 WebappClassLoader 也方便支持应用的热部署和卸载</strong>：当某个 context 重新加载或被移除时，直接销毁这个 WebappClassLoader，连带其加载的所有 class、资源、线程都能一起回收，减少内存泄露风险。</p></blockquote></li><li><p>为什么不使用jdk的<code>AppClassLoader</code>替换<code>commonLoader</code>？从表面看，<code>AppClassLoader</code> 和 Tomcat 自定义的 <code>commonLoader</code> 都继承自 <code>URLClassLoader</code>，两者在能力上类似，都可以加载来自指定 <code>classpath</code> 的类或资源。但 Tomcat 并没有使用 <code>AppClassLoader</code> 来加载自身核心组件，为什么呢？</p><blockquote><ol><li>AppClassLoader 的 classpath 是在 JVM 启动阶段静态确定的（通过系统属性：java.class.path）,而<strong>Tomcat 的类加载器的classpath支持占位符（如${catalina.base}和${catalina.home}）</strong>，即允许用户扩展 classpath，更加灵活</li><li>Tomcat 在<strong>早期设计中区分了commonLoader，catalinaLoader和sharedLoader这三个类加载器用以实现模块隔离</strong>，AppClassLoader无法实现</li><li>WebappClassLoader 更不可能使用 AppClassLoader。单是启动时无法确定需要部署哪些Context以及各自classpath这条理由，就不可能用AppClassLoader，更别提Tomcat还支持了Web环境隔离和热加载这种高级特性了</li></ol></blockquote></li><li><p>哪个类加载器打破了双亲委派机制？</p><blockquote><p>其实<strong>只有 WebappClassLoader 部分打破了双亲委派</strong>。</p><p>commonLoader、sharedLoader 本身都是标准的 URLClassLoader，没有动过 loadClass 逻辑，完全遵守双亲委派。</p><p>WebappClassLoader 才重写了 loadClass，实现了一个 <strong>可控双亲委派</strong>：</p><ul><li><strong>没完全打破</strong>：<strong>JVM 自带的类（JDK 标准库等）依然优先交给 JVM 自己的类加载器加载，保证不会被项目里的同名 class 覆盖</strong>，比如你项目里搞个自定义 <code>java.lang.String</code>，Tomcat 也不会用你这份</li><li><strong>部分打破</strong>：<strong>对于非 JVM 内部类，WebappClassLoader 可以根据 delegate 参数决定是否优先本地加载，而不强行一律交给父加载器sharedLoader</strong></li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类加载器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-责任链之Pipeline+Valve和Filter</title>
      <link href="/2021-11-02/tomcat-ze-ren-lian-zhi-pipeline-valve-he-filter/"/>
      <url>/2021-11-02/tomcat-ze-ren-lian-zhi-pipeline-valve-he-filter/</url>
      
        <content type="html"><![CDATA[<hr><p>​分析了Tomcat中Pipeline+Valve和支持Filter的ApplicationFilterChain两种基于责任链模式的实现逻辑，并在最后总结了这两者的异同点以及为什么会有这两种类似的模块。</p><span id="more"></span><h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><p>​可以理解为<strong>请求传递的管道</strong>，每个容器（Engine、Host、Context、Wrapper）都关联一个独立的 Pipeline（管道），<strong>用于处理 HTTP 请求的责任链式分发</strong>，其默认实现为 <code>StandardPipeline</code></p><p>​每个 <strong>Pipeline 内部由一系列 <code>Valve</code>（阀门）组成</strong>，Pipeline为其提供了一系列接口（包括添加，删除和管理其生命周期管理等），<strong>并将它们构造成链式结构</strong>（addValve方法将新 Valve 插入到链中 <strong>倒数第二个位置</strong>，即 basic Valve 之前）</p><p>​<strong>请求到达某个容器时，会先被其 Pipeline 的第一个 Valve（first）处理，然后依次传递到后续的 Valve，最终到达 basic Valve。basic Valve 处理完成后，请求再被传递给下层子容器的 Pipeline，并最终传递到Filter中，从而达到请求贯穿全部容器的作用</strong></p><h3 id="核心字段和方法"><a href="#核心字段和方法" class="headerlink" title="核心字段和方法"></a>核心字段和方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardPipeline</span> <span class="token keyword">extends</span> <span class="token class-name">LifecycleBase</span> <span class="token keyword">implements</span> <span class="token class-name">Pipeline</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// basic valve（last valve），当前管道中最后处理的一个Valve</span>    <span class="token keyword">protected</span> Valve basic <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关联的容器</span>    <span class="token keyword">protected</span> Container container <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// value链首</span>    <span class="token keyword">protected</span> Valve first <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addValve</span><span class="token punctuation">(</span>Valve valve<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将容器也绑定搭到valve中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>valve <span class="token keyword">instanceof</span> <span class="token class-name">Contained</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>Contained<span class="token punctuation">)</span> valve<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContainer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果当前 Pipeline 已处于运行状态，则启动Valve的生命周期start方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>valve <span class="token keyword">instanceof</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> valve<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">LifecycleException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"standardPipeline.valve.start"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> valve<span class="token punctuation">;</span>            valve<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>basic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将valve添加到Valve链中倒数第二个位置（最后一个位置为固定的basic）</span>            Valve current <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> basic<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    current<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>valve<span class="token punctuation">)</span><span class="token punctuation">;</span>                    valve<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>basic<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                current <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        container<span class="token punctuation">.</span><span class="token function">fireContainerEvent</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>ADD_VALVE_EVENT<span class="token punctuation">,</span> valve<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Valve"><a href="#Valve" class="headerlink" title="Valve"></a>Valve</h3><p>​把http请求看作水流，Valve（阀门）即具有控制和预处理水流的作用。每个 Valve 通过其核心的 <code>invoke</code> 方法对请求 (<code>Request</code>) 和响应 (<code>Response</code>) 进行加工处理，并决定是否将请求继续传递给下一个 Valve。关键Valve如下</p><h4 id="StandardEngineValve"><a href="#StandardEngineValve" class="headerlink" title="StandardEngineValve"></a>StandardEngineValve</h4><p>​Engine中Pipeline里的最后一个阀门，主要是负责将请求传递给下一层容器Host的Pipeline中。源码较简单就不分析了</p><h4 id="StandardHostValve"><a href="#StandardHostValve" class="headerlink" title="StandardHostValve"></a>StandardHostValve</h4><p>​不仅是 Host 容器中 Pipeline 的最后一个阀门，同时<strong>也负责将 WebappClassLoader 绑定到当前处理请求的 worker 线程上。</strong> 这样做可以保证：</p><blockquote><p> ​<strong>在业务代码里通过 worker 线程间接创建的新对象、新类或新线程时，默认使用的都是当前 Context 下的 WebappClassLoader，从而确保整个 Web 应用内部始终使用一致的类加载器，避免类加载混乱问题。</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取当前请求对应的Web应用上下文</span>    Context context <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果没有找到对应的Context，直接返回404</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 绑定Web应用的类加载器到当前worker线程</span>        <span class="token comment" spellcheck="true">// 将当前worker线程的上下文类加载器设置为WebappClassLoader，这样后续的类加载和创建新的线程就会使用这个WebappClassLoader</span>        context<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>Globals<span class="token punctuation">.</span>IS_SECURITY_ENABLED<span class="token punctuation">,</span> MY_CLASSLOADER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isErrorReportRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 2. 请求向后续容器传递</span>                context<span class="token punctuation">.</span><span class="token function">getPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 异常处理（忽略）</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 3. 恢复原来的类加载器</span>        <span class="token comment" spellcheck="true">// 将当前worker线程的上下文类加载器恢复为原来的值（commonClassLoader），确保其不会污染其他请求</span>        context<span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span>Globals<span class="token punctuation">.</span>IS_SECURITY_ENABLED<span class="token punctuation">,</span> MY_CLASSLOADER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="StandardContextValve"><a href="#StandardContextValve" class="headerlink" title="StandardContextValve"></a>StandardContextValve</h4><p>​Context中Pipeline里的最后一个阀门，可以注意下<strong>对当前context的META-INF和WEB-INF目录访问的限制</strong>就是在这个Valve中做的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// META-INF和WEB-INF目录下的资源不允许访问</span>    MessageBytes requestPathMB <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestPathMB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>requestPathMB<span class="token punctuation">.</span><span class="token function">startsWithIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"/META-INF/"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token punctuation">(</span>requestPathMB<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"/META-INF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token punctuation">(</span>requestPathMB<span class="token punctuation">.</span><span class="token function">startsWithIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token punctuation">(</span>requestPathMB<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">.</span>SC_NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>    wrapper<span class="token punctuation">.</span><span class="token function">getPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="StandardWrapperValve"><a href="#StandardWrapperValve" class="headerlink" title="StandardWrapperValve"></a>StandardWrapperValve</h4><p>​StandardWrapperValve值得重点分析，<strong>它是 Tomcat 容器中请求分发链路的最后一个核心 <code>Valve</code>，其职责是将请求最终交付给具体的 <code>Servlet</code> 实例</strong>。核心逻辑如下</p><ol><li>分配Servlet（支持SingleThreadModel Servlet）</li><li><strong>构建ApplicationFilterChain：基于当前请求的URL和对应的Servlet，筛选出所有匹配的 Filter实例</strong></li><li><strong>执行过滤器链ApplicationFilterChain.doFilter（内部会在所有Filter执行完毕后再执行Servlet#service方法）</strong></li><li>资源回收和状态清理，并记录一些jmx的统计信息</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StandardWrapperValve</span> <span class="token keyword">extends</span> <span class="token class-name">ValveBase</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ============== jmx统计使用（毫秒单位）===============</span>    <span class="token comment" spellcheck="true">// 当前servlet的总处理时间</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> processingTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前servlet一次处理的最大耗时时间</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> maxTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前servlet一次处理的最小耗时时间</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> minTime <span class="token operator">=</span> Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 请求总数</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger requestCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 错误请求数</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger errorCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> unavailable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Throwable throwable <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">long</span> t1<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        requestCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StandardWrapper wrapper <span class="token operator">=</span> <span class="token punctuation">(</span>StandardWrapper<span class="token punctuation">)</span> <span class="token function">getContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Servlet servlet <span class="token operator">=</span> null<span class="token punctuation">;</span>        Context context <span class="token operator">=</span> <span class="token punctuation">(</span>Context<span class="token punctuation">)</span> wrapper<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 分配servlet并初始化</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>unavailable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                servlet <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ... 异常处理省略</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 2. 创建ApplicationFilterChain，并匹配合适的filter</span>        ApplicationFilterChain filterChain <span class="token operator">=</span>                ApplicationFilterFactory<span class="token punctuation">.</span><span class="token function">createFilterChain</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> wrapper<span class="token punctuation">,</span> servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>servlet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>filterChain <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 3. 执行过滤器链</span>                filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ... 异常处理省略</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// =========== 4. 资源释放让其可在使用，减少垃圾收集器的活动 ================</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>filterChain <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                filterChain<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// servlet归还</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>servlet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    wrapper<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span>servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ... 异常处理省略</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>servlet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">getAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    wrapper<span class="token punctuation">.</span><span class="token function">unload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ... 异常处理省略</span>            <span class="token punctuation">}</span>            <span class="token keyword">long</span> t2<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 统计耗时，并更新相关数据</span>            <span class="token keyword">long</span> time<span class="token operator">=</span>t2<span class="token operator">-</span>t1<span class="token punctuation">;</span>            processingTime <span class="token operator">+=</span> time<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> time <span class="token operator">></span> maxTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxTime<span class="token operator">=</span>time<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> time <span class="token operator">&lt;</span> minTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>                minTime<span class="token operator">=</span>time<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><h3 id="ApplicationFilterChain"><a href="#ApplicationFilterChain" class="headerlink" title="ApplicationFilterChain"></a>ApplicationFilterChain</h3><p>​过滤器链（FilterChain）用于管理多个过滤器（Filter）的执行顺序与截断逻辑，核心机制<strong>和 Spring AOP 中的切面调用逻辑类似</strong>：</p><blockquote><p>​<strong>每个请求对应一个独立的 FilterChain 实例，内部维护一个 <code>pos</code> 指针，在递归调用时通过传入当前 FilterChain 实例来控制指针的移动，从而实现 Filter 的顺序执行与截断控制</strong>。当所有 Filter 执行完毕（指针走到末尾）后，才会调用目标方法（FilterChain 中对应 Servlet#service()，Spring AOP 中则对应原始业务方法）；如果<strong>中间某个 Filter 没有继续调用 <code>chain.doFilter()</code>，则会直接返回，实现链路截断</strong></p></blockquote><p>​整体实现其实就是<strong>典型的过滤器（增强器）模型，既能保证 Filter（切面） 之间的执行顺序，又支持灵活的拦截与提前返回</strong>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationFilterChain</span> <span class="token keyword">implements</span> <span class="token class-name">FilterChain</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 合适的Filter数组</span>    <span class="token keyword">private</span> ApplicationFilterConfig<span class="token punctuation">[</span><span class="token punctuation">]</span> filters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前执行到的filter位置指针</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// filter的个数，&lt;= filters.lenght</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Servlet servlet <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        <span class="token function">internalDoFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  内部真正执行filter链逻辑     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">internalDoFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span>            ServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 依次调用下一个filter，直到filter链调用完毕</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ApplicationFilterConfig filterConfig <span class="token operator">=</span> filters<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Filter filter <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将当前对象传入，以此触发递归调用</span>                filter<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ... 异常处理</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 若果某个Filter内部若未调用 chain.doFilter()，则会退回到这以终止链式调用，Servlet 不会被执行</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// filter链调用完毕，最后再执行servlet的service方法</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            servlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ... 异常处理</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ApplicationDispatcher<span class="token punctuation">.</span>WRAP_SAME_OBJECT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                lastServicedRequest<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                lastServicedResponse<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a>对比总结</h2><p>​Pipeline+Valve和Filter<strong>都是基于责任链模式实现</strong>的，看起来功能上高度重叠，甚至都能互相模拟对方的行为，那为什么Tomcat还要设计两套机制呢？核心其实一句话可以总结：<strong>职责分离，边界清晰</strong></p><ol><li><p>Pipeline + Valve是 <strong>Tomcat 内部容器模型的一部分</strong>，完全属于 Tomcat 自己的体系。每个容器都有自己的 Pipeline，也就有自己的 Valve 链，各自的Pipeline也只关心当前容器：</p><blockquote><ul><li>Host 层可以做虚拟主机级别的统一控制</li><li>Context 层可以做应用级别的资源隔离与控制<ul><li>比方说其实在进入Pipiline之前的CoyoteAdapter里就解析出了当前url需要的Context容器，在这里就可以限制对web项目META-INF和WEB-INF目录的访问权限。但还是在Context的Valve里实现的，这是因为这些目录属于具体 web 项目，Tomcat定义了它们不允许被访问，所以它们的规则校验应当由 Tomcat的Context容器层编写</li></ul></li><li>Wrapper 层可以做单个 Servlet 级别的调度和分配（缓存和回收）</li></ul></blockquote></li><li><p>而Filter则是<strong>标准 Servlet 规范定义的一部分，属于业务开发层面的能力扩展</strong>。比如<strong>用户鉴权、具体的web资源访问权限限制、业务日志埋点</strong>等需求都由业务催生，就完全不该在容器层面（Pipeline + Valve）中去处理</p></li></ol><p>所以核心点：<strong>Pipeline + Valve 管容器架构，Filter 管业务</strong>，各司其职</p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 责任链模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-启动流程和http请求流程</title>
      <link href="/2021-10-18/tomcat-qi-dong-liu-cheng-he-http-qing-qiu-liu-cheng/"/>
      <url>/2021-10-18/tomcat-qi-dong-liu-cheng-he-http-qing-qiu-liu-cheng/</url>
      
        <content type="html"><![CDATA[<hr><p>​分析并总结了tomcat的启动流程和整个http请求流程，重点可关注<strong>启动流程的UML图和请求流程图</strong></p><span id="more"></span><h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><p>通过前面几篇的铺垫，现在终于可以进入到tomcat的启动流程了</p><blockquote><ol><li><a href="https://blog.shanzhao.site/2021-08-19/tomcat-zheng-ti-jia-gou-he-lifecycle/">架构和Lifecycle</a></li><li><a href="https://blog.shanzhao.site/2021-09-04/tomcat-server-he-service/">Server,Service,Conncector,ProtocolHandler和NioEndpoint</a></li><li><a href="https://blog.shanzhao.site/2021-09-23/tomcat-engine-host-he-hostconfig/">Engine,Host和HostConfig</a></li><li><a href="https://blog.shanzhao.site/2021-10-03/tomcat-context-contextconfig-he-wrapper/">Context,ContextConfig和Wrapper</a></li></ol></blockquote><p>​Tomcat 的启动通常通过执行 <code>catalina.sh start</code> 命令完成。通过如下脚本可知是调用 <code>org.apache.catalina.startup.Bootstrap#main(String[] args)</code> 方法，并传入了 <code>start</code> 参数。</p><p><img src="https://img.shanzhao.site/file/1749304903323_tomcat-catalina-start-shell.png" alt="tomcat中catalina.sh脚本启动"></p><h3 id="Bootstrap-main"><a href="#Bootstrap-main" class="headerlink" title="Bootstrap#main"></a>Bootstrap#main</h3><p><img src="https://img.shanzhao.site/file/1749374886361_tomcat-startup-uml.png" alt="tomcat-startup-uml.png"></p><p align="center" style="color: #888;">启动流程UML</p><h4 id="Bootstrap-初始化"><a href="#Bootstrap-初始化" class="headerlink" title="Bootstrap 初始化"></a>Bootstrap 初始化</h4><p>​主要是<strong>初始化三个类加载器（Common、Catalina、Shared），并实例化Catalina对象</strong>，为后续的load和start方法做准备</p><h4 id="Catalina-load"><a href="#Catalina-load" class="headerlink" title="Catalina#load()"></a>Catalina#load()</h4><p>​解析 <code>conf/server.xml</code> 配置文件，构建出一个Server树，并初始化Server（<strong>Server#init</strong>）</p><h4 id="Catalina-start"><a href="#Catalina-start" class="headerlink" title="Catalina#start()"></a>Catalina#start()</h4><p>​启动Server组件（<strong>Server#start</strong>）</p><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><ol><li><p><strong>容器的init() 并不会向子容器递归传播</strong></p><blockquote><p>​除了 <code>Engine</code> 容器在 <code>load()</code> 阶段被显式初始化外，其余子容器（如 <code>Host</code>、<code>Context</code>、<code>Wrapper</code>）的初始化会延迟到 <code>start()</code> 阶段。<strong>也就是说，<code>start()</code> 阶段才是触发完整容器结构构建的关键时机</strong></p></blockquote></li><li><p><strong>Socket 层组件的启动滞后于容器启动</strong></p><blockquote><p>​只有整个容器启动完毕，确保业务逻辑准备完毕，然后才启动 <code>Connector</code> 及其内部的 <code>ProtocolHandler</code> 和 <code>Endpoint</code>（负责监听端口与处理 Socket 请求）。<strong>避免http请求到来时，容器还不可用的状态</strong></p></blockquote></li><li><p><strong>Context 容器由 HostConfig 解析生成</strong></p><blockquote><p>​Host 启动时会触发其绑定的 LifecycleListener — <strong>HostConfig，来解析和构造StandardContext子容器</strong></p></blockquote></li><li><p><strong>Wrapper、Filter、Listener 由 ContextConfig 解析构建</strong></p><blockquote><p>​Context启动中会触其绑定的 LifecycleListener — <strong>ContextConfig，来进行全部的web.xml解析，完成对 Wrapper（即 Servlet）、Filter、Listener 等组件的构建与注册</strong></p></blockquote></li></ol><h2 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h2><p><img src="https://img.shanzhao.site/file/1749464102057_tomcat-request-handle.png" alt="tomcat-request-handle.png"></p><h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><ol><li><p><strong>Acceptor线程（监听并接受连接）</strong></p><blockquote><ol><li>Acceptor线程<strong>监听到8080端口产生的连接，将其构造为PollerEvent提交到Poller 的事件队列中</strong></li></ol></blockquote></li><li><p><strong>Poller线程（事件注册和监听）</strong></p><blockquote><ol><li><strong>轮询处理事件队列，将 <code>PollerEvent</code> 注册到 Java NIO 的 <code>Selector</code> 中，监听 <code>OP_READ</code> 事件</strong></li><li>当某个 channel 上有数据可读时，构造一个 <code>SocketProcessor</code> 实例，并提交给后端的 worker 线程池执行。</li></ol></blockquote></li><li><p><strong>Worker线程（处理Socket请求）</strong></p><blockquote><ol><li>SocketProcessor#doRun：进行tcp握手处理</li><li>ConnectionHandler#process：从 <code>Processor</code> 缓存池中获取或新建协议处理器（如 <code>Http11Processor</code>），并交由其处理请求</li><li>AbstractProcessorLight#process：对不同的socket状态进行分发和处理（SocketEvent.OPEN_READ则走到Http11Processor#service）</li><li>Http11Processor#service：<strong>通过Http11InputBuffer解析http请求，构造成Request和Response。</strong>并分发给CoyoteAdapter#service</li><li><strong>CoyoteAdapter#service</strong>：<strong>通过Mapper组件将请求 URL 映射到对应的 <code>Host</code>、<code>Context</code>、<code>Wrapper</code>并缓存，再调用顶层容器（<code>Engine</code>）的 <code>Pipeline</code>，正式进入容器级别的处理逻辑。</strong></li><li>请求通过容器中内部Pipeline里的Valve，从basic Valve流出再流向下一层容器中的first Valve：<strong>StandardEngineValve -&gt; StandardHostValve -&gt; StandardContextValve -&gt; StandardWrapperValve</strong></li><li><strong>最后一个阀门StandardWrapperValve：先进行Servlet的分配，再构造ApplicationFilterChain（过滤出对当前url能使用的Filter），依次调用 <code>doFilter()</code> 进行链式处理，全部通过后最终便走到Servlet#service中</strong></li></ol></blockquote></li></ol><h3 id="重点-1"><a href="#重点-1" class="headerlink" title="重点"></a>重点</h3><ol><li>Tomcat 使用 <strong>责任链（Pipeline + Valve）</strong> 模式处理请求流转，清晰解耦了容器级别的处理职责</li><li><strong>Processor 实例在请求结束后可被复用，避免重复构造，提升性能</strong></li><li><strong>NIO + 多线程池模型实现高并发处理</strong>，前端是少量 Acceptor&#x2F;Poller 线程，后端是灵活扩展的 Worker 线程池。</li></ol><h3 id="worker线程栈示例"><a href="#worker线程栈示例" class="headerlink" title="worker线程栈示例"></a>worker线程栈示例</h3><p><img src="https://img.shanzhao.site/file/1749393546758_tomcat-http-request-stack.png" alt="http请求栈"></p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-Context,ContextConfig和Wrapper</title>
      <link href="/2021-10-03/tomcat-context-contextconfig-he-wrapper/"/>
      <url>/2021-10-03/tomcat-context-contextconfig-he-wrapper/</url>
      
        <content type="html"><![CDATA[<hr><p>​StandardContext、ContextConfig以及StandardWrapper的核心逻辑源码解析及总结</p><span id="more"></span><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>​<code>Context</code> 是 Tomcat 中最关键的容器组件，默认实现为 <code>StandardContext</code>。<strong>每一个 <code>Context</code> 实例代表一个独立的 Web 应用</strong>。在内部，<code>Context</code> 承担了大量与 Web 应用生命周期相关的工作，比如<strong>类加载器的初始化、<code>web.xml</code> 的解析、<code>Servlet</code>&#x2F;<code>Filter</code>&#x2F;<code>Listener</code> 的注册与实例化等</strong>。</p><p>​<strong>每个 <code>Context</code> 对应一个唯一的 <code>ServletContext</code>，用于代表当前 Web 应用的上下文环境</strong>。通过 <code>StandardContext</code> 的 <code>startInternal</code> 方法，我们可以深入了解 Tomcat 是如何逐步构建一个 Web 应用的，并是在哪一步触发Spring启动的。</p><h3 id="start核心流程总结"><a href="#start核心流程总结" class="headerlink" title="start核心流程总结"></a>start核心流程总结</h3><ol><li>初始化和设置类加载器<ul><li>设置StandardContext.loader为WebappLoader（和当前Context的使用的类加载器有关）</li><li>启动WebappLoader（内部会创建ParallelWebappClassLoader）</li><li><strong>切换当前线程的类加载器为上述的ParallelWebappClassLoader，为后续类的隔离加载做准备（尤其是 SPI 加载）</strong></li></ul></li><li>触发配置解析流程<ul><li>发布 <code>Lifecycle.CONFIGURE_START_EVENT</code> 事件，触发内部的 ContextConfig 监听器</li><li><strong>ContextConfig开始解析当前项目的web.xml和其他jar包里的web-fragment.xml，并将解析后的结果合并放到StandardContext中</strong>（比如将servlet配置构造成Warpper添加到Context中作为其子容器）</li></ul></li><li>tomcat 内部组件设置与启动<ul><li>启动Warpper（StandardWrapper启动阶段不会做什么，不是实例化关联的Servlet）</li><li>触发当前contxet的Pipeline#start</li><li><strong>创建StandardManager作为session的默认管理器</strong></li></ul></li><li><strong>实例和初始化关键Servlet相关组件</strong><ul><li>调用ServletContainerInitializer#onStartup</li><li><strong>实例化并调用ServletContextListener#contextInitialized（Spring + Tomcat组合时用到的ContextLoaderListener就会在这时启动。所以，这里就是spring开始实例化的开始）</strong></li><li><strong>调用Manager#start（内部会恢复上一次context中持久化的session）</strong></li><li><strong>实例化所有 Filter，并调用其init()方法</strong></li><li><strong>实例全部loadOnStartup &gt;&#x3D; 0的Servlet，并调用其init()方法</strong></li></ul></li></ol><h3 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardContext</span> <span class="token keyword">extends</span> <span class="token class-name">ContainerBase</span>        <span class="token keyword">implements</span> <span class="token class-name">Context</span><span class="token punctuation">,</span> NotificationEmitter <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StandardContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">setBasic</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardContextValve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// web.xml里的listener标签里配置的各种监听器className</span>    <span class="token keyword">private</span> String applicationListeners<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ServletContextListener集和</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> noPluggabilityListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ServletContext实现</span>    <span class="token keyword">protected</span> ApplicationContext context <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在当前tomcat实例中，是否允许javax.servlet.ServletContext#getContext方法跨context获取当前context的ServletContext</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> crossContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前web的path（即 URL 前缀）</span>    <span class="token keyword">private</span> String path <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Filter 实例与其配置类之间的映射（FilterConfig），用于实际调用</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ApplicationFilterConfig<span class="token operator">></span> filterConfigs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Filter配置的抽象集和（在wel.xml里配置的Filter）</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> FilterDef<span class="token operator">></span> filterDefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认为StandardManager（管理和持久化Session）</span>    <span class="token keyword">protected</span> Manager manager <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否开启可重新加载的检测</span>    <span class="token comment" spellcheck="true">// 为true时，当当前环境的Class文件或jar有改变时（增加或修改），会重新加载当前Context</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> reloadable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Servlet 映射关系，key 为 URL pattern，value 为 Servlet 名称</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> servletMappings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// session超时事件（分钟单位）</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sessionTimeout <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ============ Cookie相关配置 ================</span>    <span class="token keyword">private</span> String sessionCookieName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> useHttpOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String sessionCookieDomain<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sessionCookiePath<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否在cookie1路径最后面添加/，默认否（比如路径为/foo，避免请求/foobar也带上这个cookie）</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> sessionCookiePathUsesTrailingSlash <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否接受客户端提供的（但服务端不存在的）Session ID 并创建新的 Session。设为false和context path为 / 才会生效</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> validateClientProvidedNewSessionId <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * start方法，可以说是整个tomcat中最关键的部分     */</span>    <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化资源对象：WebResourceRoot（提供静态资源访问、JAR管理等），Loader会用到</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">setResources</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardRoot</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 启动资源对象，确保资源可用</span>            <span class="token function">resourcesStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 设置Loader。这时当前组件的state为STARTING_PREP，不会触发Loader的start</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            WebappLoader webappLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebappLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            webappLoader<span class="token punctuation">.</span><span class="token function">setDelegate</span><span class="token punctuation">(</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setLoader</span><span class="token punctuation">(</span>webappLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 初始化 Cookie 解析器（符合 RFC6265）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookieProcessor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cookieProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rfc6265CookieProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 绑定ClassLoader到当前线程，并返回旧的classLoader</span>        ClassLoader oldCCL <span class="token operator">=</span> <span class="token function">bindThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 启动 WebappLoader，内部会创建 ParallelWebappClassLoader</span>                Loader loader <span class="token operator">=</span> <span class="token function">getLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>loader <span class="token keyword">instanceof</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> loader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">unbindThread</span><span class="token punctuation">(</span>oldCCL<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将ParallelWebappClassLoader绑定到当前线程上线文里，作为当前context的类加载器</span>                oldCCL <span class="token operator">=</span> <span class="token function">bindThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 通知 ContextConfig 进行 web.xml（当前项目）、web-fragment.xml（其他依赖jar包） 等配置解析和组合</span>                <span class="token function">fireLifecycleEvent</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>CONFIGURE_START_EVENT<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// ================ 走到这，xml里的所有Servlet,Filter,Listener等配置都解析完毕，放置到当前Context内部中了</span>                <span class="token comment" spellcheck="true">// 启动所有Wrapper（内部基本不会做什么）</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Container child <span class="token operator">:</span> <span class="token function">findChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        child<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 启动当前context的pipeline</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pipeline <span class="token keyword">instanceof</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> pipeline<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 创建并设置 Session 管理器（如 StandardManager）</span>                Manager contextManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>contextManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setManager</span><span class="token punctuation">(</span>contextManager<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 检查配置是否成功（由 ContextConfig 设置）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getConfigured</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"standardContext.configurationFail"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 调用所有的ServletContainerInitializer</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>ServletContainerInitializer<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>>></span> entry <span class="token operator">:</span> initializers<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 调用ServletContextListener的contextInitialized方法</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">listenerStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"standardContext.listenerFail"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 启动 Session 管理器</span>                Manager manager <span class="token operator">=</span> <span class="token function">getManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>manager <span class="token keyword">instanceof</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> manager<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 实例化并配置好当前context的全部Filter，并触发其init方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">filterStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 加载并实例化各种loadOnStartup > 0 的Servlet（并执行init方法）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">loadOnStartup</span><span class="token punctuation">(</span><span class="token function">findChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 默认不会启动Context的backgroundProcessor（由Engine处理）</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">threadStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 恢复线程上下文类加载器</span>            <span class="token function">unbindThread</span><span class="token punctuation">(</span>oldCCL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 清理 Web 资源缓存（避免 JAR 文件句柄未释放）</span>        <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置最终状态</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setState</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>FAILED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Send j2ee.object.failed notification</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getObjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Notification notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token string">"j2ee.object.failed"</span><span class="token punctuation">,</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getObjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sequenceNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcaster<span class="token punctuation">.</span><span class="token function">sendNotification</span><span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">setState</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ContextConfig"><a href="#ContextConfig" class="headerlink" title="ContextConfig"></a>ContextConfig</h3><p>​当 <code>HostConfig</code> 实例化并部署 <code>Context</code> 时，会自动注册 <code>ContextConfig</code> 作为 <code>Context</code> 的一个 <code>LifecycleListener</code>。<strong>其主要职责是在 <code>Context</code> 启动（<code>startInternal()</code>）期间解析各种配置（web.xml、注解、SCI 等），并将解析结果装配到 <code>StandardContext</code> 中，以保证 Web 应用能完整启动</strong></p><p>​核心方法主要在ContextConfig#webConfig()中，被调用的链路为:</p><blockquote><ol><li>StandardContext#startInternal()中触发Lifecycle.CONFIGURE_START_EVENT事件</li><li>ContextConfig#lifecycleEvent</li><li>ContextConfig#configureStart</li><li>ContextConfig#webConfig</li></ol></blockquote><h4 id="webConfig-核心逻辑"><a href="#webConfig-核心逻辑" class="headerlink" title="webConfig()核心逻辑"></a>webConfig()核心逻辑</h4><ol><li><p><strong>web.xml解析</strong></p><ul><li><strong>${catalina.base}&#x2F;conf&#x2F;web.xml：server级别</strong>，即全局级别</li><li><strong>${catalina.base}&#x2F;conf&#x2F;Catalina&#x2F;{hostname}&#x2F;web.xml.default：host级别</strong></li><li><strong>WEB-INF&#x2F;web.xml：当前context级</strong>，在context根目录下</li><li><strong>WEB-INF&#x2F;lib&#x2F;*.jar!&#x2F;META-INF&#x2F;web-fragment.xml：fragment级别</strong>，当前web的依赖jar（WEB-INF&#x2F;lib&#x2F;目录）包里</li></ul></li><li><p><strong>Servlet 3.0特性支持</strong></p><ul><li><p>识别并加载 ServletContainerInitializer（WEB-INF&#x2F;lib&#x2F;*.jar!&#x2F;META-INF&#x2F;services&#x2F;javax.servlet.ServletContainerInitializer）</p></li><li><p><strong>使用字节码技术解析项目class和jar包里的@WebServlet, @WebFilter, @WebListener，@HandlesType等注解，避免无用的class被加载进JVM</strong></p></li></ul></li><li><p><strong>web.xml合并注册</strong></p><ul><li><strong>将第1步里解析到的全部WebXml按优先级合并为一个WebXml对象，优先级： context &gt; fragment &gt; host &gt; server</strong></li><li>将<strong>合并后的WebXml注册到StandardContext中</strong>（Filter、Listener、Wrapper、Session config、欢迎页等）</li></ul></li></ol><h4 id="webConfig-源码"><a href="#webConfig-源码" class="headerlink" title="webConfig()源码"></a>webConfig()源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">webConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// web.xml的解析器</span>    WebXmlParser webXmlParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebXmlParser</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getXmlNamespaceAware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            context<span class="token punctuation">.</span><span class="token function">getXmlValidation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getXmlBlockExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>WebXml<span class="token operator">></span> defaults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 解析全局默认的web.xml，即conf/web.xml文件</span>    <span class="token comment" spellcheck="true">// 2. 解析host级别默认的web.xml，即conf/Catalina/{hostname}/web.xml.default 文件</span>    defaults<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getDefaultWebXmlFragment</span><span class="token punctuation">(</span>webXmlParser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// web.xml的解析结果</span>    WebXml webXml <span class="token operator">=</span> <span class="token function">createWebXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将当前context级别的 WEB-INF/web.xml文件解析到webXml对象里</span>    InputSource contextWebXml <span class="token operator">=</span> <span class="token function">getContextWebXmlSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>webXmlParser<span class="token punctuation">.</span><span class="token function">parseWebXml</span><span class="token punctuation">(</span>contextWebXml<span class="token punctuation">,</span> webXml<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ServletContext sContext <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将Web应用中的所有jar包（即WEB-INF/lib/ 目录）里的META-INF/web-fragment.xml 解析为一个个的WebXml对象</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>WebXml<span class="token operator">></span> fragments <span class="token operator">=</span> <span class="token function">processJarsForWebFragments</span><span class="token punctuation">(</span>webXml<span class="token punctuation">,</span> webXmlParser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 排序</span>    Set<span class="token operator">&lt;</span>WebXml<span class="token operator">></span> orderedFragments <span class="token operator">=</span> null<span class="token punctuation">;</span>    orderedFragments <span class="token operator">=</span>            WebXml<span class="token punctuation">.</span><span class="token function">orderWebFragments</span><span class="token punctuation">(</span>webXml<span class="token punctuation">,</span> fragments<span class="token punctuation">,</span> sContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实例化META-INF/services/javax.servlet.ServletContainerInitializer文件里的SCI</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">processServletContainerInitializers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span>  <span class="token punctuation">(</span><span class="token operator">!</span>webXml<span class="token punctuation">.</span><span class="token function">isMetadataComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> typeInitializerMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 使用字节码方式解析class文件并处理相关注解（@WebServlet, @WebFilter, @WebListener等）</span>        <span class="token comment" spellcheck="true">// 2. 找出符合 @HandlesType 的类</span>        <span class="token function">processClasses</span><span class="token punctuation">(</span>webXml<span class="token punctuation">,</span> orderedFragments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>webXml<span class="token punctuation">.</span><span class="token function">isMetadataComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 先合并jar包里web-fragment.xml配置到当前context的web.xml里</span>            ok <span class="token operator">=</span> webXml<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>orderedFragments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 再将全局默认和host的合并到当前context的web.xml里</span>        webXml<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>defaults<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">convertJsps</span><span class="token punctuation">(</span>webXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将合并完成的web.xml信息注册到当前StandardContext中</span>            <span class="token function">configureContext</span><span class="token punctuation">(</span>webXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        webXml<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>defaults<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">convertJsps</span><span class="token punctuation">(</span>webXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">configureContext</span><span class="token punctuation">(</span>webXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 暴露出jar包中META-INF/resources/的静态资源，让其可以直接通过url访问</span>        Set<span class="token operator">&lt;</span>WebXml<span class="token operator">></span> resourceJars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>orderedFragments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>WebXml fragment <span class="token operator">:</span> fragments<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resourceJars<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                resourceJars<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">processResourceJARs</span><span class="token punctuation">(</span>resourceJars<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注册 ServletContainerInitializer 到 Context</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>ServletContainerInitializer<span class="token punctuation">,</span>                Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>>></span> entry <span class="token operator">:</span>                    initializerClassMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">addServletContainerInitializer</span><span class="token punctuation">(</span>                        entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">addServletContainerInitializer</span><span class="token punctuation">(</span>                        entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Wrapper"><a href="#Wrapper" class="headerlink" title="Wrapper"></a>Wrapper</h2><p>​Wrapper即Servlet，默认实现为StandardWrapper，其主要任务为：</p><blockquote><ul><li>管理 Servlet 的 <strong>生命周期</strong>（加载、初始化、分配和销毁）</li><li>支持 <strong>线程安全策略</strong>（如 <code>SingleThreadModel</code>）</li></ul></blockquote><p>​<strong>Servlet 的实例化不依赖 StandardWrapper的 <code>init()</code> 或 <code>start()</code> 方法，而是由 <code>loadOnStartup</code>字段决定</strong>。也就没必要分析着两个生命周期方法</p><blockquote><ul><li>loadOnStartup &gt;&#x3D; 0：在应用启动阶段就会实例化并初始化 Servlet（StandardContext内的start阶段）</li><li>loadOnStartup &lt; 0（默认）：延迟到首次请求时才实例化</li></ul></blockquote><p>​值得关注allocate()方法，这是在http请求到来时分配当前Wrapper的Servlet方法，其实现了SingleThreadModel（即STM，尽管已被废弃）逻辑的支持。内部<strong>利用栈进行缓存，让每个运行在当前STM Servlet里的线程能独享一个Servlet，默认最多20个缓存</strong>，到达最大数量时当前请求会被阻塞，只能等deallocate()方法（归还Servlet）来唤醒。</p><p>​所以，可以得出一个关键结论：<strong>对STM Servlet来说，其http请求的最大并发数为Min(StandardWrapper.maxInstances, tomcat的worker线程池最大线程数)</strong></p><h3 id="核心源码-1"><a href="#核心源码-1" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">ContainerBase</span>        <span class="token keyword">implements</span> <span class="token class-name">ServletConfig</span><span class="token punctuation">,</span> Wrapper<span class="token punctuation">,</span> NotificationEmitter <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StandardWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 向pipeline添加StandardWrapperValve，这个valve主要实例化servlet并构造filter来处理请求</span>        swValve <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardWrapperValve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">setBasic</span><span class="token punctuation">(</span>swValve<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// servlet实例（针对多线程共用时的）</span>    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> Servlet instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前servlet是否已经初始化（就是调用了init接口）</span>    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> instanceInitialized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> loadOnStartup <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前servlet的InitParam参数缓存</span>    <span class="token keyword">protected</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否是单线程模式。默认false，表示为单例Servlet。如果为true，代表Servlet在每个运行的线程中是不同的，即多例</span>    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> singleThreadModel <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单线程模式下默认最多20个单线程servlet</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> maxInstances <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单线程模式下servlet的实例树</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> nInstances <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单线程模式下基于栈实现的servlet实例池</span>    <span class="token keyword">protected</span> Stack<span class="token operator">&lt;</span>Servlet<span class="token operator">></span> instancePool <span class="token operator">=</span> null<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 根据singleThreadModel采用不同的分配策略，进行Servlet实例的分配     */</span>    <span class="token keyword">public</span> Servlet <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> newInstance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 非STM的，每次都返回相同的servlet（多线程共用这个对象）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singleThreadModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>instanceInitialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 实例化</span>                            instance <span class="token operator">=</span> <span class="token function">loadServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            newInstance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singleThreadModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                countAllocated<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"standardWrapper.allocate"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 如果未初始化，则调用Servlet#init方法</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instanceInitialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">initServlet</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 再次检测STM（Servlet第一次实例化时才会设置这个值），如果是STM则先入栈（即缓存）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>singleThreadModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>instancePool<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        instancePool<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>                        nInstances<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 非STM则直接返回</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    countAllocated<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ================== 走到这，表示为STM Servlet ==================</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>instancePool<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>countAllocated<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> nInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 缓存的STM Servlet不够分</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nInstances <span class="token operator">&lt;</span> maxInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 没到上限，则进行实例化</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        instancePool<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">loadServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        nInstances<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"standardWrapper.allocate"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 超过上限，则阻塞等待归还Servlet时的唤醒</span>                        instancePool<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Ignore</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 增加servlet正在使用的数量</span>            countAllocated<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> instancePool<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**     * 释放已使用完的Servlet实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span>Servlet servlet<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singleThreadModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            countAllocated<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 归还到栈中，让其可以重复使用</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>instancePool<span class="token punctuation">)</span> <span class="token punctuation">{</span>            countAllocated<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            instancePool<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>            instancePool<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-Engine,Host和HostConfig</title>
      <link href="/2021-09-23/tomcat-engine-host-he-hostconfig/"/>
      <url>/2021-09-23/tomcat-engine-host-he-hostconfig/</url>
      
        <content type="html"><![CDATA[<hr><p>​从源码分析了ContainerBase，StandardEngine，StandardHost和HostConfig的实现逻辑。需要<strong>重点注意HostConfig的作用和部署流程</strong></p><span id="more"></span><h2 id="ContainerBase"><a href="#ContainerBase" class="headerlink" title="ContainerBase"></a>ContainerBase</h2><p>​是所有容器（Engine、Host、Context、Wrapper）的核心抽象基类，<strong>定义并维护了容器通用的结构、生命周期管理机制和后台任务调度能力</strong>。核心职责如下：</p><ul><li>init<ul><li>构建一个<strong>可过期的核心线程数为1的线程池（生命周期短，仅用来启动子容器）</strong>，准备用于并发start子容器</li></ul></li><li>start<ul><li>并发启动所有子容器，阻塞等待其完成</li><li>启动自身的 <code>Pipeline</code>（包含所有 <code>Valve</code>）</li><li>根据 <code>backgroundProcessorDelay</code> 的配置，<strong>决定是否启动后台线程</strong> <code>ContainerBackgroundProcessor</code>（默认仅 <code>Engine</code> 容器会设置该值（为 10 秒），其它容器默认不启动），用于<strong>周期性执行后台任务（如 session 过期清理）</strong></li></ul></li></ul><h3 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ContainerBase</span> <span class="token keyword">extends</span> <span class="token class-name">LifecycleMBeanBase</span> <span class="token keyword">implements</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 子容器集合，key 为容器名，每个Container都有唯一name</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Container<span class="token operator">></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 后台处理线程执行间隔（秒），用于处理如 session 过期等后台任务。     * - 默认值为 -1，表示不启动后台线程。     * - 仅 Engine 容器会设置为 10，其它容器（Host、Context、Wrapper）默认不设置。     * - ContainerBackgroundProcessor 线程由 Engine 启动，并递归处理其所有子容器的后台任务。     */</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> backgroundProcessorDelay <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 容器监听器（用于监听子容器结构或状态变更）</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>ContainerListener<span class="token operator">></span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前容器名</span>    <span class="token keyword">protected</span> String name <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前容器的父容器（Engine为最顶层的容器，所以为null）</span>    <span class="token keyword">protected</span> Container parent <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前容器的 Pipeline，用于处理请求链路（Valve）</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> Pipeline pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardPipeline</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后台线程引用（用于执行 backgroundProcessor）</span>    <span class="token keyword">private</span> Thread thread <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启动/停止子容器的线程数（默认 1）</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> startStopThreads <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启动或暂停当前容器的子容器线程池（默认线程数就为上面的1，且允许核心线程过期。一般只有在启动才需要用到，所以启动完毕后这个线程池就没啥用了，让里面的线程过期）</span>    <span class="token keyword">protected</span> ThreadPoolExecutor startStopExecutor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> startStopQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认一个线程</span>        startStopExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                <span class="token function">getStartStopThreadsInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">getStartStopThreadsInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                startStopQueue<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">StartStopThreadFactory</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-startStop-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 允许核心线程过期</span>        startStopExecutor<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先启动Cluster和Realm</span>        logger <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cluster cluster <span class="token operator">=</span> <span class="token function">getClusterInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cluster <span class="token keyword">instanceof</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> cluster<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Realm realm <span class="token operator">=</span> <span class="token function">getRealmInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>realm <span class="token keyword">instanceof</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> realm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 并发启动所有子容器</span>        Container children<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">findChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Future<span class="token operator">&lt;</span>Void<span class="token operator">>></span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Container child <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>startStopExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StartChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        MultiThrowable multiThrowable <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 阻塞等待所有子容器启动完成</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Future<span class="token operator">&lt;</span>Void<span class="token operator">></span> result <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"containerBase.threadedStartFailed"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>multiThrowable <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    multiThrowable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                multiThrowable<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>multiThrowable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LifecycleException</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"containerBase.threadedStartFailed"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    multiThrowable<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 等所有子容器启动完毕，再启动当前容器的Pipeline（包括 Basic Valve）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pipeline <span class="token keyword">instanceof</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> pipeline<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 触发当前组件里监听器lifecycleListeners的start事件</span>        <span class="token function">setState</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动后台线程（如配置，线程也是daemon）</span>        <span class="token function">threadStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Engine"><a href="#Engine" class="headerlink" title="Engine"></a>Engine</h2><p>​Engine是Tomcat最顶层的容器（没有父容器），和Service是一对一的关系，在他们内部互相保存了对方的引用，<strong>默认实现类时StandardEngine</strong>。</p><p>​该容器本身不负责具体请求处理，核心职责是承载多个 <code>Host</code> 子容器，因此<strong>其初始化和启动过程直接复用了父类 <code>ContainerBase</code> 的逻辑</strong>。</p><p>​需要注意的是，<strong>构造方法中设置了 <code>backgroundProcessorDelay = 10</code>，这会启动一个后台线程，周期性执行所有子容器的后台任务（如 session 过期清理等）。Tomcat 默认仅在 <code>Engine</code> 层启用此功能，从而递归驱动整个容器树的后台处理流程。</strong></p><h3 id="核心源码-1"><a href="#核心源码-1" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardEngine</span> <span class="token keyword">extends</span> <span class="token class-name">ContainerBase</span> <span class="token keyword">implements</span> <span class="token class-name">Engine</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StandardEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置当前容器的basic value, 此 Valve 会作为 Pipeline 中的最后一个节点。</span>        pipeline<span class="token punctuation">.</span><span class="token function">setBasic</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardEngineValve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置后台处理线程的执行间隔（单位：秒）</span>        <span class="token comment" spellcheck="true">// 用于周期性执行容器级的后台任务，如 session 清理等，仅 Engine 层默认启用</span>        backgroundProcessorDelay <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 默认主机名。     * 当请求url的host未匹配到任何具体的 Host 容器时，将路由到该默认 Host     * 对应 server.xml 中 &lt;Engine> 的 defaultHost 属性，默认值通常为 localhost     */</span>    <span class="token keyword">private</span> String defaultHost <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前 Engine 所绑定的 Service（Engine 和 Service 是一对一关系）。     */</span>    <span class="token keyword">private</span> Service service <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h2><p>​Host 是 Engine 的子容器，默认实现为 <code>StandardHost</code>，表示对 HTTP 请求中 host 的抽象。请求到达时，<strong>Tomcat 会根据请求的 host 名（域名）查找匹配的 <code>Host</code> 实例；若无匹配项，则使用默认 Host（即 <code>defaultHost</code>，通常为 <code>localhost</code>）</strong></p><p>​<code>StandardHost</code> 的初始化和启动逻辑沿用 <code>ContainerBase</code> 的通用流程，本身没有特殊处理。 <strong>真正负责扫描部署目录、创建并启动子容器 <code>Context</code> 的工作，实际上由其监听器 <code>HostConfig</code> 完成</strong>。</p><h3 id="核心源码-2"><a href="#核心源码-2" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardHost</span> <span class="token keyword">extends</span> <span class="token class-name">ContainerBase</span> <span class="token keyword">implements</span> <span class="token class-name">Host</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StandardHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// StandardHostValve也会作为当前容器的pipeline的last value</span>        pipeline<span class="token punctuation">.</span><span class="token function">setBasic</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardHostValve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当前Host的别名，匹配别名也能匹配到当前Host</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> aliases <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前Host下的Web应用部署根目录，相对路径默认值为webapps</span>    <span class="token keyword">private</span> String appBase <span class="token operator">=</span> <span class="token string">"webapps"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认：${catalina.base}/webapps</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> File appBaseFile <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认为：conf/Catalina/localhost目录</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> File hostConfigBase <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否自动部署</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> autoDeploy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加到当前Host的子容器Context里的监听器（ContextConfig）</span>    <span class="token keyword">private</span> String configClass <span class="token operator">=</span> <span class="token string">"org.apache.catalina.startup.ContextConfig"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前Host的子容器Context的实现类</span>    <span class="token keyword">private</span> String contextClass <span class="token operator">=</span> <span class="token string">"org.apache.catalina.core.StandardContext"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启动时部署Context</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> deployOnStartup <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// （应该被忽略的Context）默认为null</span>    <span class="token keyword">private</span> Pattern deployIgnore <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HostConfig"><a href="#HostConfig" class="headerlink" title="HostConfig"></a>HostConfig</h3><p>​在默认的 <code>server.xml</code> 配置中，<code>&lt;Host&gt;</code> 元素下并没有显式配置 <code>&lt;Context&gt;</code> 子元素，因此在解析 <code>server.xml</code> 时并不会为 Host 创建任何 Context 子容器。尽管如此，Tomcat 仍能在启动时自动部署 <code>$&#123;catalina.base&#125;/webapps/</code> 目录下的应用，这正是由 <code>HostConfig</code> 这个 <code>LifecycleListener</code> 完成的。</p><ul><li><p>注册方式</p><blockquote><p>​在 Tomcat 启动期间，通过 Digester 解析 server.xml 时，会由 <code>HostRuleSet#addRuleInstances()</code> 方法为每个 Host 元素注册默认的生命周期监听器org.apache.catalina.startup.HostConfig，其会被实例化添加为Host的LifecycleListener</p></blockquote></li><li><p>启动时机</p><blockquote><p>​         StandardHost<strong>在startInternal()期间中的子容器启动完成后（默认没有子容器），但后台线程还未启动时，会触发lifecycle的START_EVENT事件，从而触发HostConfig的start</strong>，来解析目标文件夹下webapps的项目，自动部署所有符合规则的 Web 应用。</p></blockquote></li><li><p>三种部署方式</p><ul><li><strong>XML 配置部署（conf&#x2F;Catalina&#x2F;{hostname}&#x2F;*.xml）</strong><ul><li>每个xml文件即为一个Context（IDEA的war exploded就是这种方式）</li></ul></li><li><strong>WAR 包部署（webapps&#x2F;*.war）</strong><ul><li>每个war包即为一个Context</li></ul></li><li><strong>directory部署（webapps&#x2F;{dir}）</strong><ul><li>每个目录被当作一个Context，是项目中最常用的一种</li></ul></li></ul></li><li><p>路径问题</p><blockquote><p>​上诉三种部署方式都遵循相同的路径规则。即Context的name和path为去除拓展名后的部分。<strong>对于特殊的ROOT，则表示为根路径<code>/ </code>。</strong></p></blockquote></li></ul><h4 id="核心源码-3"><a href="#核心源码-3" class="headerlink" title="核心源码"></a>核心源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HostConfig</span> <span class="token keyword">implements</span> <span class="token class-name">LifecycleListener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// context默认实现类</span>    <span class="token keyword">protected</span> String contextClass <span class="token operator">=</span> <span class="token string">"org.apache.catalina.core.StandardContext"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前绑定的 Host 容器</span>    <span class="token keyword">protected</span> Host host <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 已部署的应用（用于记录当前 host 下部署的 context 状态）</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> DeployedApplication<span class="token operator">></span> deployed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 正在处理部署/卸载操作的 Context 名集合（用于防止重复并发部署）</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> servicedSet <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">newSetFromMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Host 生命周期监听方法，根据不同生命周期阶段执行对应操作：     * - BEFORE_START：确认所需目录存在     * - START：执行部署流程     * - PERIODIC：周期性检查（autoDeploy 场景下可能重新部署）     * - STOP：停止并清理部署     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lifecycleEvent</span><span class="token punctuation">(</span>LifecycleEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>PERIODIC_EVENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 周期任务（例如监测部署目录变更）</span>            <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>BEFORE_START_EVENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// StandardHost启动前触发</span>            <span class="token comment" spellcheck="true">// 确保 ${catalina.base}/webapps和conf/Catalina/localhost目录存在（不存在也只会打日志）</span>            <span class="token function">beforeStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>START_EVENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// StanardHost正在启动</span>            <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>STOP_EVENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 默认：${catalina.base}/webapps</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>host<span class="token punctuation">.</span><span class="token function">getAppBaseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// app文件目录不是文件夹，代表不需要部署</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"hostConfig.appBase"</span><span class="token punctuation">,</span> host<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    host<span class="token punctuation">.</span><span class="token function">getAppBaseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            host<span class="token punctuation">.</span><span class="token function">setDeployOnStartup</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            host<span class="token punctuation">.</span><span class="token function">setAutoDeploy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">getDeployOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 默认为true，开始部署</span>            <span class="token function">deployApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">deployApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        File appBase <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">getAppBaseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File configBase <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">getConfigBaseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 过滤器默认为null，所以还是返回全部</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> filteredAppPaths <span class="token operator">=</span> <span class="token function">filterAppPaths</span><span class="token punctuation">(</span>appBase<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 过滤webapps文件夹下的所有文件</span>        <span class="token comment" spellcheck="true">// conf/Catalina/localhost目录下所有的xml方式部署（IDEA的war exploded就是这种方式）</span>        <span class="token comment" spellcheck="true">// 每一个xml其实就是一个context，文件名就是context的ptah。ROOT.xml就是默认的context，即path为空字符串</span>        <span class="token function">deployDescriptors</span><span class="token punctuation">(</span>configBase<span class="token punctuation">,</span> configBase<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// war包的形式部署</span>        <span class="token comment" spellcheck="true">// 部署${catalina.base}/webapps目录下的所有war包</span>        <span class="token function">deployWARs</span><span class="token punctuation">(</span>appBase<span class="token punctuation">,</span> filteredAppPaths<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 直接以文件夹的形式部署</span>        <span class="token comment" spellcheck="true">// 部署${catalina.base}/webapps目录下的所有文件夹形式的context</span>        <span class="token function">deployDirectories</span><span class="token punctuation">(</span>appBase<span class="token punctuation">,</span> filteredAppPaths<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="directory部署"><a href="#directory部署" class="headerlink" title="directory部署"></a>directory部署</h4><p>​重点解析下directory部署方式，毕竟这是最常用的。其<strong>会在当前host的startStop线程池中异步部署</strong>，根据如下源码总结出核心流程</p><ol><li><strong>优先使用 META-INF&#x2F;context.xml 配置（如果存在）</strong></li><li>解析并构造出Context实例</li><li>设置Context的一些基础属性（name和path等，以项目目录名为准）</li><li><strong>将Context添加为对应Host的子容器（此时会触发Context的start）</strong></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 以文件夹方式部署应用（appBase 下的目录结构） * - 忽略 META-INF、WEB-INF * - 忽略已存在的部署 * - 支持异步并发部署（通过 Host 提供的线程池） */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">deployDirectories</span><span class="token punctuation">(</span>File appBase<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ExecutorService es <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">getStartStopExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// META-INF和WEB-INF文件加不部署</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"META-INF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"WEB-INF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>appBase<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ROOT文件夹会被解析为 根context，也就是path为空字符串</span>            ContextName cn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextName</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAddServiced</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">deploymentExists</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">removeServiced</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 异步部署</span>                    results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>es<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeployDirectory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> cn<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">removeServiced</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 同步等待</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> result <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"hostConfig.deployDir.threaded.error"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ================ 开始部署 ==================</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">deployDirectory</span><span class="token punctuation">(</span>ContextName cn<span class="token punctuation">,</span> File dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Context context <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Web 应用目录下的META-INF/context.xml 文件</span>    File xml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> Constants<span class="token punctuation">.</span>ApplicationContextXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将META-INF/context.xml拷贝到的目标位置：conf/Catalina/localhost/${contextName}.xml</span>    File xmlCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">getConfigBaseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cn<span class="token punctuation">.</span><span class="token function">getBaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DeployedApplication deployedApp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否拷贝 META-INF/context.xml 到 conf 目录（Host 默认 false，可被 Context 覆盖）</span>    <span class="token keyword">boolean</span> copyThisXml <span class="token operator">=</span> <span class="token function">isCopyXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否允许部署该 META-INF/context.xml（默认true）</span>    <span class="token keyword">boolean</span> deployThisXML <span class="token operator">=</span> <span class="token function">isDeployThisXML</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>deployThisXML <span class="token operator">&amp;&amp;</span> xml<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 存在有效 META-INF/context.xml 且支持部署这个xml，则通过 digester 解析生成 Context</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>digesterLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                context <span class="token operator">=</span> <span class="token punctuation">(</span>Context<span class="token punctuation">)</span> digester<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果 host 设置不允许拷贝xml，则再次通过 context的copyXML 判断一次</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>copyThisXml <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> context <span class="token keyword">instanceof</span> <span class="token class-name">StandardContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                copyThisXml <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>StandardContext<span class="token punctuation">)</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCopyXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 根据是否拷贝，设置 context 的配置文件位置（conf 目录 or 原始目录）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>copyThisXml<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Files<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>xml<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xmlCopy<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">setConfigFile</span><span class="token punctuation">(</span>xmlCopy<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">setConfigFile</span><span class="token punctuation">(</span>xml<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deployThisXML <span class="token operator">&amp;&amp;</span> xml<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 禁止部署，但 META-INF/context.xml 存在 —— 为安全考虑，阻止启动（避免绕过配置）</span>            context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FailedContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 没有 META-INF/context.xml文件，则手动 new 一个 context 实例</span>            context <span class="token operator">=</span> <span class="token punctuation">(</span>Context<span class="token punctuation">)</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 为 Context 添加生命周期监听器（默认是 ContextConfig，用于触发解析 web.xml等）</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">getConfigClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LifecycleListener listener <span class="token operator">=</span> <span class="token punctuation">(</span>LifecycleListener<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">addLifecycleListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置 Context 的一些基础信息</span>        context<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setWebappVersion</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setDocBase</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getBaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将 Context 添加到当前 Host，并自动触发生命周期（start/init）</span>        host<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"hostConfig.deployDir.error"</span><span class="token punctuation">,</span> dir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 部署完成后记录已部署信息，构建 DeployedApplication（省略细节）</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    deployed<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deployedApp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-Server和Service</title>
      <link href="/2021-09-04/tomcat-server-he-service/"/>
      <url>/2021-09-04/tomcat-server-he-service/</url>
      
        <content type="html"><![CDATA[<hr><p>​对Tomcat中Server，Service的init和start方法 + 核心字段进行了分析，并<strong>重点分析了Connector-NioEndpoint内部的Acceptor和Poller线程，并用图文的方法做了总结</strong>。并简单总结了Mapper和MapperListener的作用</p><span id="more"></span><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>​<code>Server</code> 表示 Tomcat 的顶层容器，默认实现为 <code>StandardServer</code>。它的职责相对简单，主要包括</p><ul><li><p>负责管理整个 Tomcat 的生命周期事件（如 <code>start()</code>、<code>stop()</code> 等），并将其传递给所有子组件 <code>Service</code></p></li><li><p><strong>监听关闭端口</strong>：默认会在 <code>8005</code> 端口监听本地连接，用于接收特定的 <code>SHUTDOWN</code> 命令，从而实现优雅关闭</p></li><li><p>监听行为可通过配置项（如 <code>port</code> 和 <code>shutdown</code>）启用、关闭或修改shutdown命令</p></li><li><p>当监听到SHUTDOWN命令，await()则返回，main线程会退出。<strong>可以推测出，tomcat启动的其他线程池应该是daemon线程的，否则整个进程是不会退出的</strong>。后续我会陆续验证这个猜想</p></li></ul><h3 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h3><p>​我这里只展示了部分优化后的核心源码，不重要的我都删了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StandardServer</span> <span class="token keyword">extends</span> <span class="token class-name">LifecycleMBeanBase</span> <span class="token keyword">implements</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// shutdown监听端口</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8005</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String address <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 内部所有的Service</span>    <span class="token keyword">private</span> Service services<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object servicesLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// shutdown命令，默认就是SHUTDOWN</span>    <span class="token keyword">private</span> String shutdown <span class="token operator">=</span> <span class="token string">"SHUTDOWN"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stopAwait <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Catalina catalina <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 监听shutdown端口的ServerSocket</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> ServerSocket awaitSocket <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        <span class="token function">fireLifecycleEvent</span><span class="token punctuation">(</span>CONFIGURE_START_EVENT<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING<span class="token punctuation">)</span><span class="token punctuation">;</span>        globalNamingResources<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 依次启动内部所有的Service</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>servicesLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Service service <span class="token operator">:</span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>                service<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// -2：完全不等待（可用于嵌入式）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// -1：无限睡眠轮询（用于不想用端口，但主线程又不能退出的场景）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                awaitThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stopAwait<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// continue and check the flag</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                awaitThread <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 启动ServerSocket，监听本地端口（默认8005），用于接收 SHUTDOWN 命令</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            awaitSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            awaitThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 循环</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stopAwait<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ServerSocket serverSocket <span class="token operator">=</span> awaitSocket<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>serverSocket <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>                StringBuilder command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    InputStream stream<span class="token punctuation">;</span>                    <span class="token keyword">long</span> acceptStartTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 阻塞，等待连接建立（当返回时表示已获取到客户端的连接）</span>                    socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    socket<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Ten seconds</span>                    stream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 安全防御：预设最大读取长度，防止 DOS 攻击</span>                    <span class="token keyword">int</span> expected <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>expected <span class="token operator">&lt;</span> shutdown<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        expected <span class="token operator">+=</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 读取字符，直到遇到控制字符/EOF</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>expected <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> ch <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token number">127</span><span class="token punctuation">)</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        command<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                        expected<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 接受完一次请求就关闭客户端的连接</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 判断是否是合法的 SHUTDOWN 命令</span>                <span class="token keyword">boolean</span> match <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>shutdown<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 跳出循环，结束main</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 清理资源</span>            ServerSocket serverSocket <span class="token operator">=</span> awaitSocket<span class="token punctuation">;</span>            awaitThread <span class="token operator">=</span> null<span class="token punctuation">;</span>            awaitSocket <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>serverSocket <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Ignore</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>​<code>Service</code> 是 Tomcat 中的一个核心组件，其默认实现类为 <code>StandardService</code>，表示一个具体的服务实例。它与最顶层的容器 <code>Engine</code> 是一对一的</p><p>​<strong>一个 <code>Service</code> 通常包含多个 <code>Connector</code>，每个 <code>Connector</code> 监听一个本地端口，支持特定协议（如 HTTP、AJP），接收客户端请求。请求经过 <code>Mapper</code> 映射到对应的 <code>Host</code>、<code>Context</code>、<code>Wrapper</code>，最终交由目标 <code>Servlet</code> 处理</strong></p><h3 id="核心生命周期方法"><a href="#核心生命周期方法" class="headerlink" title="核心生命周期方法"></a>核心生命周期方法</h3><ul><li>initInternal()<ul><li>初始化绑定的 <code>Engine</code> 容器</li><li>等待 <code>Engine</code> 及其子容器完成初始化后，注册相关 MBean（用于 JMX 监控）</li><li>初始化所有 <code>Connector</code>（<strong>主要是是创建并绑定 <code>ServerSocketChannel</code> 到指定端口</strong>）</li></ul></li><li>startInternal()<ul><li>启动关联的 <code>Engine</code></li><li>启动 <code>MapperListener</code>（用于监听容器结构变化并更新路由）</li><li>启动所有 <code>Connector</code>（<strong>主要是启动Acceptor和Poller线程，开始监听端口并接受请求</strong>）</li></ul></li></ul><h3 id="核心源码-1"><a href="#核心源码-1" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardService</span> <span class="token keyword">extends</span> <span class="token class-name">LifecycleMBeanBase</span> <span class="token keyword">implements</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当前Service名名</span>    <span class="token keyword">private</span> String name <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关联的Server</span>    <span class="token keyword">private</span> Server server <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前 Service 管理的所有 Connector（支持 HTTP、AJP 等协议）</span>    <span class="token keyword">protected</span> Connector connectors<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object connectorsLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前 Service 下配置的所有线程池 Executor（一般为空，由 Connector 自带）</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Executor<span class="token operator">></span> executors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前 Service 使用的 Engine（容器的顶层容器，代表整个虚拟主机群）</span>    <span class="token keyword">private</span> Engine engine <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 我把它叫请求路由器，用于将请求映射到对应的 Wrapper（最终的 Servlet）。     * 由 Connector 配置协议解析后交给 Mapper 做 URI 到容器层级的映射。     */</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> Mapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Mapper 的生命周期监听器。主要注册 MBean，不参与请求处理。</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> MapperListener mapperListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化容器结构</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>engine <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            engine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Service下的Executor节点，默认没有</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Executor executor <span class="token operator">:</span> <span class="token function">findExecutors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token keyword">instanceof</span> <span class="token class-name">JmxEnabled</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>JmxEnabled<span class="token punctuation">)</span> executor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDomain</span><span class="token punctuation">(</span><span class="token function">getDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            executor<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没做啥有用的事，仅仅注册个MBean</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 没做啥有用的事，仅仅注册个MBean</span>        mapperListener<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Initialize our defined Connectors</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>connectorsLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Connector connector <span class="token operator">:</span> connectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 构建ProtocolHandler和Endpoint，绑定服务器端口</span>                    connector<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LifecycleException</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        <span class="token function">setState</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动容器 Engine，进而递归启动 Host、Context、Wrapper</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>engine <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>                engine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 启动所有线程池 Executor（默认为空）</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>executors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Executor executor <span class="token operator">:</span> executors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                executor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        mapperListener<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>connectorsLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Connector connector <span class="token operator">:</span> connectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>connector<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> LifecycleState<span class="token punctuation">.</span>FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 启动底层 ProtocolHandler 和 Acceptor 线程</span>                    connector<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h3><p>​用来处理Socket的抽象，主要关注内部的ProtocolHandler和Adapter</p><h4 id="ProtocolHandler"><a href="#ProtocolHandler" class="headerlink" title="ProtocolHandler"></a>ProtocolHandler</h4><p>​用来处理具体协议，默认处理http1.1协议使用的是Http11NioProtocol这个类，内部通过NioEndpoint来真正操作Soeket，封装了Socket的相关操作Mapper</p><h5 id="NioEndpoint"><a href="#NioEndpoint" class="headerlink" title="NioEndpoint"></a>NioEndpoint</h5><h6 id="Acceptor（连接处理器）"><a href="#Acceptor（连接处理器）" class="headerlink" title="Acceptor（连接处理器）"></a>Acceptor（连接处理器）</h6><p>​一个处理连接的专用线程（默认线程名为 <code>http-nio-8080-Acceptor</code>），负责监听客户端连接，职责类似 Netty 中的 <code>ServerBootstrapAcceptor</code>。其核心流程如下：</p><ul><li><strong>阻塞监听客户端连接请求</strong>（调用 <code>ServerSocketChannel.accept()</code>）</li><li>建立连接后，封装为 <code>SocketChannel</code>，并设置相应的 socket 参数（如非阻塞、超时等）</li><li><strong>构造 <code>PollerEvent</code> 对象，设为对 <code>OP_READ</code> 事件感兴趣</strong></li><li><strong>将事件投递至 <code>Poller</code> 线程，由其负责后续的事件注册和处理</strong></li></ul><blockquote><p>补充说明：Acceptor 只负责连接建立，不处理任何 I&#x2F;O 数据交互，也不触发SocketChannel向Selector注册感兴趣的事件</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Acceptor线程核心源码，只保留了一些核心逻辑</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 主循环：阻塞接收客户端连接请求</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 连接限制计数（默认10000）</span>            <span class="token function">countUpOrAwaitConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SocketChannel socket <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 阻塞等待客户端连接（accept）</span>            socket <span class="token operator">=</span> serverSock<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>running <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>paused<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 初始化客户端连接并注册到 Poller</span>                <span class="token comment" spellcheck="true">// 若失败则关闭 socket 并增加可用的LimitLatch</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">setSocketOptions</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">closeSocket</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">closeSocket</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">setSocketOptions</span><span class="token punctuation">(</span>SocketChannel socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置客户端 socket 为非阻塞模式</span>        socket<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Socket sock <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置Socket参数</span>        socketProperties<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从缓存中获取或创建 NioChannel（用于封装 SocketChannel + Buffer）</span>        NioChannel channel <span class="token operator">=</span> nioChannels<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SocketBufferHandler bufhandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SocketBufferHandler</span><span class="token punctuation">(</span>                    socketProperties<span class="token punctuation">.</span><span class="token function">getAppReadBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    socketProperties<span class="token punctuation">.</span><span class="token function">getAppWriteBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    socketProperties<span class="token punctuation">.</span><span class="token function">getDirectBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSSLEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureNioChannel</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> bufhandler<span class="token punctuation">,</span> selectorPool<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioChannel</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> bufhandler<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 有缓存，就重置</span>            channel<span class="token punctuation">.</span><span class="token function">setIOChannel</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 注册到 Poller，由其负责后续事件驱动处理</span>        <span class="token function">getPoller0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">final</span> NioChannel socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 绑定所属 poller</span>    socket<span class="token punctuation">.</span><span class="token function">setPoller</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 包装为 NioSocketWrapper，承载 socket 的 I/O 状态管理</span>    NioSocketWrapper ka <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioSocketWrapper</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> NioEndpoint<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">setSocketWrapper</span><span class="token punctuation">(</span>ka<span class="token punctuation">)</span><span class="token punctuation">;</span>    ka<span class="token punctuation">.</span><span class="token function">setPoller</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// socket参数设置（超时等）</span>    ka<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token function">getSocketProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSoTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ka<span class="token punctuation">.</span><span class="token function">setWriteTimeout</span><span class="token punctuation">(</span><span class="token function">getSocketProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSoTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ka<span class="token punctuation">.</span><span class="token function">setKeepAliveLeft</span><span class="token punctuation">(</span>NioEndpoint<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMaxKeepAliveRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ka<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token function">getConnectionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ka<span class="token punctuation">.</span><span class="token function">setWriteTimeout</span><span class="token punctuation">(</span><span class="token function">getConnectionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PollerEvent r <span class="token operator">=</span> eventCache<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置其能监听的可读事件（当SocketChannel可读时触发）</span>    ka<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PollerEvent</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> ka<span class="token punctuation">,</span> OP_REGISTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> ka<span class="token punctuation">,</span> OP_REGISTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 投递到 Poller 的事件队列，等待 selector 执行注册</span>    <span class="token function">addEvent</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Poller（事件轮询器）"><a href="#Poller（事件轮询器）" class="headerlink" title="Poller（事件轮询器）"></a>Poller（事件轮询器）</h6><p>​<code>Poller</code> 是 NIO 模型中负责事件监听的线程，线程名一般为 <code>http-nio-8080-ClientPoller</code>。它持续轮询 <code>Selector</code>，将感兴趣的 IO 事件分发出去，核心流程如下：</p><ul><li><strong>接收来自 <code>Acceptor</code> 的 SocketChannel，将其注册到 Selector 中，关注 OP_READ 等事件</strong></li><li><strong>循环调用 <code>Selector.select()</code> 等待事件就绪</strong></li><li><strong>对于就绪事件，将对应连接封装为 <code>SocketProcessor</code>，提交给 Worker 线程池处理（负责请求解析与响应）</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Poller关键部分源码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poller</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Selector selector<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// PollerEvent事件队列</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> SynchronizedQueue<span class="token operator">&lt;</span>PollerEvent<span class="token operator">></span> events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> AtomicLong wakeupCounter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Poller</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加 PollerEvent 到事件队列，并根据 wakeupCounter 唤醒 Selector，     * 以确保 selector 能及时处理注册/取消等变更     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addEvent</span><span class="token punctuation">(</span>PollerEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        events<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wakeupCounter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            selector<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 循环处理事件监听</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> hasEvents <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>close<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 处理事件队列中的注册/取消请求</span>                hasEvents <span class="token operator">=</span> <span class="token function">events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>wakeupCounter<span class="token punctuation">.</span><span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// wakeupCounter值大于0，代表Acceptor向事件队列里push了新对象，</span>                    <span class="token comment" spellcheck="true">// 说明有新的连接，则立即执行非阻塞 select</span>                    keyCount <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 否则阻塞等待一定时间（默认1秒）以监听 I/O 事件</span>                    keyCount <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>selectorTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 重置</span>                wakeupCounter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果没有事件触发，检查是否还有待处理的注册事件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                hasEvents <span class="token operator">=</span> <span class="token punctuation">(</span>hasEvents <span class="token operator">|</span> <span class="token function">events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 遍历触发的事件（如 OP_READ）</span>            Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> iterator <span class="token operator">=</span> keyCount <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SelectionKey sk <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                NioSocketWrapper socketWrapper <span class="token operator">=</span> <span class="token punctuation">(</span>NioSocketWrapper<span class="token punctuation">)</span> sk<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>socketWrapper <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/**                     * 将就绪事件交由 Worker 线程处理（例如封装为 SocketProcessor 执行 OP_READ）                     * 实际业务处理在 Processor 中完成                     */</span>                    <span class="token function">processKey</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> socketWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 扫描并关闭超时连接</span>            <span class="token function">timeout</span><span class="token punctuation">(</span>keyCount<span class="token punctuation">,</span> hasEvents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">getStopLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="init"><a href="#init" class="headerlink" title="init()"></a>init()</h6><p>初始化阶段会触发的方法，调用路径：<strong>StandardService#init -&gt; Connector#init -&gt; ProtocolHandler#init -&gt; AbstractEndpoint#init -&gt; NioEndpoint#bind</strong>，核心作用如下</p><ul><li>创建 <code>ServerSocketChannel</code>，并绑定至指定端口（默认 8080）</li><li>将 <code>ServerSocketChannel</code> 配置为 <strong>阻塞模式</strong>（<code>accept()</code> 会阻塞直到有连接）</li><li>初始化 Selector 池，管理 I&#x2F;O 多路复用</li><li>启动 <strong>BlockPoller  后台线程</strong>，异步检测空闲连接、关闭已超时 socket 等后台任务</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 若未启用继承的 channel（默认如此），则创建新的 ServerSocketChannel</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getUseInheritedChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        serverSock <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socketProperties<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>serverSock<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InetSocketAddress addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token operator">?</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSock<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span><span class="token function">getAcceptCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Channel ic <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">inheritedChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ic <span class="token keyword">instanceof</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            serverSock <span class="token operator">=</span> <span class="token punctuation">(</span>ServerSocketChannel<span class="token punctuation">)</span> ic<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>serverSock <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"endpoint.init.bind.inherited"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 配置为阻塞模式，accept时期阻塞（重要）</span>    serverSock<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 合理化接收线程数（默认为 1）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>acceptorThreadCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        acceptorThreadCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 合理化Poller线程数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pollerThreadCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pollerThreadCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化关闭控制器，用于 await Poller 线程退出</span>    <span class="token function">setStopLatch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>pollerThreadCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initialiseSsl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化 Selector 池，启动BlockPoller线程</span>    selectorPool<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="start"><a href="#start" class="headerlink" title="start()"></a>start()</h6><p>启动阶段触发的核心方法，调用路径：<strong>StandardService#start -&gt; Connector#start -&gt; ProtocolHandler#start -&gt; AbstractEndpoint#start</strong>，核心步骤如下</p><ul><li>用栈的数据结构初始化Processor、Event、Nio缓存池</li><li><strong>初始化 Worker 线程池（事件处理线程池）</strong></li><li>初始化LimitLatch，用来限制连接个数</li><li><strong>创建并启动Poller线程（Poller是事件轮询器，SocketChannel会将READ事件注册，并让其轮询）</strong></li><li><strong>创建并启动Acceptor线程（连接接收器），专用来处理连接</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>running<span class="token punctuation">)</span> <span class="token punctuation">{</span>        running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        paused <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// =========== 初始化各类缓存栈（预分配池），提升对象复用效率，减少 GC 压力 ================</span>        <span class="token comment" spellcheck="true">// 请求处理器缓存池</span>        processorCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedStack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>SynchronizedStack<span class="token punctuation">.</span>DEFAULT_SIZE<span class="token punctuation">,</span> socketProperties<span class="token punctuation">.</span><span class="token function">getProcessorCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 事件对象缓存池</span>        eventCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedStack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>SynchronizedStack<span class="token punctuation">.</span>DEFAULT_SIZE<span class="token punctuation">,</span> socketProperties<span class="token punctuation">.</span><span class="token function">getEventCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// NIO Channel 缓存池</span>        nioChannels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedStack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>SynchronizedStack<span class="token punctuation">.</span>DEFAULT_SIZE<span class="token punctuation">,</span> socketProperties<span class="token punctuation">.</span><span class="token function">getBufferPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 初始化工作线程池（Worker Thread Pool）         * - 若 server.xml里的Connector 节点未指定 executor，则使用默认实现。         * - 实际线程为 daemon，线程名格式：http-nio-端口号-exec-索引         * - 线程池大小由 AbstractEndpoint 的 minSpareThreads 和 maxThreads 控制         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">createExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 初始化连接限制器（内部用 Semaphore 控制最大连接数）</span>        <span class="token function">initializeConnectionLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动 Poller 线程（其数量可通过 server.xml 中 Connector 属性 `pollerThreadCount`配置）</span>        pollers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Poller</span><span class="token punctuation">[</span><span class="token function">getPollerThreadCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pollers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pollers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Poller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread pollerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>pollers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-ClientPoller-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            pollerThread<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>threadPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>            pollerThread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 也是daemon线程</span>            pollerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 启动 Acceptor 线程</span>        <span class="token function">startAcceptorThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MapperListener"><a href="#MapperListener" class="headerlink" title="MapperListener"></a>MapperListener</h3><p>​这个组件理解其作用就行，源码不值得深入分析，价值不大。<strong>它是一个用于监听容器结构变化、并同步更新到<code>Mapper</code> 组件中映射关系的辅助组件</strong>。其核心作用如下：</p><ul><li><strong>启动时注册</strong><ul><li>在 <code>startInternal()</code> 中：<ul><li>将自身注册为 <code>Engine</code>、<code>Host</code>、<code>Context</code>、<code>Wrapper</code> 容器的 <code>ContainerListener</code></li><li>遍历并将当前 <code>Engine</code> 及其所有子容器的路由信息（如 host name、context path、wrapper mapping 等）注册进 <code>Mapper</code></li></ul></li></ul></li><li><strong>监听容器事件</strong><ul><li>实现 <code>containerEvent()</code> 方法，监听容器结构变化事件（如 Host 增加 alias、Context 增加&#x2F;移除 Wrapper 等），<strong>当结构变更时，自动将变化同步更新到 <code>Mapper</code>，保证路由信息的时效性</strong></li></ul></li></ul><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h3><p>​同上面的MapperListener，理解作用即可，源码深入分析的价值不大。我把它叫做路由器，其<strong>负责将 HTTP 请求路径快速匹配到对应的 <code>Servlet</code>。其本身不参与请求处理，仅提供路径与容器结构之间的高性能映射机制。</strong></p><p>​内部通过 <code>MapperListener</code> 监听容器层级（Engine → Host → Context → Wrapper）的结构变更，动态构建和维护内部的映射模型。其<strong>内部将Container抽象为轻量级MapElement结构体并按层级关系嵌套组织，构建出一棵用于快速匹配的树状结构</strong>。当请求到来时，根据url从左至右快速的查找到对应唯一的Host -&gt; Context -&gt; Wrapper，让它们来处理对应的请求。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://img.shanzhao.site/file/1748695204947_tomcat-connector-handle.png" alt="tomcat-connector-handle.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Acceptor </tag>
            
            <tag> Poller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-整体架构和Lifecycle</title>
      <link href="/2021-08-19/tomcat-zheng-ti-jia-gou-he-lifecycle/"/>
      <url>/2021-08-19/tomcat-zheng-ti-jia-gou-he-lifecycle/</url>
      
        <content type="html"><![CDATA[<hr><p>​基于Tomcat-8.5.x版本，简单分析了整体的架构和核心组件。并详细分析和总结了Lifecycle机制</p><span id="more"></span><h2 id="核心组件和架构"><a href="#核心组件和架构" class="headerlink" title="核心组件和架构"></a>核心组件和架构</h2><p>Tomcat 的架构可以抽象为一棵树，核心组件结构如下：</p><ul><li><strong>根节点是 Server</strong>，表示整个 Tomcat 实例（即一个 JVM 进程）</li><li><strong>Server 下包含一个或多个 Service</strong>，代表一组 Web 服务</li><li>每个 <code>Service</code> 包含：<ul><li><strong>一个或多个 Connector</strong>，负责监听不同协议&#x2F;端口的请求（如 HTTP、HTTPS）</li><li><strong>唯一的一个 Engine，与Service一对一的关系</strong>，用于处理由 Connector 接收到的请求</li></ul></li><li><strong>Engine 下包含多个 Host</strong>，每个 <code>Host</code> 对应一个虚拟主机（通过域名区分）</li><li><strong>每个 Host管理多个 Context</strong>，每个 <code>Context</code> 对应一个 Web 应用（即一个 war）</li><li><strong>每个 Context 下包含多个 Wrapper</strong>，每个 <code>Wrapper</code> 对应一个具体的 Servlet</li></ul><p><img src="https://img.shanzhao.site/file/1748326195967_tomcat-architecture.png" alt="tomcat-architecture.png"></p><h2 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h2><p>​<code>Lifecycle</code> 是 Tomcat 中最核心的接口之一。所有关键组件都实现了该接口，以便<strong>在生命周期事件（如init、start、stop等）到来时执行自身的职责，并将事件级联传递给子组件</strong>。因此，深入理解 <code>Lifecycle</code> 的作用和机制，是阅读和掌握 Tomcat 源码的基础。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ======================== 生命周期事件常量 ========================</span>    String BEFORE_INIT_EVENT <span class="token operator">=</span> <span class="token string">"before_init"</span><span class="token punctuation">;</span>    String AFTER_INIT_EVENT <span class="token operator">=</span> <span class="token string">"after_init"</span><span class="token punctuation">;</span>    String BEFORE_START_EVENT <span class="token operator">=</span> <span class="token string">"before_start"</span><span class="token punctuation">;</span>    String START_EVENT <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">;</span>    String AFTER_START_EVENT <span class="token operator">=</span> <span class="token string">"after_start"</span><span class="token punctuation">;</span>    String BEFORE_STOP_EVENT <span class="token operator">=</span> <span class="token string">"before_stop"</span><span class="token punctuation">;</span>    String STOP_EVENT <span class="token operator">=</span> <span class="token string">"stop"</span><span class="token punctuation">;</span>    String AFTER_STOP_EVENT <span class="token operator">=</span> <span class="token string">"after_stop"</span><span class="token punctuation">;</span>    String BEFORE_DESTROY_EVENT <span class="token operator">=</span> <span class="token string">"before_destroy"</span><span class="token punctuation">;</span>    String AFTER_DESTROY_EVENT <span class="token operator">=</span> <span class="token string">"after_destroy"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 周期性事件（如后台定时任务触发） */</span>    String PERIODIC_EVENT <span class="token operator">=</span> <span class="token string">"periodic"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 配置启动事件（内部扩展使用） */</span>    String CONFIGURE_START_EVENT <span class="token operator">=</span> <span class="token string">"configure_start"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 配置停止事件（内部扩展使用） */</span>    String CONFIGURE_STOP_EVENT <span class="token operator">=</span> <span class="token string">"configure_stop"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ======================== 生命周期监听器相关方法 ========================</span>    <span class="token keyword">void</span> <span class="token function">addLifecycleListener</span><span class="token punctuation">(</span>LifecycleListener listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    LifecycleListener<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findLifecycleListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">removeLifecycleListener</span><span class="token punctuation">(</span>LifecycleListener listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ======================== 生命周期控制方法 ========================</span>    <span class="token comment" spellcheck="true">/**     * 初始化组件。组件只能初始化一次，且必须在启动前完成。     */</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 启动组件。如果未初始化，会隐式调用 init()     */</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 停止组件。可在调用 start() 后再次调用以恢复运行     */</span>    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 销毁组件，释放资源。此操作不可逆。     */</span>    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException<span class="token punctuation">;</span>    LifecycleState <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getStateName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 标记接口：表示该组件只能使用一次（单次使用后即不可重启）     */</span>    <span class="token keyword">interface</span> <span class="token class-name">SingleUse</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LifecycleState"><a href="#LifecycleState" class="headerlink" title="LifecycleState"></a>LifecycleState</h3><p>​组件的生命周期状态枚举。每个状态标记了当前组件是否处于“可用”状态（available），以及对应的生命周期事件名（lifecycleEvent）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> LifecycleState <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始状态，尚未进行任何初始化操作</span>    <span class="token function">NEW</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ================= 初始化阶段 =================</span>    <span class="token comment" spellcheck="true">// 初始化中，调用 init() 时进入此状态，发布 before_init 事件</span>    <span class="token function">INITIALIZING</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>BEFORE_INIT_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 初始化完成，进入 INITIALIZED 状态，发布 after_init 事件</span>    <span class="token function">INITIALIZED</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>AFTER_INIT_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ================= 启动阶段 =================</span>    <span class="token comment" spellcheck="true">// 启动准备中，准备启动前进入该状态，发布 before_start 事件</span>    <span class="token function">STARTING_PREP</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>BEFORE_START_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 正在启动，执行 startInternal() 时进入此状态，发布 start 事件</span>    <span class="token function">STARTING</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>START_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 启动完成，组件已处于工作状态，发布 after_start 事件</span>    <span class="token function">STARTED</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>AFTER_START_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ================= 停止阶段 =================</span>    <span class="token comment" spellcheck="true">// 停止准备阶段，准备停止时进入该状态，发布 before_stop 事件</span>    <span class="token function">STOPPING_PREP</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>BEFORE_STOP_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 正在停止，组件关闭过程中进入该状态，发布 stop 事件</span>    <span class="token function">STOPPING</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>STOP_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 停止完成，组件已不可用，发布 after_stop 事件</span>    <span class="token function">STOPPED</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>AFTER_STOP_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ================= 销毁阶段 =================</span>    <span class="token comment" spellcheck="true">// 销毁准备阶段，发布 before_destroy 事件</span>    <span class="token function">DESTROYING</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>BEFORE_DESTROY_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 销毁完成，组件进入不可恢复终态，发布 after_destroy 事件</span>    <span class="token function">DESTROYED</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>AFTER_DESTROY_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ================= 异常状态 =================</span>    <span class="token comment" spellcheck="true">// 异常失败状态，组件启动或运行中发生未处理异常，进入失败态。无生命周期事件发布</span>    <span class="token function">FAILED</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前状态是否为组件的“可用”状态，即是否可对外提供服务（如 STARTING、STARTED 等）     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> available<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String lifecycleEvent<span class="token punctuation">;</span>    <span class="token function">LifecycleState</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> available<span class="token punctuation">,</span> String lifecycleEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>available <span class="token operator">=</span> available<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleEvent <span class="token operator">=</span> lifecycleEvent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> available<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getLifecycleEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lifecycleEvent<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LifecycleBase"><a href="#LifecycleBase" class="headerlink" title="LifecycleBase"></a>LifecycleBase</h3><p>​<code>LifecycleBase</code> 是 <code>Lifecycle</code> 接口的基础实现类，提供了生命周期控制方法（如 <code>init()</code>、<code>start()</code>、<code>stop()</code>、<code>destroy()</code>）的通用模板逻辑。Tomcat 中绝大多数实现了 <code>Lifecycle</code> 接口的核心组件，都会继承该类，从而复用其统一的状态管理和事件分发机制。</p><p>​核心start方法分析如下，（其余的init，stop等方法差不太多，就不做详细的分析了）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LifecycleBase</span> <span class="token keyword">implements</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 启动组件。线程安全，具备幂等性。     *      * 生命周期状态迁移如下：     * NEW -> INITIALIZED -> STARTING_PREP -> STARTING -> STARTED     * 如果启动失败，将进入 FAILED 状态。     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING_PREP<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">||</span> LifecycleState<span class="token punctuation">.</span>STARTING<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">||</span>                LifecycleState<span class="token punctuation">.</span>STARTED<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 正在启动中或已启动，无视直接返回</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ============= 前置状态判断 =================</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>NEW<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果还是初始化状态，就先初始化</span>            <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>FAILED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若之前启动失败，先尝试停止，清理资源后重新启动</span>            <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>INITIALIZED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STOPPED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 其余非法前置状态，直接异常</span>            <span class="token function">invalidTransition</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>BEFORE_START_EVENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ============== 到这表示前置状态处理完毕，可以真正start了 ===================</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置状态为 STARTING_PREP，并发布 before_start 事件</span>            <span class="token function">setStateInternal</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING_PREP<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 调用子类实现的实际启动逻辑（模板方法模式）</span>            <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// ============ 走到这，正常情况state就应该为STARTING了 =================</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>FAILED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 启动失败，执行stop</span>                <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 非STARTING（正常不应该出现，避免子类实现不规范的一种fallback），直接抛异常</span>                <span class="token function">invalidTransition</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>AFTER_START_EVENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 正常会走到这，状态自动置为STARTED。并发布 after_start 事件</span>                <span class="token function">setStateInternal</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTED<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">handleSubClassException</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"lifecycleBase.startFail"</span><span class="token punctuation">,</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://img.shanzhao.site/file/1748332081804_tomcat-lifecycle.png" alt="tomcat-lifecycle.png"></p><p align="center" style="color: #888;">Lifecycle状态转换图</p><p>状态机核心要点：</p><ul><li><strong>启动组件必定要先init，也只会调用一次init</strong></li><li><strong>start和stop状态可以循环相互转化（即STOPPED状态不是终态）</strong></li><li>NEW可直接到STOPPED状态（很少这么用）</li><li><strong>DESTROYED才是终态，不可逆转</strong>（FAILED都不是终态，它还可以stop() -&gt; startI()，虽然不一定成功）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Bean的Scope</title>
      <link href="/2021-06-28/spring-bean-de-scope/"/>
      <url>/2021-06-28/spring-bean-de-scope/</url>
      
        <content type="html"><![CDATA[<hr><p>​分析了Spring Scope的作用和实现类。并<strong>从源码分析了其Scoped Proxy作用和实现，并在最后用arthas进行了简单的验证</strong>。重点应该关注基于代理的其他作用域Bean注册的<strong>两个BeanDefinition异同点，以及为何会注册两个BeanDefinition</strong></p><span id="more"></span><p>​在 Spring 中，所有组件本质上都是 Bean，虽然它们的创建方式一致，但生命周期和缓存策略并不统一。为了支持不同的使用场景，Spring 设计了 Scope（作用域）机制，来决定 Bean 实例在容器中的缓存行为。</p><h2 id="常见的-Scope"><a href="#常见的-Scope" class="headerlink" title="常见的 Scope"></a>常见的 Scope</h2><ul><li><p>通用环境</p><ul><li><blockquote><ol><li><strong>singleton</strong>：默认作用域。单例bean，由Spring进行全局缓存</li><li><strong>prototype</strong>：很多博客翻译为多例，其实容易误导，因为session和request中的bean也算多例。翻译为原型bean更好，因为它是基于 <strong>Bean 定义模板进行实例化 的原型模式，每次获取Bean时都会创建一个新的实例（即取即创建）</strong>。因此，它<strong>不能被缓存，也不能被循环依赖</strong></li></ol></blockquote></li></ul></li><li><p>web环境</p><ul><li><blockquote><p><strong>session</strong>：web环境下的缓存在Session里的bean</p><ol><li><strong>request</strong>：web环境下的缓存在Request里的bean。意味着每次新的Request，都需要创建新的bean</li><li><strong>application</strong>：web环境下缓存在ServletContext里的bean。是存在于另一个容器里单例bean</li></ol></blockquote></li></ul></li><li><p>cloud环境</p><ul><li><blockquote><p> <strong>refresh</strong>：spring colud环境下的一种作用域，在<strong>这个作用域里的bean意味着每次环境刷新后（RefreshEvent事件触发），都需要创建新的bean，并destory以前bean</strong>。例如cloud环境下如果配置中心支持动态更改kv，每次修改kv后就出触发RefreshEvent事件</p></blockquote></li></ul></li></ul><h2 id="Scope实现"><a href="#Scope实现" class="headerlink" title="Scope实现"></a>Scope实现</h2><p>​在 <code>AbstractBeanFactory#doGetBean</code> 方法中，<strong>所有非默认作用域（非 singleton&#x2F;prototype）的 Bean 获取，均通过 <code>Scope</code> 接口实现支持</strong>。每种运行环境对应一个 <code>Scope</code> 实例，由它统一负责该环境下 Bean 的 <strong>创建、缓存与销毁</strong>。Spring提供的常见Scope实现如下</p><ul><li><p>SessionScope：session域的实现</p></li><li><p>RequestScope：request域的实现</p></li><li><p>ServletContextScope：application域的实现</p></li><li><p>RefreshScope：refresh域的实现</p></li><li><p>SimpleThreadScope：用ThreadLocal实现的Bean的缓存域。即线程可见Bean</p></li><li><p>SimpleTransactionScope：事务作用域，将 Bean 缓存绑定到当前事务，内部存储在 <code>TransactionSynchronizationManager.resources</code> 中</p></li></ul><h3 id="session域"><a href="#session域" class="headerlink" title="session域"></a>session域</h3><p>主要逻辑为<strong>获取当前request的HttpSession，从内部中获取bean，没有则再实例化bean并缓存到当前Session里</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionScope</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRequestAttributesScope</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> objectFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object mutex <span class="token operator">=</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSessionMutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 加锁，避免多线程同时创建bean</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> objectFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 父类中的AbstractRequestAttributesScope方法</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> objectFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RequestAttributes attributes <span class="token operator">=</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对于session域，是通过HttpSession#getAttribute方法操作的</span>        Object scopedObject <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scopedObject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建bean</span>            scopedObject <span class="token operator">=</span> objectFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            attributes<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> scopedObject<span class="token punctuation">,</span> <span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object retrievedObject <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>retrievedObject <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                scopedObject <span class="token operator">=</span> retrievedObject<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> scopedObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Scope注解"><a href="#Scope注解" class="headerlink" title="@Scope注解"></a>@Scope注解</h2><p>用于定义 Spring 容器中 Bean 的作用域（Scope）。该注解通常配合 <code>@Component</code> 或 <code>@Bean</code> 使用，控制 Bean 在容器中的生命周期及缓存策略</p><ul><li>value：指定当前 Bean 的作用域名称，可以使用我们自定义的scope。Spring解析时不会校验</li><li>scopeName：同value</li><li><strong>proxyMode</strong>：指定当前 Bean 是否需要通过代理方式注入。枚举类型为 <code>ScopedProxyMode</code>，常用值包括：<ul><li><code>DEFAULT</code>（默认值）：等价于 <code>NO</code></li><li><code>NO</code>：<strong>不使用代理。意味着当前Bean不能被其他singleton bean给依赖注入</strong></li><li><code>INTERFACES</code>：JDK 动态代理，即接口代理</li><li><code>TARGET_CLASS</code>：CGLIB 代理，即继承代理</li></ul></li></ul><h2 id="Scope代理"><a href="#Scope代理" class="headerlink" title="Scope代理"></a>Scope代理</h2><p>​还有个重要的问题，Spring 中<strong>非 singleton 作用域的 Bean 无法直接注入到 singleton Bean 中</strong>，原因在于<strong>singleton Bean一旦被创建，其内部的依赖也随之固定。而诸如 <code>request</code>、<code>session</code> 等作用域下的 Bean 生命周期较短，其实例在运行时可能会动态变化。</strong></p><p>​所以<strong>为了解决这种作用域不一致带来的注入问题</strong>，Spring 提供了 <strong>作用域代理机制（Scoped Proxy）</strong>。核心思想为<strong>将实际的Scope Bean 包装成一个代理对象，注入到 singleton Bean 中；每次通过该代理访问时，都会根据当前上下文（如当前request或session）动态获取真实的目标 Bean</strong>。这样，<strong>从开发者视角来看，这个 Bean 就像是 singleton 一样稳定可用</strong>，但实际底层访问的却是随作用域动态变化的目标实例。</p><h3 id="ScopedProxyUtils"><a href="#ScopedProxyUtils" class="headerlink" title="ScopedProxyUtils"></a>ScopedProxyUtils</h3><p>​是 Spring 在注册特定作用域（如 <code>request</code>、<code>session</code>）BeanDefinition 之前，用于创建作用域代理的工具类。它的核心作用是：<strong>在注册 BeanDefinition 前，将其包装成作用域代理，从而允许非 singleton Bean 被注入到 singleton Bean 中。</strong>其最终会在容器中注册一下两个 Bean</p><ul><li><p><strong>代理 Bean（Scoped Proxy）</strong></p><ul><li>类型为 <code>ScopedProxyFactoryBean</code>，作用域为 <code>singleton</code></li><li><strong>Bean 名为原始 Bean 的名称</strong>（例如 <code>userService</code>）</li><li>负责在运行时根据当前作用域动态获取实际 Bean 实例</li><li><strong>保留原始 Bean 的自动注入相关属性（如 <code>@Primary</code>、限定符），因此它才是被注入到其他 Bean 中的“主 Bean”</strong></li></ul><p>  <strong>目标 Bean（Target Bean）</strong></p><ul><li>Bean 名为 <code>&quot;scopedTarget.&quot; + 原始名称</code>（如 <code>scopedTarget.userService</code>）</li><li>保持原有的作用域定义（如 <code>request</code>、<code>session</code> 等）</li><li><strong>被设置为不可自动注入（<code>autowireCandidate = false</code>）。都注入代理bean</strong></li></ul></li></ul><h4 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ScopedProxyUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代理目标 Bean 的命名前缀</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TARGET_NAME_PREFIX <span class="token operator">=</span> <span class="token string">"scopedTarget."</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TARGET_NAME_PREFIX_LENGTH <span class="token operator">=</span> TARGET_NAME_PREFIX<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建作用域代理：将一个具有非单例作用域的 Bean 包装为一个 ScopedProxyFactoryBean，     * 用于在注入到 singleton Bean 时仍保持作用域语义。     *     * 实现原理：将原始 Bean 注册为一个带前缀的新 Bean，然后为原始 Bean 名称注册一个代理 Bean，     * 每次访问这个代理 Bean 时，都会动态地从容器中获取当前作用域下的真实 Bean。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> BeanDefinitionHolder <span class="token function">createScopedProxy</span><span class="token punctuation">(</span>BeanDefinitionHolder definition<span class="token punctuation">,</span>            BeanDefinitionRegistry registry<span class="token punctuation">,</span> <span class="token keyword">boolean</span> proxyTargetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String originalBeanName <span class="token operator">=</span> definition<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanDefinition targetDefinition <span class="token operator">=</span> definition<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 原bean修改后的目标beanName： scopedTarget. + 原beanName</span>        String targetBeanName <span class="token operator">=</span> <span class="token function">getTargetBeanName</span><span class="token punctuation">(</span>originalBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 ScopedProxyFactoryBean 的定义，用于代理原始 Bean</span>        RootBeanDefinition proxyDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>ScopedProxyFactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">setDecoratedDefinition</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>targetDefinition<span class="token punctuation">,</span> targetBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">setOriginatingBeanDefinition</span><span class="token punctuation">(</span>targetDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span>targetDefinition<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置代理bean中targetBeanName（用来在BeanFactory中原始bean）</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"targetBeanName"</span><span class="token punctuation">,</span> targetBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyTargetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// cglib proxy</span>            targetDefinition<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>AutoProxyUtils<span class="token punctuation">.</span>PRESERVE_TARGET_CLASS_ATTRIBUTE<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// jdk proxy</span>            proxyDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"proxyTargetClass"</span><span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 复制原始 Bean 的自动注入相关属性</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span>targetDefinition<span class="token punctuation">.</span><span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span>targetDefinition<span class="token punctuation">.</span><span class="token function">isPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetDefinition <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            proxyDefinition<span class="token punctuation">.</span><span class="token function">copyQualifiersFrom</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> targetDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将原始 Bean 设为非primary且不可自动注入（避免与代理冲突，这样Spring注册的这个bean始终是代理bean）</span>        targetDefinition<span class="token punctuation">.</span><span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetDefinition<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册原bean到容器中，此时beanName已被替换</span>        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>targetBeanName<span class="token punctuation">,</span> targetDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回代理 Bean 的定义（仍然使用原始Bean的beanName）</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>proxyDefinition<span class="token punctuation">,</span> originalBeanName<span class="token punctuation">,</span> definition<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ScopedProxyFactoryBean"><a href="#ScopedProxyFactoryBean" class="headerlink" title="ScopedProxyFactoryBean"></a>ScopedProxyFactoryBean</h3><p>​它构建了一个用于作用域代理的单例增强 Bean，这个bean具有如下特点</p><ul><li>**TargetSource 为 <code>SimpleBeanTargetSource</code>**：每次方法调用时，动态从 <code>BeanFactory</code> 获取目标 bean 实例（不做任何缓存）</li><li><strong>代理类实现了目标 bean 的所有接口和类</strong>：对外表现为原始 bean，可被其他 bean 正常依赖和注入（作为主 bean 使用）。</li><li><strong>实现了 <code>AopInfrastructureBean</code> 接口</strong>：标记为基础设施类，避免再次被 AOP、事务、异步等机制增强。</li><li>**仅使用一个拦截器：<code>DelegatingIntroductionInterceptor</code>**：<ul><li>对被“引入”的接口方法（如 <code>ScopedObject#getTargetObject()</code>）进行特殊处理；</li><li>对其他方法则调用 <code>MethodInvocation#proceed()</code>，由原始 bean 执行具体逻辑。</li></ul></li></ul><h4 id="核心源码-1"><a href="#核心源码-1" class="headerlink" title="核心源码"></a>核心源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScopedProxyFactoryBean</span> <span class="token keyword">extends</span> <span class="token class-name">ProxyConfig</span>        <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">,</span> BeanFactoryAware<span class="token punctuation">,</span> AopInfrastructureBean <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span>BeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Not running in a ConfigurableBeanFactory: "</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ConfigurableBeanFactory cbf <span class="token operator">=</span> <span class="token punctuation">(</span>ConfigurableBeanFactory<span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将 BeanFactory 注入目标作用域对象（这样才有能力从BeanFactory中获取目标作用域对象）</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scopedTargetSource<span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        ProxyFactory pf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pf<span class="token punctuation">.</span><span class="token function">copyFrom</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置代理目标为 scopedTargetSource（默认为SimpleBeanTargetSource，其获取目标对象每次都调用BeanFactory#getBean）</span>        <span class="token comment" spellcheck="true">// 且scopedTargetSource的getTargetClass()方法会解析并返回原始bean的class，用于代理增强</span>        pf<span class="token punctuation">.</span><span class="token function">setTargetSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scopedTargetSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetBeanName<span class="token punctuation">,</span> <span class="token string">"Property 'targetBeanName' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot create scoped proxy for bean '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetBeanName <span class="token operator">+</span>                    <span class="token string">"': Target type could not be determined at the time of proxy creation."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// jdk代理判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> beanType<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> Modifier<span class="token punctuation">.</span><span class="token function">isPrivate</span><span class="token punctuation">(</span>beanType<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pf<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getAllInterfacesForClass</span><span class="token punctuation">(</span>beanType<span class="token punctuation">,</span> cbf<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Add an introduction that implements only the methods on ScopedObject.</span>        ScopedObject scopedObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultScopedObject</span><span class="token punctuation">(</span>cbf<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopedTargetSource<span class="token punctuation">.</span><span class="token function">getTargetBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pf<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelegatingIntroductionInterceptor</span><span class="token punctuation">(</span>scopedObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置该bean不会被其他自动代理 代理了</span>        <span class="token comment" spellcheck="true">/*         * 为什么会这么设置？         * 这个bean以及是个代理增强bean了，它所需要增强的地方也是唯一的地方就是找到目标scope里真实的bean，并将方法的调用行为转移到目标作用域的真实的bean中去         *         * 例：session域的bean，该bean被自动注入的就应该是这个代理bean，这个bean存在的目的也只是找到session域         * 里对应的真实bean，然后调用该bean的方法全走session域的真实bean的方法，且由这个真实bean来进行其他自动代理的增强         */</span>        pf<span class="token punctuation">.</span><span class="token function">addInterface</span><span class="token punctuation">(</span>AopInfrastructureBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建好代理对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>proxy <span class="token operator">=</span> pf<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>cbf<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 单例     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="arthas验证"><a href="#arthas验证" class="headerlink" title="arthas验证"></a>arthas验证</h4><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> site<span class="token punctuation">.</span>shanzhao<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@SessionScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionScopeDemo</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="class信息查询"><a href="#class信息查询" class="headerlink" title="class信息查询"></a>class信息查询</h5><p>用sc -d site.shanzhao.config.SessionScopeDemo命令，我这里只展示了增强的class，重点观察到</p><ul><li>父类为site.shanzhao.config.SessionScopeDemo</li><li>相比普通AOP，多增加的接口有：<ul><li>org.springframework.aop.scope.ScopedObject</li><li>org.springframework.aop.framework.AopInfrastructureBean</li></ul></li></ul><pre class="line-numbers language-bash"><code class="language-bash"> class-info        site.shanzhao.config.SessionScopeDemo$<span class="token variable">$EnhancerBySpringCGLIB</span>$<span class="token variable">$9851f0cb</span> code-source       /Users/reef/IdeaProjects/soil/target/classes/ name              site.shanzhao.config.SessionScopeDemo$<span class="token variable">$EnhancerBySpringCGLIB</span>$<span class="token variable">$9851f0cb</span> isInterface       <span class="token boolean">false</span> isAnnotation      <span class="token boolean">false</span> isEnum            <span class="token boolean">false</span> isAnonymousClass  <span class="token boolean">false</span> isArray           <span class="token boolean">false</span> isLocalClass      <span class="token boolean">false</span> isMemberClass     <span class="token boolean">false</span> isPrimitive       <span class="token boolean">false</span> isSynthetic       <span class="token boolean">false</span> simple-name       SessionScopeDemo$<span class="token variable">$EnhancerBySpringCGLIB</span>$<span class="token variable">$9851f0cb</span> modifier          public annotation interfaces        org.springframework.aop.scope.ScopedObject,java.io.Serializable,org.springframework.aop.framework.AopInfrastructureBean,org.springframework.aop.SpringProxy,org.springframework.aop.framework.                   Advised,org.springframework.cglib.proxy.Factory super-class       +-site.shanzhao.config.SessionScopeDemo                     +-java.lang.Object class-loader      +-jdk.internal.loader.ClassLoaders<span class="token variable">$AppClassLoader@311d617d</span>                     +-jdk.internal.loader.ClassLoaders<span class="token variable">$PlatformClassLoader@1b4ae4e0</span> classLoaderHash   311d617d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ognl查询beanName"><a href="#ognl查询beanName" class="headerlink" title="ognl查询beanName"></a>ognl查询beanName</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用ApplicationContext.getBeanNamesForType()方法，可知有两个SessionScopeDemo class的BeanDefinition</span><span class="token punctuation">[</span>arthas@35578<span class="token punctuation">]</span>$ ognl <span class="token string">"@site.shanzhao.util.ApplicationContextUtils@applicationContext.getBeanNamesForType(@site.shanzhao.config.SessionScopeDemo@class)"</span>@String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>    @String<span class="token punctuation">[</span>scopedTarget.sessionScopeDemo<span class="token punctuation">]</span>,    @String<span class="token punctuation">[</span>sessionScopeDemo<span class="token punctuation">]</span>,<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring-容器refresh</title>
      <link href="/2021-06-03/spring-rong-qi-refresh/"/>
      <url>/2021-06-03/spring-rong-qi-refresh/</url>
      
        <content type="html"><![CDATA[<hr><p>​从源码分析了Spring容器的refresh过程，并通过图文的方式记录了整个流程的核心步骤</p><span id="more"></span><h2 id="核心步骤总结"><a href="#核心步骤总结" class="headerlink" title="核心步骤总结"></a>核心步骤总结</h2><ol><li><strong>准备 BeanFactory</strong>（包括类加载器、SPEL解析器等基础设施）</li><li><strong>执行 BeanDefinitionRegistryPostProcessor</strong>：优先处理配置类等，动态注册更多 BeanDefinition</li><li><strong>执行 BeanFactoryPostProcessor</strong>：可用来修改 BeanDefinition 信息</li><li><strong>注册 BeanPostProcessor</strong>：用于后续 Bean 创建生命周期中的扩展</li><li>初始化 MessageSource：国际化消息解析支持</li><li><strong>初始化事件广播器</strong>（ApplicationEventMulticaster）并注册为 Bean</li><li><strong>调用 onRefresh</strong>()：留给子类扩展（如创建 Web Server）</li><li><strong>注册 ApplicationListener</strong>：用于监听容器事件</li><li><strong>实例化非懒加载的单例 Bean</strong></li><li><strong>完成刷新</strong>：启动 SmartLifecycle Bean，发布 ContextRefreshedEvent</li></ol><p><img src="https://img.shanzhao.site/file/1748002941275_spring-context-refresh.png" alt="spring-context-refresh.png"></p><h2 id="AbstractApplicationContext-refresh-源码分析"><a href="#AbstractApplicationContext-refresh-源码分析" class="headerlink" title="AbstractApplicationContext#refresh-源码分析"></a>AbstractApplicationContext#refresh-源码分析</h2><h3 id="整体的refresh"><a href="#整体的refresh" class="headerlink" title="整体的refresh"></a>整体的refresh</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 准备上下文环境（包括设置启动时间、状态标志位、初始化环境属性等）</span>        <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 创建并刷新 BeanFactory（默认 DefaultListableBeanFactory）</span>        ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 对BeanFactory做各种填充</span>        <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 4. hook方法，供子类在 BeanFactory 初始化后、自定义修改它</span>            <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 5. 调用 BeanFactoryPostProcessor(BeanDefinitionRegistryPostProcessor ></span>            <span class="token comment" spellcheck="true">// BeanFactoryPostProcessor)</span>            <span class="token comment" spellcheck="true">// ConfigurationClassPostProcessor就是这阶段处理的</span>            <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 6. 注册 BeanPostProcessor（并非调用），用于后续Bean实例化的hook</span>            <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 7. 为上下文初始化Message源，国际化处理</span>            <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 8. 初始化事件广播器（默认实现为SimpleApplicationEventMulticaster，专门用来查找对应ApplicationEvent应该使用哪个ApplicationListener（按类型匹配））</span>            <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 9. 留给子类初始化其他bean（spring boot中子类会初始化web服务器）</span>            <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 10. 注册所有实现了 ApplicationListener 的 Bean 到广播器中</span>            <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 11. 初始化剩下Bean（非lazy 且 singleton）</span>            <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 12. SmartLifecycle的Bean可以start了，并且发布ContextRefreshedEvent事件</span>            <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                        <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 异常处理1：销毁已创建的单例 bean，避免资源泄漏</span>            <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 异常处理2：重置 context 状态标志，保证下次调用 refresh 可以重新开始</span>            <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 最终清除 Spring 内部使用的一些缓存（如反射、泛型元信息等）</span>            <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键步骤分析"><a href="#关键步骤分析" class="headerlink" title="关键步骤分析"></a>关键步骤分析</h3><h4 id="prepareBeanFactory"><a href="#prepareBeanFactory" class="headerlink" title="prepareBeanFactory"></a>prepareBeanFactory</h4><p>​目的是对内部 <code>BeanFactory</code> 进行增强配置，注入 ApplicationContext 级别的基础能力，主要包括如下</p><ul><li>设置类加载器、<strong>SpEL 表达式解析器</strong>与资源编辑器</li><li>注册<strong>常见 Aware 接口的处理器</strong>与<strong>特殊依赖的自动解析</strong></li><li>注册内置基础 Bean（如 <strong>Spring Environment、系统属性、系统环境变量</strong>）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置类加载器（用于加载 bean 类、AOP 等）</span>    beanFactory<span class="token punctuation">.</span><span class="token function">setBeanClassLoader</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置beanFactory的表达式语言（SpEL）处理器</span>    beanFactory<span class="token punctuation">.</span><span class="token function">setBeanExpressionResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardBeanExpressionResolver</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置各种PropertyEditor（用于解析 Resource 等）</span>    beanFactory<span class="token punctuation">.</span><span class="token function">addPropertyEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册 ApplicationContextAwareProcessor，处理以下几个 Aware 接口注入</span>    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置一些忽略自动装配的接口,上面的ApplicationContextAwareProcessor就已经搞定了</span>    beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>EnvironmentAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>EmbeddedValueResolverAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>ResourceLoaderAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>ApplicationEventPublisherAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>MessageSourceAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>ApplicationContextAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置几个特殊的依赖注入值（无需在容器中定义，注入时直接解析为指定对象）</span>    beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>BeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ResourceLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ApplicationEventPublisher<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加ApplicationListener的监听器，当单例bean初始化后，且实现了ApplicationListener接口，就将其缓存起来以便使用</span>    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果容器中有 LoadTimeWeaver，注册对应的 Aware 处理器，并设置临时 ClassLoader</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>LOAD_TIME_WEAVER_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoadTimeWeaverAwareProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextTypeMatchClassLoader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Spring Environment Bean 注册（当前环境信息）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>ENVIRONMENT_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>ENVIRONMENT_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 系统属性（System.getProperties()）Bean注册</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>SYSTEM_PROPERTIES_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>SYSTEM_PROPERTIES_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 系统环境变量（System.getenv()）Bean注册</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>SYSTEM_ENVIRONMENT_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>SYSTEM_ENVIRONMENT_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="invokeBeanFactoryPostProcessors"><a href="#invokeBeanFactoryPostProcessors" class="headerlink" title="invokeBeanFactoryPostProcessors"></a>invokeBeanFactoryPostProcessors</h4><blockquote><ol><li><strong>先处理 <code>BeanDefinitionRegistryPostProcessor</code>：</strong><ul><li>手动传入的优先执行</li><li>容器中的按 <code>PriorityOrdered</code> &gt; <code>Ordered</code> &gt; 剩下的</li><li>若执行过程中有动态注册的后处理器，继续迭代</li></ul></li><li><strong>再处理 <code>BeanFactoryPostProcessor</code>：</strong><ul><li>优先级一样， <code>PriorityOrdered</code> &gt; <code>Ordered</code> &gt; 剩下的</li></ul></li><li>最后清除合并后的 <code>BeanDefinition</code> 缓存，确保后处理器修改生效</li></ol></blockquote><p>​<strong><code>ConfigurationClassPostProcessor</code> 就是最早执行的 <code>BeanDefinitionRegistryPostProcessor</code>之一，其负责解析 <code>@Configuration</code> 等注解并动态注册大量 BeanDefinition。因此，我们可以通过自定义 <code>BeanDefinitionRegistryPostProcessor</code> 在它之后介入，统一处理或修改所有后续注册的 BeanDefinition，实现排除、添加或调整</strong>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// PostProcessorRegistrationDelegate类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>        ConfigurableListableBeanFactory beanFactory<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 已经处理过了的BeanDefinitionRegistryPostProcessors集和，避免重复处理bean</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> processedBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// 判断 beanFactory 是否支持注册</span>    <span class="token comment" spellcheck="true">/// BeanDefinition，以优先处理BeanDefinitionRegistryPostProcessor</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanDefinitionRegistry registry <span class="token operator">=</span> <span class="token punctuation">(</span>BeanDefinitionRegistry<span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> regularPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>BeanDefinitionRegistryPostProcessor<span class="token operator">></span> registryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanFactoryPostProcessor postProcessor <span class="token operator">:</span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>postProcessor <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                BeanDefinitionRegistryPostProcessor registryProcessor <span class="token operator">=</span> <span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">)</span> postProcessor<span class="token punctuation">;</span>                registryProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>                registryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registryProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                regularPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>postProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当前阶段要执行的 BeanDefinitionRegistryPostProcessor 处理器列表，处理的优先级：PriorityOrdered ></span>        <span class="token comment" spellcheck="true">// Ordered > 剩下的</span>        List<span class="token operator">&lt;</span>BeanDefinitionRegistryPostProcessor<span class="token operator">></span> currentRegistryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// =================== 第一轮：处理 PriorityOrdered 的 BD 处理器 ===================</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// =================== 第二轮：处理 Ordered 的 BD 处理器 ===================</span>        postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// =================== 最后：处理剩余的无序 BD 处理器（可能动态注册） ===================</span>        <span class="token keyword">boolean</span> reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>reiterate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            reiterate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    currentRegistryProcessors                            <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>            currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// =================== 执行所有已注册 BD 处理器的 postProcessBeanFactory 回调</span>        <span class="token comment" spellcheck="true">// ===================</span>        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>registryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// =================== 执行用户提供的常规 BeanFactoryPostProcessor ===================</span>        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>regularPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactoryPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// =================== 从配置中获取剩余的 BeanFactoryPostProcessor ===================</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分类收集 PriorityOrdered、Ordered、其他的 三类处理器</span>    List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> priorityOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> orderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> nonOrderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// skip - already processed in first phase above</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priorityOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行顺序类似上面的BD处理器</span>    <span class="token comment" spellcheck="true">// PriorityOrdered</span>    <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Ordered</span>    List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> orderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String postProcessorName <span class="token operator">:</span> orderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>postProcessorName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 其他的</span>    List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> nonOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String postProcessorName <span class="token operator">:</span> nonOrderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nonOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>postProcessorName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>nonOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 清理 BeanDefinition 的缓存，防止元信息过期（如占位符已被替换）</span>    beanFactory<span class="token punctuation">.</span><span class="token function">clearMetadataCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="registerBeanPostProcessors"><a href="#registerBeanPostProcessors" class="headerlink" title="registerBeanPostProcessors"></a>registerBeanPostProcessors</h4><p>​<strong>实例化并注册所有 <code>BeanPostProcessor</code>，按 <code>PriorityOrdered</code> &gt; <code>Ordered</code> &gt; 无序 的优先级添加到容器中，确保 Bean 生命周期中的处理器执行顺序符合预期；内部处理器（<code>MergedBeanDefinitionPostProcessor</code>）统一放在末尾，确保其在所有普通处理器之后执行。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// PostProcessorRegistrationDelegate类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>        ConfigurableListableBeanFactory beanFactory<span class="token punctuation">,</span> AbstractApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取所有实现了 BeanPostProcessor 接口的 beanName（不实例化）</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录目标 BeanPostProcessor 总数：现有 + 新注册 + 最终数量</span>    <span class="token keyword">int</span> beanProcessorTargetCount <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanPostProcessorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> postProcessorNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*     *   专门用来检查普通bean是否走完所有的BeanPostProcessor的     *     * 一个普通的bean在实例化时，正常情况下应该走完所有的BeanPostProcessor，     * 但当只注册了部分的BeanPostProcessor(放到IOC容器中)时，     * 此时实例化一个bean可能就导致还未注册的BeanPostProcessor处理不了（看优先级），     * 就会由这个checker来日志提醒（仅打印info日志）     */</span>    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanPostProcessorChecker</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> beanProcessorTargetCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 准备分组存储不同优先级的 BeanPostProcessor</span>    List<span class="token operator">&lt;</span>BeanPostProcessor<span class="token operator">></span> priorityOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>BeanPostProcessor<span class="token operator">></span> internalPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> orderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> nonOrderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分类：根据是否实现 PriorityOrdered / Ordered / 无排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// PriorityOrdered的直接实例化</span>            BeanPostProcessor pp <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            priorityOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token keyword">instanceof</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                internalPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// PriorityOrdered以及实例化了，就可直接 排序 ->  注册</span>    <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> priorityOrderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Ordered，实例化 -> 排序 -> 注册</span>    List<span class="token operator">&lt;</span>BeanPostProcessor<span class="token operator">></span> orderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> orderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanPostProcessor pp <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token keyword">instanceof</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            internalPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> orderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无顺序，实例化 -> 注册</span>    List<span class="token operator">&lt;</span>BeanPostProcessor<span class="token operator">></span> nonOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> nonOrderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanPostProcessor pp <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nonOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token keyword">instanceof</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            internalPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> nonOrderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 四、最后统一注册 MergedBeanDefinitionPostProcessor（内部BPP），例如：</span>    <span class="token comment" spellcheck="true">// - AutowiredAnnotationBeanPostProcessor</span>    <span class="token comment" spellcheck="true">// - CommonAnnotationBeanPostProcessor</span>    <span class="token comment" spellcheck="true">// - ApplicationListenerDetector 等</span>    <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>internalPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> internalPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 五、重新注册 ApplicationListenerDetector，用来收集ApplicationListener Bean（确保在链末尾执行（避免过早代理））</span>    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="initApplicationEventMulticaster"><a href="#initApplicationEventMulticaster" class="headerlink" title="initApplicationEventMulticaster"></a>initApplicationEventMulticaster</h4><p>​注册的默认事件广播器为<strong>SimpleApplicationEventMulticaster，其主要是对所有的ApplicationEvent事件进行分发匹配到对应的ApplicationListener中</strong>（<strong>支持异步，线程池为SimpleApplicationEventMulticaster.taskExecutor，默认同步分发</strong>）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>APPLICATION_EVENT_MULTICASTER_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster <span class="token operator">=</span>                beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>APPLICATION_EVENT_MULTICASTER_BEAN_NAME<span class="token punctuation">,</span> ApplicationEventMulticaster<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Using ApplicationEventMulticaster ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例化并注册默认的事件广播器Bean：SimpleApplicationEventMulticaster</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleApplicationEventMulticaster</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>APPLICATION_EVENT_MULTICASTER_BEAN_NAME<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No '"</span> <span class="token operator">+</span> APPLICATION_EVENT_MULTICASTER_BEAN_NAME <span class="token operator">+</span> <span class="token string">"' bean, using "</span> <span class="token operator">+</span>                    <span class="token string">"["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh"></a>onRefresh</h4><p>​一个模板方法（hook），由子类实现，用于在 <code>refresh()</code> 流程中 <strong>容器刷新完成、所有 BeanFactory 初始化完毕之后</strong>，进行特定上下文的扩展初始化工作。</p><p>​比如在 <code>Spring Boot</code> 中，<code>AnnotationConfigServletWebServerApplicationContext</code> 会在该方法中创建和启动内嵌的 Web 服务器（<strong>默认是 Tomcat</strong>，可选 Jetty 或 Undertow），并完成 Web 环境相关的初始化。</p><h4 id="finishBeanFactoryInitialization"><a href="#finishBeanFactoryInitialization" class="headerlink" title="finishBeanFactoryInitialization"></a>finishBeanFactoryInitialization</h4><p>是 Spring 容器刷新流程中的 <strong>核心收尾步骤之一</strong>，主要职责如下：</p><ol><li><strong>初始化所有非懒加载（non-lazy）、非抽象的单例 Bean</strong><ul><li>这一步会触发 Bean 的完整生命周期流程：依赖注入（populate）、初始化方法调用（如 <code>@PostConstruct</code>、<code>InitializingBean#afterPropertiesSet</code>）、AOP 代理包装等</li></ul></li><li><strong>触发 <code>SmartInitializingSingleton</code> 回调</strong><ul><li>所有实现了 <code>SmartInitializingSingleton</code> 接口的单例 Bean，会在 <strong>所有非懒加载的单例 Bean 完成初始化之后</strong> 统一回调其 <code>afterSingletonsInstantiated()</code> 方法。</li><li>这是容器中所有 Bean 都就绪之后的 “最后的hook”，用于执行依赖所有 Bean 的集中初始化逻辑</li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// AbstractApplicationContext</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 清空临时类加载器</span>    beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 冻结BeanDefinition的配置，代表需要的地方可以缓存了</span>    <span class="token comment" spellcheck="true">// 走到这，BeanDefinition都已经处理完毕了，所以可以考虑缓存了</span>    beanFactory<span class="token punctuation">.</span><span class="token function">freezeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实例化所有非lazy加载的单例bean，并在加载完后调用SmartInitializingSingleton接口</span>    <span class="token comment" spellcheck="true">// SmartInitializingSingleton这个接口就是在实例化所有非lazy且单例bean完成后需要调用的</span>    beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>真正初始化单例bean（DefaultListableBeanFactory#preInstantiateSingletons方法）</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> beanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RootBeanDefinition bd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 非抽象 + 单例 + 非lazy加载</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 实例化工厂Bean</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>FACTORY_BEAN_PREFIX <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factory <span class="token operator">=</span> <span class="token punctuation">(</span>FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> isEagerInit<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        isEagerInit <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">:</span>isEagerInit<span class="token punctuation">,</span>                                <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        isEagerInit <span class="token operator">=</span> <span class="token punctuation">(</span>factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span> <span class="token operator">&amp;&amp;</span>                                <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEagerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isEagerInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 实例化非工厂Bean</span>                <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// apply所有SmartInitializingSingleton Bean逻辑</span>    <span class="token comment" spellcheck="true">// 重要的拓展口，可以在这里最早感知到大部分Bean准备完毕，可以放心调用这些bean的各种方法了</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object singletonInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonInstance <span class="token keyword">instanceof</span> <span class="token class-name">SmartInitializingSingleton</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            SmartInitializingSingleton smartSingleton <span class="token operator">=</span> <span class="token punctuation">(</span>SmartInitializingSingleton<span class="token punctuation">)</span> singletonInstance<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="finishRefresh"><a href="#finishRefresh" class="headerlink" title="finishRefresh"></a>finishRefresh</h4><p>​这一步结束，容器对外就完全可用了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 清除上下文级别的缓存资源，例如类扫描过程中缓存的 ASM 元数据。</span>    <span class="token function">clearResourceCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化生命周期处理器（LifecycleProcessor）。</span>    <span class="token comment" spellcheck="true">// 默认实现为 DefaultLifecycleProcessor，用于统一管理实现了 Lifecycle 接口的 bean 的启动与停止</span>    <span class="token function">initLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通知生命周期处理器，容器刷新完成</span>    <span class="token comment" spellcheck="true">// 将启动所有实现了 SmartLifecycle 接口并设置了 autoStartup = true 的 Bean（通常用于自动启动的组件，如消息监听容器、调度器等）</span>    <span class="token function">getLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 广播容器刷新完成事件：ContextRefreshedEvent</span>    <span class="token comment" spellcheck="true">// 所有实现了 ApplicationListener 接口，监听该事件的 Bean 都会收到通知，可用于执行基于“容器就绪”的后置逻辑。</span>    <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将当前 ApplicationContext 注册到 JMX 的 LiveBeansView 中（如果启用）</span>    <span class="token comment" spellcheck="true">// 这允许通过 JMX 客户端动态查看容器中所有 Bean 的状态（例如 VisualVM 插件）</span>    LiveBeansView<span class="token punctuation">.</span><span class="token function">registerApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring-ConfigurationClassPostProcessor</title>
      <link href="/2021-05-13/spring-configurationclasspostprocessor/"/>
      <url>/2021-05-13/spring-configurationclasspostprocessor/</url>
      
        <content type="html"><![CDATA[<hr><p>​呕心沥血的分析了ConfigurationClassPostProcessor的核心源码，深入剖析了Spring注解驱动的原理。对其中的<strong>延迟机制、字节码解析优化和代理模型</strong>进行了深度的思考，并通过arthas反编译反向验证了full configuration的代理</p><span id="more"></span><p>​是Spring 容器中最重要的 <code>BeanFactoryPostProcessor</code> ，它负责解析并处理大量核心注解，其<strong>核心职责</strong>是：</p><blockquote><p><strong>统一解析所有来源的组件定义（BeanDefinition），并注册到 BeanFactory 中，为后续 Bean 的实例化做好准备。</strong></p></blockquote><p>其处理过程是<strong>递归执行的</strong>， 每当发现新的配置类、新的导入组件或扫描结果，它都会再次触发处理，直到不再有新组件为止。也就是说，新解析出的类本身也可能包含注解配置，需要进一步递归处理。</p><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td><code>@Configuration</code></td><td>标记一个类为配置类，作为入口被首次处理，并会被标记为 <code>full</code>  配置类。</td></tr><tr><td><code>@ComponentScan</code></td><td>扫描指定包路径下的组件类，将扫描到的 <code>@Component</code>、和元注解中包含 <code>@Component</code>的注解等注册为 <code>BeanDefinition</code>。</td></tr><tr><td><code>@Import</code></td><td>导入外部配置类（普通类、<code>ImportSelector</code>），注册其中定义的 Bean。</td></tr><tr><td><code>@ImportResource</code></td><td>加载 XML 配置文件中的 Bean 定义，与传统的 <code>applicationContext.xml</code> 类似。</td></tr><tr><td><code>@Bean</code></td><td>方法级别的注解，注册方法返回值作为 Bean，由 Spring 容器管理。</td></tr><tr><td><code>@PropertySource</code></td><td>加载外部配置文件（如 <code>.properties</code>），供 <code>@Value</code> 和 <code>Environment</code> 使用。</td></tr><tr><td><code>@Conditional</code></td><td>根据条件决定是否注册当前配置类或 Bean，贯穿上述所有注解的执行过程。</td></tr></tbody></table><h2 id="处理BeanDefinition"><a href="#处理BeanDefinition" class="headerlink" title="处理BeanDefinition"></a>处理BeanDefinition</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processConfigBeanDefinitions</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 收集所有配置类候选项（Full/Lite）</span>    List<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> configCandidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> candidateNames <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanDefinition beanDef <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断这个BeanDefinition是否已经被处理过（只有被处理过才会设置configurationClass属性）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">isFullConfigurationClass</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">)</span> <span class="token operator">||</span>                ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">isLiteConfigurationClass</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean definition has already been processed as a configuration class: "</span> <span class="token operator">+</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 判断配置类是full（优先判断）还是lite         *          * full: 类上存在@Configuration元注解         *          * lite: 类上存在@Component，@ComponentScan，@Import，@ImportResource元注解。         * 或方法上存在@Bean方法注解         *          */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            configCandidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 没有配置类则立即返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configCandidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// bean排序（@Order）</span>    configCandidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bd1<span class="token punctuation">,</span> bd2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span>bd1<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span>bd2<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SingletonBeanRegistry sbr <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>registry <span class="token keyword">instanceof</span> <span class="token class-name">SingletonBeanRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sbr <span class="token operator">=</span> <span class="token punctuation">(</span>SingletonBeanRegistry<span class="token punctuation">)</span> registry<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>localBeanNameGeneratorSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BeanNameGenerator generator <span class="token operator">=</span> <span class="token punctuation">(</span>BeanNameGenerator<span class="token punctuation">)</span> sbr<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span>CONFIGURATION_BEAN_NAME_GENERATOR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>generator <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>componentScanBeanNameGenerator <span class="token operator">=</span> generator<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>importBeanNameGenerator <span class="token operator">=</span> generator<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建Full和Lite的解析器</span>    ConfigurationClassParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">(</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>problemReporter<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>componentScanBeanNameGenerator<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>configCandidates<span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>ConfigurationClass<span class="token operator">></span> alreadyParsed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>configCandidates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解析Full Configuration和Lite Configuration类（会递归解析）</span>        parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析完成后的校验（@Configuration类的final校验）</span>        parser<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取所有新解析出来的 ConfigurationClass</span>        Set<span class="token operator">&lt;</span>ConfigurationClass<span class="token operator">></span> configClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">getConfigurationClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 移除已经解析完成的类</span>        configClasses<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>alreadyParsed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Read the model and create bean definitions based on its content</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassBeanDefinitionReader</span><span class="token punctuation">(</span>                    registry<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sourceExtractor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>importBeanNameGenerator<span class="token punctuation">,</span> parser<span class="token punctuation">.</span><span class="token function">getImportRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将解析出来的 ConfigurationClass 转换为真正的 BeanDefinition 注册到容器中</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>        alreadyParsed<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>        candidates<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> candidateNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> newCandidateNames <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> oldCandidateNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>candidateNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> alreadyParsedClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>ConfigurationClass configurationClass <span class="token operator">:</span> alreadyParsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                alreadyParsedClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>configurationClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String candidateName <span class="token operator">:</span> newCandidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldCandidateNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>candidateName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    BeanDefinition bd <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>candidateName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                            <span class="token operator">!</span>alreadyParsedClasses<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span> candidateName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            candidateNames <span class="token operator">=</span> newCandidateNames<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>candidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// // 注册 ImportRegistry 用于支持 ImportAware 的功能</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sbr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sbr<span class="token punctuation">.</span><span class="token function">containsSingleton</span><span class="token punctuation">(</span>IMPORT_REGISTRY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sbr<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>IMPORT_REGISTRY_BEAN_NAME<span class="token punctuation">,</span> parser<span class="token punctuation">.</span><span class="token function">getImportRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory <span class="token keyword">instanceof</span> <span class="token class-name">CachingMetadataReaderFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>CachingMetadataReaderFactory<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析BeanDefinition"><a href="#解析BeanDefinition" class="headerlink" title="解析BeanDefinition"></a>解析BeanDefinition</h3><h4 id="ConfigurationClassParser-doProcessConfigurationClass"><a href="#ConfigurationClassParser-doProcessConfigurationClass" class="headerlink" title="ConfigurationClassParser#doProcessConfigurationClass"></a>ConfigurationClassParser#doProcessConfigurationClass</h4><p>​真正解析Configuration Class的工具类（真正的解析上面的核心注解），并实现递归解析</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> SourceClass <span class="token function">doProcessConfigurationClass</span><span class="token punctuation">(</span>ConfigurationClass configClass<span class="token punctuation">,</span> SourceClass sourceClass<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.如果类包含元注解@Component，则递归处理当前类的所有内部类（包括private的）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotated</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Recursively process any member (nested) classes first</span>        <span class="token function">processMemberClasses</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> sourceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2.处理 @PropertySource注解</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>AnnotationAttributes propertySource <span class="token operator">:</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesForRepeatable</span><span class="token punctuation">(</span>            sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> PropertySources<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>            org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertySource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableEnvironment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">processPropertySource</span><span class="token punctuation">(</span>propertySource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Ignoring @PropertySource annotation on ["</span> <span class="token operator">+</span> sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">"]. Reason: Environment must implement ConfigurableEnvironment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3.处理@ComponentScan注解</span>    Set<span class="token operator">&lt;</span>AnnotationAttributes<span class="token operator">></span> componentScans <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesForRepeatable</span><span class="token punctuation">(</span>            sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ComponentScans<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ComponentScan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>componentScans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ConfigurationPhase<span class="token punctuation">.</span>REGISTER_BEAN<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>AnnotationAttributes componentScan <span class="token operator">:</span> componentScans<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 执行 @ComponentScan，扫描</span>            Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> scannedBeanDefinitions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>componentScanParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>componentScan<span class="token punctuation">,</span>                    sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 继续检查这些新扫描的出来的BeanDefinition，递归处理</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinitionHolder holder <span class="token operator">:</span> scannedBeanDefinitions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                BeanDefinition bdCand <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginatingBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bdCand <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bdCand <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 递归继续解析新扫描出来的BeanDefinition</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>bdCand<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">parse</span><span class="token punctuation">(</span>bdCand<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4.处理@Import注解</span>    <span class="token function">processImports</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> sourceClass<span class="token punctuation">,</span> <span class="token function">getImports</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5.处理 @ImportResource注解</span>    AnnotationAttributes importResource <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesFor</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ImportResource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>importResource <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> importResource<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"locations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanDefinitionReader</span><span class="token operator">></span> readerClass <span class="token operator">=</span> importResource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"reader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String resolvedResource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">resolveRequiredPlaceholders</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            configClass<span class="token punctuation">.</span><span class="token function">addImportedResource</span><span class="token punctuation">(</span>resolvedResource<span class="token punctuation">,</span> readerClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 6.处理有@Bean注解的方法，将这种方法封装为BeanMethod对象并加入beanMethods缓存里，等待后续的处理</span>    Set<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> beanMethods <span class="token operator">=</span> <span class="token function">retrieveBeanMethodMetadata</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>MethodMetadata methodMetadata <span class="token operator">:</span> beanMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>        configClass<span class="token punctuation">.</span><span class="token function">addBeanMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanMethod</span><span class="token punctuation">(</span>methodMetadata<span class="token punctuation">,</span> configClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 解析配置类实现的接口中的带有@Bean注解的default方法</span>    <span class="token function">processInterfaces</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> sourceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理父类</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String superclass <span class="token operator">=</span> sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>superclass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>superclass<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>knownSuperclasses<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>superclass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>knownSuperclasses<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>superclass<span class="token punctuation">,</span> configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Superclass found, return its annotation metadata and recurse</span>            <span class="token keyword">return</span> sourceClass<span class="token punctuation">.</span><span class="token function">getSuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 没有父类或父类已处理完毕，则这个配置类解析完毕</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-内部类处理（递归处理）"><a href="#1-内部类处理（递归处理）" class="headerlink" title="1. 内部类处理（递归处理）"></a>1. 内部类处理（递归处理）</h5><p>​用于<strong>处理配置类内部的成员类（例如静态内部类），若其本身也是一个配置类（full 或 lite），则递归进行解析</strong>（<strong>并使用importStack防止循环依赖解析</strong>）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processMemberClasses</span><span class="token punctuation">(</span>ConfigurationClass configClass<span class="token punctuation">,</span> SourceClass sourceClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取所有成员类（包括静态/非静态内部类）</span>    Collection<span class="token operator">&lt;</span>SourceClass<span class="token operator">></span> memberClasses <span class="token operator">=</span> sourceClass<span class="token punctuation">.</span><span class="token function">getMemberClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>memberClasses<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>SourceClass<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>memberClasses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SourceClass memberClass <span class="token operator">:</span> memberClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断该成员类是否是一个有效的配置类（full 或 lite），且不是当前类本身</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">isConfigurationCandidate</span><span class="token punctuation">(</span>memberClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span>memberClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>memberClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 对候选配置类进行排序，排序依据可能是 @Order 注解或实现 Ordered 接口</span>        OrderComparator<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 逐个处理符合条件的成员配置类</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SourceClass candidate <span class="token operator">:</span> candidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 检查 import 栈中是否存在当前 configClass，防止循环 import 导致死递归</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>problemReporter<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CircularImportProblem</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 将当前配置类推入 import 栈，准备递归处理内部类</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 将该成员类包装成 ConfigurationClass 并递归处理</span>                    <span class="token function">processConfigurationClass</span><span class="token punctuation">(</span>candidate<span class="token punctuation">.</span><span class="token function">asConfigClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 处理完成后将当前配置类弹出 import 栈</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-PropertySource"><a href="#2-PropertySource" class="headerlink" title="2.  @PropertySource"></a>2.  @PropertySource</h5><p>​将指定的 <code>.properties</code> 配置文件解析并注册到 Spring 的 <code>Environment</code> 中，使配置文件中的属性在应用中可用，并支持如下功能</p><ul><li>多路径</li><li>编码设置</li><li>自定义的 <code>PropertySourceFactory</code></li><li>占位符解析</li><li>是否忽略加载失败的配置文件</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processPropertySource</span><span class="token punctuation">(</span>AnnotationAttributes propertySource<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String name <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String encoding <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"encoding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        encoding <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取 value 属性（属性文件路径），不能为空</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> locations <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>locations<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"At least one @PropertySource(value) location is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取是否忽略找不到资源的异常标志</span>    <span class="token keyword">boolean</span> ignoreResourceNotFound <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"ignoreResourceNotFound"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取指定的 PropertySourceFactory。默认使用DefaultPropertySourceFactory</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">PropertySourceFactory</span><span class="token operator">></span> factoryClass <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PropertySourceFactory factory <span class="token operator">=</span> <span class="token punctuation">(</span>factoryClass <span class="token operator">==</span> PropertySourceFactory<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">?</span>            DEFAULT_PROPERTY_SOURCE_FACTORY <span class="token operator">:</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>factoryClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String location <span class="token operator">:</span> locations<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析占位符（如 ${user.home}/config.properties）</span>            String resolvedLocation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">resolveRequiredPlaceholders</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 加载资源（通常是 classpath 或文件系统路径）</span>            Resource resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>resolvedLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用 factory 解析资源并加入 Environment 的 PropertySources 中</span>            <span class="token function">addPropertySource</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">createPropertySource</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> encoding<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">|</span> FileNotFoundException <span class="token operator">|</span> UnknownHostException <span class="token operator">|</span> SocketException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 根据异常标志判断是否抛异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ignoreResourceNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Properties location ["</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"] not resolvable: "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-ComponentScan"><a href="#3-ComponentScan" class="headerlink" title="3. @ComponentScan"></a>3. @ComponentScan</h5><h6 id="注解解析"><a href="#注解解析" class="headerlink" title="注解解析"></a>注解解析</h6><p>ComponentScanAnnotationParser#parse方法解析@ComponentScan注解，为后续的真正扫描做准备</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">parse</span><span class="token punctuation">(</span>AnnotationAttributes componentScan<span class="token punctuation">,</span> <span class="token keyword">final</span> String declaringClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建 ClassPathBeanDefinitionScanner（包扫描器）</span>    <span class="token comment" spellcheck="true">// 默认启用 useDefaultFilters，会注册默认过滤器，只扫描 @Component、@ManagedBean、@Named 等组件</span>    ClassPathBeanDefinitionScanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">,</span>            componentScan<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"useDefaultFilters"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置 BeanNameGenerator（用于生成 Bean 的名称）</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanNameGenerator</span><span class="token operator">></span> generatorClass <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"nameGenerator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> useInheritedGenerator <span class="token operator">=</span> <span class="token punctuation">(</span>BeanNameGenerator<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> generatorClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    scanner<span class="token punctuation">.</span><span class="token function">setBeanNameGenerator</span><span class="token punctuation">(</span>            useInheritedGenerator <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator <span class="token operator">:</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>generatorClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理 @Scope 注解代理方式：ScopedProxyMode</span>    ScopedProxyMode scopedProxyMode <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getEnum</span><span class="token punctuation">(</span><span class="token string">"scopedProxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scopedProxyMode <span class="token operator">!=</span> ScopedProxyMode<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scanner<span class="token punctuation">.</span><span class="token function">setScopedProxyMode</span><span class="token punctuation">(</span>scopedProxyMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ScopeMetadataResolver</span><span class="token operator">></span> resolverClass <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"scopeResolver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">setScopeMetadataResolver</span><span class="token punctuation">(</span>BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>resolverClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    scanner<span class="token punctuation">.</span><span class="token function">setResourcePattern</span><span class="token punctuation">(</span>componentScan<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"resourcePattern"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加 includeFilters（包含过滤器），只匹配指定条件的类</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>AnnotationAttributes filter <span class="token operator">:</span> componentScan<span class="token punctuation">.</span><span class="token function">getAnnotationArray</span><span class="token punctuation">(</span><span class="token string">"includeFilters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>TypeFilter typeFilter <span class="token operator">:</span> <span class="token function">typeFiltersFor</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            scanner<span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span>typeFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加 excludeFilters（排除过滤器），排除不需要的类</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>AnnotationAttributes filter <span class="token operator">:</span> componentScan<span class="token punctuation">.</span><span class="token function">getAnnotationArray</span><span class="token punctuation">(</span><span class="token string">"excludeFilters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>TypeFilter typeFilter <span class="token operator">:</span> <span class="token function">typeFiltersFor</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            scanner<span class="token punctuation">.</span><span class="token function">addExcludeFilter</span><span class="token punctuation">(</span>typeFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置默认的懒加载（如果开启，则所有扫描到的 Bean 默认 lazy-init）</span>    <span class="token keyword">boolean</span> lazyInit <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"lazyInit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scanner<span class="token punctuation">.</span><span class="token function">getBeanDefinitionDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> basePackages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> basePackagesArray <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"basePackages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String pkg <span class="token operator">:</span> basePackagesArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> tokenized <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">,</span>                ConfigurableApplicationContext<span class="token punctuation">.</span>CONFIG_LOCATION_DELIMITERS<span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">,</span> tokenized<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">:</span> componentScan<span class="token punctuation">.</span><span class="token function">getClassArray</span><span class="token punctuation">(</span><span class="token string">"basePackageClasses"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        basePackages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果未显式指定 basePackages，则默认扫描当前配置类所在的包</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>basePackages<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        basePackages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span>declaringClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 排除当前class，避免source class的重复解析</span>    scanner<span class="token punctuation">.</span><span class="token function">addExcludeFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AbstractTypeHierarchyTraversingFilter</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">matchClassName</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> declaringClass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 准备工作完成，开始扫描</span>    <span class="token keyword">return</span> scanner<span class="token punctuation">.</span><span class="token function">doScan</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h6><p>​ClassPathBeanDefinitionScanner类开始真正的扫描包（<strong>使用ASM而不是反射，避免无用的Class被JVM加载</strong>），并进行一系列的过滤以判断是否该纳入容器中。过滤如下</p><ul><li>需要有**@Component、@ManagedBean、@Named**元注解</li><li>是<strong>具体类</strong>（非抽象），或者是<strong>抽象类但包含 <code>@Lookup</code> 注解的方法</strong></li><li><strong>excludeFilters（黑名单）和includeFilters（白名单）匹配（excludeFilters优先级更高）</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">doScan</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 至少有1个被扫描的包</span>    Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">,</span> <span class="token string">"At least one base package must be specified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最终BeanDefinitionHolder合集</span>    Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefinitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String basePackage <span class="token operator">:</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token function">findCandidateComponents</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinition candidate <span class="token operator">:</span> candidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析 @Scope 作用域元数据（如 singleton、prototype、request 等）</span>            ScopeMetadata scopeMetadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopeMetadataResolver<span class="token punctuation">.</span><span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>            candidate<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">.</span><span class="token function">getScopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String beanName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对 AbstractBeanDefinition 进行后处理（如设置懒加载、自动注入模式等）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">postProcessBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> candidate<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 处理通用注解（@Lazy、@Primary、@DependsOn、@Role、@Description 等）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AnnotatedBeanDefinition<span class="token punctuation">)</span> candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 再次检查BeanDefinition，校验是否重复冲突</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkCandidate</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                BeanDefinitionHolder definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果是request、session 等作用域，可能会应用 scoped proxy 代理模式（如 JDK 或 CGLIB）</span>                definitionHolder <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>                beanDefinitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 最终将其注册到 BeanDefinitionRegistry 中（供 Spring 后续实例化使用）</span>                <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> beanDefinitions<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> <span class="token function">scanCandidateComponents</span><span class="token punctuation">(</span>String basePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 例如扫描site.shanzhao包 -> classpath*:site/shanzhao</span><span class="token comment" spellcheck="true">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token keyword">class</span>        <span class="token class-name">String</span> packageSearchPath <span class="token operator">=</span> ResourcePatternResolver<span class="token punctuation">.</span>CLASSPATH_ALL_URL_PREFIX <span class="token operator">+</span>                <span class="token function">resolveBasePackage</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcePattern<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上述指定路径下的每个class文件将被封装成Resource对象并返回</span>        Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> <span class="token function">getResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>packageSearchPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> traceEnabled <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> debugEnabled <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Resource resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>traceEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Scanning "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 不使用反射，使用asm直接将字节码的信息解析出来（包括所有注解（父注解等））</span>                    MetadataReader metadataReader <span class="token operator">=</span> <span class="token function">getMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 对metaData进行判断，是否纳入容器中（@Component、@ManagedBean、@Named判断，@Conditional校验）</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        ScannedGenericBeanDefinition sbd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScannedGenericBeanDefinition</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">;</span>                        sbd<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 再次校验是否为合法的候选组件（是具体类（非抽象），或者是抽象类但包含 @Lookup 注解的方法）</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>sbd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Identified candidate component class: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Ignored because not a concrete top-level class: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>traceEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Ignored because not matching any filter: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>                            <span class="token string">"Failed to read candidate component class: "</span> <span class="token operator">+</span> resource<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>traceEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Ignored because not readable: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token string">"I/O failure during classpath scanning"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> candidates<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h6><p>​对上述返回的Set集合BeanDefinitionHolder继续full或lite判断，并递归解析其所有的导入情况</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 继续检查这些新扫描的出来的BeanDefinition，递归处理</span><span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinitionHolder holder <span class="token operator">:</span> scannedBeanDefinitions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BeanDefinition bdCand <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginatingBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bdCand <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bdCand <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 递归继续解析新扫描出来的BeanDefinition</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>bdCand<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">parse</span><span class="token punctuation">(</span>bdCand<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-Import"><a href="#4-Import" class="headerlink" title="4. @Import"></a>4. @Import</h5><p>​处理 @Import 注解导入的配置类，是一种<strong>显式导入配置类或组件</strong>的机制。<strong>其相比@ComponentScan，这个注解更轻量和有针对性</strong>。它包括以下三类情况</p><ol><li>ImportSelector（<code>DeferredImportSelector</code> 是其延迟版本，会<strong>在所有配置类处理完后统一处理，常用于 Spring Boot 自动配置机制</strong>）： 动态返回要导入的类名（递归）</li><li>ImportBeanDefinitionRegistrar ：<strong>手动注册 BeanDefinition（不会递归）</strong></li><li>普通类 ：按照配置类继续解析（递归）</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processImports</span><span class="token punctuation">(</span>ConfigurationClass configClass<span class="token punctuation">,</span> SourceClass currentSourceClass<span class="token punctuation">,</span>        Collection<span class="token operator">&lt;</span>SourceClass<span class="token operator">></span> importCandidates<span class="token punctuation">,</span> <span class="token keyword">boolean</span> checkForCircularImports<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>importCandidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// @Import导入为空，就直接返回</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 检查是否存在循环导入链，例如 A -> B -> C -> A</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>checkForCircularImports <span class="token operator">&amp;&amp;</span> <span class="token function">isChainedImportOnStack</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>problemReporter<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CircularImportProblem</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 压栈当前 configClass，防止循环引用</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>SourceClass candidate <span class="token operator">:</span> importCandidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ImportSelector解析（会循环解析）</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate<span class="token punctuation">.</span><span class="token function">isAssignable</span><span class="token punctuation">(</span>ImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> candidateClass <span class="token operator">=</span> candidate<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ImportSelector selector <span class="token operator">=</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>candidateClass<span class="token punctuation">,</span> ImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// aware注入</span>                    ParserStrategyUtils<span class="token punctuation">.</span><span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>                            selector<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>selector <span class="token keyword">instanceof</span> <span class="token class-name">DeferredImportSelector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// DeferredImportSelector暂不处理（Spring boot用到）</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>deferredImportSelectorHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> <span class="token punctuation">(</span>DeferredImportSelector<span class="token punctuation">)</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 普通 ImportSelector 立即执行 selectImports() 获取要导入的类名数组</span>                        String<span class="token punctuation">[</span><span class="token punctuation">]</span> importClassNames <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectImports</span><span class="token punctuation">(</span>currentSourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Collection<span class="token operator">&lt;</span>SourceClass<span class="token operator">></span> importSourceClasses <span class="token operator">=</span> <span class="token function">asSourceClasses</span><span class="token punctuation">(</span>importClassNames<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 递归解析新导入的类</span>                        <span class="token function">processImports</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> currentSourceClass<span class="token punctuation">,</span> importSourceClasses<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// ImportBeanDefinitionRegistrar解析</span>                <span class="token comment" spellcheck="true">// 不会递归，因为这个接口已经给了BeanDefinitionRegistry，就是让你自由发挥注册BeanDefinition的</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate<span class="token punctuation">.</span><span class="token function">isAssignable</span><span class="token punctuation">(</span>ImportBeanDefinitionRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Candidate class is an ImportBeanDefinitionRegistrar -></span>                    <span class="token comment" spellcheck="true">// delegate to it to register additional bean definitions</span>                    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> candidateClass <span class="token operator">=</span> candidate<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ImportBeanDefinitionRegistrar registrar <span class="token operator">=</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>candidateClass<span class="token punctuation">,</span>                            ImportBeanDefinitionRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ParserStrategyUtils<span class="token punctuation">.</span><span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>                            registrar<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 将 registrar 注册到当前配置类中，后续统一调用</span>                    configClass<span class="token punctuation">.</span><span class="token function">addImportBeanDefinitionRegistrar</span><span class="token punctuation">(</span>registrar<span class="token punctuation">,</span> currentSourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 其他类型的类（即非 ImportSelector / ImportBeanDefinitionRegistrar）</span>                    <span class="token comment" spellcheck="true">// 作为普通的 @Configuration 类进行解析处理（可能再次触发 @Import）</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">registerImport</span><span class="token punctuation">(</span>                            currentSourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> candidate<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">processConfigurationClass</span><span class="token punctuation">(</span>candidate<span class="token punctuation">.</span><span class="token function">asConfigClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>                    <span class="token string">"Failed to process import candidates for configuration class ["</span> <span class="token operator">+</span>                            configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span>                    ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析完成后出栈</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>ConfigurationClass configClass<span class="token punctuation">,</span> DeferredImportSelector importSelector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    DeferredImportSelectorHolder holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeferredImportSelectorHolder</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> importSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deferredImportSelectors <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// deferredImportSelectors 为 null，说明当前不是“延迟批量处理阶段”，而是递归触发时遇到的</span>        <span class="token comment" spellcheck="true">// DeferredImportSelector</span>        <span class="token comment" spellcheck="true">// 此时直接单独处理当前这个 DeferredImportSelector，不等到后面统一处理</span>        DeferredImportSelectorGroupingHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeferredImportSelectorGroupingHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">processGroupImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// deferredImportSelectors 不为 null，说明当前处于“延迟导入收集阶段”，此时仅将当前 holder 暂存下来，后续由</span>        <span class="token comment" spellcheck="true">// ConfigurationClassParser#process 统一处理</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deferredImportSelectors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-ImportResource解析"><a href="#5-ImportResource解析" class="headerlink" title="5. @ImportResource解析"></a>5. @ImportResource解析</h5><p>​解析@ImportResource，将解析后得到的数据缓存到ConfigurationClass#importedResources中，等待后续注册BeanDefinition使用</p><pre class="line-numbers language-java"><code class="language-java">AnnotationAttributes importResource <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesFor</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ImportResource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>importResource <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> importResource<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"locations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanDefinitionReader</span><span class="token operator">></span> readerClass <span class="token operator">=</span> importResource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"reader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String resolvedResource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">resolveRequiredPlaceholders</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        configClass<span class="token punctuation">.</span><span class="token function">addImportedResource</span><span class="token punctuation">(</span>resolvedResource<span class="token punctuation">,</span> readerClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-Bean解析"><a href="#6-Bean解析" class="headerlink" title="6. @Bean解析"></a>6. @Bean解析</h5><p>​@Bean注解的解析和缓存，主要步骤总结：</p><ol><li><strong>使用 ASM 而非反射</strong>：通过 ASM 读取类字节码，获取所有 <code>@Bean</code> 方法的有序列表，避免 JVM 反射 API 导致的无序行为</li><li><strong>封装为 BeanMethod</strong>：每个方法会被抽象为 <code>BeanMethod</code>（包含方法元信息和所属配置类引用）。</li><li><strong>缓存到 ConfigurationClass</strong>：最终这些 <code>BeanMethod</code> 会被缓存到 <code>ConfigurationClass#beanMethods</code> 集合中，等到配置类加载完成后由 <code>ConfigurationClassBeanDefinitionReader</code> 注册为真正的 <code>BeanDefinition</code>。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Set<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> <span class="token function">retrieveBeanMethodMetadata</span><span class="token punctuation">(</span>SourceClass sourceClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AnnotationMetadata original <span class="token operator">=</span> sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> beanMethods <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">getAnnotatedMethods</span><span class="token punctuation">(</span>Bean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果 Bean 方法数量大于1 且使用的是基于反射的元数据，尝试使用 ASM 获取确定顺序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> original <span class="token keyword">instanceof</span> <span class="token class-name">StandardAnnotationMetadata</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用 ASM 从 class 文件中获取元数据（包括方法顺序）</span>            AnnotationMetadata asm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> asmMethods <span class="token operator">=</span> asm<span class="token punctuation">.</span><span class="token function">getAnnotatedMethods</span><span class="token punctuation">(</span>Bean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 若 ASM 获取的 @Bean 方法数量 >= 反射获取的，且名字匹配，则使用 ASM 顺序</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>asmMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> beanMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Set<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> selectedMethods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>asmMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>MethodMetadata asmMethod <span class="token operator">:</span> asmMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>MethodMetadata beanMethod <span class="token operator">:</span> beanMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>asmMethod<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 保留反射对象，但按 ASM 顺序排列</span>                            selectedMethods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果反射获取的所有方法都在 ASM 中找到，则使用 ASM 顺序</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> beanMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// All reflection-detected methods found in ASM method set -> proceed</span>                    beanMethods <span class="token operator">=</span> selectedMethods<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Failed to read class file via ASM for determining @Bean method order"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 忽略异常，降级使用反射获取的 Bean 方法集合，虽然顺序不稳定，但逻辑不受影响</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> beanMethods<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注册BeanDefinition"><a href="#注册BeanDefinition" class="headerlink" title="注册BeanDefinition"></a>注册BeanDefinition</h3><h4 id="ConfigurationClassBeanDefinitionReader-loadBeanDefinitionsForConfigurationClass"><a href="#ConfigurationClassBeanDefinitionReader-loadBeanDefinitionsForConfigurationClass" class="headerlink" title="ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForConfigurationClass"></a>ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForConfigurationClass</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitionsForConfigurationClass</span><span class="token punctuation">(</span>        ConfigurationClass configClass<span class="token punctuation">,</span> TrackedConditionEvaluator trackedConditionEvaluator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// @Conditional注解判断（OnBeanCondition会在这发挥作用）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trackedConditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若被跳过且之前已注册过 beanDefinition，则将其移除</span>        String beanName <span class="token operator">=</span> configClass<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">removeBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>importRegistry<span class="token punctuation">.</span><span class="token function">removeImportingClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果是被 @Import 导入的配置类，注册为一个 beanDefinition</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">isImported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">registerBeanDefinitionForImportedConfigurationClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 加载@Bean注解方法的BeanDefinition，并设置使用工厂方法构造</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanMethod beanMethod <span class="token operator">:</span> configClass<span class="token punctuation">.</span><span class="token function">getBeanMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">loadBeanDefinitionsForBeanMethod</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 处理 @ImportResource 注解导入的 XML 配置文件，注册其中定义的 bean</span>    <span class="token function">loadBeanDefinitionsFromImportedResources</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getImportedResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// @Import注解(ImportBeanDefinitionRegistrar)的结果注册bean</span>    <span class="token function">loadBeanDefinitionsFromRegistrars</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getImportBeanDefinitionRegistrars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Bean注册"><a href="#Bean注册" class="headerlink" title="@Bean注册"></a>@Bean注册</h5><p>​真正将@Bean方法抽象为ConfigurationClassBeanDefinition并注册到容器中，主要步骤总结：</p><ol><li><strong>条件匹配判断</strong>：若 <code>@Bean</code> 方法上存在 <code>@Conditional</code>，需判断是否应跳过注册</li><li><strong>确定 Bean 名称与别名</strong></li><li><strong>构建 BeanDefinition</strong>：将方法封装为 <code>ConfigurationClassBeanDefinition</code>，并设置元数据、作用域、初始化和销毁方法、autowire 策略等属性</li><li><strong>区分方法类型调用方式</strong><ol><li><strong>静态方法</strong>：无需依赖配置类实例，直接通过类调用工厂方法。</li><li><strong>实例方法</strong>：需要通过配置类的 Bean 实例来调用方法（即依赖于配置类自身作为 FactoryBean）。</li></ol></li><li><strong>作用域代理支持</strong>：若存在 <code>@Scope(proxyMode = ...)</code>，则通过 <code>ScopedProxyCreator</code> 构造代理 BeanDefinition</li><li><strong>注册 BeanDefinition 到容器中</strong>：最终调用 <code>registry.registerBeanDefinition()</code> 完成注册。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitionsForBeanMethod</span><span class="token punctuation">(</span>BeanMethod beanMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ConfigurationClass configClass <span class="token operator">=</span> beanMethod<span class="token punctuation">.</span><span class="token function">getConfigurationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MethodMetadata metadata <span class="token operator">=</span> beanMethod<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String methodName <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// @Conditional注解判断是否该跳过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> ConfigurationPhase<span class="token punctuation">.</span>REGISTER_BEAN<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        configClass<span class="token punctuation">.</span>skippedBeanMethods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass<span class="token punctuation">.</span>skippedBeanMethods<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    AnnotationAttributes bean <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesFor</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> Bean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"No @Bean annotation attributes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String beanName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span>names<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> names<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String alias <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> alias<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 检查是否存在覆盖（例如 XML ），再根据beanName判断是否抛异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOverriddenByExistingDefinition</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getConfigurationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getConfigurationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    beanName<span class="token punctuation">,</span> <span class="token string">"Bean name derived from @Bean method '"</span> <span class="token operator">+</span> beanMethod<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                            <span class="token string">"' clashes with bean name for containing configuration class; please make those names unique!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 构建 BeanDefinition，封装元信息</span>    ConfigurationClassBeanDefinition beanDef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassBeanDefinition</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    beanDef<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sourceExtractor<span class="token punctuation">.</span><span class="token function">extractSource</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> configClass<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用工厂模式实例化bean：静态方法 or 实例方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 静态方法直接使用class对象调用</span>        beanDef<span class="token punctuation">.</span><span class="token function">setBeanClassName</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDef<span class="token punctuation">.</span><span class="token function">setFactoryMethodName</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 实例方法要使用FactoryBean对象调用</span>        beanDef<span class="token punctuation">.</span><span class="token function">setFactoryBeanName</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDef<span class="token punctuation">.</span><span class="token function">setUniqueFactoryMethodName</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置自动装配模式为构造器注入</span>    beanDef<span class="token punctuation">.</span><span class="token function">setAutowireMode</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_CONSTRUCTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>            org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequiredAnnotationBeanPostProcessor<span class="token punctuation">.</span>SKIP_REQUIRED_CHECK_ATTRIBUTE<span class="token punctuation">,</span>            Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// @Bean方法上的常用注解解析@Lazy等等</span>    AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    Autowire autowire <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getEnum</span><span class="token punctuation">(</span><span class="token string">"autowire"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowire<span class="token punctuation">.</span><span class="token function">isAutowire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanDef<span class="token punctuation">.</span><span class="token function">setAutowireMode</span><span class="token punctuation">(</span>autowire<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> autowireCandidate <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"autowireCandidate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>autowireCandidate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanDef<span class="token punctuation">.</span><span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String initMethodName <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"initMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanDef<span class="token punctuation">.</span><span class="token function">setInitMethodName</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String destroyMethodName <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"destroyMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanDef<span class="token punctuation">.</span><span class="token function">setDestroyMethodName</span><span class="token punctuation">(</span>destroyMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    ScopedProxyMode proxyMode <span class="token operator">=</span> ScopedProxyMode<span class="token punctuation">.</span>NO<span class="token punctuation">;</span>    AnnotationAttributes attributes <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesFor</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> Scope<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>attributes <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanDef<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>attributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyMode <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getEnum</span><span class="token punctuation">(</span><span class="token string">"proxyMode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认就为No</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyMode <span class="token operator">==</span> ScopedProxyMode<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            proxyMode <span class="token operator">=</span> ScopedProxyMode<span class="token punctuation">.</span>NO<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 若需要作用域代理（如 request-scoped Bean），则创建代理 BeanDefinition</span>    BeanDefinition beanDefToRegister <span class="token operator">=</span> beanDef<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyMode <span class="token operator">!=</span> ScopedProxyMode<span class="token punctuation">.</span>NO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanDefinitionHolder proxyDef <span class="token operator">=</span> ScopedProxyCreator<span class="token punctuation">.</span><span class="token function">createScopedProxy</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">,</span>                proxyMode <span class="token operator">==</span> ScopedProxyMode<span class="token punctuation">.</span>TARGET_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefToRegister <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassBeanDefinition</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>RootBeanDefinition<span class="token punctuation">)</span> proxyDef<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configClass<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Registering bean definition for @Bean method %s.%s()"</span><span class="token punctuation">,</span>                configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 最终注册 BeanDefinition</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefToRegister<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代理Full-Configuration"><a href="#代理Full-Configuration" class="headerlink" title="代理Full Configuration"></a>代理Full Configuration</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enhanceConfigurationClasses</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 记录所有需要增强的配置类</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> AbstractBeanDefinition<span class="token operator">></span> configBeanDefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanDefinition beanDef <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// @Configuration类才会被增强（即full configuration class）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">isFullConfigurationClass</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 必须是 AbstractBeanDefinition 类型，否则无法增强（不支持自定义 BeanDefinition 实现）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanDef <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token string">"Cannot enhance @Configuration bean definition '"</span> <span class="token operator">+</span>                        beanName <span class="token operator">+</span> <span class="token string">"' since it is not stored in an AbstractBeanDefinition subclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果这个 @Configuration Bean 已经被提前实例化，则无法再增强，打印警告日志</span>                <span class="token comment" spellcheck="true">// 这种情况通常发生在某些早期调用触发了配置类的提前加载，比如BeanDefinitionRegistryPostProcessor这类bean</span>                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Cannot enhance @Configuration bean definition '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                        <span class="token string">"' since its singleton instance has been created too early. The typical cause "</span> <span class="token operator">+</span>                        <span class="token string">"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor "</span> <span class="token operator">+</span>                        <span class="token string">"return type: Consider declaring such methods as 'static'."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            configBeanDefs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configBeanDefs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 无full则直接返回</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建配置类增强器</span>    ConfigurationClassEnhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassEnhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> AbstractBeanDefinition<span class="token operator">></span> entry <span class="token operator">:</span> configBeanDefs<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        AbstractBeanDefinition beanDef <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>AutoProxyUtils<span class="token punctuation">.</span>PRESERVE_TARGET_CLASS_ATTRIBUTE<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> configClass <span class="token operator">=</span> beanDef<span class="token punctuation">.</span><span class="token function">resolveBeanClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 使用ConfigurationClassEnhancer开始增强</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> enhancedClass <span class="token operator">=</span> enhancer<span class="token punctuation">.</span><span class="token function">enhance</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果增强成功（即 class 被改动了），则更新 beanDefinition 中的 beanClass，用增强后的class来实例化这个bean，而抛弃原class</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass <span class="token operator">!=</span> enhancedClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    beanDef<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>enhancedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot load configuration class: "</span> <span class="token operator">+</span> beanDef<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ConfigurationClassEnhancer"><a href="#ConfigurationClassEnhancer" class="headerlink" title="ConfigurationClassEnhancer"></a>ConfigurationClassEnhancer</h3><h4 id="增强class"><a href="#增强class" class="headerlink" title="增强class"></a>增强class</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法拦截器</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Callback<span class="token punctuation">[</span><span class="token punctuation">]</span> CALLBACKS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">BeanMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// @Bean方法拦截器</span>        <span class="token keyword">new</span> <span class="token class-name">BeanFactoryAwareMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// setBeanFactory方法拦截器</span>        NoOp<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法拦截器的匹配器，用于匹配class中的具体方法该使用上诉的某个具体拦截器</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ConditionalCallbackFilter CALLBACK_FILTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionalCallbackFilter</span><span class="token punctuation">(</span>CALLBACKS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 增强类内部新增的字段名（类型为BeanFactory）</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BEAN_FACTORY_FIELD <span class="token operator">=</span> <span class="token string">"$$beanFactory"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 增强后的@Configuration类会实现此接口，既是一种标记，也具备注入BeanFactory的能力 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EnhancedConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">BeanFactoryAware</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">enhance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> configClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否实现了EnhancedConfiguration接口，以此来判断是否已经增强</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>EnhancedConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Ignoring request to enhance %s as it has "</span> <span class="token operator">+</span>                    <span class="token string">"already been enhanced. This usually indicates that more than one "</span> <span class="token operator">+</span>                    <span class="token string">"ConfigurationClassPostProcessor has been registered (e.g. via "</span> <span class="token operator">+</span>                    <span class="token string">"&lt;context:annotation-config>). This is harmless, but you may "</span> <span class="token operator">+</span>                    <span class="token string">"want check your configuration and remove one CCPP if possible"</span><span class="token punctuation">,</span>                    configClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> configClass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开始增强</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> enhancedClass <span class="token operator">=</span> <span class="token function">createClass</span><span class="token punctuation">(</span><span class="token function">newEnhancer</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> enhancedClass<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 创建CGLIB Enhancer对象并配置参数 */</span><span class="token keyword">private</span> Enhancer <span class="token function">newEnhancer</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> configSuperClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>configSuperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置EnhancedConfiguration接口，这个也实现了BeanFactoryAware接口</span>    <span class="token comment" spellcheck="true">// 这样才能获得BeanFactory，让@Bean方法间的调用结果先从BeanFactory中取，维持单例</span>    enhancer<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> EnhancedConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    enhancer<span class="token punctuation">.</span><span class="token function">setUseFactory</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    enhancer<span class="token punctuation">.</span><span class="token function">setNamingPolicy</span><span class="token punctuation">(</span>SpringNamingPolicy<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自定义生成策略，注入BeanFactory字段（字段名就是$$beanFactory）</span>    enhancer<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanFactoryAwareGeneratorStrategy</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置拦截器（@Bean方法拦截器和BeanFactoryAware接口里的setBeanFactory方法拦截器）</span>    enhancer<span class="token punctuation">.</span><span class="token function">setCallbackFilter</span><span class="token punctuation">(</span>CALLBACK_FILTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    enhancer<span class="token punctuation">.</span><span class="token function">setCallbackTypes</span><span class="token punctuation">(</span>CALLBACK_FILTER<span class="token punctuation">.</span><span class="token function">getCallbackTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> enhancer<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BeanMethodInterceptor"><a href="#BeanMethodInterceptor" class="headerlink" title="BeanMethodInterceptor"></a>BeanMethodInterceptor</h4><p>​根据其isMatch方法可知其<strong>是一个专用于拦截 @Bean 方法调用的 CGLIB 方法拦截器</strong>，主要解决了以下两个问题：</p><blockquote><ol><li>避免每次调用 @Bean 方法都重复创建 bean 实例</li><li>支持 @Bean 方法之间的依赖注入（即<strong>方法之间互调不再是直接 new，而是走容器获取</strong>）</li></ol></blockquote><h5 id="核心执行流程"><a href="#核心执行流程" class="headerlink" title="核心执行流程"></a>核心执行流程</h5><ol><li>获取BeanFactoryAwareMethodInterceptor设置的BeanFactory</li><li>FactoryBean特殊处理</li><li><strong>判断是否是工厂方法正在被调用（即二次调用）：是为避免通过 getBean(beanName) 自身递归调用，必须直接调用原始方法体（即 super）执行实例化逻辑</strong></li><li>根据方法的参数，利用BeanFactory真正获取bean（使用的是sourceClass的工厂方法进行实例化）</li></ol><h5 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BeanMethodInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">,</span> ConditionalCallback <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object enhancedConfigInstance<span class="token punctuation">,</span> Method beanMethod<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> beanMethodArgs<span class="token punctuation">,</span>            MethodProxy cglibMethodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取 BeanFactory 实例（通过代理类中的字段注入）</span>        ConfigurableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span>enhancedConfigInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>        String beanName <span class="token operator">=</span> BeanAnnotationHelper<span class="token punctuation">.</span><span class="token function">determineBeanNameFor</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若是作用域代理（如 @Scope(proxyMode = TARGET_CLASS)），需要特殊处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>BeanAnnotationHelper<span class="token punctuation">.</span><span class="token function">isScopedProxy</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String scopedBeanName <span class="token operator">=</span> ScopedProxyCreator<span class="token punctuation">.</span><span class="token function">getTargetBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>scopedBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                beanName <span class="token operator">=</span> scopedBeanName<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 处理 FactoryBean 的特殊情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">factoryContainsBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> BeanFactory<span class="token punctuation">.</span>FACTORY_BEAN_PREFIX <span class="token operator">+</span> beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">factoryContainsBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object factoryBean <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>BeanFactory<span class="token punctuation">.</span>FACTORY_BEAN_PREFIX <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>factoryBean <span class="token keyword">instanceof</span> <span class="token class-name">ScopedProxyFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Scoped proxy factory beans are a special case and should not be further</span>                <span class="token comment" spellcheck="true">// proxied</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// It is a candidate FactoryBean - go ahead with enhancement</span>                <span class="token keyword">return</span> <span class="token function">enhanceFactoryBean</span><span class="token punctuation">(</span>factoryBean<span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 很重要</span>        <span class="token comment" spellcheck="true">// 判断当前是否正在通过本方法实例化 bean；如果是，为避免递归代理，直接执行原始方法体（super）创建实例</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCurrentlyInvokedFactoryMethod</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"@Bean method %s.%s is non-static and returns an object "</span> <span class="token operator">+</span>                        <span class="token string">"assignable to Spring's BeanFactoryPostProcessor interface. This will "</span> <span class="token operator">+</span>                        <span class="token string">"result in a failure to process annotations such as @Autowired, "</span> <span class="token operator">+</span>                        <span class="token string">"@Resource and @PostConstruct within the method's declaring "</span> <span class="token operator">+</span>                        <span class="token string">"@Configuration class. Add the 'static' modifier to this method to avoid "</span> <span class="token operator">+</span>                        <span class="token string">"these container lifecycle issues; see @Bean javadoc for complete details."</span><span class="token punctuation">,</span>                        beanMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> cglibMethodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>enhancedConfigInstance<span class="token punctuation">,</span> beanMethodArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从 BeanFactory 中解析目标 Bean 的引用，必要时传递参数</span>        <span class="token keyword">return</span> <span class="token function">resolveBeanReference</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">,</span> beanMethodArgs<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Object <span class="token function">resolveBeanReference</span><span class="token punctuation">(</span>Method beanMethod<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> beanMethodArgs<span class="token punctuation">,</span>            ConfigurableBeanFactory beanFactory<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> alreadyInCreation <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 防止循环依赖死锁：临时将当前 bean 标记为非创建中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>alreadyInCreation<span class="token punctuation">)</span> <span class="token punctuation">{</span>                beanFactory<span class="token punctuation">.</span><span class="token function">setCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">boolean</span> useArgs <span class="token operator">=</span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>beanMethodArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>useArgs <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Object arg <span class="token operator">:</span> beanMethodArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        useArgs <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 根据参数从容器中获取 Bean</span>            Object beanInstance <span class="token operator">=</span> <span class="token punctuation">(</span>useArgs <span class="token operator">?</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanMethodArgs<span class="token punctuation">)</span>                    <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 返回值不匹配，需要抛出异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isAssignableValue</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanInstance<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 兼容处理 Spring 的 NullBean</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>beanInstance<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"@Bean method %s.%s called as bean reference "</span> <span class="token operator">+</span>                                <span class="token string">"for type [%s] returned null bean; resolving to null value."</span><span class="token punctuation">,</span>                                beanMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    beanInstance <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 不为空抛异常</span>                    String msg <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"@Bean method %s.%s called as bean reference "</span> <span class="token operator">+</span>                            <span class="token string">"for type [%s] but overridden by non-compatible bean instance of type [%s]."</span><span class="token punctuation">,</span>                            beanMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        BeanDefinition beanDefinition <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getMergedBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        msg <span class="token operator">+=</span> <span class="token string">" Overriding bean of same name declared in: "</span> <span class="token operator">+</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 最后再注册依赖关系：当前 bean 被哪个外部工厂方法创建</span>            Method currentlyInvoked <span class="token operator">=</span> SimpleInstantiationStrategy<span class="token punctuation">.</span><span class="token function">getCurrentlyInvokedFactoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentlyInvoked <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String outerBeanName <span class="token operator">=</span> BeanAnnotationHelper<span class="token punctuation">.</span><span class="token function">determineBeanNameFor</span><span class="token punctuation">(</span>currentlyInvoked<span class="token punctuation">)</span><span class="token punctuation">;</span>                beanFactory<span class="token punctuation">.</span><span class="token function">registerDependentBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> outerBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>alreadyInCreation<span class="token punctuation">)</span> <span class="token punctuation">{</span>                beanFactory<span class="token punctuation">.</span><span class="token function">setCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BeanFactoryAwareMethodInterceptor"><a href="#BeanFactoryAwareMethodInterceptor" class="headerlink" title="BeanFactoryAwareMethodInterceptor"></a>BeanFactoryAwareMethodInterceptor</h4><p>​主要的作用是填充$$beanFactory字段</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactoryAwareMethodInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">,</span> ConditionalCallback <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Field field <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">findField</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BEAN_FACTORY_FIELD<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>field <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"Unable to find generated BeanFactory field"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将BeanFactoryAware接口传来的BeanFactory实例设置到内部新增的$$beanFactory字段上</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断SourceClass是否实现了BeanFactoryAware接口。如果也实现了，则再调用其setBeanFactory方法，将BeanFactory实例设置进去</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>BeanFactoryAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getUserClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>Method candidateMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">isSetBeanFactory</span><span class="token punctuation">(</span>candidateMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSetBeanFactory</span><span class="token punctuation">(</span>Method candidateMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>candidateMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"setBeanFactory"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                candidateMethod<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>                BeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> candidateMethod<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>                BeanFactoryAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>candidateMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="arthas反向验证"><a href="#arthas反向验证" class="headerlink" title="arthas反向验证"></a>arthas反向验证</h3><h4 id="full-class-demo"><a href="#full-class-demo" class="headerlink" title="full class demo"></a>full class demo</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationClassDemo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"initMethod"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> A <span class="token function">beanA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"initMethod"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> B <span class="token function">beanB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token function">beanA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">beanA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"impossible error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bean A initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bean B initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="arthas反编译后"><a href="#arthas反编译后" class="headerlink" title="arthas反编译后"></a>arthas反编译后</h4><p>只保留了关键代码，从反编译后的源码可进行上诉源码分析的验证：</p><ul><li>实现了ConfigurationClassEnhancer.EnhancedConfiguration接口</li><li>cglib代理，继承了原class</li><li>@Bean方法走的是CGLIB$CALLBACK_0，即BeanMethodInterceptor</li><li>setBeanFactory方法走的是CGLIB$CALLBACK_1，即BeanFactoryAwareMethodInterceptor</li><li>存在新增的$$beanFactory这个BeanFactory字段</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationClassDemo</span>$$EnhancerBySpringCGLIB$$988746da<span class="token keyword">extends</span> <span class="token class-name">ConfigurationClassDemo</span><span class="token keyword">implements</span> <span class="token class-name">ConfigurationClassEnhancer<span class="token punctuation">.</span>EnhancedConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// BeanMethodInterceptor</span>    <span class="token keyword">private</span> MethodInterceptor CGLIB$CALLBACK_0<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// BeanFactoryAwareMethodInterceptor</span>    <span class="token keyword">private</span> MethodInterceptor CGLIB$CALLBACK_1<span class="token punctuation">;</span>    <span class="token keyword">private</span> NoOp CGLIB$CALLBACK_2<span class="token punctuation">;</span>    <span class="token keyword">public</span> BeanFactory $$beanFactory<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ConfigurationClassDemo<span class="token punctuation">.</span>B <span class="token function">beanB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodInterceptor methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ConfigurationClassDemo$$EnhancerBySpringCGLIB$$988746da<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>ConfigurationClassDemo<span class="token punctuation">.</span>B<span class="token punctuation">)</span>methodInterceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CGLIB$beanB$<span class="token number">0</span>$Method<span class="token punctuation">,</span> CGLIB$emptyArgs<span class="token punctuation">,</span> CGLIB$beanB$<span class="token number">0</span>$Proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">beanB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ConfigurationClassDemo<span class="token punctuation">.</span>A <span class="token function">beanA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodInterceptor methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ConfigurationClassDemo$$EnhancerBySpringCGLIB$$988746da<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>ConfigurationClassDemo<span class="token punctuation">.</span>A<span class="token punctuation">)</span>methodInterceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CGLIB$beanA$<span class="token number">1</span>$Method<span class="token punctuation">,</span> CGLIB$emptyArgs<span class="token punctuation">,</span> CGLIB$beanA$<span class="token number">1</span>$Proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">beanA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span>BeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        MethodInterceptor methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_1<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ConfigurationClassDemo$$EnhancerBySpringCGLIB$$988746da<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object object <span class="token operator">=</span> methodInterceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CGLIB$setBeanFactory$<span class="token number">6</span>$Method<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>beanFactory<span class="token punctuation">}</span><span class="token punctuation">,</span> CGLIB$setBeanFactory$<span class="token number">6</span>$Proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>通过增强 Full 模式的 <code>@Configuration</code> 类</strong>，确保 <code>@Bean</code> 方法之间的调用不会绕过容器，而是始终返回容器中管理的单例 Bean，避免出现多个实例</li><li><strong>通过 <code>BeanFactoryAwareMethodInterceptor</code> 拦截器</strong>，使增强类持有 BeanFactory 的引用，为后续拦截器中从容器获取 Bean 提供支持</li><li><strong>通过 <code>BeanMethodInterceptor</code> 拦截器</strong>，拦截所有 <code>@Bean</code> 方法调用，并通过 BeanFactory 获取对应 Bean，从而确保每次调用返回的都是同一个（单例）实例</li></ul><p>总之，Full 模式的增强本质上是<strong>让配置类自身也成为容器管理的入口</strong>，避免“Java 方法调用”破坏了 Spring 的生命周期和作用域控制</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​通过整体的源码分析，可知ConfigurationClassPostProcessor是Spring注解驱动的核心，其内部的<strong>延迟机制、字节码解析优化和代理模型</strong>，是 Spring 保持灵活与健壮性的体现。 最后我再总结以下几个核心的问题</p><h3 id="ASM的使用"><a href="#ASM的使用" class="headerlink" title="ASM的使用"></a>ASM的使用</h3><ul><li><code>@ComponentScan</code> 扫描 class 文件时，使用 <strong>ASM 而不是反射</strong> 来提取类的元数据<ul><li>ASM 更高效，不会触发类的加载，避免了对未来可能不会用到的类进行 JVM 加载。</li><li>此阶段 Spring 尚未确定是否要注册这些类为 Bean，因此避免使用反射是出于性能和安全性的双重考量。</li></ul></li><li><code>@Bean</code> 方法也通过 ASM 解析为 <code>MethodMetadata</code> 对象：<ul><li>反射获取的方法列表顺序是不确定的，使用 ASM 能保留 <code>@Bean</code> 方法在 <code>.class</code> 文件中的<strong>定义顺序</strong></li></ul></li></ul><h3 id="DeferredImportSelector的作用"><a href="#DeferredImportSelector的作用" class="headerlink" title="DeferredImportSelector的作用"></a>DeferredImportSelector的作用</h3><p>​顾名思义，和延迟相关。<strong>是SpringBoot中自动配置的关键，确保了优先解析当前项目中所有的BeanDefinition，以达到覆盖SpringBoot中提供的默认Bean</strong>（比如，项目中配置了DataSource的BeanDefinition，这样Springboot提供的DataSourceAutoConfiguration中的DataSource则不会生效）</p><h3 id="full-configration-class的增强"><a href="#full-configration-class的增强" class="headerlink" title="full configration class的增强"></a>full configration class的增强</h3><p>​和lite configration class唯一的区别，就是<strong>full会被cglib增强，确保@Bean方法始终返回单例bean</strong>。所以，可以得出结论，<strong>如果配置类不使用 <code>@Bean</code> 方法，只做组件聚合，建议使用 <code>@Component</code> 而非 <code>@Configuration</code>，可节省 CGLIB 增强开销</strong></p><h3 id="Bean方法拦截获取bean如何避免循环调用"><a href="#Bean方法拦截获取bean如何避免循环调用" class="headerlink" title="@Bean方法拦截获取bean如何避免循环调用"></a>@Bean方法拦截获取bean如何避免循环调用</h3><p>​full中@Bean方法会走代理，代理内部会用BeanFactory.getBean()来真正获取bean，获取bean时最终又会走到@Bean代理方法。不怕死循环吗？</p><p>​其实不用担心，BeanFactory.getBean()来真正获取bean是用工厂方法来创建实例的，调用时会将此方法保存在当前线程的ThreadLocal里（SimpleInstantiationStrategy.currentlyInvokedFactoryMethod字段）。再<strong>第二次进入代理时会检查当前方法是否就是调用栈顶部的那个工厂方法，如果是，则绕开代理直接调用 <code>super</code> 方法生成实例。</strong> 这一机制确保了代理与容器实例化流程之间协同工作，不会引发死循环</p><h2 id="其它链接"><a href="#其它链接" class="headerlink" title="其它链接"></a>其它链接</h2><ul><li><a href="https://blog.shanzhao.site/2022-03-26/springboot-zi-dong-pei-zhi-yuan-ma-jie-xi/#DeferredImportSelector">DeferedImportSelector的实现与处理逻辑</a></li><li><a href="https://blog.shanzhao.site/2022-04-21/springboot-conditional-zhu-jie-xiang-guan-yuan-li/#Conditional%E6%B3%A8%E8%A7%A3">Condition的实现与处理流程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeanPostProcessor </tag>
            
            <tag> BeanDefinitionRegistryPostProcessor </tag>
            
            <tag> Configuration注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-其他重要的BeanPostProcesor</title>
      <link href="/2021-04-01/spring-qi-ta-chong-yao-de-beanpostprocesor/"/>
      <url>/2021-04-01/spring-qi-ta-chong-yao-de-beanpostprocesor/</url>
      
        <content type="html"><![CDATA[<hr><p>​AsyncAnnotationBeanPostProcessor和ScheduledAnnotationBeanPostProcessor源码解析</p><span id="more"></span><h2 id="AsyncAnnotationBeanPostProcessor"><a href="#AsyncAnnotationBeanPostProcessor" class="headerlink" title="AsyncAnnotationBeanPostProcessor"></a>AsyncAnnotationBeanPostProcessor</h2><h3 id="EnableAsync"><a href="#EnableAsync" class="headerlink" title="@EnableAsync"></a>@EnableAsync</h3><p>​其主要功能是<strong>向容器中注册AsyncAnnotationBeanPostProcessor这个BeanDefinition，其继承了<a href="https://blog.shanzhao.site/2021/02/17/spring-abstractadvisingbeanpostprocessor/">AbstractBeanFactoryAwareAdvisingPostProcessor</a>，可以处理指定的Advisor以此实现@Async的代理，来开启异步</strong></p><p>主要属性</p><table><thead><tr><th align="left">属性</th><th>说明</th></tr></thead><tbody><tr><td align="left"><code>annotation</code></td><td>自定义的异步注解，可以用来定制化</td></tr><tr><td align="left"><code>proxyTargetClass</code></td><td>是否代理目标类。默认为false，即走jdk代理；为true则用cglib代理</td></tr><tr><td align="left"><code>mode</code></td><td>AOP 模式，取值有：<br/> <code>PROXY</code>（默认）：使用 Spring 的代理机制<br/> <code>ASPECTJ</code>：使用 AspectJ（需要额外依赖与编译时&#x2F;加载时织入配置）</td></tr><tr><td align="left"><code>order</code></td><td>AsyncAnnotationBeanPostProcessor的执行顺序，默认最后才执行</td></tr></tbody></table><h3 id="AsyncAnnotationAdvisor"><a href="#AsyncAnnotationAdvisor" class="headerlink" title="AsyncAnnotationAdvisor"></a>AsyncAnnotationAdvisor</h3><p>​在AsyncAnnotationBeanPostProcessor#setBeanFactory（bean初始化阶段的一个hook方法，用于给bean填充BeanFactory）中设置的Advisor</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncAnnotationAdvisor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPointcutAdvisor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryAware</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Advice advice<span class="token punctuation">;</span>    <span class="token keyword">private</span> Pointcut pointcut<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AsyncAnnotationAdvisor</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Nullable</span> Supplier<span class="token operator">&lt;</span>Executor<span class="token operator">></span> executor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Supplier<span class="token operator">&lt;</span>AsyncUncaughtExceptionHandler<span class="token operator">></span> exceptionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">>></span> asyncAnnotationTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 支持@Async</span>        asyncAnnotationTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Async<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 也支持EJB的@Asynchronous</span>            asyncAnnotationTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span><span class="token punctuation">)</span> ClassUtils<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.ejb.Asynchronous"</span><span class="token punctuation">,</span>                    AsyncAnnotationAdvisor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 类路径里不存在@javax.ejb.Asynchronous，也无所谓</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>advice <span class="token operator">=</span> <span class="token function">buildAdvice</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> exceptionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pointcut <span class="token operator">=</span> <span class="token function">buildPointcut</span><span class="token punctuation">(</span>asyncAnnotationTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 构建异步拦截器 Advice：用于真正执行异步调用逻辑     */</span>    <span class="token keyword">protected</span> Advice <span class="token function">buildAdvice</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Nullable</span> Supplier<span class="token operator">&lt;</span>Executor<span class="token operator">></span> executor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Supplier<span class="token operator">&lt;</span>AsyncUncaughtExceptionHandler<span class="token operator">></span> exceptionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationAsyncExecutionInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationAsyncExecutionInterceptor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> exceptionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将asyncAnnotationTypes所有注解构造成一个ComposablePointcut，只要class或method上存在任意一个asyncAnnotationType，即可进行代理     */</span>    <span class="token keyword">protected</span> Pointcut <span class="token function">buildPointcut</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">>></span> asyncAnnotationTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ComposablePointcut result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> asyncAnnotationType <span class="token operator">:</span> asyncAnnotationTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// AnnotationMatchingPointcut是用于注解进行匹配的Pointcut</span>            <span class="token comment" spellcheck="true">// cpc用于class匹配（只要class上存在asyncAnnotationType注解就行）</span>            Pointcut cpc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationMatchingPointcut</span><span class="token punctuation">(</span>asyncAnnotationType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// mpc用于方法匹配（只要method上存在asyncAnnotationType注解就行）</span>            Pointcut mpc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationMatchingPointcut</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> asyncAnnotationType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// ComposablePointcut为注解组合，或逻辑。只要内部的ClasaFilter匹配一个就为true。MethodMatcher匹配一个就为true</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComposablePointcut</span><span class="token punctuation">(</span>cpc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>cpc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>mpc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null <span class="token operator">?</span> result <span class="token operator">:</span> Pointcut<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AnnotationAsyncExecutionInterceptor"><a href="#AnnotationAsyncExecutionInterceptor" class="headerlink" title="AnnotationAsyncExecutionInterceptor"></a>AnnotationAsyncExecutionInterceptor</h3><p>​拦截器核心，用于解析指定的执行器，并异步执行目标方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationAsyncExecutionInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncExecutionInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">final</span> MethodInvocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> AopUtils<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Method specificMethod <span class="token operator">=</span> ClassUtils<span class="token punctuation">.</span><span class="token function">getMostSpecificMethod</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Method userDeclaredMethod <span class="token operator">=</span> BridgeMethodResolver<span class="token punctuation">.</span><span class="token function">findBridgedMethod</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据@Async的value来获取容器中对象的执行器，准备在这个Executor中执行代理逻辑</span>        AsyncTaskExecutor executor <span class="token operator">=</span> <span class="token function">determineAsyncExecutor</span><span class="token punctuation">(</span>userDeclaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                    <span class="token string">"No executor specified and no default executor set on AsyncExecutionInterceptor either"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 构建Callable</span>        Callable<span class="token operator">&lt;</span>Object<span class="token operator">></span> task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Object result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Future</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">handleError</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDeclaredMethod<span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">handleError</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> userDeclaredMethod<span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 提交任务到Executor中</span>        <span class="token keyword">return</span> <span class="token function">doSubmit</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  可知对于CompletableFuture，ListenableFuture，Future这三种返回值都是支持的，但对于其他返回值都直接返回null了     */</span>    <span class="token keyword">protected</span> Object <span class="token function">doSubmit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>Object<span class="token operator">></span> task<span class="token punctuation">,</span> AsyncTaskExecutor executor<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> returnType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CompletableFuture<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> task<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CompletionException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ListenableFuture<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AsyncListenableTaskExecutor<span class="token punctuation">)</span> executor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submitListenable</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Future<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>方法或类上只要存在@Async或@Asynchronous即可走异步</li><li>可使用@Async的value字段指定异步线程池（前提是要这个线程池在容器中）<ul><li>如未指定value，则使用容器中的AsyncConfigurer提供的Executor<ul><li>如果容器中没有AsyncConfigurer，则使用默认的SimpleAsyncTaskExecutor。其每次execute都会新开一个线程</li></ul></li></ul></li><li><strong>只支持CompletableFuture，ListenableFuture，Future这三种返回值</strong>。其余返回值都直接返回null</li><li><strong>异步切面会在这个方法中的所有切面里最先执行</strong>（因为其AsyncAnnotationBeanPostProcessor.beforeExistingAdvisors &#x3D; true）</li></ul><h2 id="ScheduledAnnotationBeanPostProcessor"><a href="#ScheduledAnnotationBeanPostProcessor" class="headerlink" title="ScheduledAnnotationBeanPostProcessor"></a>ScheduledAnnotationBeanPostProcessor</h2><h3 id="EnableScheduling"><a href="#EnableScheduling" class="headerlink" title="@EnableScheduling"></a>@EnableScheduling</h3><p>​向容器中注册ScheduledAnnotationBeanPostProcessor这个BeanDefinition，用于@Schedules和@Scheduled的解析和注册</p><h3 id="ScheduledAnnotationBeanPostProcessor-1"><a href="#ScheduledAnnotationBeanPostProcessor-1" class="headerlink" title="ScheduledAnnotationBeanPostProcessor"></a>ScheduledAnnotationBeanPostProcessor</h3><h4 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledAnnotationBeanPostProcessor</span>        <span class="token keyword">implements</span> <span class="token class-name">ScheduledTaskHolder</span><span class="token punctuation">,</span> MergedBeanDefinitionPostProcessor<span class="token punctuation">,</span> DestructionAwareBeanPostProcessor<span class="token punctuation">,</span>        Ordered<span class="token punctuation">,</span> EmbeddedValueResolverAware<span class="token punctuation">,</span> BeanNameAware<span class="token punctuation">,</span> BeanFactoryAware<span class="token punctuation">,</span> ApplicationContextAware<span class="token punctuation">,</span>        SmartInitializingSingleton<span class="token punctuation">,</span> ApplicationListener<span class="token operator">&lt;</span>ContextRefreshedEvent<span class="token operator">></span><span class="token punctuation">,</span> DisposableBean <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * bean初始化完成后的hook，只做定时任务的解析和封装，这里并不执行     */</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">AopInfrastructureBean</span> <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">TaskScheduler</span> <span class="token operator">||</span>                bean <span class="token keyword">instanceof</span> <span class="token class-name">ScheduledExecutorService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Ignore AOP infrastructure such as scoped proxies.</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">ultimateTargetClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>nonAnnotatedClasses<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析方法上的@Schedules和@Scheduled</span>            Map<span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Scheduled<span class="token operator">>></span> annotatedMethods <span class="token operator">=</span> MethodIntrospector<span class="token punctuation">.</span><span class="token function">selectMethods</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span>                    <span class="token punctuation">(</span>MethodIntrospector<span class="token punctuation">.</span>MetadataLookup<span class="token operator">&lt;</span>Set<span class="token operator">&lt;</span>Scheduled<span class="token operator">>></span><span class="token punctuation">)</span> method <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                        Set<span class="token operator">&lt;</span>Scheduled<span class="token operator">></span> scheduledMethods <span class="token operator">=</span> AnnotatedElementUtils<span class="token punctuation">.</span><span class="token function">getMergedRepeatableAnnotations</span><span class="token punctuation">(</span>                                method<span class="token punctuation">,</span> Scheduled<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Schedules<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>scheduledMethods<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> scheduledMethods <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>annotatedMethods<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>nonAnnotatedClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 存在注解，对每个定时任务方法进行处理</span>                annotatedMethods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> scheduledMethods<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> scheduledMethods                        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>scheduled <span class="token operator">-</span><span class="token operator">></span> <span class="token function">processScheduled</span><span class="token punctuation">(</span>scheduled<span class="token punctuation">,</span> method<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解析@Scheduled注解，可知其定时字段优先级：cron > fixedDelay > fixedDelayString > fixedRate > fixedRateString     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processScheduled</span><span class="token punctuation">(</span>Scheduled scheduled<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将方法封装为可直接运行的Runnable（方法不能有参数）</span>            Runnable runnable <span class="token operator">=</span> <span class="token function">createRunnable</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 是否已处理过（一个@Scheduled只能使用一个定时）</span>            <span class="token keyword">boolean</span> processedSchedule <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            String errorMessage <span class="token operator">=</span> <span class="token string">"Exactly one of the 'cron', 'fixedDelay(String)', or 'fixedRate(String)' attributes is required"</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>ScheduledTask<span class="token operator">></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析初始延时</span>            <span class="token keyword">long</span> initialDelay <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">initialDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String initialDelayString <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">initialDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>initialDelayString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>initialDelay <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Specify 'initialDelay' or 'initialDelayString', not both"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    initialDelayString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>initialDelayString<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>initialDelayString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        initialDelay <span class="token operator">=</span> <span class="token function">parseDelayAsLong</span><span class="token punctuation">(</span>initialDelayString<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                                <span class="token string">"Invalid initialDelayString value \""</span> <span class="token operator">+</span> initialDelayString                                        <span class="token operator">+</span> <span class="token string">"\" - cannot parse into long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 优先解析cron表达式</span>            String cron <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String zone <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">zone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cron <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">;</span>                    zone <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 校验cron不支持初始延时</span>                    Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>initialDelay <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"'initialDelay' not supported for cron triggers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Scheduled<span class="token punctuation">.</span>CRON_DISABLED<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        TimeZone timeZone<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            timeZone <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">parseTimeZoneString</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            timeZone <span class="token operator">=</span> TimeZone<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 构造为CronTask，先缓存起来</span>                        tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar                                <span class="token punctuation">.</span><span class="token function">scheduleCronTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CronTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span>cron<span class="token punctuation">,</span> timeZone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>initialDelay <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                initialDelay <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 解析固定周期</span>            <span class="token keyword">long</span> fixedDelay <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">fixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fixedDelay <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>                processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">scheduleFixedDelayTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedDelayTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> fixedDelay<span class="token punctuation">,</span> initialDelay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String fixedDelayString <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">fixedDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>fixedDelayString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fixedDelayString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>fixedDelayString<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>fixedDelayString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>                    processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        fixedDelay <span class="token operator">=</span> <span class="token function">parseDelayAsLong</span><span class="token punctuation">(</span>fixedDelayString<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                                <span class="token string">"Invalid fixedDelayString value \""</span> <span class="token operator">+</span> fixedDelayString <span class="token operator">+</span> <span class="token string">"\" - cannot parse into long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 构造为FixedDelayTask，先缓存起来</span>                    tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar                            <span class="token punctuation">.</span><span class="token function">scheduleFixedDelayTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedDelayTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> fixedDelay<span class="token punctuation">,</span> initialDelay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 最后才解析固定频率</span>            <span class="token keyword">long</span> fixedRate <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">fixedRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fixedRate <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>                processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">scheduleFixedRateTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedRateTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> fixedRate<span class="token punctuation">,</span> initialDelay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String fixedRateString <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">fixedRateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>fixedRateString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fixedRateString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>fixedRateString<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>fixedRateString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>                    processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        fixedRate <span class="token operator">=</span> <span class="token function">parseDelayAsLong</span><span class="token punctuation">(</span>fixedRateString<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                                <span class="token string">"Invalid fixedRateString value \""</span> <span class="token operator">+</span> fixedRateString <span class="token operator">+</span> <span class="token string">"\" - cannot parse into long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 构造为FixedRateTask，先缓存起来</span>                    tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">scheduleFixedRateTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedRateTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> fixedRate<span class="token punctuation">,</span> initialDelay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 校验使用了注解的必须有定时任务</span>            Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Finally register the scheduled tasks</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scheduledTasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Set<span class="token operator">&lt;</span>ScheduledTask<span class="token operator">></span> regTasks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledTasks<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> key <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                regTasks<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                    <span class="token string">"Encountered invalid @Scheduled method '"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"': "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * ContextRefreshed事件，表示容器刷新完毕，可以真正的注册定时任务了     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ContextRefreshedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">finishRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 开始真正的投递定时任务到线程池中。     * 定时线程池优先级：     * 1. scheduler     * 2. TaskScheduler(beanName为taskScheduler) bean     * 3. 任意TaskScheduler bean     * 4. ScheduledExecutorService(beanName为taskScheduler) bean     * 5. 任意ScheduledExecutorService bean     * 6. ScheduledThreadPoolExecutor（线程数为1）     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">finishRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scheduler <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">setScheduler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">ListableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> SchedulingConfigurer<span class="token operator">></span> beans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ListableBeanFactory<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>SchedulingConfigurer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>SchedulingConfigurer<span class="token operator">></span> configurers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>beans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            AnnotationAwareOrderComparator<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>SchedulingConfigurer configurer <span class="token operator">:</span> configurers<span class="token punctuation">)</span> <span class="token punctuation">{</span>                configurer<span class="token punctuation">.</span><span class="token function">configureTasks</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">hasTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"BeanFactory must be set to find scheduler by type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 先获取beanName为taskScheduler的TaskScheduler bean</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span><span class="token function">resolveSchedulerBean</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> TaskScheduler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoUniqueBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 再按class获取TaskScheduler bean</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span><span class="token function">resolveSchedulerBean</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> TaskScheduler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 再获取beanName为taskScheduler的ScheduledExecutorService bean</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">setScheduler</span><span class="token punctuation">(</span>                            <span class="token function">resolveSchedulerBean</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> ScheduledExecutorService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoUniqueBeanDefinitionException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 再按class获取ScheduledExecutorService bean</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">setScheduler</span><span class="token punctuation">(</span>                                <span class="token function">resolveSchedulerBean</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> ScheduledExecutorService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex3<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 到这了如果taskScheduler还没有，内部则会创建一个容量为1的ScheduledThreadPoolExecutor去执行定时任务</span>        <span class="token comment" spellcheck="true">// 将bean解析完成的所有定时任务投递到定时任务线程吃</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li>bean初始化完成后解析才@Scheduled和@Schedules（<strong>只是解析，并不投递），缓存到统一的ScheduledTaskRegistrar中</strong><ul><li>@Scheduled只能解析为一个定时任务，优先级：<ol><li>cron</li><li>fixedDelay</li><li>fixedDelayString</li><li>fixedRate</li><li>fixedRateString</li></ol></li><li>要定时成多个任务需要使用@Schedules</li></ul></li><li><strong>ContextRefreshedEvent事件触发，开始投递任务</strong><ul><li>先获取任务定时器，定时线程池优先级：<ol><li>ScheduledAnnotationBeanPostProcessor#scheduler（只能为TaskScheduler或ScheduledExecutorService的子类）</li><li>任意TaskScheduler  bean</li><li>TaskScheduler(beanName为taskScheduler)  bean</li><li>任意ScheduledExecutorService  bean</li><li>ScheduledExecutorService(beanName为taskScheduler)  bean</li><li><strong>ScheduledThreadPoolExecutor（线程数为1），即默认线程池</strong></li></ol></li><li>将解析阶段ScheduledTaskRegistrar内缓存的Task都投递到定时线程池中</li></ul></li><li>重点了解下<strong>cron，它会被封装为ReschedulingRunnable</strong>，每次执行完后才根据cron计算下一次任务的执行时间，这样循环动态的计算执行时间</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeanPostProcessor </tag>
            
            <tag> Async注解 </tag>
            
            <tag> Scheduled注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Transactional</title>
      <link href="/2021-02-23/spring-transactional/"/>
      <url>/2021-02-23/spring-transactional/</url>
      
        <content type="html"><![CDATA[<hr><p>​从<strong>源码分析了@Transactional的解析和切面使用流程</strong>。Spring事物如此复杂是因为不同的PROPAGATION有不同的策略，特别是在嵌套的流程中，所以<strong>重点分析了PlatformTransactionManager的事物获取流程，深入了解了PROPAGATION的实现</strong></p><span id="more"></span><h2 id="EnableTransactionManagement"><a href="#EnableTransactionManagement" class="headerlink" title="@EnableTransactionManagement"></a>@EnableTransactionManagement</h2><p>​开启Spring基于注解的事务管理，其背后主要通过<strong>导入一个基础配置类 <code>ProxyTransactionManagementConfiguration</code></strong> 来实现核心功能。</p><p>该配置类定义并注册了事务功能所依赖的三个关键 Bean：</p><table><thead><tr><th>Bean 名称</th><th>作用概述</th></tr></thead><tbody><tr><td><strong>TransactionAttributeSource</strong></td><td>用于解析方法或类上的 <code>@Transactional</code> 注解，提取事务属性（如传播行为、回滚规则等）。默认实现为 <code>AnnotationTransactionAttributeSource</code>。</td></tr><tr><td><strong>TransactionInterceptor</strong></td><td>真正的事务拦截器，在目标方法执行前后进行事务管理操作（开启、提交、回滚等）。本质上是一个 <code>MethodInterceptor</code>。</td></tr><tr><td><strong>BeanFactoryTransactionAttributeSourceAdvisor</strong></td><td>是 Spring AOP 中的 <code>Advisor</code>，封装了 <code>TransactionAttributeSource</code> 和 <code>TransactionInterceptor</code>，通过切点判断哪些方法需要事务，并将拦截器应用到这些方法上。</td></tr></tbody></table><h2 id="BeanFactoryTransactionAttributeSourceAdvisor"><a href="#BeanFactoryTransactionAttributeSourceAdvisor" class="headerlink" title="BeanFactoryTransactionAttributeSourceAdvisor"></a>BeanFactoryTransactionAttributeSourceAdvisor</h2><p>​是一个PointcutAdvisor，既可以解析方法和类的注解事物信息，也能将真正的拦截器应用到代理中，实现注解事物的支持。</p><h3 id="TransactionAttributeSourcePointcut"><a href="#TransactionAttributeSourcePointcut" class="headerlink" title="TransactionAttributeSourcePointcut"></a>TransactionAttributeSourcePointcut</h3><p>​<code>TransactionAttributeSourcePointcut</code> 是 Spring 声明式事务机制中的关键组件之一，它继承自 <code>StaticMethodMatcherPointcut</code>，这是一个<strong>仅关注方法匹配、对类无过滤限制的 Pointcut 实现</strong>。</p><p>为什么这么设计？因为在事务注解的处理逻辑中</p><ul><li>是否应用事务主要取决于<strong>方法级别是否存在 <code>@Transactional</code> 注解</strong></li><li>若<strong>方法上无注解，才会回退查找类级别上的事务配置</strong></li><li>因此，从设计上讲，应该<strong>保留对所有类的匹配资格</strong>，不能在 <code>ClassFilter</code> 层面就提前“判死刑”</li></ul><p>换句话说，Spring 不会直接排除某些类，而是逐个方法检查是否具备事务属性，从而实现最大化的灵活性和兼容性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">StaticMethodMatcherPointcut</span> <span class="token keyword">extends</span> <span class="token class-name">StaticMethodMatcher</span> <span class="token keyword">implements</span> <span class="token class-name">Pointcut</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 始终匹配为true的ClassFilter</span>    <span class="token keyword">private</span> ClassFilter classFilter <span class="token operator">=</span> ClassFilter<span class="token punctuation">.</span>TRUE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClassFilter</span><span class="token punctuation">(</span>ClassFilter classFilter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>classFilter <span class="token operator">=</span> classFilter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ClassFilter <span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>classFilter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> MethodMatcher <span class="token function">getMethodMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法解析"><a href="#方法解析" class="headerlink" title="方法解析"></a>方法解析</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// === 排除掉一些不需要事务增强的内部类 ===</span>    <span class="token comment" spellcheck="true">// 例如事务代理自身、事务管理器、异常翻译器等，避免不必要的切面增强</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>TransactionalProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span> <span class="token operator">||</span>        PlatformTransactionManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span> <span class="token operator">||</span>        PersistenceExceptionTranslator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// === 通过 TransactionAttributeSource 判断该方法是否需要事务处理 ===</span>    <span class="token comment" spellcheck="true">// 如果解析不到事务属性（即无 @Transactional 注解），则不匹配</span>    TransactionAttributeSource tas <span class="token operator">=</span> <span class="token function">getTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>tas <span class="token operator">==</span> null <span class="token operator">||</span> tas<span class="token punctuation">.</span><span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TransactionAttributeSource"><a href="#TransactionAttributeSource" class="headerlink" title="TransactionAttributeSource"></a>TransactionAttributeSource</h3><p>​<code>TransactionAttributeSource</code> 是 Spring 中用于解析方法&#x2F;类上的事务注解的核心接口，Spring 的默认实现为 **<code>AnnotationTransactionAttributeSource</code>**。</p><p>它的作用是从方法或类中提取事务元信息，并将其封装为一个 <strong><code>TransactionAttribute</code></strong> 对象，供后续事务切面使用。</p><blockquote><p>支持的注解类型包括：</p><ul><li>Spring 自身的 <code>@org.springframework.transaction.annotation.Transactional</code></li><li>Java 标准的 <code>@javax.transaction.Transactional</code></li><li>EJB 标准的 <code>@javax.ejb.TransactionAttribute</code></li></ul></blockquote><p>​Spring 的 <code>@Transactional</code> 注解最终会被解析为一个 <strong><code>RuleBasedTransactionAttribute</code></strong> 对象，该对象包含了传播行为、隔离级别、超时、只读等完整事务配置。</p><h4 id="解析优先级"><a href="#解析优先级" class="headerlink" title="解析优先级"></a>解析优先级</h4><p>​在执行方法事务增强前，Spring 会根据如下顺序查找事务注解，<strong>一旦某一层找到了，就立即返回，停止继续向上查找</strong></p><ol><li><strong>目标类中“具体实现方法”上的注解</strong></li><li><strong>目标类上（Class级别）的注解</strong></li><li><strong>接口中定义的“方法”上的注解</strong></li><li><strong>接口自身（Class级别）的注解</strong></li></ol><h4 id="关键源码"><a href="#关键源码" class="headerlink" title="关键源码"></a>关键源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationTransactionAttributeSource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFallbackTransactionAttributeSource</span>        <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// javax.transaction.Transactional注解支持</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> jta12Present<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// javax.ejb.TransactionAttribute注解支持</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> ejb3Present<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        ClassLoader classLoader <span class="token operator">=</span> AnnotationTransactionAttributeSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jta12Present <span class="token operator">=</span> ClassUtils<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token string">"javax.transaction.Transactional"</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        ejb3Present <span class="token operator">=</span> ClassUtils<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token string">"javax.ejb.TransactionAttribute"</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 是否只代理public方法，默认为true</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> publicMethodsOnly<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 事物解析器，顺序有优先级</span>    <span class="token comment" spellcheck="true">// 1. SpringTransactionAnnotationParser (这个是一定会有的)</span>    <span class="token comment" spellcheck="true">// 2. JtaTransactionAnnotationParser（需要有javax.transaction.Transactional注解）</span>    <span class="token comment" spellcheck="true">// 3. Ejb3TransactionAnnotationParser（需要有javax.ejb.TransactionAttribute注解）</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>TransactionAnnotationParser<span class="token operator">></span> annotationParsers<span class="token punctuation">;</span>    <span class="token keyword">public</span> TransactionAttribute <span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 先看看有没有缓存</span>        Object cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        TransactionAttribute cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attributeCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// NULL_TRANSACTION_ATTRIBUTE表示无事物</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">==</span> NULL_TRANSACTION_ATTRIBUTE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> cached<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 事物信息查找</span>            TransactionAttribute txAttr <span class="token operator">=</span> <span class="token function">computeTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 缓存并返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>attributeCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> NULL_TRANSACTION_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                String methodIdentification <span class="token operator">=</span> ClassUtils<span class="token punctuation">.</span><span class="token function">getQualifiedMethodName</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token keyword">instanceof</span> <span class="token class-name">DefaultTransactionAttribute</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>DefaultTransactionAttribute<span class="token punctuation">)</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescriptor</span><span class="token punctuation">(</span>methodIdentification<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>                            <span class="token string">"Adding transactional method '"</span> <span class="token operator">+</span> methodIdentification <span class="token operator">+</span> <span class="token string">"' with attribute: "</span> <span class="token operator">+</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>attributeCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> TransactionAttribute <span class="token function">computeTransactionAttribute</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 默认非public方法不支持</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">allowPublicMethodsOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取最具体的方法（桥接方法处理），确保是目标类中的实现方法</span>        Method specificMethod <span class="token operator">=</span> AopUtils<span class="token punctuation">.</span><span class="token function">getMostSpecificMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先解析方法上的解析事务注解</span>        TransactionAttribute txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 方法上没有，在解析类上的事务注解</span>        txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> ClassUtils<span class="token punctuation">.</span><span class="token function">isUserLevelMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// === 此时 specificMethod ≠ method（说明原始 method 是接口定义） ===</span>        <span class="token comment" spellcheck="true">// 再尝试解析接口方法本身及其声明类（即接口）上的事务注解</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>specificMethod <span class="token operator">!=</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>            txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> ClassUtils<span class="token punctuation">.</span><span class="token function">isUserLevelMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TransactionInterceptor"><a href="#TransactionInterceptor" class="headerlink" title="TransactionInterceptor"></a>TransactionInterceptor</h3><p>​TransactionInterceptor 是用于处理声明式事务（@Transactional 注解）的 AOP 拦截器，<strong>本质上是一个环绕（Around）通知</strong>，拦截被 @Transactional 标注的方法。</p><p>​它自身并不直接实现事务的提交、回滚等核心逻辑，而是将这些操作委托给底层的PlatformTransactionManager 来完成。</p><h4 id="主要职责"><a href="#主要职责" class="headerlink" title="主要职责"></a>主要职责</h4><ul><li>从 TransactionAttributeSource 中获取事务属性（如传播行为、隔离级别、是否只读等）</li><li>调用 TransactionManager 获取或创建事务</li><li>执行目标方法，捕获异常判断是否回滚</li><li>正常返回时提交事务，异常时进行回滚</li><li>管理当前事务上下文（通过 ThreadLocal）以支持事务传播</li></ul><h4 id="关键源码-1"><a href="#关键源码-1" class="headerlink" title="关键源码"></a>关键源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionAspectSupport</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// =============== 父类TransactionAspectSupport中的字段 =================</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>TransactionInfo<span class="token operator">></span> transactionInfoHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>            <span class="token string">"Current aspect-driven transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * AOP拦截器核心逻辑：拦截事务方法，并根据事务配置（声明式 or 编程式）处理事务生命周期     */</span>    <span class="token keyword">protected</span> Object <span class="token function">invokeWithinTransaction</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">,</span>            <span class="token keyword">final</span> InvocationCallback invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        TransactionAttributeSource tas <span class="token operator">=</span> <span class="token function">getTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取事务属性</span>        <span class="token keyword">final</span> TransactionAttribute txAttr <span class="token operator">=</span> <span class="token punctuation">(</span>tas <span class="token operator">!=</span> null <span class="token operator">?</span> tas<span class="token punctuation">.</span><span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取beanFactory中的TransactionManager（可能是DataSourceTransactionManager、JtaTransactionManager等）</span>        <span class="token keyword">final</span> PlatformTransactionManager tm <span class="token operator">=</span> <span class="token function">determineTransactionManager</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构造方法唯一标识（例如：site.shanzhao.UserService.save）</span>        <span class="token keyword">final</span> String joinpointIdentification <span class="token operator">=</span> <span class="token function">methodIdentification</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声明式事务处理（@Transactional注解就走这）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>tm <span class="token keyword">instanceof</span> <span class="token class-name">CallbackPreferringPlatformTransactionManager</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建事务信息对象，必要时启动事务</span>            TransactionInfo txInfo <span class="token operator">=</span> <span class="token function">createTransactionIfNecessary</span><span class="token punctuation">(</span>tm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object retVal<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行被增强的方法</span>                retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceedWithInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 处理异常回滚</span>                <span class="token function">completeTransactionAfterThrowing</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 清理ThreadLocal中的事务信息</span>                <span class="token function">cleanupTransactionInfo</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 方法正常返回则提交事务</span>            <span class="token function">commitTransactionAfterReturning</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 编程式事务处理</span>            Object result<span class="token punctuation">;</span>            <span class="token keyword">final</span> ThrowableHolder throwableHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThrowableHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CallbackPreferringPlatformTransactionManager<span class="token punctuation">)</span> tm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">,</span> status <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    TransactionInfo txInfo <span class="token operator">=</span> <span class="token function">prepareTransactionInfo</span><span class="token punctuation">(</span>tm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceedWithInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr<span class="token punctuation">.</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">throw</span> <span class="token punctuation">(</span>RuntimeException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ThrowableHolderException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">=</span> ex<span class="token punctuation">;</span>                            <span class="token keyword">return</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token function">cleanupTransactionInfo</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ThrowableHolderException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSystemException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by commit exception"</span><span class="token punctuation">,</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ex2<span class="token punctuation">.</span><span class="token function">initApplicationException</span><span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by commit exception"</span><span class="token punctuation">,</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Check result state: It might indicate a Throwable to rethrow.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据事务属性创建事务（如果有必要）。     *     * - 若当前方法配置了事务属性（如 @Transactional），则获取事务管理器并尝试开启事务。     * - 若未指定事务名称，则使用方法签名作为事务名称（便于日志跟踪和调试）。     * - 最终返回一个封装了事务状态的 TransactionInfo 对象（用于后续提交或回滚处理）。     *     */</span>    <span class="token keyword">protected</span> TransactionInfo <span class="token function">createTransactionIfNecessary</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Nullable</span> PlatformTransactionManager tm<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> TransactionAttribute txAttr<span class="token punctuation">,</span>            <span class="token keyword">final</span> String joinpointIdentification<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果没有设置事务名称，则使用方法签名作为名称，并封装成 DelegatingTransactionAttribute。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> txAttr<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            txAttr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingTransactionAttribute</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> joinpointIdentification<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TransactionStatus status <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若存在事务属性，表示方法需要事务处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 调用事务管理器开启事务，返回事务状态（可能是新事务，也可能是参与已有事务）</span>                status <span class="token operator">=</span> tm<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 没有配置事务管理器，无法执行事务控制，打印调试日志</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Skipping transactional joinpoint ["</span> <span class="token operator">+</span> joinpointIdentification <span class="token operator">+</span>                            <span class="token string">"] because no transaction manager has been configured"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 构造 TransactionInfo 对象，并将其绑定到父类TransactionAspectSupport#ThreadLocal 中，</span>        <span class="token comment" spellcheck="true">// 用于在线程内部保存当前事务的上下文信息（如 TransactionStatus、事务属性等），</span>        <span class="token comment" spellcheck="true">// 以支持事务传播、回滚控制和资源清理等操作</span>        <span class="token keyword">return</span> <span class="token function">prepareTransactionInfo</span><span class="token punctuation">(</span>tm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在目标方法抛出异常后完成事务处理（回滚或提交）     *     * 该方法根据事务属性（如 @Transactional 中的 rollbackFor）判断是否需要回滚，     * 若不需要回滚则尝试提交（注意：提交时内部仍可能因为标记了 rollbackOnly 而实际执行回滚）。     *     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">completeTransactionAfterThrowing</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> TransactionInfo txInfo<span class="token punctuation">,</span> Throwable ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txInfo <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Completing transaction for ["</span> <span class="token operator">+</span> txInfo<span class="token punctuation">.</span><span class="token function">getJoinpointIdentification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                        <span class="token string">"] after exception: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span>transactionAttribute <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> txInfo<span class="token punctuation">.</span>transactionAttribute<span class="token punctuation">.</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 命中回滚异常，需要操作事务回滚</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    txInfo<span class="token punctuation">.</span><span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSystemException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by rollback exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ex2<span class="token punctuation">.</span><span class="token function">initApplicationException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by rollback exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 出现了异常但不需要回滚。则尝试commit（不一定真的会commit，内部还是可能根据rollbackOnly来判断是否rollback）</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    txInfo<span class="token punctuation">.</span><span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSystemException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by commit exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ex2<span class="token punctuation">.</span><span class="token function">initApplicationException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by commit exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h2><p>​PlatformTransactionManager <strong>抽象了事务的获取、提交、回滚</strong>，是 Spring 事务架构的核心入口。所有 @Transactional 的底层实现最终都依赖它完成真正的事务操作。基本<strong>实现类为DataSourceTransactionManager</strong>。</p><h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h3><p>​默认实现为DefaultTransactionStatus。<strong>每个@Transactional注解都会生成一个DefaultTransactionStatus，用于表示当前事物的允许状态</strong>。在事务执行流程中，它作为事务的运行时上下文贯穿始终，PlatformTransactionManager 对其进行更新和查询，以决定事务的提交、回滚及其他控制逻辑。</p><p>​<strong>其中的isNewTransaction()方法决定了当前@Transactional生成的事物是否有资格进行commit或rollback</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultTransactionStatus</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTransactionStatus</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 当前事务对象，一般为具体事务实现（如 DataSourceTransactionObject）。     *     * - 若当前方法运行在事务上下文中，则 非null；     * - 若未开启事务（如事务传播行为为 NOT_SUPPORTED），则为 null；     *     * 注意：即使在同一个物理事务中，每个 @Transactional 方法对应的 DefaultTransactionStatus 实例不同，     * 但它们内部的 transaction（如 ConnectionHolder）可能是同一个对象，表示共享同一底层连接。     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object transaction<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 是否是“新事务”的创建者。     *     * - true：当前方法通过传播行为触发了事务创建；     * - false：当前方法加入了已有事务；     *     * 注意：该值为 true 不等于事务实际存在，需结合 transaction 字段判断是否真有事务资源。     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> newTransaction<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 是否注册了 TransactionSynchronizationManager，同步管理器用于事务钩子（如 afterCommit）。     * 即是否是本方法负责事务同步的初始化（如绑定资源、触发同步回调）。     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> newSynchronization<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前事务是否只读，由 @Transactional 配置     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> readOnly<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前日志是否是debug等级以上     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> debug<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 很重要     * 如果当前事务为嵌套事务或需要挂起上一个事务，则用于保存被挂起的事务资源。     *     * 一般为 SuspendedResourcesHolder 类型，用于在当前事务完成后恢复之前的事务状态。     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object suspendedResources<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ============ 父类AbstractTransactionStatus中的字段 ============</span>    <span class="token comment" spellcheck="true">/**     * 标识当前事务是否被标记为回滚（通常通过 setRollbackOnly() 触发）。     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> rollbackOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前事务是否已完成（无论提交还是回滚）。     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> completed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用于保存事务的保存点（Savepoint），支持嵌套事务回滚。     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> Object savepoint<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 很重要的方法，决定了当前@Transactional生成的事物是否有资格进行commit或rollback     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNewTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">hasTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newTransaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataSourceTransactionManager"><a href="#DataSourceTransactionManager" class="headerlink" title="DataSourceTransactionManager"></a>DataSourceTransactionManager</h3><p>Spring 默认提供的基于 JDBC 数据源（<code>javax.sql.DataSource</code>）的 <code>PlatformTransactionManager</code> 实现</p><p>核心方法<code>getTransaction</code> 流程总结</p><ul><li>首先判断当前线程是否已绑定事务（即 <code>transactionActive</code> 状态）；若存在事务，则代表当前可能处于嵌套或参与中 事务的处理场景</li><li>根据 <code>TransactionDefinition</code> 中指定的事务传播行为（<code>PROPAGATION_*</code>）来决定事务处理策略：<ul><li>是否加入当前事务</li><li>是否挂起已有事务</li><li>是否开启新事务</li></ul></li><li>最终构建 <code>DefaultTransactionStatus</code> 实例，其中封装了当前事务的控制信息（如是否新建、是否可回滚、是否只读等）</li><li>如果事务被创建（非参与），还会：<ul><li>设置数据库连接的自动提交为 false</li><li>绑定资源到当前线程（ThreadLocal）</li><li>注册事务同步管理器（<code>TransactionSynchronizationManager</code>）以支持hook函数的调用（如 beforeCommit、afterCompletion 等）</li></ul></li></ul><h4 id="关键源码-2"><a href="#关键源码-2" class="headerlink" title="关键源码"></a>关键源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPlatformTransactionManager</span>        <span class="token keyword">implements</span> <span class="token class-name">ResourceTransactionManager</span><span class="token punctuation">,</span> InitializingBean <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 事物的获取（父类中AbstractPlatformTransactionManager的方法 ）     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> TransactionStatus <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> TransactionDefinition definition<span class="token punctuation">)</span>            <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取当前事务上下文对象，默认为 DataSourceTransactionObject</span>        <span class="token comment" spellcheck="true">// 初次进入时内部的 ConnectionHolder 为空（即还未绑定连接）</span>        Object transaction <span class="token operator">=</span> <span class="token function">doGetTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 缓存日志等级判断，避免多次调用 logger.isDebugEnabled()</span>        <span class="token keyword">boolean</span> debugEnabled <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若无自定义事务定义，使用默认配置（PROPAGATION_REQUIRED，ISOLATION_DEFAULT 等）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            definition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ========== 检查当前线程是否已存在事务 ========== //</span>        <span class="token comment" spellcheck="true">// 条件：当前线程绑定了 ConnectionHolder 且其 transactionActive = true</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isExistingTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 已存在事务，根据传播行为判断处理方式</span>            <span class="token keyword">return</span> <span class="token function">handleExistingTransaction</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ========== 走到这表示还没有事物，根据传播行为判断是否需要新建事务 ========== //</span>        <span class="token comment" spellcheck="true">// 超时时间校验：不能小于默认值（-1）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> TransactionDefinition<span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidTimeoutException</span><span class="token punctuation">(</span><span class="token string">"Invalid transaction timeout"</span><span class="token punctuation">,</span> definition<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ========== 根据事务传播行为做决策 ========== //</span>        <span class="token comment" spellcheck="true">// 传播行为为 MANDATORY，但当前又没有事务，抛出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_MANDATORY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>                    <span class="token string">"No existing transaction found for transaction marked with propagation 'mandatory'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 传播行为为 REQUIRED、REQUIRES_NEW、NESTED 都需要新建事务</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_REQUIRED <span class="token operator">||</span>                definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_REQUIRES_NEW <span class="token operator">||</span>                definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NESTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 先挂起当前事务（无事务时挂空）</span>            SuspendedResourcesHolder suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Creating new transaction with name ["</span> <span class="token operator">+</span> definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]: "</span> <span class="token operator">+</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断是否启用事务同步，默认是 true（除非设置为 NEVER）</span>                <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SYNCHRONIZATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 构建 DefaultTransactionStatus，封装事务上下文信息</span>                DefaultTransactionStatus status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>                        definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 初始化事务：如创建连接、设置隔离级别、timeout，并将资源绑定到当前线程</span>                <span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 注册事务同步器（如触发 beforeCommit、afterCompletion 等回调）</span>                <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 异常时恢复挂起的事务资源</span>                <span class="token function">resume</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 传播行为为 SUPPORTS、NOT_SUPPORTED、NEVER —— 不启动实际事务，只做同步处理（如果配置了）</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> TransactionDefinition<span class="token punctuation">.</span>ISOLATION_DEFAULT <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Custom isolation level specified but no actual transaction initiated; "</span> <span class="token operator">+</span>                        <span class="token string">"isolation level will effectively be ignored: "</span> <span class="token operator">+</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 是否启用事务同步，SYNCHRONIZATION_ALWAYS 时启用</span>            <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> SYNCHRONIZATION_ALWAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建一个“空事务”状态，主要用于注册同步器，但没有实际事务操作</span>            <span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> TransactionStatus <span class="token function">handleExistingTransaction</span><span class="token punctuation">(</span>            TransactionDefinition definition<span class="token punctuation">,</span> Object transaction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> debugEnabled<span class="token punctuation">)</span>            <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// NEVER：完全不支持事务，当前线程存在事务则抛异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NEVER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>                    <span class="token string">"Existing transaction found for transaction marked with propagation 'never'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// NOT_SUPPORTED：暂停（挂起）当前事务，然后以非事务的方式运行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NOT_SUPPORTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Suspending current transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Object suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> SYNCHRONIZATION_ALWAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>                    definition<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// REQUIRES_NEW：暂停当前事务，新开一个事务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_REQUIRES_NEW<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Suspending current transaction, creating new transaction with name ["</span> <span class="token operator">+</span>                        definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 暂停当前事务，方便之后还原</span>            SuspendedResourcesHolder suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SYNCHRONIZATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">;</span>                DefaultTransactionStatus status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>                        definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error beginEx<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resumeAfterBeginException</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">,</span> beginEx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> beginEx<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// NESTED：先判断是否允许嵌套事务（默认允许），然后优先通过数据库保存点（Savepoint）实现</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NESTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNestedTransactionAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NestedTransactionNotSupportedException</span><span class="token punctuation">(</span>                        <span class="token string">"Transaction manager does not allow nested transactions by default - "</span> <span class="token operator">+</span>                                <span class="token string">"specify 'nestedTransactionAllowed' property with value 'true'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Creating nested transaction with name ["</span> <span class="token operator">+</span> definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">useSavepointForNestedTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 默认走这，使用数据库Savepoint模拟嵌套事务</span>                DefaultTransactionStatus status <span class="token operator">=</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        debugEnabled<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                status<span class="token punctuation">.</span><span class="token function">createAndHoldSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 少数情况使用真正的嵌套事务，如JTA中可能嵌套 begin/commit 调用</span>                <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SYNCHRONIZATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">;</span>                DefaultTransactionStatus status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>                        definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED.</span>        <span class="token comment" spellcheck="true">// 传播策略为SUPPORTS 或 REQUIRED 或 MANDATORY</span>        <span class="token comment" spellcheck="true">// 这三个对已存在的事务处理方式是一致的，啥也不做，也就是直接加入已存在的事务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Participating in existing transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValidateExistingTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 校验当前传播策略的隔离等级和是否只读与已存在的事务是否一致，不过默认不校验。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> TransactionDefinition<span class="token punctuation">.</span>ISOLATION_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Integer currentIsolationLevel <span class="token operator">=</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">getCurrentTransactionIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>currentIsolationLevel <span class="token operator">==</span> null <span class="token operator">||</span> currentIsolationLevel <span class="token operator">!=</span> definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Constants isoConstants <span class="token operator">=</span> DefaultTransactionDefinition<span class="token punctuation">.</span>constants<span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span><span class="token string">"Participating transaction with definition ["</span> <span class="token operator">+</span>                            definition <span class="token operator">+</span> <span class="token string">"] specifies isolation level which is incompatible with existing transaction: "</span>                            <span class="token operator">+</span>                            <span class="token punctuation">(</span>currentIsolationLevel <span class="token operator">!=</span> null                                    <span class="token operator">?</span> isoConstants<span class="token punctuation">.</span><span class="token function">toCode</span><span class="token punctuation">(</span>currentIsolationLevel<span class="token punctuation">,</span>                                            DefaultTransactionDefinition<span class="token punctuation">.</span>PREFIX_ISOLATION<span class="token punctuation">)</span>                                    <span class="token operator">:</span> <span class="token string">"(unknown)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 校验只读属性</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>definition<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">isCurrentTransactionReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span><span class="token string">"Participating transaction with definition ["</span> <span class="token operator">+</span>                            definition <span class="token operator">+</span> <span class="token string">"] is not marked as read-only but existing transaction is"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建事务状态对象，参与已存在事务</span>        <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SYNCHRONIZATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 开启事物     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doBegin</span><span class="token punctuation">(</span>Object transaction<span class="token punctuation">,</span> TransactionDefinition definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DataSourceTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>DataSourceTransactionObject<span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 是否需要新建 Connection：满足任意一个条件即可</span>            <span class="token comment" spellcheck="true">// 1. 当前没有 ConnectionHolder（首次创建事务）</span>            <span class="token comment" spellcheck="true">// 2. 当前 ConnectionHolder 已参与过其他事务（如嵌套事务 REQUIRES_NEW 中旧连接已同步过）。此时不能复用旧连接，必须重新获取</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>txObject<span class="token punctuation">.</span><span class="token function">hasConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>                    txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Connection newCon <span class="token operator">=</span> <span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Acquired Connection ["</span> <span class="token operator">+</span> newCon <span class="token operator">+</span> <span class="token string">"] for JDBC transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectionHolder</span><span class="token punctuation">(</span>newCon<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 标记当前连接已参与事务同步</span>            txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 根据事务定义设置隔离级别，并记录旧值，事务完成后会恢复</span>            Integer previousIsolationLevel <span class="token operator">=</span> DataSourceUtils<span class="token punctuation">.</span><span class="token function">prepareConnectionForTransaction</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            txObject<span class="token punctuation">.</span><span class="token function">setPreviousIsolationLevel</span><span class="token punctuation">(</span>previousIsolationLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当前Connection设为手动提交。此时把事物提交的控制权交给了Spring</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                txObject<span class="token punctuation">.</span><span class="token function">setMustRestoreAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Switching JDBC Connection ["</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">"] to manual commit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// readOnly 设置</span>            <span class="token function">prepareTransactionalConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 标记事务为“激活”状态（事务已开启）</span>            txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTransactionActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置事务超时时间（单位：秒）</span>            <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token function">determineTimeout</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> TransactionDefinition<span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTimeoutInSeconds</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将当前 ConnectionHolder 绑定到线程上下文中（核心 ThreadLocal 操作）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果创建连接过程中出现异常，释放资源并清理 ConnectionHolder</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                DataSourceUtils<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> <span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CannotCreateTransactionException</span><span class="token punctuation">(</span><span class="token string">"Could not open JDBC Connection for transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 事物的commit判断，根据rollbackOnly字段也可能走rollback。（父类中AbstractPlatformTransactionManager的方法）     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 事务已完成（提交或回滚），不允许再次提交或回滚，属于非法状态</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>                    <span class="token string">"Transaction is already completed - do not call commit or rollback more than once per transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        DefaultTransactionStatus defStatus <span class="token operator">=</span> <span class="token punctuation">(</span>DefaultTransactionStatus<span class="token punctuation">)</span> status<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 标记为rollbackOnly的走强制回滚</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>defStatus<span class="token punctuation">.</span><span class="token function">isLocalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>defStatus<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Transactional code has requested rollback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">processRollback</span><span class="token punctuation">(</span>defStatus<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">shouldCommitOnGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> defStatus<span class="token punctuation">.</span><span class="token function">isGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前事务被标记为全局回滚，说明内部事务标记为回滚，但外层需要commit。</span>            <span class="token comment" spellcheck="true">// 所以会先回滚，再抛UnexpectedRollbackException异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>defStatus<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Global transaction is marked as rollback-only but transactional code requested commit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 出现了意外（外层commit，但内层rollback）unexpected为true</span>            <span class="token function">processRollback</span><span class="token punctuation">(</span>defStatus<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 正常事务提交流程</span>        <span class="token comment" spellcheck="true">// 1. 调用 beforeCommit 和 beforeCompletion 钩子</span>        <span class="token comment" spellcheck="true">// 2. 如果存在保存点（Savepoint）则处理嵌套事务</span>        <span class="token comment" spellcheck="true">// 3. 真正调用底层数据库事务管理器进行提交</span>        <span class="token comment" spellcheck="true">// 4. 调用 afterCommit 和 afterCompletion 钩子</span>        <span class="token comment" spellcheck="true">// 5. 捕获并处理提交中的异常</span>        <span class="token function">processCommit</span><span class="token punctuation">(</span>defStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PROPAGATION总结"><a href="#PROPAGATION总结" class="headerlink" title="PROPAGATION总结"></a>PROPAGATION总结</h4><blockquote><ol><li><p><strong>肯定派，必须存在事务</strong></p><table><thead><tr><th>传播行为</th><th>说明</th></tr></thead><tbody><tr><td><code>PROPAGATION_REQUIRED</code> （默认）</td><td>不存在就新建，存在就加入</td></tr><tr><td><code>PROPAGATION_REQUIRES_NEW</code></td><td><strong>始终新建一个事务，且与旧事物完全隔离</strong>。也就至少有两此commit或rollback。存在原事务时会将原事务封装为SuspendedResourcesHolder，再重新获取一个新的数据库连接开启事务，等这个新事物运行完，再把SuspendedResourcesHolder复原</td></tr><tr><td><code>PROPAGATION_NESTED</code></td><td>不存在就新建，存在就新开一个嵌套的事务。（先检查<strong>nestedTransactionAllowed，为false就抛异常了，代表不支持嵌套事务。不过默认为true</strong>。）和PROPAGATION_REQUIRES_NEW的区别在于这是用数据库的Savepoint实现，至始至终只会存在一个事务，如果当前回滚，也只会退回到Savepoint，不会对外层的事务造成影响，如果都能提交，最终也<strong>只有一次真正的事务commit</strong>。所以，注册的TransactionSynchronization hook函数也只会等待整个事务的结束来回调。如果不支持安全点（JTA），那实现就完全等于PROPAGATION_REQUIRES_NEW</td></tr><tr><td><code>PROPAGATION_MANDATORY</code></td><td>支持已存在的事务，<strong>不存在则直接抛异常</strong></td></tr></tbody></table></li><li><p><strong>中立派，不一定有事务</strong></p><table><thead><tr><th>传播行为</th><th>说明</th></tr></thead><tbody><tr><td><code>PROPAGATION_SUPPORTS</code></td><td>源码中并没有处理这种的传播策略。所以，它的作用是：存在事务就加入，不存在就以非事务的方式运行</td></tr></tbody></table></li><li><p><strong>否定派，不支持事务</strong></p><table><thead><tr><th>传播行为</th><th>说明</th></tr></thead><tbody><tr><td><code>PROPAGATION_NOT_SUPPORTED</code></td><td>以非事务的方式运行（<strong>有事务就暂停事务，重新获取一个没有事物的Connection使用</strong>。没有就啥也不做），实现和上面的差不多。<strong>但默认仍会注册事物同步器，让当前这个事物始终用同一个Connection</strong></td></tr><tr><td><code>PROPAGATION_NEVER</code></td><td>强制性的不支持事务，要是当前存在事务，就直接抛异常</td></tr></tbody></table></li></ol></blockquote><h2 id="TransactionSynchronizationManager"><a href="#TransactionSynchronizationManager" class="headerlink" title="TransactionSynchronizationManager"></a>TransactionSynchronizationManager</h2><p>​是Spring事物体系中的一个辅助工具，维护线程级事务上下文信息，保证事务行为在多层调用、事务传播、资源管理等场景中保持一致。</p><p>Spring 的事务是<strong>通过 AOP 管理的跨方法事务逻辑</strong>。Spring 需要有个<strong>全局但又线程安全的上下文</strong>去维护事务信息。如果没有它，则：</p><ul><li><p>不同方法无法共享事务资源（比如同一个 JDBC Connection）</p></li><li><p>无法实现事务传播（比如事务嵌套时决定是否复用原事务）</p></li><li><p>无法注册和触发事务的生命周期回调（如 <code>beforeCommit</code>、<code>afterCompletion</code>）</p></li></ul><h3 id="关键字段"><a href="#关键字段" class="headerlink" title="关键字段"></a>关键字段</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TransactionSynchronizationManager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 绑定到当前线程的资源，比如数据库连接（key 为 DataSource ，value 为ConnectionHolder）</span>    <span class="token comment" spellcheck="true">// Spring 在事务开始时绑定，在事务完成后解除绑定。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">>></span> resources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Transactional resources"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前线程注册的事务同步器集合（TransactionSynchronization），</span>    <span class="token comment" spellcheck="true">// 用于在事务生命周期各个阶段（如提交前、提交后、回滚后）执行hook回调。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Set<span class="token operator">&lt;</span>TransactionSynchronization<span class="token operator">>></span> synchronizations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>            <span class="token string">"Transaction synchronizations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前事务的名称（来自 TransactionDefinition#getName），通常用于日志记录和调试。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> currentTransactionName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>            <span class="token string">"Current transaction name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前事务是否被声明为只读，影响底层连接是否设置为只读模式（如 Connection#setReadOnly(true)）。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> currentTransactionReadOnly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>            <span class="token string">"Current transaction read-only status"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前事务的隔离级别（来自 TransactionDefinition）</span>    <span class="token comment" spellcheck="true">// 决定数据库访问的一致性级别，例如 READ_COMMITTED、REPEATABLE_READ 等。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Integer<span class="token operator">></span> currentTransactionIsolationLevel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>            <span class="token string">"Current transaction isolation level"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前事物是否被激活（即运行在有事物的情况下），不一定有commit或rollback的资格</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> actualTransactionActive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>            <span class="token string">"Actual transaction active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DataSourceUtils"><a href="#DataSourceUtils" class="headerlink" title="DataSourceUtils"></a>DataSourceUtils</h2><p>​前面我们分析了 Spring 事务的整体流程，但还有1个关键问题：<strong>在实际项目中，Spring 很少直接作为持久化框架，MyBatis、Hibernate 等才是执行数据库操作的主力</strong>。那么事务是 Spring 管的，数据库连接却是由 MyBatis 获取的，<strong>两者如何协同？</strong></p><p>这就引出了 <code>DataSourceUtils</code> 的作用：<strong>为持久层框架提供“Spring 管控下的连接”</strong>，确保它们获取到的 <code>Connection</code> 是当前事务中绑定的那个，这样事务控制（包括 commit&#x2F;rollback）才能正确生效。</p><h3 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceUtils</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">doGetConnection</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token string">"No DataSource specified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 尝试从 TransactionSynchronizationManager 中获取线程绑定的 ConnectionHolder</span>        <span class="token comment" spellcheck="true">// 只要TransactionSynchronizationManager.isSynchronizationActive()，都应该获取的是同一个ConnectionHolder</span>        ConnectionHolder conHolder <span class="token operator">=</span> <span class="token punctuation">(</span>ConnectionHolder<span class="token punctuation">)</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 如果当前线程中存在已关联的 ConnectionHolder 且已经持有连接，或者它被事务标记为已同步</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conHolder <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>conHolder<span class="token punctuation">.</span><span class="token function">hasConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> conHolder<span class="token punctuation">.</span><span class="token function">isSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 引用计数</span>            conHolder<span class="token punctuation">.</span><span class="token function">requested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果还没有设置具体的连接，则新建连接并设置到 holder 中（resume 的场景）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conHolder<span class="token punctuation">.</span><span class="token function">hasConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Fetching resumed JDBC Connection from DataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                conHolder<span class="token punctuation">.</span><span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token function">fetchConnection</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> conHolder<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// =============== 否则：没有事务，或没有绑定连接的事务 ==================</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Fetching JDBC Connection from DataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 获取一个新的物理连接（不在事务中或事务尚未绑定连接）</span>        Connection con <span class="token operator">=</span> <span class="token function">fetchConnection</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果当前事物的事物同步器被激活，则将上面获取的Connection也绑定到事物资源里。让当前事物始终用用一个Connection</span>        <span class="token comment" spellcheck="true">// 就算当前事物是NOT_SUPPORTED，默认也会缓存ConnectionHolder</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">isSynchronizationActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                ConnectionHolder holderToUse <span class="token operator">=</span> conHolder<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>holderToUse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    holderToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionHolder</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    holderToUse<span class="token punctuation">.</span><span class="token function">setConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                holderToUse<span class="token punctuation">.</span><span class="token function">requested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 注册一个事物同步器用于hook</span>                TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">registerSynchronization</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">ConnectionSynchronization</span><span class="token punctuation">(</span>holderToUse<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 标记该连接已参与事务同步</span>                holderToUse<span class="token punctuation">.</span><span class="token function">setSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 第一次调用时才绑定：DataSource -> ConnectionHolder</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>holderToUse <span class="token operator">!=</span> conHolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> holderToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">releaseConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> con<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Transactional注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-AbstractAdvisingBeanPostProcessor</title>
      <link href="/2021-02-17/spring-abstractadvisingbeanpostprocessor/"/>
      <url>/2021-02-17/spring-abstractadvisingbeanpostprocessor/</url>
      
        <content type="html"><![CDATA[<hr><p>​从源码分析了AbstractAdvisingBeanPostProcessor的作用，以及和直接将Advisor注入到容器中使用的区别</p><span id="more"></span><p>​<a href="https://blog.shanzhao.site/2021/02/08/spring-aop/">上一篇注解的切面自动代理</a></p><p>​简单来说<strong>这是一个用于将固定 <code>Advisor</code> 应用于 Bean 的通用基类</strong>，常用于实现基于注解的 AOP 功能（如异步、Validate）。核心子类有</p><ul><li><strong>AsyncAnnotationBeanPostProcessor</strong>：处理标注了 <code>@Async</code> 的方法，将其在调用时提交到线程池异步执行</li><li><strong>MethodValidationPostProcessor</strong>：支持 <code>@Validated</code> 注解，拦截方法调用并对方法参数和返回值执行 JSR-303 Bean Validation</li></ul><h2 id="核心作用"><a href="#核心作用" class="headerlink" title="核心作用"></a>核心作用</h2><ul><li>该类允许你通过定义一个固定的 <code>Advisor</code>（通过其 <code>advisor</code> 字段）来对目标 Bean 进行增强。</li><li><strong>并不主动创建代理</strong>（<strong>因为AnnotationAwareAspectJAutoProxyCreator具有最高的优先级，会最先对bean进行代理</strong>），而是<strong>在 Bean 已被代理的情况下</strong>，将该 <code>Advisor</code> 添加到现有的代理中，从而实现功能增强。</li></ul><p>​不主动创建代理是很好理解的，<strong>Spring 不希望对同一个 Bean 多次生成代理类（多个 CGLIB class 文件或多个 JDK proxy 实例），这不仅浪费资源，还会引发增强混乱</strong>。因此：</p><ul><li>Spring 通过设置 <code>AnnotationAwareAspectJAutoProxyCreator</code> 的最高优先级，<strong>统一负责生成代理对象</strong>。</li><li>后续如 <code>AsyncAnnotationBeanPostProcessor</code>、<code>MethodValidationPostProcessor</code> 等，只需<strong>向已创建的代理对象添加 Advisor</strong>，即向其 <code>AdvisedSupport#advisors</code> 中追加增强逻辑。</li><li>最终所有增强统一挂载在一个代理对象上，<strong>避免了重复代理、类污染与不必要的性能开销</strong>。</li></ul><h2 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAdvisingBeanPostProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">ProxyProcessorSupport</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 由子类设置的Advisot</span>    <span class="token keyword">protected</span> Advisor advisor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否需要将advisor放在整个代理链的最前，以达到最先执行的目的</span>    <span class="token comment" spellcheck="true">// 很有用，@Async会设置成true，从而让异步在第一个切面就开启，避免代理链在不同线程间切换</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> beforeExistingAdvisors <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// bean 初始化后的hook</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisor <span class="token operator">==</span> null <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">AopInfrastructureBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Ignore AOP infrastructure such as scoped proxies.</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断当前的bean是否已经是个代理类了</span>        <span class="token comment" spellcheck="true">// 已经是代理类的bean，就不需要再重新创建proxy，直接用现有的，把advisor加入到list中就行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">Advised</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Advised advised <span class="token operator">=</span> <span class="token punctuation">(</span>Advised<span class="token punctuation">)</span> bean<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 只有再当前proxy未frozen的情况下，且原始bean支持被代理才需要增强</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>advised<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isEligible</span><span class="token punctuation">(</span>AopUtils<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beforeExistingAdvisors<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 放最前面，最先执行</span>                    advised<span class="token punctuation">.</span><span class="token function">addAdvisor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 否则放最后</span>                    advised<span class="token punctuation">.</span><span class="token function">addAdvisor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> bean<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ======== 走到这表示这个bean没被代理或代理已被冻结，新开一个代理再包装这个bean，可能造成层层代理 =============</span>        <span class="token comment" spellcheck="true">// 判断当前的advisor能否对这个bean增强</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEligible</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ProxyFactory proxyFactory <span class="token operator">=</span> <span class="token function">prepareProxyFactory</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>proxyFactory<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">evaluateProxyInterfaces</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            proxyFactory<span class="token punctuation">.</span><span class="token function">addAdvisor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">customizeProxyFactory</span><span class="token punctuation">(</span>proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> proxyFactory<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token function">getProxyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// No proxy needed.</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 也很重要，它默认还是用AopUtils#canApply来判断能否代理这个bean</span>    <span class="token comment" spellcheck="true">// 但子类可以实现它，自定义的来判断能否代理bean</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isEligible</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">isEligible</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一点思考"><a href="#一点思考" class="headerlink" title="一点思考"></a>一点思考</h2><p>​其实向容器中注册一个Advisor也能达到和AbstractAdvisingBeanPostProcessor一样的目的，还更简单点。那为什么还要有AbstractAdvisingBeanPostProcessor呢？</p><p>​因为向容器中注册一个Advisor需要依赖自动代理，即<strong>AnnotationAwareAspectJAutoProxyCreator。这个BeanPostProcessor是比较重的，功能更强也意味着更复杂</strong>。如果我们完全不需要注解式的自动代理，而只需要对某个注解（如@Async）进行代理，那实现AbstractAdvisingBeanPostProcessor是更好的选择，<strong>它不依赖自动代理，独自就能完成指定Advisor的代理，更轻</strong></p><p>​所以，总结AbstractAdvisingBeanPostProcessor的优势：</p><ul><li><strong>不依赖自动代理器</strong>：它本身就是一个 BeanPostProcessor，可以独立完成代理创建</li><li><strong>只处理特定目标</strong>：可以通过内部的 <code>isEligible()</code> 方法自定义增强对象的筛选逻辑</li><li><strong>避免过度代理</strong>：避免引入全局自动代理，减少对容器中其他 bean 的干扰</li><li><strong>具备顺序控制能力</strong>：如 @Async 会将自身的 Advisor 放到代理链最前面，确保异步逻辑在最早执行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeanPostProcessor </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-AOP</title>
      <link href="/2021-02-08/spring-aop/"/>
      <url>/2021-02-08/spring-aop/</url>
      
        <content type="html"><![CDATA[<p>​从源码分析了Spring AOP的实现逻辑，以及利用arthas对代理class进行反编译以更加清晰的理解源码流程</p><span id="more"></span><h2 id="EnableAspectJAutoProxy"><a href="#EnableAspectJAutoProxy" class="headerlink" title="@EnableAspectJAutoProxy"></a>@EnableAspectJAutoProxy</h2><p>​其主要功能是<strong>向容器中注册AnnotationAwareAspectJAutoProxyCreator这个BeanDefinition，以此实现基于以下注解的代理功能</strong></p><table><thead><tr><th align="left">注解名</th><th>说明</th></tr></thead><tbody><tr><td align="left"><code>@Aspect</code></td><td>声明一个类是切面类</td></tr><tr><td align="left"><code>@Before</code></td><td>前置通知，目标方法执行前执行</td></tr><tr><td align="left"><code>@After</code></td><td>后置通知，目标方法执行后执行（无论是否异常）</td></tr><tr><td align="left"><code>@AfterReturning</code></td><td>返回通知，目标方法<strong>正常返回</strong>后执行</td></tr><tr><td align="left"><code>@AfterThrowing</code></td><td>异常通知，目标方法<strong>抛出异常</strong>时执行</td></tr><tr><td align="left"><code>@Around</code></td><td>环绕通知，<strong>完全控制目标方法执行的时机</strong>，可决定是否继续执行目标方法</td></tr><tr><td align="left"><code>@Pointcut</code></td><td>定义可复用的切点表达式，供上述注解引用</td></tr></tbody></table><h2 id="AnnotationAwareAspectJAutoProxyCreator"><a href="#AnnotationAwareAspectJAutoProxyCreator" class="headerlink" title="AnnotationAwareAspectJAutoProxyCreator"></a>AnnotationAwareAspectJAutoProxyCreator</h2><p>​Spring实现自动装配动态代理的Bean后置处理器，具有<strong>最高的执行优先级</strong>（表示是最先被执行的BeanPostProcessor。设置最高优先级的代码在org.springframework.aop.config.AopConfigUtils#registerOrEscalateApcAsRequired中）</p><h3 id="wrapIfNecessary"><a href="#wrapIfNecessary" class="headerlink" title="wrapIfNecessary"></a>wrapIfNecessary</h3><p>​bean进行包装（增强）的入口，它会在如下两个地方被调用</p><ul><li>postProcessAfterInitialization：常规的的bean初始化完成后hook，需要对bean进行代理并返回给容器</li><li>getEarlyBeanReference：针对循环依赖需要提前获取bean的引用。Spring 会在三级缓存中暴露“早期对象引用”。如果此 bean 需要 AOP，必须在这个阶段就包上代理，否则依赖方会拿到原始对象，导致切面失效。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> Object cacheKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 已经处理过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetSourcedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 无需增强的bean缓存判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 是一个基础设施类或者指定的不需要代理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查找这个bean能使用的所有Advisor</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors <span class="token operator">=</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>specificInterceptors <span class="token operator">!=</span> DO_NOT_PROXY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 存在增强器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建其代理</span>        Object proxy <span class="token operator">=</span> <span class="token function">createProxy</span><span class="token punctuation">(</span>                bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SingletonTargetSource</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>proxyTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当前bean不需要增强，缓存起来</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取Advisor阶段"><a href="#获取Advisor阶段" class="headerlink" title="获取Advisor阶段"></a>获取Advisor阶段</h3><p><strong>首先Advisor是什么？</strong></p><blockquote><p>​我理解为增强器，一个Advisor对应一个切面。既包含Advice，也包含过滤器（判断bean是否需要增强的东西）。所以能用一个Advisor来判断任意一个bean是否能被它增强，并提供增强的Advice。</p><p>​主要子接口为PointcutAdvisor，PointcutAdvisor提供了Pointcut，利用这个Pointcut即可以bean的class和method进行匹配看它是否能被增强。而Advisor获取的Advice则为真正执行代理方法的拦截器。</p></blockquote><h4 id="findCandidateAdvisors"><a href="#findCandidateAdvisors" class="headerlink" title="findCandidateAdvisors"></a>findCandidateAdvisors</h4><p>有两种如下获取Advisor的方式</p><ul><li><p>查找所有实现了Advisor接口的BeanDefinition，并对其进行实例化（这种一般都是框架注册的增强器）</p></li><li><p>注解方式：获取所有基于注解的切面bean，并进行实例化</p><blockquote><p>先拿到容器中所有Bean的beanName，再遍历这些beanName。通过BeanFactory获取当前beanName的Class，再判断Class上是否有@Aspect注解。如果存在@Aspect，就利用ReflectiveAspectJAdvisorFactory去解析这些Bean，<strong>将@Aspect Bean中的每个增强方法（如下注解，每个注解标注的方法就是一个增强方法）构造成一个Advisor（实现类为InstantiationModelAwarePointcutAdvisorImpl）</strong>，最后封装到List<Advisor>里，返回给上层</p></blockquote></li></ul><p><img src="https://img.shanzhao.site/file/1746536967525_spring-aspect-anno.png" alt="切面注解"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 查找spring内置的增强器（包括不限于事务、缓存等）</span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// aspectJAdvisorsBuilder不会为空，默认为BeanFactoryAspectJAdvisorsBuilderAdapter</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdvisorsBuilder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取所有的与@Aspect注解相关的Advisor</span>        advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdvisorsBuilder<span class="token punctuation">.</span><span class="token function">buildAspectJAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 父类中的findAdvisorBeans</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">findAdvisorBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先从缓存中找，没有再搜索</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> advisorNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cachedAdvisorBeanNames<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>advisorNames <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 缓存为空</span>        <span class="token comment" spellcheck="true">// 查找出所有实现了Advisor接口的BeanDefinition，并缓存</span>        advisorNames <span class="token operator">=</span> BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">beanNamesForTypeIncludingAncestors</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> Advisor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cachedAdvisorBeanNames <span class="token operator">=</span> advisorNames<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>advisorNames<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> advisorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEligibleBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Skipping currently created advisor '"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 尝试实例化这个Advisor Bean，并放入结果中</span>                    advisors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> Advisor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Throwable rootCause <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getMostSpecificCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootCause <span class="token keyword">instanceof</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        BeanCreationException bce <span class="token operator">=</span> <span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> rootCause<span class="token punctuation">;</span>                        String bceBeanName <span class="token operator">=</span> bce<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>bceBeanName <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>bceBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Skipping advisor '"</span> <span class="token operator">+</span> name <span class="token operator">+</span>                                        <span class="token string">"' with dependency on currently created bean: "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// Ignore: indicates a reference back to the bean we're trying to advise.</span>                            <span class="token comment" spellcheck="true">// We want to find advisors other than the currently created bean itself.</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// BeanFactoryAspectJAdvisorsBuilder#buildAspectJAdvisors方法，找出基于注解的切面</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">buildAspectJAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// @Aspect注解BeanName的缓存</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> aspectNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            aspectNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                aspectNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 获取所有beanName</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> beanNames <span class="token operator">=</span> BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">beanNamesForTypeIncludingAncestors</span><span class="token punctuation">(</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEligibleBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 获取这个bean的type</span>                    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 存在 org.aspectj.lang.annotation.Aspect 注解</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">isAspect</span><span class="token punctuation">(</span>beanType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        aspectNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        AspectMetadata amd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AspectMetadata</span><span class="token punctuation">(</span>beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 解析@Aspetc的value值，如果没有，默认kind就为SINGLETON</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>amd<span class="token punctuation">.</span><span class="token function">getAjType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPerClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> PerClauseKind<span class="token punctuation">.</span>SINGLETON<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            MetadataAwareAspectInstanceFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanFactoryAspectInstanceFactory</span><span class="token punctuation">(</span>                                    <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 解析标记 AspectJ 注解中的增强方法，并将每个切点方法都构造成一个Advisor</span>                            <span class="token comment" spellcheck="true">// 其实现类为InstantiationModelAwarePointcutAdvisorImpl</span>                            List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> classAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 缓存起来切面的解析结果</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span>advisorsCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> classAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>classAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// Per target or per this.</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                                        <span class="token string">"' is a singleton, but aspect instantiation model is not singleton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            MetadataAwareAspectInstanceFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrototypeAspectInstanceFactory</span><span class="token punctuation">(</span>                                    <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                            advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames <span class="token operator">=</span> aspectNames<span class="token punctuation">;</span>                <span class="token keyword">return</span> advisors<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有自定义的@Aspect，返回空</span>        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String aspectName <span class="token operator">:</span> aspectNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> cachedAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorsCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aspectName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedAdvisors <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cachedAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            MetadataAwareAspectInstanceFactory factory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aspectName<span class="token punctuation">)</span><span class="token punctuation">;</span>            advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="findAdvisorsThatCanApply"><a href="#findAdvisorsThatCanApply" class="headerlink" title="findAdvisorsThatCanApply"></a>findAdvisorsThatCanApply</h4><p>​将上面流程中获取到的所有Advisor做过滤，过滤出可以对当前bean进行增强的Advisor。核心方法在org.springframework.aop.support.AopUtils#canApply中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">canApply</span><span class="token punctuation">(</span>Pointcut pc<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">,</span> <span class="token keyword">boolean</span> hasIntroductions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>pc<span class="token punctuation">,</span> <span class="token string">"Pointcut must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pc<span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 先按类匹配，如果类都匹配不了，那直接就不需要代理了</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    MethodMatcher methodMatcher <span class="token operator">=</span> pc<span class="token punctuation">.</span><span class="token function">getMethodMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取方法匹配器</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>methodMatcher <span class="token operator">==</span> MethodMatcher<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// No need to iterate the methods if we're matching any method anyway...</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    IntroductionAwareMethodMatcher introductionAwareMethodMatcher <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>methodMatcher <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAwareMethodMatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        introductionAwareMethodMatcher <span class="token operator">=</span> <span class="token punctuation">(</span>IntroductionAwareMethodMatcher<span class="token punctuation">)</span> methodMatcher<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 目标类和其所有接口的集和</span>    Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Proxy<span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getUserClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    classes<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getAllInterfacesForClassAsSet</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">getAllDeclaredMethods</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对目标类和其所有接口的每个方法都进行匹配，只要能匹配上，就代表这个类可以增强，直接返回true</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>introductionAwareMethodMatcher <span class="token operator">!=</span> null                    <span class="token operator">?</span> introductionAwareMethodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> hasIntroductions<span class="token punctuation">)</span>                    <span class="token operator">:</span> methodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sortAdvisors"><a href="#sortAdvisors" class="headerlink" title="sortAdvisors"></a>sortAdvisors</h4><p>​源码就不分析了，直接说作用：它是 Spring AOP 中<strong>对多个 Advisor（增强器）进行排序</strong>的关键逻辑。它根据切面、通知类上的 <code>@Order</code> 注解或实现 <code>Ordered</code> 接口的优先级，对同一目标类或方法的所有 Advisor 进行排序。</p><p>​排序完成后，每个类或方法的增强器顺序就被固定下来。在运行时调用该方法时，AOP 拦截器链会<strong>严格按照这个顺序</strong>执行对应的切面逻辑，确保增强行为的预期一致性。</p><h3 id="开始增强（创建代理）"><a href="#开始增强（创建代理）" class="headerlink" title="开始增强（创建代理）"></a>开始增强（创建代理）</h3><h4 id="cglib-getProxy"><a href="#cglib-getProxy" class="headerlink" title="cglib getProxy"></a>cglib getProxy</h4><p>cglib的增强实现主要步骤总结</p><blockquote><ol><li><p>校验final方法（只是打个日志，final方法不能增强）</p></li><li><p>创建<strong>org.springframework.cglib.proxy.Enhancer</strong>（核心的cglib增强器）</p></li><li><p>对Enhancer进行一系列的填充，包括设置当前Class为增强类的父类。当前Class的所有接口，增强类也要实现。</p></li><li><p>设置增强Class的命名策略（BySpringCGLIB）</p></li><li><p>默认再将当前线程上下文的ClassLoader设为加载增强Class字节码的ClassLoader</p></li><li><p><strong>对Enhancer设置一些Callback，并设置固定的CallbackFilter（ProxyCallbackFilter）。</strong>非常重要：</p><p> <img src="https://img.shanzhao.site/file/1746541168408_spring-aop-callbacks.png" alt="Callback数组"></p><p> ​Callback数组（每一个Callback都是方法的拦截器）</p><p> <img src="https://img.shanzhao.site/file/1746541269170_spring-cglib-callbacks-index.png" alt="Callback数组索引"></p><p> ​Callback数组的索引（<strong>ProxyCallbackFilter#accept</strong>实现），用来确定被增强的类的每一个方法该使用具体的某个拦截器，返回的是拦截器的数组索引</p></li><li><p>生成增强Class的字节码并实例化（代理bean就产生了），将其返回</p></li></ol></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// CglibAopProxy的创建代理方法</span><span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating CGLIB proxy: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 上一个被代理的目标类class（有可能已经是cglib的代理类了）</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> rootClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>rootClass <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"Target class must be available for creating a CGLIB proxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 真正代理的目标类class</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> proxySuperClass <span class="token operator">=</span> rootClass<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isCglibProxyClass</span><span class="token punctuation">(</span>rootClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 已经是个cglib代理类了，就需要把真正被代理类的class和接口找出来</span>            proxySuperClass <span class="token operator">=</span> rootClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> additionalInterfaces <span class="token operator">=</span> rootClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> additionalInterface <span class="token operator">:</span> additionalInterfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">addInterface</span><span class="token punctuation">(</span>additionalInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 验证class的final相关方法并写日志</span>        <span class="token function">validateClassIfNecessary</span><span class="token punctuation">(</span>proxySuperClass<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建通用的增强器，准备增强了</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token function">createEnhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            enhancer<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token keyword">instanceof</span> <span class="token class-name">SmartClassLoader</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartClassLoader<span class="token punctuation">)</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isClassReloadable</span><span class="token punctuation">(</span>proxySuperClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                enhancer<span class="token punctuation">.</span><span class="token function">setUseCache</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 设置被代理类class为增强类的父类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>proxySuperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对增强类设置接口：Advised和SpringProxy</span>        enhancer<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span>AopProxyUtils<span class="token punctuation">.</span><span class="token function">completeProxiedInterfaces</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setNamingPolicy</span><span class="token punctuation">(</span>SpringNamingPolicy<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassLoaderAwareUndeclaredThrowableStrategy</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置拦截器（真正支持切面操作的拦截器）</span>        Callback<span class="token punctuation">[</span><span class="token punctuation">]</span> callbacks <span class="token operator">=</span> <span class="token function">getCallbacks</span><span class="token punctuation">(</span>rootClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>callbacks<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> types<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            types<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> callbacks<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 非常重要，就是通过这个filter来确定某个方法应该使用哪一个Callback的</span>        <span class="token comment" spellcheck="true">// 所以，代理类的任何一个方法只会用上一个Callback</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallbackFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProxyCallbackFilter</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getConfigurationOnlyCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fixedInterceptorMap<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fixedInterceptorOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallbackTypes</span><span class="token punctuation">(</span>types<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成代理类的class并实例化其对象</span>        <span class="token keyword">return</span> <span class="token function">createProxyClassAndInstance</span><span class="token punctuation">(</span>enhancer<span class="token punctuation">,</span> callbacks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CodeGenerationException</span> <span class="token operator">|</span> IllegalArgumentException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"Could not generate CGLIB subclass of "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">": Common causes of this problem include using a final class or a non-visible class"</span><span class="token punctuation">,</span>                ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TargetSource.getTarget() failed</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"Unexpected AOP exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jdk-getProxy"><a href="#jdk-getProxy" class="headerlink" title="jdk getProxy"></a>jdk getProxy</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// JdkDynamicAopProxy的创建代理方法，该代理的InvocationHandler就为JdkDynamicAopProxy本身</span><span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating JDK dynamic proxy: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 对增强类设置Interface：Advised和SpringProxy和DecoratingProxy</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> proxiedInterfaces <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">completeProxiedInterfaces</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">findDefinedEqualsAndHashCodeMethods</span><span class="token punctuation">(</span>proxiedInterfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> proxiedInterfaces<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调用阶段"><a href="#调用阶段" class="headerlink" title="调用阶段"></a>调用阶段</h3><h4 id="cglib-invoke"><a href="#cglib-invoke" class="headerlink" title="cglib invoke"></a>cglib invoke</h4><p><strong>cglib代理类中方法有切面时的调用重点流程分析（这时使用的Callback就是DynamicAdvisedInterceptor）</strong></p><ul><li><p><strong>获取方法对应的拦截器链</strong></p><blockquote><p> Spring 会调用 <code>AdvisorChainFactory#getInterceptorsAndDynamicInterceptionAdvice</code> 方法，为当前方法构建拦截器链。<br> 它会遍历所有注册的 <code>Advisor</code>，并依次通过其中的 <code>ClassFilter</code> 和 <code>MethodMatcher</code> 判断当前方法是否匹配。如果匹配，就将该 <code>Advisor</code> 对应的拦截器（<code>MethodInterceptor</code>）加入到列表中，并最终缓存该方法与其拦截器链的映射关系。</p></blockquote></li><li><p><strong>触发代理方法调用</strong></p><blockquote><p>如果目标类采用了 CGLIB 代理（<code>proxyTargetClass = true</code>），则在调用代理对象方法时，会进入 <code>CglibAopProxy.DynamicAdvisedInterceptor#intercept</code> 方法。</p></blockquote></li><li><p><strong>构造并执行拦截链</strong></p><blockquote><p>Spring 会构造一个 <code>CglibMethodInvocation</code> 对象，它是 <code>ReflectiveMethodInvocation</code> 的子类，封装了目标对象、方法、参数、拦截器链等执行上下文。<br> 调用 <code>proceed()</code> 方法开始执行拦截链。</p></blockquote></li><li><p><strong>依次执行拦截器</strong></p><blockquote><p><code>proceed()</code> 方法会通过内部字段 <code>currentInterceptorIndex</code>（初始值为 -1）递增索引，按顺序执行拦截器链中的下一个 <code>MethodInterceptor</code>。<br> 每个拦截器如果调用了 <code>invocation.proceed()</code>，则控制权会继续传递给下一个拦截器，实现“链式调用”。</p></blockquote></li><li><p><strong>执行原始方法</strong></p><blockquote><p>当所有拦截器都执行完后（即 <code>currentInterceptorIndex &gt;= interceptors.size()</code>），会最终调用原始目标对象的实际方法，实现增强与目标方法的结合。</p></blockquote></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DynamicAdvisedInterceptor#intercept的入口</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Object oldProxy <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Object target <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 先准备目标对象源（调用原bean方法时会用到）</span>    TargetSource targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在当前线程上下文中设置了需要暴露代理，就要设置到当前线程ThreadLocal中</span>            <span class="token comment" spellcheck="true">// 就是用来解决方法内部需要调用代理方法</span>            oldProxy <span class="token operator">=</span> AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取真实的，不是代理的目标对象</span>        <span class="token comment" spellcheck="true">// 例：Session域从SimpleBeanTargetSource中获取，再转到BeanFactory，再转到SessionScope中，获取目标对象</span>        target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">?</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对当前方法构造切面链并缓存</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object retVal<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 无切面，且方法为public，直接调用原方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            retVal <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 存在切面，构造方法调用器并执行</span>            retVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> methodProxy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        retVal <span class="token operator">=</span> <span class="token function">processReturnType</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> retVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 方法代理全部执行完毕，恢复执行前的现场</span>            AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jdk-invoke"><a href="#jdk-invoke" class="headerlink" title="jdk invoke"></a>jdk invoke</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Object oldProxy <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    TargetSource targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>targetSource<span class="token punctuation">;</span>    Object target <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一些通用方法的处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>equalsDefined <span class="token operator">&amp;&amp;</span> AopUtils<span class="token punctuation">.</span><span class="token function">isEqualsMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>hashCodeDefined <span class="token operator">&amp;&amp;</span> AopUtils<span class="token punctuation">.</span><span class="token function">isHashCodeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DecoratingProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">ultimateTargetClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// opaque为false，且该方法的类为实现了Advised的接口，则使用advised字段调用该方法</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>opaque <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>Advised<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Service invocations on ProxyConfig with the proxy config...</span>            <span class="token keyword">return</span> AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Object retVal<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 需要暴露当前proxy，以便在本类中调用代理方法</span>            oldProxy <span class="token operator">=</span> AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">?</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取这个方法的所有拦截链</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 拦截链为空，则直接调用原方法</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            retVal <span class="token operator">=</span> AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 构造ReflectiveMethodInvocation，准备走代理方法了</span>            MethodInvocation invocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span>                    chain<span class="token punctuation">)</span><span class="token punctuation">;</span>            retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 处理返回值类型</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> retVal <span class="token operator">==</span> target <span class="token operator">&amp;&amp;</span>                returnType <span class="token operator">!=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span>RawTargetAccess<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            retVal <span class="token operator">=</span> proxy<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> returnType <span class="token operator">!=</span> Void<span class="token punctuation">.</span>TYPE <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopInvocationException</span><span class="token punctuation">(</span>                    <span class="token string">"Null return value from advice does not match primitive return type for: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 恢复现场，移除当前线程上下文中的proxy</span>            AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ReflectiveMethodInvocation"><a href="#ReflectiveMethodInvocation" class="headerlink" title="ReflectiveMethodInvocation"></a>ReflectiveMethodInvocation</h4><p>​Spring AOP 的cglib和jdk代理都会用到的数据结构。是 <strong>方法拦截链执行的核心实现类</strong>。每当调用代理类中的方法时，都会构造一个ReflectiveMethodInvocation对象，内部封装了一个方法调用的上下文，包括目标对象、目标方法、方法参数、拦截器链等。核心是通过调用 <code>proceed()</code> 方法按顺序执行所有拦截器，最终调用目标方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectiveMethodInvocation</span> <span class="token keyword">implements</span> <span class="token class-name">ProxyMethodInvocation</span><span class="token punctuation">,</span> Cloneable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 用于记录当前执行到第几个拦截器</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currentInterceptorIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进行动态增强器的匹配判断，执行拦截器，和传播的实现</span>    <span class="token keyword">public</span> Object <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行完所有增强方法后执行切点方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">invokeJoinpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取下一个要执行的拦截器</span>        Object interceptorOrInterceptionAdvice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用拦截器方法时，都需要将this作为参数传递以保证当前拦截能传播给后面的增强器（proceed方法）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptorOrInterceptionAdvice <span class="token keyword">instanceof</span> <span class="token class-name">InterceptorAndDynamicMethodMatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 动态匹配的增强器，需要进行动态参数匹配</span>            InterceptorAndDynamicMethodMatcher dm <span class="token operator">=</span> <span class="token punctuation">(</span>InterceptorAndDynamicMethodMatcher<span class="token punctuation">)</span> interceptorOrInterceptionAdvice<span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetClass <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetClass <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dm<span class="token punctuation">.</span>methodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 匹配，执行拦截器</span>                <span class="token keyword">return</span> dm<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 匹配失败就不执行拦截器，触发下一个拦截器的判断和执行</span>                <span class="token keyword">return</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 非动态拦截器，比如事务的TransactionInterceptor，和异步的 AnnotationAsyncExecutionInterceptor等等</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>MethodInterceptor<span class="token punctuation">)</span> interceptorOrInterceptionAdvice<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​不论是cglib还是jdk的增强，增强的实现都可以总结为<strong>对原方法可使用的Advisor的收集，再构造成ReflectiveMethodInvocation，由ReflectiveMethodInvocation去进行动态增强器（一般都和参数有关）的判断，执行拦截器和拦截的传播</strong>。<br>​且Spring都会默认对代理bean实现两个接口（代码实现在AopProxyUtils#completeProxiedInterfaces中），分别是<strong>SpringProxy和Advised</strong>。SpringProxy用来表示当前bean已经被spring的增强了，而Advised则可以用来拿到原始bean（所以，要在代理bean中拿到原始bean，直接将代理bean强转为Advised，再利用其getTargetSource方法得到原始非代理bean）</p><h3 id="AOP测试"><a href="#AOP测试" class="headerlink" title="AOP测试"></a>AOP测试</h3><p>被增强的class，其中@BizLog是注解切面，切面类为LogInterceptor，用来做日志打印的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> site<span class="token punctuation">.</span>shanzhao<span class="token punctuation">;</span><span class="token keyword">import</span> site<span class="token punctuation">.</span>shanzhao<span class="token punctuation">.</span>BizLog<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Transactional<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringAopDemo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@BizLog</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aopMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aopMethod run..............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notAopMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"notAopMethod run..............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="arthas解密"><a href="#arthas解密" class="headerlink" title="arthas解密"></a>arthas解密</h4><h5 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h5><ul><li><p><strong>sc -d site.shanzhao.SpringAopDemo</strong>：查看指定的class加载信息（这里有两个class信息，增强class和源class，我这里只关心增强的class）</p><blockquote><p>重点观察interfaces这一行，可以发现这个代理类实现了3个接口，分别为SpringProxy，Advised和Factory</p></blockquote></li></ul><pre><code> class-info        site.shanzhao.SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60 code-source       /Users/shanzhao/IdeaProjects/soil/target/classes/ name              site.shanzhao.SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60 isInterface       false isAnnotation      false isEnum            false isAnonymousClass  false isArray           false isLocalClass      false isMemberClass     false isPrimitive       false isSynthetic       false simple-name       SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60 modifier          public annotation interfaces        org.springframework.aop.SpringProxy,org.springframework.aop.framework.Advised,org.springframework.cglib.proxy.Factory super-class       +-site.shanzhao.SpringAopDemo                     +-java.lang.Object class-loader      +-sun.misc.Launcher$AppClassLoader@18b4aac2                     +-sun.misc.Launcher$ExtClassLoader@13fee20c classLoaderHash   18b4aac2</code></pre><h5 id="jad"><a href="#jad" class="headerlink" title="jad"></a>jad</h5><ul><li><strong>jad site.shanzhao.SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60</strong>：使用jad反编译代理class，这里只展示出了重点代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// package site.shanzhao;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aopalliance<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>Advice<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>Advisor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>SpringProxy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>TargetClassAware<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>TargetSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>Advised<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>AopConfigException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ReflectUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Signature<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Callback<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Dispatcher<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Factory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodProxy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>NoOp<span class="token punctuation">;</span><span class="token keyword">import</span> site<span class="token punctuation">.</span>shanzhao<span class="token punctuation">.</span>SpringAopDemo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringAopDemo</span>$$EnhancerBySpringCGLIB$$6d7e1f60        <span class="token keyword">extends</span> <span class="token class-name">SpringAopDemo</span>        <span class="token keyword">implements</span> <span class="token class-name">SpringProxy</span><span class="token punctuation">,</span>        Advised<span class="token punctuation">,</span>        Factory <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> CGLIB$BOUND<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object CGLIB$FACTORY_DATA<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal CGLIB$THREAD_CALLBACKS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Callback<span class="token punctuation">[</span><span class="token punctuation">]</span> CGLIB$STATIC_CALLBACKS<span class="token punctuation">;</span>    <span class="token keyword">private</span> MethodInterceptor CGLIB$CALLBACK_0<span class="token punctuation">;</span>    <span class="token keyword">private</span> MethodInterceptor CGLIB$CALLBACK_1<span class="token punctuation">;</span>    <span class="token keyword">private</span> NoOp CGLIB$CALLBACK_2<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dispatcher CGLIB$CALLBACK_3<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dispatcher CGLIB$CALLBACK_4<span class="token punctuation">;</span>    <span class="token keyword">private</span> MethodInterceptor CGLIB$CALLBACK_5<span class="token punctuation">;</span>    <span class="token keyword">private</span> MethodInterceptor CGLIB$CALLBACK_6<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 为org.springframework.aop.framework.Advised的接口，内部直接使用4号callback转化为ProxyFactory对象再调用目标方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> TargetSource <span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dispatcher dispatcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_4<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dispatcher <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_4<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Advised<span class="token punctuation">)</span> dispatcher<span class="token punctuation">.</span><span class="token function">loadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// aop增强的方法，使用0号callback进行处理，实现类为DynamicAdvisedInterceptor。</span>    <span class="token comment" spellcheck="true">// 应该有两个适合这个方法的Advisor，一个是@BizLog的LogInterceptor切面，另一个是事物切面</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">aopMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodInterceptor methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object object <span class="token operator">=</span> methodInterceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CGLIB$aopMethod$<span class="token number">0</span>$Method<span class="token punctuation">,</span> CGLIB$emptyArgs<span class="token punctuation">,</span>                    CGLIB$aopMethod$<span class="token number">0</span>$Proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">aopMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 未增强的方法，同样使用0号callback进行处理，但却不会有适合这个方法的Advisor</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">notAopMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodInterceptor methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object object <span class="token operator">=</span> methodInterceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CGLIB$notAopMethod$<span class="token number">1</span>$Method<span class="token punctuation">,</span> CGLIB$emptyArgs<span class="token punctuation">,</span>                    CGLIB$notAopMethod$<span class="token number">1</span>$Proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">notAopMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Object的equals方法，使用5号callback处理，实现类为EqualsInterceptor</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodInterceptor methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_5<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_5<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object object2 <span class="token operator">=</span> methodInterceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CGLIB$equals$<span class="token number">2</span>$Method<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> object <span class="token punctuation">}</span><span class="token punctuation">,</span>                    CGLIB$equals$<span class="token number">2</span>$Proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> object2 <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> object2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="debug下代理类的信息"><a href="#debug下代理类的信息" class="headerlink" title="debug下代理类的信息"></a>debug下代理类的信息</h4><pre><code>这是从容器中直接获取SpringAopDemo这个class得到的对象，也就是代理类而不是源对象</code></pre><p><img src="https://img.shanzhao.site/file/1746685312097_spring-aop-proxy-inner.png" alt="spring-aop-proxy-inner.png"></p><p>重点信息已用红框框处，逐个分析</p><ul><li><strong>CGLIB$CALLBACK_0</strong>：通用拦截器，有切面和没有切面的普通方法方法都会用</li><li><strong>advised</strong>：实现为org.springframework.aop.framework.ProxyFactory。是 Spring AOP 中封装代理创建逻辑的核心工具类，实现了 <code>Advised</code> 接口。它通过维护一系列配置和内部结构，完成对目标对象的<strong>方法级别增强</strong>。<ul><li><strong>targetSource</strong>：内部封装了源对象，可以将当前代理类强转为Advised，在调用其getTargetSource方法获取到源对象</li><li><strong>methodCache</strong>：缓存方法与其对应增强（Advisor）链的映射，加快方法调用时的拦截查找过程。<ul><li>notAopMethod：没有切面，所以size&#x3D;0</li><li>aopMethod：有两个切面，缓存的size&#x3D;2</li></ul></li><li><strong>advisor</strong>：代理类所有的Advisor</li><li><strong>proxyTargetClass</strong>：是否直接代理的目标class。为true则表示cglib proxy，fasle则是jdk proxy</li><li><strong>exposeProxy</strong>：是否将当前代理暴露到 <code>ThreadLocal</code> 上下文中，允许在目标对象内部通过 <code>AopContext.currentProxy()</code> 获取自身代理对象，用于内部方法调用也能被增强。</li><li><strong>frozen</strong>：表示配置是否被冻结。默认为false，支持在运行时动态添加或移除 <code>Advisor</code>。如果设置为 <code>true</code>，配置将被锁定，并跳过 <code>methodCache</code> 的清理逻辑以提升性能。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeanPostProcessor </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-@Resource和@Autowired的分析</title>
      <link href="/2021-01-18/spring-resource-he-autowired-de-fen-xi/"/>
      <url>/2021-01-18/spring-resource-he-autowired-de-fen-xi/</url>
      
        <content type="html"><![CDATA[<hr><p>​从源码分析了@Resource和@Autowired的依赖创建流程和这两个注解的的异同</p><span id="more"></span><p>紧接上篇文章<a href="https://blog.shanzhao.site/2021/01/14/spring-bean-de-zi-duan-tian-chong-jie-duan-chu-li/">Spring-Bean的字段填充阶段相关处理器</a></p><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><p>​CommonAnnotationBeanPostProcessor#autowireResource部分核心源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token keyword">instanceof</span> <span class="token class-name">AutowireCapableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  AutowireCapableBeanFactory beanFactory <span class="token operator">=</span> <span class="token punctuation">(</span>AutowireCapableBeanFactory<span class="token punctuation">)</span> factory<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// field依赖会构建成LookupDependencyDescriptor，required只能为true</span>  DependencyDescriptor descriptor <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getDependencyDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// byType</span>  <span class="token comment" spellcheck="true">// 当不设置@Resource.name字段值，以字段名作为beanName的Bean不在容器中</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fallbackToDefaultTypeMatch <span class="token operator">&amp;&amp;</span> element<span class="token punctuation">.</span>isDefaultName <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>factory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    autowiredBeanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析依赖bean</span>    resource <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">resolveDependency</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getLookupType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"No resolvable resource object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// byName</span>    resource <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">resolveBeanByName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    autowiredBeanNames <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>​AutowiredFieldElement#resolveFieldValue部分核心源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 此时required可由我们定义，表示这个bean不再是必须存在的</span>DependencyDescriptor desc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DependencyDescriptor</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>required<span class="token punctuation">)</span><span class="token punctuation">;</span>desc<span class="token punctuation">.</span><span class="token function">setContainingClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> autowiredBeanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>beanFactory <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"No BeanFactory available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>TypeConverter typeConverter <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object value<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 解析依赖bean，只有byType</span>  value <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">resolveDependency</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> typeConverter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsatisfiedDependencyException</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InjectionPoint</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="公共的解析源码"><a href="#公共的解析源码" class="headerlink" title="公共的解析源码"></a>公共的解析源码</h2><h3 id="AutowireCapableBeanFactory-resolveDependency"><a href="#AutowireCapableBeanFactory-resolveDependency" class="headerlink" title="AutowireCapableBeanFactory#resolveDependency"></a>AutowireCapableBeanFactory#resolveDependency</h3><p>主要流程：</p><blockquote><ol><li>判断注入点是否标注了 <code>@Lazy</code>，如有，则返回懒加载代理对象；</li><li>若标注了 <code>@Value</code>，解析其占位符表达式并进行类型转换；</li><li>判断依赖类型，若是集合类型（如 List、Map、Stream 、数组等），则调用 <code>resolveMultipleBeans</code> 获取所有候选</li><li>若为单个 Bean 类型，则根据类型查找候选 Bean，结合 <code>@Qualifier</code>、<code>@Primary</code>、<code>@Priority</code> 等注解进行筛选；</li><li>若无匹配 Bean，是否抛出异常由 <code>required</code> 属性决定。</li></ol></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">resolveDependency</span><span class="token punctuation">(</span>DependencyDescriptor descriptor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String requestingBeanName<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> autowiredBeanNames<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> TypeConverter typeConverter<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>  descriptor<span class="token punctuation">.</span><span class="token function">initParameterNameDiscovery</span><span class="token punctuation">(</span><span class="token function">getParameterNameDiscoverer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Optional<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 处理类型为Optional</span>    <span class="token keyword">return</span> <span class="token function">createOptionalDependency</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectFactory<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>      ObjectProvider<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DependencyObjectProvider</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>javaxInjectProviderClass <span class="token operator">==</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jsr330Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createDependencyProvider</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否有@Lazy注解。使用了@Lazy则在这里直接创建了代理对象并返回</span>    Object result <span class="token operator">=</span> <span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLazyResolutionProxyIfNecessary</span><span class="token punctuation">(</span>        descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 开始获取依赖bean</span>      result <span class="token operator">=</span> <span class="token function">doResolveDependency</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> typeConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> Object <span class="token function">doResolveDependency</span><span class="token punctuation">(</span>DependencyDescriptor descriptor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String beanName<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> autowiredBeanNames<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> TypeConverter typeConverter<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>  InjectionPoint previousInjectionPoint <span class="token operator">=</span> ConstructorResolver<span class="token punctuation">.</span><span class="token function">setCurrentInjectionPoint</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    Object shortcut <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">resolveShortcut</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shortcut <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> shortcut<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> type <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析@Value注解</span>    Object value <span class="token operator">=</span> <span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuggestedValue</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String strVal <span class="token operator">=</span> <span class="token function">resolveEmbeddedValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanDefinition bd <span class="token operator">=</span> <span class="token punctuation">(</span>beanName <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">containsBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">?</span>            <span class="token function">getMergedBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> <span class="token function">evaluateBeanDefinitionString</span><span class="token punctuation">(</span>strVal<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TypeConverter converter <span class="token operator">=</span> <span class="token punctuation">(</span>typeConverter <span class="token operator">!=</span> null <span class="token operator">?</span> typeConverter <span class="token operator">:</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> converter<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> type<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">getTypeDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedOperationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// A custom TypeConverter which does not support TypeDescriptor resolution...</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span>            converter<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> type<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>            converter<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> type<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">getMethodParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 先进行多bean解析</span>    Object multipleBeans <span class="token operator">=</span> <span class="token function">resolveMultipleBeans</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> typeConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>multipleBeans <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 多bean解析出来了则直接返回</span>      <span class="token keyword">return</span> multipleBeans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将这个type所有的可能bean都解析出来</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> matchingBeans <span class="token operator">=</span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> type<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没找到</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRequired</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如过required为true，会直接跑异常</span>        <span class="token comment" spellcheck="true">// 只有@Autowired才可设置required为false</span>        <span class="token function">raiseNoMatchingBeanFound</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ====== 走到这表示这个bean是单个的，需要再根据其他注解来返回一个优先级最高的bean ======</span>    <span class="token comment" spellcheck="true">// 最终的依赖beanName</span>    String autowiredBeanName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最终的依赖bean实例</span>    Object instanceCandidate<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 存在多个候选bean</span>      <span class="token comment" spellcheck="true">// 会先根据@Primary注解筛选，否则根据@Priority筛选出优先级最高的bean</span>      autowiredBeanName <span class="token operator">=</span> <span class="token function">determineAutowireCandidate</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanName <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 异常处理，根据required选择是否跑异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRequired</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">indicatesMultipleBeans</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> descriptor<span class="token punctuation">.</span><span class="token function">resolveNotUnique</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> matchingBeans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      instanceCandidate <span class="token operator">=</span> matchingBeans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只有1个候选bean</span>      Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">=</span> matchingBeans<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      autowiredBeanName <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      instanceCandidate <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      autowiredBeanNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceCandidate <span class="token keyword">instanceof</span> <span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      instanceCandidate <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">resolveCandidate</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object result <span class="token operator">=</span> instanceCandidate<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">NullBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRequired</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">raiseNoMatchingBeanFound</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      result <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isAssignableValue</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">,</span> type<span class="token punctuation">,</span> instanceCandidate<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">finally</span> <span class="token punctuation">{</span>    ConstructorResolver<span class="token punctuation">.</span><span class="token function">setCurrentInjectionPoint</span><span class="token punctuation">(</span>previousInjectionPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DefaultListableBeanFactory-resolveMultipleBeans"><a href="#DefaultListableBeanFactory-resolveMultipleBeans" class="headerlink" title="DefaultListableBeanFactory#resolveMultipleBeans"></a>DefaultListableBeanFactory#resolveMultipleBeans</h3><p>​支持注入类型为 <code>Collection&lt;T&gt;</code>、<code>Map&lt;String, T&gt;</code>、<code>T[]</code> 和 <code>Stream&lt;T&gt;</code> 的多 Bean 依赖。该方法会查找所有匹配的候选 Bean，按类型筛选、处理限定符（如 <code>@Qualifier</code>），并封装成目标集合类型返回。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**处理依赖bean的type是一个容器的情况。可能为 数组、集合、Map甚至Stream*/</span><span class="token keyword">private</span> Object <span class="token function">resolveMultipleBeans</span><span class="token punctuation">(</span>DependencyDescriptor descriptor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String beanName<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> autowiredBeanNames<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> TypeConverter typeConverter<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> type <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>descriptor <span class="token keyword">instanceof</span> <span class="token class-name">StreamDependencyDescriptor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// type = Stream</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> matchingBeans <span class="token operator">=</span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> type<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      autowiredBeanNames<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Stream<span class="token operator">&lt;</span>Object<span class="token operator">></span> stream <span class="token operator">=</span> matchingBeans<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> descriptor<span class="token punctuation">.</span><span class="token function">resolveCandidate</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>bean <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span><span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">NullBean</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>StreamDependencyDescriptor<span class="token punctuation">)</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOrdered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stream <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token function">adaptOrderComparator</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stream<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// type = 数组</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> componentType <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ResolvableType resolvableType <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resolvedArrayType <span class="token operator">=</span> resolvableType<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedArrayType <span class="token operator">!=</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>      componentType <span class="token operator">=</span> resolvableType<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>componentType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> matchingBeans <span class="token operator">=</span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> componentType<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MultiElementDescriptor</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      autowiredBeanNames<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    TypeConverter converter <span class="token operator">=</span> <span class="token punctuation">(</span>typeConverter <span class="token operator">!=</span> null <span class="token operator">?</span> typeConverter <span class="token operator">:</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object result <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resolvedArrayType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Comparator<span class="token operator">&lt;</span>Object<span class="token operator">></span> comparator <span class="token operator">=</span> <span class="token function">adaptDependencyComparator</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> result<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Collection<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// type = 集合</span>    <span class="token comment" spellcheck="true">// 解析出这个bean的范型type</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> elementType <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolveGeneric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 找出匹配范型type的候选bean</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> matchingBeans <span class="token operator">=</span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> elementType<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MultiElementDescriptor</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      autowiredBeanNames<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    TypeConverter converter <span class="token operator">=</span> <span class="token punctuation">(</span>typeConverter <span class="token operator">!=</span> null <span class="token operator">?</span> typeConverter <span class="token operator">:</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object result <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Comparator<span class="token operator">&lt;</span>Object<span class="token operator">></span> comparator <span class="token operator">=</span> <span class="token function">adaptDependencyComparator</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// type = Map</span>    ResolvableType mapType <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> keyType <span class="token operator">=</span> mapType<span class="token punctuation">.</span><span class="token function">resolveGeneric</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">!=</span> keyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 解析出Map中value的type</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> valueType <span class="token operator">=</span> mapType<span class="token punctuation">.</span><span class="token function">resolveGeneric</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>valueType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对value type进行bean搜索，返回</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> matchingBeans <span class="token operator">=</span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> valueType<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MultiElementDescriptor</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      autowiredBeanNames<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> matchingBeans<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DefaultListableBeanFactory-findAutowireCandidates"><a href="#DefaultListableBeanFactory-findAutowireCandidates" class="headerlink" title="DefaultListableBeanFactory#findAutowireCandidates"></a>DefaultListableBeanFactory#findAutowireCandidates</h3><p>​<code>DefaultListableBeanFactory#findAutowireCandidates</code> 用于查找参数中 beanName（如 Bean A）所依赖的、类型为 <code>requiredType</code> 的所有候选 Bean（如 Bean B）。返回结果为一个 <code>Map&lt;String, Object&gt;</code>，其中 <code>key</code> 是候选 Bean 的名称，<code>value</code> 是对应的实例。</p><p>​方法内部会先在 BeanFactory 中找出所有类型匹配 <code>requiredType</code> 的 Bean 名称，然后根据限定注解（如 <code>@Qualifier</code>）等条件进行筛选。筛选通过的候选 Bean 会被递归创建并作为依赖返回。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>    <span class="token annotation punctuation">@Nullable</span> String beanName<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> requiredType<span class="token punctuation">,</span> DependencyDescriptor descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 找出这个type所有的beanName</span>  <span class="token comment" spellcheck="true">// 内部就是遍历BeanFactory中所有的BeanDefinition，依次进行type匹配判断，在收集结果并缓存</span>  String<span class="token punctuation">[</span><span class="token punctuation">]</span> candidateNames <span class="token operator">=</span> BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">beanNamesForTypeIncludingAncestors</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">isEager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>candidateNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 一些特殊bean的处理，比如ApplicationContext之类的bean</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Object<span class="token operator">></span> classObjectEntry <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resolvableDependencies<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> autowiringType <span class="token operator">=</span> classObjectEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiringType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Object autowiringValue <span class="token operator">=</span> classObjectEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      autowiringValue <span class="token operator">=</span> AutowireUtils<span class="token punctuation">.</span><span class="token function">resolveAutowiringValue</span><span class="token punctuation">(</span>autowiringValue<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>autowiringValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">identityToString</span><span class="token punctuation">(</span>autowiringValue<span class="token punctuation">)</span><span class="token punctuation">,</span> autowiringValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 依次判断每个候选beanName，看其是否有资格成为真正的目标bean</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>String candidate <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 非自引用，isAutowireCandidate最终会调用到QualifierAnnotationAutowireCandidateResolver#isAutowireCandidate方法，根据@Qualifier注解来判断是否是目标bean</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSelfReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 目标bean，会使用BeanFactory来获取这个bean。实现递归创建bean</span>      <span class="token function">addCandidateEntry</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> candidate<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 上面的流程没找到，则进行fallback放宽条件继续找</span>    <span class="token keyword">boolean</span> multiple <span class="token operator">=</span> <span class="token function">indicatesMultipleBeans</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>    DependencyDescriptor fallbackDescriptor <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">forFallbackMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String candidate <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSelfReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> fallbackDescriptor<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span><span class="token operator">!</span>multiple <span class="token operator">||</span> <span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasQualifier</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addCandidateEntry</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> candidate<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 继续放宽条件</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String candidate <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSelfReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>descriptor <span class="token keyword">instanceof</span> <span class="token class-name">MultiElementDescriptor</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> fallbackDescriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">addCandidateEntry</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> candidate<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="两个注解总结"><a href="#两个注解总结" class="headerlink" title="两个注解总结"></a>两个注解总结</h2><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><ul><li>都支持容器类型的Bean解析（比如<strong>Stream，数组，集合，Map</strong>）</li><li>都支持<code>@Lazy</code>，<code>@Qualifier</code>，<code>@Value</code>等注解</li><li>都支持字段、方法参数</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li><strong>@Autowired可以设置required为false，即不强制需要这个bean</strong>。而@Resource则必须要对应的bean存在</li><li><strong>@Resource由javax提供，是集byName和byType为一体的注解。框架无关，属于 Java 官方对 IOC 容器的通用约定</strong>。在Spring中，当没设置@Resource的name，并且由框架解析出来的name（字段名or去掉set的方法名）不在容器中才会使用byType</li><li><strong>@Autowired本身只能byType，搭配@Qualifier才可实现byName</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeanPostProcessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Bean的字段填充阶段处理</title>
      <link href="/2021-01-14/spring-bean-de-zi-duan-tian-chong-jie-duan-chu-li/"/>
      <url>/2021-01-14/spring-bean-de-zi-duan-tian-chong-jie-duan-chu-li/</url>
      
        <content type="html"><![CDATA[<hr><p>​对CommonAnnotationBeanPostProcessor和AutowiredAnnotationBeanPostProcessor从源码分析了其依赖的解析、创建流程</p> <span id="more"></span><h2 id="CommonAnnotationBeanPostProcessor"><a href="#CommonAnnotationBeanPostProcessor" class="headerlink" title="CommonAnnotationBeanPostProcessor"></a>CommonAnnotationBeanPostProcessor</h2><p>​专用来处理非Srping官方提供，而是javax的通用如下注解：</p><ul><li><strong>@javax.annotation.Resource</strong></li><li><strong>@javax.annotation.PostConstruct</strong></li><li><strong>@javax.annotation.PreDestroy</strong></li><li><strong>@javax.ejb.EJB</strong></li><li><strong>@javax.xml.ws.WebServiceRef</strong></li></ul><p>其主要有两个重要过程，<strong>一是提取这些注解所在字段或方法的元数据。之后才是使用这些注解</strong></p><p>其架构如下图所示。1被用在解析注解所在字段的元数据，2则是使用这些注解的处理器接口，3则表示它也具备Init和Destory注解解析的功能</p><p><img src="https://img.shanzhao.site/file/1745844102894_spring-common-annotation-bpp.png" alt="CommonAnnotationBeanPostProcessor架构"></p><p align="center" style="color: #888;">CommonAnnotationBeanPostProcessor架构</p><h3 id="解析Field和方法"><a href="#解析Field和方法" class="headerlink" title="解析Field和方法"></a>解析Field和方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessMergedBeanDefinition</span><span class="token punctuation">(</span>RootBeanDefinition beanDefinition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 调用父接口，解析@PostConstruct和@PreDestroy相关方法</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postProcessMergedBeanDefinition</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析其余的注解</span>    InjectionMetadata metadata <span class="token operator">=</span> <span class="token function">findResourceMetadata</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanType<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    metadata<span class="token punctuation">.</span><span class="token function">checkConfigMembers</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> InjectionMetadata <span class="token function">findResourceMetadata</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> PropertyValues pvs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 构建当前bean的缓存key，用于存放这个bean的所有依赖</span>        String cacheKey <span class="token operator">=</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">?</span> beanName <span class="token operator">:</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先从injectionMetadataCache缓存中拿，没有再构造，最后放入缓存</span>        InjectionMetadata metadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>InjectionMetadata<span class="token punctuation">.</span><span class="token function">needsRefresh</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>                metadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>InjectionMetadata<span class="token punctuation">.</span><span class="token function">needsRefresh</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        metadata<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    metadata <span class="token operator">=</span> <span class="token function">buildResourceMetadata</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> metadata<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 开始解析@WebServiceRef，@EJB和@Resource</span><span class="token comment" spellcheck="true">// 这里面任意一个解析后都会进行Modifier.isStatic判断。可知静态字段或方法不支持自动注入，直接抛出了异常</span><span class="token keyword">private</span> InjectionMetadata <span class="token function">buildResourceMetadata</span><span class="token punctuation">(</span><span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>InjectionMetadata<span class="token punctuation">.</span>InjectedElement<span class="token operator">></span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> clazz<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> List<span class="token operator">&lt;</span>InjectionMetadata<span class="token punctuation">.</span>InjectedElement<span class="token operator">></span> currElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 遍历这个class的所有field，依次对每个field进行处理</span>            ReflectionUtils<span class="token punctuation">.</span><span class="token function">doWithLocalFields</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> field <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// @WebServiceRef注解处理</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>webServiceRefClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>webServiceRefClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@WebServiceRef annotation is not supported on static fields"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebServiceRefElement</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> field<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// @EJB注解处理</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ejbRefClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>ejbRefClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@EJB annotation is not supported on static fields"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EjbRefElement</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> field<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// @Resource注解处理</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Resource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@Resource annotation is not supported on static fields"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>ignoredResourceTypes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceElement</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> field<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 再遍历这个class的所有method，处理以set方法进行注入的方式</span>            ReflectionUtils<span class="token punctuation">.</span><span class="token function">doWithLocalMethods</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> method <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                Method bridgedMethod <span class="token operator">=</span> BridgeMethodResolver<span class="token punctuation">.</span><span class="token function">findBridgedMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>BridgeMethodResolver<span class="token punctuation">.</span><span class="token function">isVisibilityBridgeMethodPair</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> bridgedMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getMostSpecificMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>webServiceRefClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> bridgedMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>webServiceRefClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@WebServiceRef annotation is not supported on static methods"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@WebServiceRef annotation requires a single-arg method: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        PropertyDescriptor pd <span class="token operator">=</span> BeanUtils<span class="token punctuation">.</span><span class="token function">findPropertyForMethod</span><span class="token punctuation">(</span>bridgedMethod<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                        currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebServiceRefElement</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> bridgedMethod<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ejbRefClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> bridgedMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>ejbRefClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@EJB annotation is not supported on static methods"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@EJB annotation requires a single-arg method: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        PropertyDescriptor pd <span class="token operator">=</span> BeanUtils<span class="token punctuation">.</span><span class="token function">findPropertyForMethod</span><span class="token punctuation">(</span>bridgedMethod<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                        currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EjbRefElement</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> bridgedMethod<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bridgedMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Resource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@Resource annotation is not supported on static methods"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>paramTypes<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@Resource annotation requires a single-arg method: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>ignoredResourceTypes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>paramTypes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            PropertyDescriptor pd <span class="token operator">=</span> BeanUtils<span class="token punctuation">.</span><span class="token function">findPropertyForMethod</span><span class="token punctuation">(</span>bridgedMethod<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                            currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceElement</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> bridgedMethod<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            elements<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> currElements<span class="token punctuation">)</span><span class="token punctuation">;</span>            targetClass <span class="token operator">=</span> targetClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> targetClass <span class="token operator">!=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InjectionMetadata</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ResourceElement源码"><a href="#ResourceElement源码" class="headerlink" title="ResourceElement源码"></a>ResourceElement源码</h4><p>​以@Resource注解解析后的数据ResourceElement为例，可以发现beanName默认为@Resource的name字段。如果没有则为field字段（注解在field上）。或者则去掉前面的set，再将下个字母变为小写作为beanName（注解在set方法上）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ResourceElement</span> <span class="token keyword">extends</span> <span class="token class-name">LookupElement</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 存在@Lazy注解，且value为true，这个值就为true     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> lazyLookup<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ResourceElement</span><span class="token punctuation">(</span>Member member<span class="token punctuation">,</span> AnnotatedElement ae<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> PropertyDescriptor pd<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>member<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">;</span>       Resource resource <span class="token operator">=</span> ae<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Resource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// @Resource的name字段</span>       String resourceName <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resourceType <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>isDefaultName <span class="token operator">=</span> <span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isDefaultName<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// name字段为空</span>          <span class="token comment" spellcheck="true">// 先获取这个字段名</span>          resourceName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>member <span class="token keyword">instanceof</span> <span class="token class-name">Method</span> <span class="token operator">&amp;&amp;</span> resourceName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resourceName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 注解在set方法上，则去掉前面的set，再将下个字母变为小写作为beanName</span>             resourceName <span class="token operator">=</span> Introspector<span class="token punctuation">.</span><span class="token function">decapitalize</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>embeddedValueResolver <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 支持占位符解析</span>          resourceName <span class="token operator">=</span> embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">!=</span> resourceType<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">checkResourceType</span><span class="token punctuation">(</span>resourceType<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// No resource type specified... check field/method.</span>          resourceType <span class="token operator">=</span> <span class="token function">getResourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 默认字段名</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">(</span>resourceName <span class="token operator">!=</span> null <span class="token operator">?</span> resourceName <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 默认当前字段的Class类型</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>lookupType <span class="token operator">=</span> resourceType<span class="token punctuation">;</span>       String lookupValue <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>mappedName <span class="token operator">=</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>lookupValue<span class="token punctuation">)</span> <span class="token operator">?</span> lookupValue <span class="token operator">:</span> resource<span class="token punctuation">.</span><span class="token function">mappedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Lazy lazy <span class="token operator">=</span> ae<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Lazy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>lazyLookup <span class="token operator">=</span> <span class="token punctuation">(</span>lazy <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> lazy<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**           字段注入方法，如果需要懒加载，则会创建一个代理对象   */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">getResourceToInject</span><span class="token punctuation">(</span>Object target<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String requestingBeanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lazyLookup <span class="token operator">?</span> <span class="token function">buildLazyResourceProxy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span> <span class="token operator">:</span>             <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字段注入"><a href="#字段注入" class="headerlink" title="字段注入"></a>字段注入</h3><p>bean的populateBean调用了InstantiationAwareBeanPostProcessor#postProcessProperties方法，开始字段的注入</p><h4 id="CommonAnnotationBeanPostProcessor-postProcessProperties"><a href="#CommonAnnotationBeanPostProcessor-postProcessProperties" class="headerlink" title="CommonAnnotationBeanPostProcessor#postProcessProperties"></a>CommonAnnotationBeanPostProcessor#postProcessProperties</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> PropertyValues <span class="token function">postProcessProperties</span><span class="token punctuation">(</span>PropertyValues pvs<span class="token punctuation">,</span> Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 找出上一步缓存的元数据</span>    InjectionMetadata metadata <span class="token operator">=</span> <span class="token function">findResourceMetadata</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 开始注入</span>       metadata<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">"Injection of resource dependencies failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pvs<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="InjectionMetadata-InjectedElement-inject"><a href="#InjectionMetadata-InjectedElement-inject" class="headerlink" title="InjectionMetadata.InjectedElement#inject"></a>InjectionMetadata.InjectedElement#inject</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>Object target<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String requestingBeanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> PropertyValues pvs<span class="token punctuation">)</span>       <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isField<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 字段注入</span>       Field field <span class="token operator">=</span> <span class="token punctuation">(</span>Field<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>member<span class="token punctuation">;</span>       ReflectionUtils<span class="token punctuation">.</span><span class="token function">makeAccessible</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 根据不同的子类getResourceToInject实现，获取对应的bean。会触发依赖bean的创建</span>       <span class="token comment" spellcheck="true">// 依赖bean创建完毕并返回后，再将其赋予给field</span>       field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token function">getResourceToInject</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// set方法注入</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkPropertySkipping</span><span class="token punctuation">(</span>pvs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>          Method method <span class="token operator">=</span> <span class="token punctuation">(</span>Method<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>member<span class="token punctuation">;</span>          ReflectionUtils<span class="token punctuation">.</span><span class="token function">makeAccessible</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>          method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token function">getResourceToInject</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">getTargetException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>CommonAnnotationBeanPostProcessor</code> 是标准注解(<code>@Resource/@PostConstruct/@PreDestroy</code>)的解析者，通过<strong>元数据提前解析+生命周期钩子回调</strong>，实现了依赖注入和生命周期管理。</p><ul><li><strong>CommonAnnotationBeanPostProcessor#postProcessMergedBeanDefinition</strong>：负责扫描 <code>@Resource</code>、<code>@PostConstruct</code>、<code>@PreDestroy</code> 注解，把解析结果封装成 <code>InjectionMetadata</code>（字段、方法对应的 <code>ResourceElement</code> 等），再缓存下来，等待后续注入或生命周期回调使用</li><li><strong>CommonAnnotationBeanPostProcessor#postProcessProperties</strong>：负责根据解析好的 <code>InjectionMetadata</code> 真正进行注入</li><li><strong>InitDestroyAnnotationBeanPostProcessor#postProcessBeforeInitialization</strong>： 在 Bean 初始化前，调用所有 <code>@PostConstruct</code> 标注的方法<ul><li><strong>InitDestroyAnnotationBeanPostProcessor#postProcessBeforeDestruction</strong>：在 Bean 销毁前，调用所有 <code>@PreDestroy</code> 标注的方法。</li></ul></li></ul><h2 id="AutowiredAnnotationBeanPostProcessor"><a href="#AutowiredAnnotationBeanPostProcessor" class="headerlink" title="AutowiredAnnotationBeanPostProcessor"></a>AutowiredAnnotationBeanPostProcessor</h2><p>根据构造方法可知，它专用来处理Spring提供的这些注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// @Autowired支持</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>autowiredAnnotationTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Autowired<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// @Value支持</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>autowiredAnnotationTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Value<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// javax提供的@Value支持</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>autowiredAnnotationTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span><span class="token punctuation">)</span>             ClassUtils<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.inject.Value"</span><span class="token punctuation">,</span> AutowiredAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"JSR-330 'javax.inject.Inject' annotation found and supported for autowiring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// JSR-330 API not available - simply skip.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>@org.springframework.beans.factory.annotation.Autowired</strong></li><li><strong>@org.springframework.beans.factory.annotation.Value</strong></li><li><strong>@javax.inject.Inject</strong></li></ul><p>​整体流程和上面的CommonAnnotationBeanPostProcessor差不多。都是<strong>在postProcessMergedBeanDefinition方法里进行bean内部有上诉3个注解的字段或方法进行解析并缓存。然后在postProcessProperties进行依赖注入</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeanPostProcessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Bean初始化</title>
      <link href="/2021-01-08/spring-bean-de-chu-shi-hua/"/>
      <url>/2021-01-08/spring-bean-de-chu-shi-hua/</url>
      
        <content type="html"><![CDATA[<hr><p>​整体分析了BeanFactory和ApplicationContext的区别。并从Spring Bean创建流程源码分析了bean的创建流程并对其进行总结，并分析了三级缓存的作用</p><span id="more"></span><h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>​<code>BeanFactory</code> 是 Spring 最基础的 IoC 容器接口，仅提供了 Bean 的获取与管理能力。而 <code>DefaultListableBeanFactory</code> 是其默认实现类，它通过实现多个关键接口，构建出完整的 IoC 容器功能体系。</p><p>以下是 <code>DefaultListableBeanFactory</code> 实现的主要接口以及其对应的职责：</p><table><thead><tr><th align="center">主要接口</th><th align="left">主要功能</th></tr></thead><tbody><tr><td align="center"><strong>AliasRegistry</strong></td><td align="left">提供 Bean 的别名注册和解析能力。允许一个 Bean 在容器中有多个名字，是 Spring IoC 容器灵活命名机制的基础。</td></tr><tr><td align="center"><strong>BeanDefinitionRegistry</strong></td><td align="left">管理 Bean 的定义信息（<code>BeanDefinition</code>），提供注册、删除、查询等能力。是容器启动期间加载和维护元数据的关键接口。</td></tr><tr><td align="center"><strong>SingletonBeanRegistry</strong></td><td align="left">管理单例 Bean 的注册与缓存机制，控制 Bean 的生命周期。所有单例 Bean 都存储在 <code>singletonObjects</code> 缓存中。</td></tr><tr><td align="center"><strong>AutowireCapableBeanFactory</strong></td><td align="left">提供创建 Bean 实例、属性注入、初始化回调、AOP 代理等高级功能。<br />通常用于手动创建并管理 Bean 的生命周期，比如调用 <code>createBean()</code>、<code>autowireBean()</code> 等。</td></tr><tr><td align="center"><strong>ConfigurableListableBeanFactory</strong></td><td align="left">是 <code>BeanFactory</code> 的高级配置接口，支持访问所有已注册的 <code>BeanDefinition</code>，还可以注册 <code>BeanPostProcessor</code>组件。<br /><strong>常用于容器初始化后对 BeanFactory 进行增强或定制</strong>。</td></tr><tr><td align="center"><strong>HierarchicalBeanFactory</strong></td><td align="left">支持父子容器结构，允许子容器从父容器中查找 Bean，提升模块化和隔离能力。<br /> 是实现 <code>ApplicationContext</code> 之间嵌套结构的基础。</td></tr><tr><td align="center"><strong>FactoryBeanRegistrySupport</strong>  （继承自 <code>AbstractAutowireCapableBeanFactory</code>）</td><td align="left">支持 <code>FactoryBean</code> 机制的关键实现类，负责识别并缓存 <code>FactoryBean</code> 创建的产品对象。<br /> 比如，当你定义了一个实现 <code>FactoryBean&lt;T&gt;</code> 的类时，容器最终会获取到 <code>T</code> 类型的对象，而不是工厂本身。</td></tr></tbody></table><h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><p>ApplicationContext不仅实现了BeanFactory接口，还多了许多拓展接口，其余接口如下</p><table><thead><tr><th>其他接口</th><th>主要功能</th></tr></thead><tbody><tr><td><strong>EnvironmentCapable</strong></td><td>获取Environment，可读取各种配置</td></tr><tr><td><strong>MessageSource</strong></td><td>国际化消息解析</td></tr><tr><td><strong>ApplicationEventPublisher</strong></td><td>支持事件发布&#x2F;监听机制</td></tr><tr><td><strong>ResourcePatternResolver</strong></td><td>支持资源加载，比如 classpath 等路径资源</td></tr></tbody></table><p>​在注解驱动的环境下，常用的 <code>ApplicationContext</code> 实现类为 <code>AnnotationConfigApplicationContext</code>。该类内部封装了一个 <code>DefaultListableBeanFactory</code> 实例，作为底层的 Bean 注册与管理中心，从而继承了 <code>BeanFactory</code> 的全部能力。</p><p>​而其<strong>refresh</strong>方法更是容器启动流程的核心。<strong>Bean的解析、注册，各种后置处理器的准备、使用，国际化和事件发布、各种监听器均在这个方法中完成，可以说是整个Spring的核心</strong></p><h2 id="bean创建流程源码（只保留了重要的部分）"><a href="#bean创建流程源码（只保留了重要的部分）" class="headerlink" title="bean创建流程源码（只保留了重要的部分）"></a>bean创建流程源码（只保留了重要的部分）</h2><h3 id="AbstractBeanFactory-doGetBean"><a href="#AbstractBeanFactory-doGetBean" class="headerlink" title="AbstractBeanFactory#doGetBean"></a>AbstractBeanFactory#doGetBean</h3><p>org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean方法部分关键代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取真实的beanName，参数name可能是bean的别名和FactoryBean格式（前面有&amp;）</span>String beanName <span class="token operator">=</span> <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>Object bean<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Eagerly check singleton cache for manually registered singletons.</span><span class="token comment" spellcheck="true">// 为了解决循环引用，在这里就必须可以从二级或三级缓存中拿bean（尽管此时这个bean实例化了，还未填充数据和初始化）</span>Object sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sharedInstance <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 循环创建多例bean抛出异常</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrototypeCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 先获取父容器</span>  BeanFactory parentBeanFactory <span class="token operator">=</span> <span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 父BeanFactory存在且当前的BeanFactory不存在BeanDefinition，就会去父BeanFactory递归查找</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在父容器中获取bean，能获取到就直接返回了</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>typeCheckOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 标记bean为已创建</span>    <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    RootBeanDefinition mbd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkMergedBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependsOn <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dependsOn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 有dependsOn的bean，则优先创建这些bean</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Create bean instance.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 单例bean的创建</span>      sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// bean创建失败，执行destory相关方法并直接抛出异常</span>          <span class="token function">destroySingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 创建多例bean</span>      Object prototypeInstance <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        prototypeInstance <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 特殊的scope里bean的创建。创建在session，request等scope里面的bean</span>      String scopeName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Scope scope <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 获取并放入对应的Scope中，在返回bean</span>      Object scopedInstance <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>scopedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">cleanupAfterBeanCreationFailure</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Check if required type matches the type of the actual bean instance.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>requiredType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    T convertedBean <span class="token operator">=</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>convertedBean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> convertedBean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> bean<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DefaultSingletonBeanRegistry-getSingleton"><a href="#DefaultSingletonBeanRegistry-getSingleton" class="headerlink" title="DefaultSingletonBeanRegistry#getSingleton"></a>DefaultSingletonBeanRegistry#getSingleton</h4><p>从三级缓存中获取bean</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先从一级缓存中直接获取</span>        Object singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 单例bean还没创建好但是正在创建的情况（说明已经有循环引用了）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 二级缓存中获取</span>            singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 一级缓存为空，从二级中取</span>                        singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 二级缓存为空，再从三级缓存中获取</span>                            ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> singletonFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 三级缓存不为空，取出该bean，放入二级缓存，同时从三级缓存中删除</span>                                singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singletonObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AbstractAutowireCapableBeanFactory-doCreateBean"><a href="#AbstractAutowireCapableBeanFactory-doCreateBean" class="headerlink" title="AbstractAutowireCapableBeanFactory#doCreateBean"></a>AbstractAutowireCapableBeanFactory#doCreateBean</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实例化bean。先创建出一个空壳的bean，各种field和方法都没有填充和调用</span>BeanWrapper instanceWrapper <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  instanceWrapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanInstanceCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 已实例化的bean</span>Object bean <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// bean 的class type</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">!=</span> NullBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  mbd<span class="token punctuation">.</span>resolvedTargetType <span class="token operator">=</span> beanType<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 单例+允许循环引用+当前bean正在创建。就需要将bean包装后放入三级缓存中</span><span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span>    <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 将已实例化但还未填充属性的bean放入三级缓存，供其他依赖此bean的bean使用</span>  <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  准备初始化bean</span>Object exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 填充bean的字段（依赖的字段bean）</span>  <span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// bean完全填充好属性后，开始调用各种初始化方法和BeanPostProcessor接口</span>  exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 省略异常</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 注册destroy相关方法</span><span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AbstractAutowireCapableBeanFactory-populateBean"><a href="#AbstractAutowireCapableBeanFactory-populateBean" class="headerlink" title="AbstractAutowireCapableBeanFactory#populateBean"></a>AbstractAutowireCapableBeanFactory#populateBean</h4><p>填充bean的字段</p><pre class="line-numbers language-java"><code class="language-java">PropertyValues pvs <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">hasPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> mbd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 根据autowireMode来判断注入方式</span><span class="token comment" spellcheck="true">// 1. xml显示配置的autowire</span><span class="token comment" spellcheck="true">// 2. 配置了@Bean注解的autowire字段（这个字段默认不会走下面的代码注入）</span><span class="token keyword">int</span> resolvedAutowireMode <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_NAME <span class="token operator">||</span> resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>  MutablePropertyValues newPvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Add property values based on autowire by name if applicable.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_NAME<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">autowireByName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Add property values based on autowire by type if applicable.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">autowireByType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  pvs <span class="token operator">=</span> newPvs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ==================== 以下就是@Autowired和@Resource注入方式的处理</span><span class="token comment" spellcheck="true">// 是否存在InstantiationAwareBeanPostProcessor处理器（主要是注解解析PostProcessor）</span><span class="token keyword">boolean</span> hasInstAwareBpps <span class="token operator">=</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> needsDepCheck <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getDependencyCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> AbstractBeanDefinition<span class="token punctuation">.</span>DEPENDENCY_CHECK_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>PropertyDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> filteredPds <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hasInstAwareBpps<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pvs <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pvs <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取InstantiationAwareBeanPostProcessor处理器，并调用其postProcessProperties方法</span>  <span class="token comment" spellcheck="true">// 基于注解的依赖注入会用到</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bp <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      InstantiationAwareBeanPostProcessor ibp <span class="token operator">=</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor<span class="token punctuation">)</span> bp<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 注解相关的自动注入</span>      PropertyValues pvsToUse <span class="token operator">=</span> ibp<span class="token punctuation">.</span><span class="token function">postProcessProperties</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      pvs <span class="token operator">=</span> pvsToUse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AbstractAutowireCapableBeanFactory-initializeBean"><a href="#AbstractAutowireCapableBeanFactory-initializeBean" class="headerlink" title="AbstractAutowireCapableBeanFactory#initializeBean"></a>AbstractAutowireCapableBeanFactory#initializeBean</h4><p>初始化bean</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 三种aware(BeanName，BeanClassLoader，BeanFactory)</span><span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 名叫wrappedBean，表示这些方法返回的bean可能是被包装后的，比如aop相关</span>Object wrappedBean <span class="token operator">=</span> bean<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// BeanPostProcessor接口实例回调（在bean的初始化方法调用之前调用）</span>  <span class="token comment" spellcheck="true">// 例如：@PostConstruct注解的实现</span>  wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsBeforeInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// InitializingBean方法和init-method方法</span><span class="token function">invokeInitMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> wrappedBean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// BeanPostProcessor#postProcessAfterInitialization接口实例回调。</span>  <span class="token comment" spellcheck="true">// 在bean的初始化方法调用完成之后调用，说明bean以及初始化完毕，可以实现其他扩展功能了</span>  <span class="token comment" spellcheck="true">//比如AOP的实现、 @Scheduled注解实现等</span>  wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> wrappedBean<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h2><ul><li>一级缓存（<strong>DefaultSingletonBeanRegistry#singletonObjects</strong>）：存放的是完全初始化好的bean，包括已实例化、填充内部依赖的bean，运行完初始化方法（@PostConstruct、afterPropertiesSet方法、指定的init-method方法）</li><li>二级缓存（<strong>DefaultSingletonBeanRegistry#earlySingletonObjects</strong>）：存放bean缓存（如果能被AOP，就是AOP对象），但还未填充属性和允许初始化方法</li><li>三级缓存（<strong>DefaultSingletonBeanRegistry#singletonFactories</strong>）：存放bean的ObjectFactory工厂对象，使用这个工厂对象，可提前暴露出bean的引用（专用来提前暴露AOP对象的方法）</li></ul><h3 id="为什么要使用三级缓存"><a href="#为什么要使用三级缓存" class="headerlink" title="为什么要使用三级缓存"></a><strong>为什么要使用三级缓存</strong></h3><p>​<strong>三级缓存专门来解决AOP对象的暴露问题</strong>。</p><p>​如果没用AOP是可以只用一级缓存和二级缓存就解决的。但如果使用了AOP且没有三级缓存，那么必须在实例化后就马上完成AOP代理，但这和spring的设计初衷不同，AOP代理的完成时使用了bean的后置处理器<strong>AnnotationAwareAspectJAutoProxyCreator</strong>来完成的，也就是在初始化bean后执行的bean后置处理器方法（<strong>AbstractAutowireCapableBeanFactory#initializeBean</strong>），就不可能再实例化bean后进行代理，所以才有了三级缓存，仅用来提前暴露AOP对象</p><h3 id="三层级缓存真能完美解决吗？"><a href="#三层级缓存真能完美解决吗？" class="headerlink" title="三层级缓存真能完美解决吗？"></a>三层级缓存真能完美解决吗？</h3><p>如果有3个bean分别为A、B、C，A依赖B和C，B只依赖A，C什么都不依赖，但提供一个方法sayHello使用。</p><p>​当开始实例化A时，实例化A后将其工厂对象放入三级缓存中，开始填充A属性，发现了B需要填充，开始实例化B，实例化B对象过程中又需要填充其属性A，这时能从三级缓存中取出了A的引用（但此时A不完整），如果B对象有一个初始化方法（@PostConstruct），调用A对象里的C对象的sayHello方法，但由于A此时只是个空壳，就会抛出空指针异常。</p><p>​总的来说，就是在循环引用期间的调用初始化方法时，调用了尚未完全创建好的bean（空壳bean）的某个字段的方法，导致抛出NPE，导致服务启动失败</p><h2 id="关键流程总结"><a href="#关键流程总结" class="headerlink" title="关键流程总结"></a>关键流程总结</h2><ol><li>实例化bean：创建bean的空壳对象</li><li>将其工厂对象（ObjectFactory）放入三级缓存（根据<strong>AbstractAutowireCapableBeanFactory#allowCircularReferences</strong>字段决定）</li><li>填充依赖bean（<strong>AbstractAutowireCapableBeanFactory#populateBean</strong>）：进行@Autowired和@Resource等注解的字段注入。如果这些依赖的 Bean 还没创建，会触发递归创建</li><li>初始化bean（<strong>AbstractAutowireCapableBeanFactory#initializeBean</strong>）<ul><li>4.1 调用<strong>BeanPostProcessor#postProcessBeforeInitialization方法</strong>（初始化前的hook）</li><li>4.2 调用各种初始化方法（**@PostConstruct、afterPropertiesSet方法、指定的init-method方法**）</li><li>4.3 调用<strong>BeanPostProcessor#postProcessAfterInitialization</strong>（初始化后的hook，<strong>AOP相关实现</strong>）</li></ul></li><li>注册destory相关方法（<strong>AbstractBeanFactory#registerDisposableBeanIfNecessary</strong>）</li><li>完成创建，放入一级缓存。同时移除三级缓存和二级缓存中的相关对象</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring三级缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM参数和垃圾收集器组合</title>
      <link href="/2020-12-18/jvm-can-shu/"/>
      <url>/2020-12-18/jvm-can-shu/</url>
      
        <content type="html"><![CDATA[<p>JVM常用参数整理和垃圾收集器组合</p> <span id="more"></span><h2 id="jvm参数整理"><a href="#jvm参数整理" class="headerlink" title="jvm参数整理"></a>jvm参数整理</h2><ul><li><strong>-Xms64m</strong> ：初始堆大小</li><li><strong>-Xmx128m</strong> ：最大堆大小</li><li><strong>-Xmn32m</strong> ：年轻代大小</li><li><strong>-XX:MaxNewSize&#x3D;256m</strong> : 最大新生代大小</li><li><strong>-Xss512k</strong>：栈大小</li><li><strong>-XX:MetaspaceSize&#x3D;256M</strong> ：Metaspace扩容时触发FullGC的初始化阈值(并不是元空间的初始化大小，元空间是不断扩容的，当达到这个值时，就会触发full gc，<a href="https://www.jianshu.com/p/b448c21d2e71">链接</a>）</li><li><strong>-XX:MaxMetaspaceSize&#x3D;512M</strong>：Metaspace最大大小</li><li><strong>-XX:NewRatio&#x3D;2</strong>：老年代和新生代的比例</li><li><strong>-XX:SurvivorRatio&#x3D;8</strong> ：Eden区与一个Survivor区的大小比值（所以<strong>s0:s1:eden&#x3D;1:1:8</strong>）</li><li><strong>-XX:MinHeapFreeRatio&#x3D;40</strong>：空闲堆空间的最小百分比。如果空闲堆空间的比例小于它，则会进行堆扩容</li><li><strong>-XX:MaxHeapFreeRatio&#x3D;70</strong>：空闲堆空间的最大百分比。如果空闲堆空间的比例大于它，则会进行堆缩容</li><li><strong>-XX:-DisableExplicitGC</strong>：禁止显式GC，即禁止程序中System.gc()。个人感觉没必要</li><li><strong>-XX:+HeapDumpOnOutOfMemoryError</strong>：OOM时导出堆快照到文件</li><li><strong>-XX:HeapDumpPath&#x3D;&#x2F;home&#x2F;huskie&#x2F;gc&#x2F;oom.hprof</strong>：OOM时导出文件路径</li><li><strong>-Xloggc:</strong>&#x2F;home&#x2F;ruidong&#x2F;gc.log   存储gc日志的路径</li><li><strong>-XX:OnOutOfMemoryError</strong>：OOM时操作，比如如执行脚本发送邮件</li><li><strong>-XX:+TraceClassLoading</strong>：打印加载类的详细信息</li><li><strong>-XX:+PrintGCDetails</strong>：打印GC详细信息</li><li><strong>-XX:+PrintGCTimeStamps</strong>：打印CG发生的时间戳（相对于项目启动时间）</li><li><strong>-XX:+PrintGCDateStamps</strong>：打印GC发生的时间</li><li><strong>-XX:+PrintHeapAtGC</strong>：每一次GC前和GC后，都打印堆信息</li><li><strong>-XX:+PrintClassHistogram</strong>：按下Ctrl+Break后，打印类的信息</li><li><strong>-XX:+PrintGCApplicationConcurrentTime</strong> ：打印应用程序的运行时间（许多事情会导致JVM暂停所有线程，停在安全点。gc也只是其中的一种，当暂停之后在重启应用线程，则会刷新这个时间（归0），在重新计数）<a href="http://ifeve.com/logging-stop-the-world-pauses-in-jvm/">链接</a></li><li><strong>-XX:+PrintGCApplicationStoppedTime</strong> ：打印应用线程暂停的时间，显示应用线程被暂停了多久和应用线程暂停到安全点花费的时间</li><li><strong>-XX:TargetSurvivorRatio&#x3D;50</strong> ：survivor空间的晋升大小空间百分比（默认为50）</li><li><strong>-XX:MaxTenuringThreshold&#x3D;15</strong>  ：年轻代晋升到老年代的最大年龄阈值(tenuring threshold)。默认值为 15[每次GC，增加1岁，到15岁如果还要存活，放入Old区]。<strong>jvm还会动态的计算晋升阈值，方法：依次从年龄为1的对象大小加起来，一直加到大小超过了 [（TargetSurvivorRatio * survivor_capacity）&#x2F; 100 ]值，这时加起来的最大年龄大小即为这次晋升的临界阈值</strong>（具体算法在：hotspot\src\share\vm\gc_implementation\shared\ageTable.cpp文件里，方法为compute_tenuring_threshold）</li><li><strong>-XX:+PrintTenuringDistribution</strong> ：ygc 时打印当前晋升年龄信息</li></ul><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><h3 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h3><h4 id="Serial（hotspot虚拟机在客户端下的默认新生代垃圾收集器）"><a href="#Serial（hotspot虚拟机在客户端下的默认新生代垃圾收集器）" class="headerlink" title="Serial（hotspot虚拟机在客户端下的默认新生代垃圾收集器）"></a>Serial（hotspot虚拟机在客户端下的默认新生代垃圾收集器）</h4><p>单线程新生代收集器，复制算法，整个过程STW</p><p>优势：内存消耗最小</p><p>缺点：不适合大内存多处理器工作，慢</p><h4 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h4><p>多线程并行的新生代收集器，复制算法，整个过程STW</p><ul><li><strong>-XX:ParallelGCThreads&#x3D;4</strong> ：并行收集的线程数</li></ul><h4 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h4><ul><li>吞吐量 &#x3D; 运行用户代码时间 &#x2F; ( 运行用户代码时间 + 垃圾收集时间 )</li></ul><p>吞吐量优先的新生代并行多线程收集器，复制算法（<strong>标记-复制</strong>算法）</p><p>三个重要参数：</p><ul><li><strong>XX:MaxGCPauseMillis</strong> ：垃圾收集最大停顿时间，大于0的毫秒数</li><li><strong>-XX:GCTimeRatio</strong>: 大于0小于100的整数（运行用户代码时间比上垃圾回收的时间），默认为99，即允许最大1%的垃圾回收时间</li><li><strong>-XX:+UseAdaptiveSizePolicy</strong>：开启垃圾收集器的自适应调节策略。虚拟机动态调整新生代，Eden区，Survivor区的比例和晋升大小</li></ul><h3 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h3><h4 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h4><p><strong>标记-清除</strong>算法的老年代收集器</p><h4 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="Serial Old"></a>Serial Old</h4><p>Serial的老年代会收集，<strong>标记-整理</strong>算法</p><h4 id="Parallel-Scavenge-Old"><a href="#Parallel-Scavenge-Old" class="headerlink" title="Parallel Scavenge Old"></a>Parallel Scavenge Old</h4><p>Parallel Scavenge收集器的老年代版本，标记-整理算法</p><h3 id="整堆"><a href="#整堆" class="headerlink" title="整堆"></a>整堆</h3><h4 id="G1（garbage-frist收集器）"><a href="#G1（garbage-frist收集器）" class="headerlink" title="G1（garbage-frist收集器）"></a>G1（garbage-frist收集器）</h4><h2 id="垃圾收集器组合"><a href="#垃圾收集器组合" class="headerlink" title="垃圾收集器组合"></a>垃圾收集器组合</h2><ul><li>Serial + SerialOld</li><li>Serial + CMS (jdk8声明废弃，jdk9已被取消)</li><li>ParNew +CMS （使用CMS收集器的默认组合)</li><li>ParNew + SerialOld (jdk8声明废弃，jdk9已被取消)</li><li>Parallel Scavenge +  SerialOld</li><li>Parallel Scavenge + Parallel Scavenge Old（jdk8的默认组合）G1（jdk9的默认收集器，且CMS被标记为废弃了）</li></ul><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul><li><strong>java -XX:+PrintFlagsFinal -version</strong>  ：查看jvm默认参数。数据太多可配合grep使用</li></ul><h2 id="GCRoots对象"><a href="#GCRoots对象" class="headerlink" title="GCRoots对象"></a>GCRoots对象</h2><ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li><li>本地方法栈(Native 方法)中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>所有被同步锁持有的对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>G1</title>
      <link href="/2020-11-25/g1/"/>
      <url>/2020-11-25/g1/</url>
      
        <content type="html"><![CDATA[<hr><p>​简单总结了G1和其常用参数，并分析了的G1日志</p><span id="more"></span><p>​G1（Garbage First）是 JDK 7 引入，并在 JDK 9 默认启用的服务端垃圾回收器。它的核心理念是将整个 Java 堆划分为多个大小相等的 <strong>Region</strong>，打破了传统“新生代 &#x2F; 老年代”的物理分区模式，转而以 Region 为基本单位进行垃圾管理与回收。</p><ul><li><strong>整堆收集</strong>：G1 是一个真正的 <strong>整堆并行压缩收集器</strong>，新生代和老年代都可以并行回收。</li><li><strong>并发标记</strong>：采用 <strong>三色标记法 + SATB + 写屏障机制</strong>，保证并发标记期间的准确性。</li><li><strong>可预测的停顿时间</strong>：用户可设置 <code>-XX:MaxGCPauseMillis</code> 控制最大停顿时间，G1 会在这个目标下选择哪些 Region 进入回收集（CSet）。</li></ul><h2 id="常用参数设置"><a href="#常用参数设置" class="headerlink" title="常用参数设置"></a>常用参数设置</h2><ul><li><strong>-XX:+UseG1GC</strong></li><li><strong>-XX:G1HeapRegionSize&#x3D;2M</strong>：一个Region的大小</li><li><strong>-XX:MaxGCPauseMillis&#x3D;80</strong>：允许收集停顿的最大时常（毫秒）</li><li><strong>-XX:InitiatingHeapOccupancyPercent&#x3D;45</strong> ：老年代占用到 45% 时触发并发标记周期（默认45）</li><li><strong>不要再设置-xmn和-XX:NewRatio</strong></li></ul><h2 id="Region划分"><a href="#Region划分" class="headerlink" title="Region划分"></a>Region划分</h2><ul><li>整个堆被分成多个 <strong>Region</strong>（默认 2048 个），每个 Region 的大小为 <strong>1MB ~ 32MB</strong>，并且必须是 2 的幂次方。</li><li>每个 Region 会被动态标记为不同用途：<ul><li><code>E</code>：Eden 区（新生代分配对象）</li><li><code>S</code>：Survivor 区（新生代存活对象）</li><li><code>O</code>：Old 区（长生命周期对象）</li><li><code>H</code>：Humongous 区（大对象，直接分配在老年代）</li></ul></li></ul><p>​大对象（如数组、长字符串等）若超过一个 Region 一半大小，会被当作 Humongous 对象，分配连续的多个 Region。由于这些对象移动成本高，<strong>G1 默认不会移动 Humongous 对象</strong>，而是直接将它们标记为老年代区域。</p><h2 id="Remembered-Set（RSet）"><a href="#Remembered-Set（RSet）" class="headerlink" title="Remembered Set（RSet）"></a>Remembered Set（RSet）</h2><p>​由于 G1 会独立地对某些 Region 进行回收，它必须知道<strong>老年代是否引用了某个新生代对象</strong>。这正是 <strong>Remembered Set（记忆集）</strong> 的作用：</p><ul><li>每个 Region 都维护了一个对应的 <strong>RSet</strong>，记录有哪些其它 Region 的对象引用了自己。</li><li>在回收某个 Region 时，G1 只需要扫描这个 RSet，而不必全堆扫描，大幅降低了跨代引用处理的成本。</li></ul><blockquote><p>简单说：<strong>RSet 让分区式回收变得可能而高效。</strong></p></blockquote><h2 id="Card-Table（卡表）"><a href="#Card-Table（卡表）" class="headerlink" title="Card Table（卡表）"></a>Card Table（卡表）</h2><p>RSet 的实现依赖于 <strong>Card Table + 写屏障</strong>：</p><ul><li>Java 堆被进一步划分为更小的单位：<strong>Card</strong>，默认每个 Card 是 512 字节。</li><li>JVM 在写引用字段时会触发 <strong>写屏障（Write Barrier）</strong>，将对应 Card 标记为 dirty，并记录引用变更。</li><li>在 GC 时，这些 dirty Card 会被用于更新 RSet，确保引用信息完整。</li></ul><blockquote><p>卡表是写屏障的基础，RSet 是分区引用追踪的核心，三者协同构成 G1 的并发收集体系。</p></blockquote><h2 id="日志解析"><a href="#日志解析" class="headerlink" title="日志解析"></a>日志解析</h2><pre class="line-numbers language-log"><code class="language-log">2020-11-23T11:40:46.167+0800: 1.503: [GC pause (G1 Evacuation Pause) (young), 0.0048336 secs]   // 下面的Min,Avg,Max,Diff,Sum分别表示GC线程最小启动或耗时时间（后面的也是），平均，最大，最大差值，和总耗时，单位都为ms   [Parallel Time: 3.1 ms, GC Workers: 6] // 本次YGC共6个GC线程，总耗时3.1ms      [GC Worker Start (ms): Min: 1503.0, Avg: 1504.5, Max: 1506.1, Diff: 3.0] // 本次GC线程启动（相对于JVM的启动）      [Ext Root Scanning (ms): Min: 0.0, Avg: 0.2, Max: 0.7, Diff: 0.7, Sum: 1.1] // 本次GC线程的GC Roots扫描时间      [Update RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0] // 更新Remember Sets 的耗时统计信息（记忆集一般使用来解决跨Region的引用）         [Processed Buffers: Min: 0, Avg: 0.0, Max: 0, Diff: 0, Sum: 0]      [Scan RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0] // 每个Region都会有一个RSet，RSet又包含指向这个Region的Cards引用，这个阶段就是扫描RSet中的Cards，从而分辨出Eden哪些对象被老年代引用，从而这些不会被GC      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.2, Diff: 0.2, Sum: 0.2] // 扫描代码中的root节点（局部变量）      [Object Copy (ms): Min: 0.0, Avg: 1.3, Max: 2.7, Diff: 2.7, Sum: 7.6] // 对象copy，将存活的对象copy到目标Region中      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.3]         [Termination Attempts: Min: 1, Avg: 1.2, Max: 2, Diff: 1, Sum: 7]      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.2] // GC线程完成其他任务的时间      [GC Worker Total (ms): Min: 0.0, Avg: 1.6, Max: 3.1, Diff: 3.1, Sum: 9.4] // GC线程整个生命周期总计消耗时间      [GC Worker End (ms): Min: 1506.1, Avg: 1506.1, Max: 1506.1, Diff: 0.0] // GC线程完成任务的停止时间（相对于JVM）   [Code Root Fixup: 0.0 ms]   [Code Root Purge: 0.0 ms]   [Clear CT: 0.1 ms] // 清理Card Table（卡表）   [Other: 1.6 ms]      [Choose CSet: 0.0 ms] // 选择要回收的Region放入CSet（会根据停顿时间来决定）      [Ref Proc: 1.4 ms] // 处理引用对象耗时时间（Weak、Soft、Phantom、JNI等等）      [Ref Enq: 0.0 ms] // 遍历所有引用，将不能回收的放入pending列表      [Redirty Cards: 0.0 ms] // 重置card为dirty      // 大型对象的回收      [Humongous Register: 0.0 ms]       [Humongous Reclaim: 0.0 ms]      [Free CSet: 0.0 ms] // 释放CSet中Region占用的内存空间所耗时间   [Eden: 51.0M(51.0M)->0.0B(46.0M) Survivors: 0.0B->5120.0K Heap: 51.0M(1024.0M)->4815.7K(1024.0M)] [Times: user=0.05 sys=0.00, real=0.01 secs] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>G1 不再物理区分年轻代和老年代，转而统一使用多个 Region 管理整个堆。</p></li><li><p>支持 <strong>并发标记 + 并发回收 + 可预测停顿</strong>，是整堆压缩收集器。</p></li><li><p>使用 <strong>Remembered Set + Card Table + 写屏障</strong> 高效维护跨代引用关系。</p></li><li><p>避免 Full GC 的目标是：通过周期性并发标记、预测性选择 CSet 来进行碎片整理。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> G1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈ThreadLocal为什么被设计为弱引用</title>
      <link href="/2020-11-21/tan-tan-threadlocal-wei-shi-me-bei-she-ji-wei-ruo-yin-yong/"/>
      <url>/2020-11-21/tan-tan-threadlocal-wei-shi-me-bei-she-ji-wei-ruo-yin-yong/</url>
      
        <content type="html"><![CDATA[<hr><p>分析了ThreadLocal为什么要被设计为弱引用，并给出了ThreadLocal的建议使用方法</p><span id="more"></span><p>​ThreadLocal在用作ThreadLocalMap的key时，是被设计为弱引用的。</p><p>​ThreadLocalMap的内部类Entry被设计为实现了WeakReference，Entry用来存放数据。在构造Entry对象时，将传进来的ThreadLocal对象包装成了真正的弱引用对象，而Entry对象和内部的value对象本身是强引用的。</p><p>弱引用的解释：</p><blockquote><p>​只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p></blockquote><p>​简单理解就是当垃圾回收时，该对象只被WeakReference对象的弱引用字段（T reference）所引用，而未被任何强类型的对象引用，那么，该弱引用的对象就会被回收。</p><p>​注意：WeakReference引用本身是强引用，它内部的（T reference）才是真正的弱引用字段，WeakReference就是一个装弱引用的容器而已。</p><h2 id="1-回收测试示例"><a href="#1-回收测试示例" class="headerlink" title="1 回收测试示例"></a>1 回收测试示例</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token function">firstStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在这里打断点，观察thread对象里的ThreadLocalMap数据</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通过是否获取返回值观察A对象里的local对象是否被回收</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> A <span class="token function">firstStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value: "</span><span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> local <span class="token operator">=</span> ThreadLocal<span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"in class A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> local<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>            local<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/soil/weakNotClear.png" alt="ThreadLocal被强引用持有，不会被回收"></p><p align="center" style="color: #888;">ThreadLocal 被强引用持有，不会被回收</p><p><img src="/img/soil/weakClear.png" alt="ThreadLocal只被弱引用持有，gc后被回收了"></p><p align="center" style="color: #888;">ThreadLocal只被弱引用持有，gc后被回收了</p><p>​如上面的代码，当构造一个A对象时，内部的local对象也构造了，之后调用get和set方法对local对象取值和设置值，当A对象不可达时，垃圾收集器就会回收A。</p><p>​现在我们假设ThreadLocalMap的Entey里的key（ThreadLocal对象）不是弱引用的，且已经调用了A的对象的get或set方法，那么垃圾收集器回收A对象时，一定不会回收里面的local对象，为什么？</p><blockquote><p>因为Entey已近持有了local对象的引用，我们没有设置引用类型，那这个引用就默认是个强引用。</p><p><strong>Thread -&gt; ThreadLocal.ThreadLocalMap -&gt; Entry[] -&gt; Enrty -&gt; key（threadLocal对象）和value</strong></p></blockquote><p><img src="https://img.shanzhao.site/file/1750680983776_threadlocal-reference.png" alt="threadlocal-reference.png"><br>​引用链如上面所示，这<strong>个引用链全是强引用，当这个线程还未结束时，他持有的强引用，包括递归下去的所有强引用都不会被垃圾回收器回收</strong>。</p><p>​那么回到正常情况，ThreadLocalMap里Entey的key是弱引用，在本例中也就是local对象在这里是弱引用，当对象A回收时，由于local对象只剩下被弱引用key所引用，所以local对象也会被回收。</p><h2 id="2-重点来了，key为什么被设计为弱引用？？"><a href="#2-重点来了，key为什么被设计为弱引用？？" class="headerlink" title="2 重点来了，key为什么被设计为弱引用？？"></a>2 重点来了，key为什么被设计为弱引用？？</h2><p>​回归本质，ThreadLocalMap是用来存放对象的，在一次线程的执行栈中，存放数据后方便我们在任意的地方取得我们想要的值而不被其他线程干扰。ThreadLocalMap本身并没有为外界提供取出和存放数据的API，我们所能获得数据的方式只有通过ThreadLocal类提供的API来间接的从ThreadLocalMap取出数据，所以，当我们用不了key（ThreadLocal对象）的API也就无法从ThreadLocalMap里取出指定的数据。</p><p>​<strong>在上面的例子中，A对象被回收了，这些get和set方法也访问不到了，也就没法从ThreadLocalMap里取出数据了。没法利用API取出数据，那这个Entry对象还有用吗？？所以最好的方法是在A对象被回收后，系统自动回收对应的Entry对象，但是让Entry对象或其中的value对象做为弱引用都是非常不合理的（这两个要是使用弱引用，都可能造成数据意外丢失）。所以，让key（threadLocal对象）为弱引用，自动被垃圾回收，key就变为null了，下次，我们就可以通过Entry不为null，而key为null来判断该Entry对象该被清理掉了。</strong></p><p>​至于ThreadLocalMap为什么不给外界提供API来操作数据，我觉得是因为这个Map对于一个线程只有一份，任何地方都在用，为了<strong>提供更方便的API</strong>和<strong>为了我们不破换其他框架保存到里面的数据（数据不被污染</strong>），所以才用ThreadLocal作为key和API来操作数据。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p>​综上，Entry的key被设计为弱引用就是<strong>为了让程序自动的对访问不到的数据进行回收提醒</strong>。所以，在访问不到的数据被回收之前，内存泄漏确实是存在的，但是我们不用担心，就算我们不调用remove，ThreadLocalMap在内部的set，get和扩容时都会清理掉泄漏的Entry，内存泄漏完全没必要过于担心</p><p>所以，<strong>ThreadLocal的建议使用方法</strong>：</p><ul><li><p>设计为static的，被class对象给强引用，线程存活期间就不会被GC。可根据实际情况来决定是否调用remove</p></li><li><p>非static的，放置在长对象（比如被spring管理的对象）的内部，也不会被GC。使用完后主动调用remove</p></li></ul><p>​个人也觉得没必要让创建的ThreadLocal对象生命周期过短，ThreadLocal被设计出来本身就是用来跨方法栈获取当前线程的数据或者无锁的获取线程安全的数据，空间交换了线程安全的上锁时间。只要让ThreadLocal具有线程的生命周期，就完全没必要使用remove方法，也完全不用担心内存泄漏的问题。</p><p>​另外说一点，HashMap是使用拉链法解决hash冲突的，ThreadLocalMap是使用线性探测解决hash冲突的（内部只维护Entey数组，没有链表）。所以，源码中在清除泄漏的Entry时，会进行rehash，防止数组的当前位置为null后，有hash冲突的Entry访问不到的问题。</p>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMS</title>
      <link href="/2020-09-19/cms/"/>
      <url>/2020-09-19/cms/</url>
      
        <content type="html"><![CDATA[<hr><p>​主要分析了CMS收集器的算法实现和收集流程，和部分关键参数对CMS的影响，以及三色标记如何解决对象漏标问题。并在最后总结了CMS的优缺点</p><span id="more"></span><p>​CMS（Concurrent Mark-Sweep）是一种基于<strong>标记-清除算法</strong>实现的老年代垃圾回收器，<strong>以获取最短停顿时间为目标</strong>，适合对响应时间敏感的应用（如 Web 系统）。其核心思想是尽可能地让 GC 工作与用户线程并发执行，降低停顿时间。</p><p>​一次CMS gc会算作两次full gc，分别为初始标记和最终标记（算上的时STW次数），但在多次收集后产生的空间碎片如果影响到了对象的分配，也会才用<strong>标记-整理</strong>算法收集一次</p><p>​清除算法会产生空间碎片，如果cms区预留的空闲内存不能满足新对象的分配，那么会触发<strong>Concurrent Mode Failure</strong>，这时会冻结用户线程，临时启用<strong>Serial Old</strong>收集器重新回收老年代的垃圾，全程STW，耗时很长</p><ul><li>初始标记(CMS initial mark): STW，仅标记GCRoots对象的下一个可达对象，很快</li><li>并发标记(CMS concurent mark)</li><li>重新标记(CMS remark): STW，解决并发标记时”那些消失的对象“</li><li>并发清除(CMS concurrent sweep)</li></ul><h2 id="1-参数"><a href="#1-参数" class="headerlink" title="1.参数"></a>1.参数</h2><ul><li><p><strong>-XX:+UseConcMarkSweepGC</strong>   ： 启用CMS收集器（年轻代默认使用ParNew收集器）</p></li><li><p><strong>–XX:CMSWaitDuration&#x3D;2000</strong> ： cms后台线程的轮询间隔时间（ms单位)</p></li><li><p><strong>-XX:+UseCMSInitiatingOccupancyOnly</strong> : 使用基于设定的阈值进行CMS gc，值为CMSInitiatingOccupancyFraction</p></li><li><p><strong>-XX:CMSInitiatingOccupancyFraction&#x3D;80</strong> : 在UseCMSInitiatingOccupancyOnly参数启用后生效。当CMS区（老年代）占比达到80%后，启用CMS垃圾回收。默认为-1，代表不启用，则老年代垃圾回收阈值算法为：**( (100 - MinHeapFreeRatio) + (CMSTriggerRatio * MinHeapFreeRatio) &#x2F; 100.0) &#x2F; 100.0** &#x3D; 92%</p></li><li><p><strong>-XX:ConcGCThreads&#x3D;2</strong> ：并发gc线程数，默认为（ParallelGCThreads+3）&#x2F; 4。ParallelGCThreads为新生代并行GC线程数，当CPU数量小于8时，ParallelGCThreads的值就是CPU的数量，当CPU数量大于8时，ParallelGCThreads的值等于3+5*cpuCount &#x2F; 8 （可用jstack查看）</p></li></ul><h2 id="2-三色标记"><a href="#2-三色标记" class="headerlink" title="2 三色标记"></a>2 三色标记</h2><h3 id="2-1-含义"><a href="#2-1-含义" class="headerlink" title="2.1 含义"></a>2.1 含义</h3><table><thead><tr><th>颜色</th><th>含义</th></tr></thead><tbody><tr><td><strong>白色</strong></td><td>尚未被标记的对象，<strong>可能是垃圾</strong></td></tr><tr><td><strong>灰色</strong></td><td>被标记为可达，但<strong>其内部引用的对象还没有全部扫描完</strong></td></tr><tr><td><strong>黑色</strong></td><td>可达，且其所有引用的对象也都已经被标记（扫描完）</td></tr></tbody></table><p>​在三色标记开始时，<strong>所有对象初始状态都是白色</strong>。GC 从 GCRoots 出发，只能扫描到 GCRoots 可达的对象。<strong>每当扫描到一个新对象时，它会先被标记为灰色</strong>（表示已经被发现但尚未处理完）。<strong>当该对象的所有引用对象也都被扫描并标记后，它就会被染为黑色</strong>（表示处理完毕，不可回收）。</p><p>而对于那些<strong>不可达的对象</strong>，由于没有任何路径从 GCRoots 可以触达它们，因此它们<strong>不会被扫描</strong>，颜色保持为白色，最终被识别为垃圾对象。</p><p>因此，在三色标记结束时，只会存在<strong>黑色和白色两类对象</strong>：</p><ul><li><strong>黑色对象</strong>：可达、已完全处理，<strong>不能被回收</strong></li><li><strong>白色对象</strong>：不可达、未被处理，<strong>将被回收</strong></li></ul><h3 id="2-2-问题"><a href="#2-2-问题" class="headerlink" title="2.2 问题"></a>2.2 问题</h3><ul><li>浮动垃圾：被标记为黑色的对象还会继续存活。但如果我们的用户线程此时对黑色对象丢弃引用，这个黑色对象就不可达了，就应该在本次垃圾清理中被回收。但这个影响不大，下次GC可进行处理</li><li><strong>对象漏标</strong>：<strong>在并发标记阶段，应用线程可能会修改对象引用关系，导致本应可达的对象未被正确扫描，仍然保持白色，最终被误回收。</strong>有如下两种情况<ul><li>对黑色对象A（此时A已完全扫描完毕）内部赋值一个白色对象B。B产生了漏标</li><li>对灰色对象C（此时C内部还未扫描完）内部暂时断开了一个对象D使其变为白色，并在扫描完成后重新将D赋值到C中</li></ul></li></ul><h3 id="2-3-增量更新（Incremental-Update）"><a href="#2-3-增量更新（Incremental-Update）" class="headerlink" title="2.3 增量更新（Incremental Update）"></a>2.3 增量更新（Incremental Update）</h3><p>顾名思义，表示增加了引用。增量更新关注的是<strong>引用新增</strong>的情况，尤其是解决以下对象漏标场景：</p><blockquote><p>黑色对象 A 在并发标记后，新增引用了一个未被标记的白色对象 B。</p></blockquote><p>在这种情况下，为了避免漏标，<strong>写屏障机制会将 A 重新标记为灰色</strong>，使其在“重新标记（Remark）”阶段重新被扫描一次，从而发现并标记 B，确保其不会被错误回收。<strong>总结就是黑色对象A一旦新插入了白色对象B的引用之后，A就变回灰色对象了</strong>。</p><p>​<strong>CMS 使用增量更新策略</strong>，因为它是老年代回收器，老年代中的对象多数是长寿命的，结构稳定，<strong>引用新增比引用删除更常见</strong>。但增量更新<strong>只能处理“新增引用”，无法处理“引用删除”导致的漏标，因此并不完美</strong>。这也是 CMS 在 JDK9 被标记为过时的重要原因之一。</p><h3 id="2-4-原始快照（Snapshot-At-The-Beginning，SATB）"><a href="#2-4-原始快照（Snapshot-At-The-Beginning，SATB）" class="headerlink" title="2.4 原始快照（Snapshot-At-The-Beginning，SATB）"></a>2.4 原始快照（Snapshot-At-The-Beginning，SATB）</h3><p>​<strong>保存一份并发标记开始时的引用快照</strong>，当后续并发标记过程中对这些引用删除时，都会被记录到SATB缓冲区，标记结束后SATB缓冲区的对象被重新标记为存活。</p><p>​<strong>原始快照只处理对灰色对象C删除白色对象D的情况（将D记录到SATB缓冲区），重新标记阶段会在将D标为活跃。但不处理黑色新增引用，需要依赖其他机制保证（一般都是依赖写屏障，将B直接标为存活）</strong></p><p>​<strong>G1使用原始快照能完全避免对象漏标</strong>，因为它就是用写屏障直接标记白色对象为存活的方式来处理给黑色对象新增的白色对象这种漏标情况。即<strong>SATB处理删除，写屏障兜底新增</strong>。虽不可避免的会增加浮动垃圾，但肯定不会漏标</p><h2 id="3-cms-gc触发条件"><a href="#3-cms-gc触发条件" class="headerlink" title="3 cms gc触发条件"></a>3 cms gc触发条件</h2><ul><li><a href="https://heapdump.cn/article/190389">原文</a></li><li>foreground collector  ：空间分配不够触发</li><li>background collector<ul><li>显式调用 <code>System.gc()</code>，且配置了 <code>-XX:+ExplicitGCInvokesConcurrent</code></li><li>未配置 <code>UseCMSInitiatingOccupancyOnly</code> 时，JVM 会根据运行统计数据动态判断</li><li>OldGen 达到某个使用阈值（静态或动态计算）</li><li>Young GC <strong>失败或预计失败</strong>，JVM 触发 CMS 作为<strong>悲观策略</strong></li><li>元空间（Metaspace）扩容触发，且 <code>CMSClassUnloadingEnabled=true</code>（默认开启）</li></ul></li></ul><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><ul><li>CMS 是一种低停顿老年代收集器，适合延迟敏感型系统。</li><li>优点是并发执行、停顿低，缺点如下<ul><li>空间碎片严重</li><li>需要预留足够空间，否则触发Concurrent Mode Failure 会退化为Serial GC，非常耗时</li><li><strong>只用了增量更新，没有完全解决漏标</strong></li><li>会产生浮动垃圾</li></ul></li><li>推荐配合 <code>CMSInitiatingOccupancyFraction</code> 与 <code>UseCMSInitiatingOccupancyOnly</code> 控制触发阈值，防止内存不足时被动触发 Full GC。</li></ul>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMS </tag>
            
            <tag> 三色标记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码篇-线程池</title>
      <link href="/2020-05-12/java-yuan-ma-pian-xian-cheng-chi/"/>
      <url>/2020-05-12/java-yuan-ma-pian-xian-cheng-chi/</url>
      
        <content type="html"><![CDATA[<p>​对jdk的ThreadPoolExecutor和ScheduledThreadPoolExecutor进行了详细的源码分析</p> <span id="more"></span><h2 id="1-ThreadPoolExecutor"><a href="#1-ThreadPoolExecutor" class="headerlink" title="1 ThreadPoolExecutor"></a>1 ThreadPoolExecutor</h2><h3 id="1-1-重要字段"><a href="#1-1-重要字段" class="headerlink" title="1.1 重要字段"></a>1.1 重要字段</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//状态控制器，初始值： 1110 0000 0000 0000 0000 0000 0000 0000</span><span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>RUNNING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_BITS <span class="token operator">=</span> Integer<span class="token punctuation">.</span>SIZE <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 29位</span><span class="token comment" spellcheck="true">// 0001 1111 1111 1111 1111 1111 1111 1111</span><span class="token comment" spellcheck="true">// 1110 0000 0000 0000 0000 0000 0000 0000 取反后</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CAPACITY   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                            <span class="token comment" spellcheck="true">// 运行中：111 00000000000000000000000000000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不再接受新任务的入队列，但已经入队列还未还未的任务还可以继续执行</span><span class="token comment" spellcheck="true">// 000 00000000000000000000000000000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不接受新任务入队列，也不处理队列中的任务，中断正在处理任务的worker</span><span class="token comment" spellcheck="true">// 001 00000000000000000000000000000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全部完成，任务终止，worker数为0</span><span class="token comment" spellcheck="true">// 010 00000000000000000000000000000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 011 00000000000000000000000000000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 计算线程池的状态</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token operator">~</span>CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 后29位为0，前3为跟随c</span><span class="token comment" spellcheck="true">// 计算线程池有多少工作线程</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 前3位为0，后面29为跟随 c</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> wc<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rs <span class="token operator">|</span> wc<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 任务队列</span><span class="token keyword">private</span> <span class="token keyword">final</span> BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 主锁</span><span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 工作线程的Set</span><span class="token keyword">private</span> <span class="token keyword">final</span> HashSet<span class="token operator">&lt;</span>Worker<span class="token operator">></span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Worker<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> Condition termination <span class="token operator">=</span> mainLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 池已经创建的线程最大数（一个动态值，线程池整个周期同时存在的最多线程数）</span><span class="token keyword">private</span> <span class="token keyword">int</span> largestPoolSize<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 完成的任务数</span><span class="token keyword">private</span> <span class="token keyword">long</span> completedTaskCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建线程的工厂</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> ThreadFactory threadFactory<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 拒绝策略</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> RejectedExecutionHandler handler<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 非核心线程数的保持时间</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 是否允许核心线程过期</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> allowCoreThreadTimeOut<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 核心线程数</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> corePoolSize<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最大线程数</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> ​ThreadPoolExecutor利用一个int类型的数来同时保存当前线程池状态和工作线程的数量，高3为用来表示当前线程的状态，低29为用来保存工作线程的数量。通过位运算实现状态和数量的原子性操作，避免单独维护两个变量时的竞态条件</p><p>​ThreadPoolExecutor内部的Worker就是工作线程的抽象，每一个Worker都是一个工作线程。同时，Worker又继承了AQS可以充当锁的角色，目的是更好的<strong>让外部知道当前worker是否正在运行，以帮助回收或中断Worker</strong>。worker运行时（获取到任务后开始运行）会加锁，通过测试当前worker是否加上锁或者是否可以获得当前worker的锁，便可知道worker是否繁忙，有助于worker的清理</p></blockquote><h3 id="1-2-核心方法"><a href="#1-2-核心方法" class="headerlink" title="1.2 核心方法"></a>1.2 核心方法</h3><h4 id="1-2-1-shutdown（平滑关闭）"><a href="#1-2-1-shutdown（平滑关闭）" class="headerlink" title="1.2.1 shutdown（平滑关闭）"></a>1.2.1 shutdown（平滑关闭）</h4><p>​将当前线程池状态设为SHUTDOWN状态，再中断空闲的Worker（判断Worker是否空闲就通过它的锁方法）。<strong>所以，执行了这个方法后，正在执行的任务不会被中断，且已经存在workQueue中的Runnable也可以被执行，但是不能放入新的Runnable</strong></p><h4 id="1-2-2-shutdownNow（立即关闭）"><a href="#1-2-2-shutdownNow（立即关闭）" class="headerlink" title="1.2.2 shutdownNow（立即关闭）"></a>1.2.2 shutdownNow（立即关闭）</h4><p>​将当前线程池状态设为STOP状态，将所有Worker设置为中断位，且倒出workQueue中的所有Runnable。<strong>所以，执行了这个方法后，正在运行的任务如果检测了中断位就会立即退出，如果没检测就还是会执行完，而已经存在workQueue中的Runnable将不会被执行，会将这些Runnable返回给调用者，让调用者处理</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 平滑关闭线程池： * 1. 将线程池状态设为SHUTDOWN，此时： *    - 继续执行已提交的任务（包括正在执行的和队列中的） *    - 拒绝新任务提交（execute()会抛出RejectedExecutionException） * 2. 仅中断空闲Worker（通过tryLock()判断） *  * 注意：正在执行的任务不会被中断，调用者需确保任务有合理的终止逻辑 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 检查每个worker线程是否可以修改</span>        <span class="token function">advanceRunState</span><span class="token punctuation">(</span>SHUTDOWN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// CAS操作更新状态为SHUTDOWN</span>        <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// interrupt所有空闲的worker</span>    <span class="token function">onShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hook for ScheduledThreadPoolExecutor</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 立即关闭线程池： * 1. 将线程池状态设为STOP，此时： *    - 中断所有Worker（无论是否在执行任务） *    - 丢弃队列中未执行的任务 *    - 拒绝新任务提交 * 2. 返回被丢弃的任务列表供调用者处理 *  * 注意： * - 正在执行的任务是否停止取决于任务是否响应中断 * - 典型使用场景：需要快速释放资源的紧急关闭 */</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> tasks<span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">advanceRunState</span><span class="token punctuation">(</span>STOP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置当前线程池状态为STOP</span>        <span class="token function">interruptWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// interrupt所有Worker</span>        tasks <span class="token operator">=</span> <span class="token function">drainQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将任务队列中的task全部丢弃给方法调用者</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tasks<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 尝试终止线程池的最终状态转换： * 1. 检查是否满足终止条件（3种直接返回的情况）： *    - RUNNING状态：还有任务在执行 *    - 已经是TIDYING/TERMINATED状态：避免重复操作 *    - SHUTDOWN状态但队列不空：等待任务处理完成 * 2. 如果仍有活跃Worker，尝试中断单个空闲Worker * 3. 最终状态转换： *    SHUTDOWN/STOP -> TIDYING -> TERMINATED */</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 三种情况下直接退出</span>        <span class="token comment" spellcheck="true">// 1.线程池处于Running状态，还在运行</span>        <span class="token comment" spellcheck="true">// 2.线程池状态大于TIDYING，代表当前线程池已经终结</span>        <span class="token comment" spellcheck="true">// 3.shutdown状态，并且任务队列不为空，代表需等待这些任务完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> TIDYING<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Eligible to terminate</span>            <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span>ONLY_ONE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>        mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span>TIDYING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">terminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hook方法</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    ctl<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>TERMINATED<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    termination<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// else retry on failed CAS</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-3-setCorePoolSize"><a href="#1-2-3-setCorePoolSize" class="headerlink" title="1.2.3 setCorePoolSize"></a>1.2.3 setCorePoolSize</h4><p>设置核心线程数 corePoolSize，并根据变化动态调整 worker 数量</p><ul><li><strong>若变小：中断多余的空闲线程</strong></li><li><strong>若变大：启动新的 worker 以尽快处理等待队列中的任务</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> maximumPoolSize <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> delta <span class="token operator">=</span> corePoolSize <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 需要减少</span>        <span class="token comment" spellcheck="true">// 内部会对所有空闲线程发出中断信号，使其从阻塞中退出，从而在 getTask 时主动终结</span>        <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 需要增加</span>        <span class="token comment" spellcheck="true">// 最多不超过delta个线程</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>delta<span class="token punctuation">,</span> workQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态增加worker数量，直至任务队列为空</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-4-execute（投递任务）"><a href="#1-2-4-execute（投递任务）" class="headerlink" title="1.2.4 execute（投递任务）"></a>1.2.4 execute（投递任务）</h4><p><strong>核心流程</strong>：</p><ul><li>先判断线程池的工作线程数量是否小于核心线程数，小于核心线程数直接新建线程来执行</li><li>如果核心线程数满了，则将Runnable投入到workQueue中</li><li>如果workQueue满了，则创建非核心线程来继续执行任务</li><li>如果线程池中的工作现场数量到达了maximumPoolSize的值，则使用拒绝策略来执行任务</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 执行execute的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取当前线程池状态</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否小于核心线程数，是则新建线程运行任务</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 核心数满了，并且当前线程池状态为Running，加到等待队列中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 等待队列满了，新建线程，但不能大于最大线程数</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 创建失败，直接调用拒绝策略</span>        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-5-worker-run"><a href="#1-2-5-worker-run" class="headerlink" title="1.2.5 worker#run"></a>1.2.5 worker#run</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">/</span> Worker的Runnable方法<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span>Worker w<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread wt <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Runnable task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>    w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> null<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// allow interrupts</span>    <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 利用阻塞队列，一直循环取任务执行（阻塞队列为空时会阻塞当前想取出元素的线程）</span>        <span class="token comment" spellcheck="true">// 如果getTask为null，就代表会终结当前工作线程</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// worker加锁。表示worker正在运行Runnable</span>            w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span> <span class="token operator">||</span>                    <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                            <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;&amp;</span>                    <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hook before</span>                Throwable thrown <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 真正的运行Runnable</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span>                    <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span>                    <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hook after</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                task <span class="token operator">=</span> null<span class="token punctuation">;</span>                w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>                w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 核心方法之一：从工作队列中获取一个任务 * 如果线程需要被回收（根据线程池状态、是否超时等判断），会返回 null来退出线程 */</span><span class="token keyword">private</span> Runnable <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 上一次循环的poll()是否超时</span>    <span class="token keyword">boolean</span> timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 死循环取任务</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前线程池状态</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 状态校验</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> STOP <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是否允许超时：开启核心线程超时，或该线程为非核心线程</span>        <span class="token keyword">boolean</span> timed <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">||</span> wc <span class="token operator">></span> corePoolSize<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断当前线程是否该终结：</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>wc <span class="token operator">></span> maximumPoolSize <span class="token operator">||</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> timedOut<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>wc <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 原子性的尝试减少一个工作线程，减少成功才返回结束线程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndDecrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 根据timed选择超时（poll）还是阻塞（take）等待</span>            Runnable r <span class="token operator">=</span> timed <span class="token operator">?</span> workQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">)</span> <span class="token operator">:</span> workQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> r<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取到了任务，可以返回了</span>            <span class="token comment" spellcheck="true">// 到这说明poll()超时了，没取到任务。设置timeOut，让下次循环可触发终止判断</span>            timedOut <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> retry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// poll或take阻塞时触发了中断（相当于唤醒），再次进行重试</span>            timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="总体工作流程"><a href="#总体工作流程" class="headerlink" title="总体工作流程"></a>总体工作流程</h5><p>​调用getTask取任务来执行，如果取出的任务为空，则这个Worker也就结束了（终结了）。getTask不为空的话，还是先进性一系列的线程池状态校验，在执行hook函数（beforeExecute），在真正的执行这个Runnable，再执行hook函数（afterExecute），最后再将completedTasks加1，表示当前Worker完成的任务总数</p><h5 id="getTask（实现线程超时回收的关键）"><a href="#getTask（实现线程超时回收的关键）" class="headerlink" title="getTask（实现线程超时回收的关键）"></a>getTask（实现线程超时回收的关键）</h5><ul><li>先进行一系列的状态校验</li><li><strong>判断是否允许超时（满足任意一个就行）</strong><ul><li><strong>allowCoreThreadTimeOut为true（都允许核心线程超时了，那没任务的情况下线程池就不该有worker线程）</strong></li><li><strong>当前线程池的工作线程数量大于核心线程数量就允许超时</strong></li></ul></li><li>判断是否触发减少工作线程数量的机制，然后使用CAS减少工作线程数量，减少成功才返回null，结束当前工作线程</li><li>通过阻塞队列取Runnable，如果不允许超时，则会一直阻塞到这。如果允许超时，则会超时等待keepAliveTime纳秒取Runnable，如果取不出来，则设置一次已经超时，再来循环一次，来判断是否该减少工作线程</li></ul><h2 id="2-ScheduledThreadPoolExecutor"><a href="#2-ScheduledThreadPoolExecutor" class="headerlink" title="2 ScheduledThreadPoolExecutor"></a>2 ScheduledThreadPoolExecutor</h2><h3 id="2-1-ScheduledExecutorService"><a href="#2-1-ScheduledExecutorService" class="headerlink" title="2.1 ScheduledExecutorService"></a>2.1 ScheduledExecutorService</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ScheduledExecutorService</span> <span class="token keyword">extends</span> <span class="token class-name">ExecutorService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建一个一次性的延迟（定时）任务。     * 框架中cron表达式就是通过此接口实现（只需要在任务完成后，在计算下一次的执行时间，再用此方法定时执行，以此类推）     */</span>    <span class="token keyword">public</span> ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">schedule</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">,</span>                                       <span class="token keyword">long</span> delay<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 执行Callable接口的任务，也是一个一次性的定时任务    */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> ScheduledFuture<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">schedule</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> callable<span class="token punctuation">,</span>                                           <span class="token keyword">long</span> delay<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 基于固定的频率执行定时任务      * 例：初始执行任务的时间戳：当前时间戳（调用时）+ initialDelay      * 第二次执行：初始执行任务开始时的时间戳 + period      * 第三次执行：第二次执行任务开始时的时间戳 + period     *     * 典型场景：严格周期性的任务，如：     * - 每分钟采集一次系统指标     * - 每5秒发送心跳包     */</span>    <span class="token keyword">public</span> ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">,</span>                                                  <span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span>                                                  <span class="token keyword">long</span> period<span class="token punctuation">,</span>                                                  TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 基于固定的周期执行定时任务      * 例：初始执行任务的时间戳：当前时间戳（调用时）+ initialDelay     *  第二次执行：初始任务执行完结时的时间戳 + delay     *  第三次执行：第二次任务执行完结时的时间戳 + delay     *     * 典型场景：需要冷却时间的任务，如：     * - 数据库批量处理（保证每次处理完成后再间隔）     * - 异步结果轮询（避免密集请求）     */</span>    <span class="token keyword">public</span> ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">,</span>                                                     <span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span>                                                     <span class="token keyword">long</span> delay<span class="token punctuation">,</span>                                                     TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-DelayedWorkQueue"><a href="#2-2-DelayedWorkQueue" class="headerlink" title="2.2 DelayedWorkQueue"></a>2.2 DelayedWorkQueue</h3><p>​为ScheduledThreadPoolExecutor内部固定的阻塞队列，基于<strong>小顶堆</strong>数据结构实现。</p><p>​投递的每个任务被封装后都扔进DelayedWorkQueue中，<strong>按照任务被执行的时间戳进行小顶堆排序，堆顶就刚好是队列中下个需要执行的任务</strong>。同时基于<strong>Leader-Follower 模式</strong>进行线程调度的优化，只有leader进行延时等待堆首任务，其余线程直接阻塞等待</p><p>​核心字段和方法如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DelayedWorkQueue</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">BlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数组初始容量</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组实现的最小顶堆结构，queue[0]始终都是最快需要被执行的那个任务</span>        <span class="token keyword">private</span> RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> queue <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">RunnableScheduledFuture</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>INITIAL_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// leader线程，定时等待queue[0]任务的那个线程</span>        <span class="token keyword">private</span> Thread leader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> Condition available <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向堆尾新加入任务，进行上移（和父节点换个位置）调整位置</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父节点的索引</span>                RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> queue<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调整完毕，直接break</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 当前节点的下次执行时间更快，继续递归向上遍历，直到放到合适的位置</span>                queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token function">setIndex</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> parent<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token function">setIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">/**         * Sifts element added at top down to its heap-ordered spot.         * Call only when holding lock.&lt;p/>         * 元素下移操作（弹出堆顶元素后，将堆尾元素放置到堆顶再重新调整下移）         */</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> half <span class="token operator">=</span> size <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> half<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 较小值节点的索引（初始为左子节点）</span>                <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 小值，初始为左子节点</span>                RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> queue<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 右子节点索引</span>                <span class="token keyword">int</span> right <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 如果右子节点更小，则将c替换为右子节点，同时替换child为右子节点索引</span>                    c <span class="token operator">=</span> queue<span class="token punctuation">[</span>child <span class="token operator">=</span> right<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 目标元素比最小的子节点元素还小，目的就达成了，直接break</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 左右子节点中较小的节点和父节点交换</span>                queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>                <span class="token function">setIndex</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 替换目标索引，继续将参数k向下比较</span>                k <span class="token operator">=</span> child<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token function">setIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**          重写的offer方法（该方法就是线程池投递任务的方法）         */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>Runnable x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>            <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                    <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                size <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 数组中还没有任务，直接放在首位</span>                    queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token function">setIndex</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 已存在定时任务，看是否需要调整位置</span>                    <span class="token function">siftUp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 代表向队列添加了一个需要最快执行的任务</span>                    <span class="token comment" spellcheck="true">// 需要重置leader线程，并唤醒一个阻塞的线程（可能为无限阻塞的，也可能为上个定时等待的leader线程）来定时等待这个任务</span>                    <span class="token comment" spellcheck="true">// 换种角度，如果唤醒的是上个定时等待的leader线程，那肯定是很赚的，因为不需要启动多个定时等待的线程了</span>                    <span class="token comment" spellcheck="true">// 如果唤醒的不是上个leader线程，那就会存在多个定时等待的线程，这是没法避免的</span>                    leader <span class="token operator">=</span> null<span class="token punctuation">;</span>                    available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将阻塞的线程从等待队列转移到同步队列，当下面的unlock后再唤醒阻塞线程</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/*        重写的take方法                所以，多线程多任务且没有任务需要立即执行造成的结果就是：            1、1个leader线程定时等待队首任务（实时的向线程池添加最快需要执行的任务，可能存在多个定时等待的线程，且至少他们曾经是leader线程）            2、其余全部线程无限期等待，最大程度的减少资源损耗（因为任务都有顺序，没必要同时让所有线程都定时等待，给底层的通知增加压力）        总结：        1、当没有任务时：所有线程都无限等待，没有leader线程，等待任务入队列的唤醒        2、当有任务时：唤醒的线程成为leader线程，当这个leader线程等待到期时，            取消自己为leader线程（另一种说法就是自己变成了follower线程），            唤醒一个无限期等待的线程，然后自己就去执行这个到期的任务，被唤醒的线程就会变成新的leader线程。一直这么循环下去        3、当实时向线程池添加最快需要执行的任务时：会取消当前leader线程，并唤醒一个阻塞的线程，让其成为新的leader线程         */</span>        <span class="token keyword">public</span> RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>            <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> first <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不存在定时任务，所有线程都在这等待</span>                        available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">long</span> delay <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 时间已过，弹出队首任务去执行它</span>                            <span class="token keyword">return</span> <span class="token function">finishPoll</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 进入下面，无论怎样都要等待，所以直接把first置为null，下次循环再获取</span>                        <span class="token comment" spellcheck="true">// 因为可能多个线程走到下面，都持有了队首的引用。避免出现RunnableScheduledFuture运行完了但不能及时回收的情况</span>                        <span class="token comment" spellcheck="true">// 当然，也只有一次性的RunnableScheduledFuture才会回收，定时任务都是循环使用这个RunnableScheduledFuture的</span>                        first <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// don't retain ref while waiting</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 由leader存在，其他线程只需要无限期等待就行</span>                            available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有leader存在，设置当前线程为leader，并定时等待（时间就为最近待执行的那个任务的距离下次执行时间间隔）</span>                            Thread thisThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            leader <span class="token operator">=</span> thisThread<span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                available<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定时等待</span>                            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 时间一到，说明队首任务可执行了，但当前线程可能不是leader线程了，需要判断一下再置空</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> thisThread<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 必须判断，有可能实时的添加了一个最快需要执行的线程，导致当前线程被取消了leader</span>                                    leader <span class="token operator">=</span> null<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 任务取出来了，leader为空且存在队首任务，需要唤醒一个无限等待的线程</span>                    <span class="token comment" spellcheck="true">// 让其成为leader线程并继续定时等待</span>                    available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3 总结"></a>2.3 总结</h3><p>​ScheduledThreadPoolExecutor本质还是个线程池，<strong>内部的DelayedWorkQueue就是工作队列。投递的定时任务和普通任务都会封装为ScheduledFutureTask，并最终放入DelayedWorkQueue里的那个数组（只不过定时任务有延时，可能会放在队列中的任何位置。而普通任务封装的ScheduledFutureTask执行时间就是当前而已，始终会放到队列的队首并立马执行）</strong></p><p>​DelayedWorkQueue实现了BlockingQueue，是基于<strong>数组的最小顶堆的数据结构</strong>实现，以此<strong>保证数组的第一个位置就是最近需要被执行的任务</strong>。结构图和特点如下</p><p>​ScheduledThreadPoolExecutor还使用了<strong>Leader-Follower模式</strong>，leader线程定时等待工作队列中第一个任务，其余线程一般就都无限期等待（如果向工作队列添加的是一个最快需要被执行的任务，可能就有多个定时等待的线程，但leader线程始终都会是最快需要被执行任务的线程）。</p><p><strong>为什么使用Leader-Follower模式：</strong></p><blockquote><p>​避免资源的浪费。定时任务再怎么排序，也只会有一个是最快需要执行的任务（时间相同会根据sequenceNumber排序），只需要设计一个定时等待线程等待这个最快需要执行的任务。当这个最快需要执行的任务触发后，再设计一个新的leader线程等待下一个最近的定时任务。理想的情况下，定时任务线程池只会有一个定时等待的线程（Leader线程），其余线程要么正在运行定时任务，要么全部无限期阻塞（Follower线程），最大程度的避免资源浪费（无限期等待的线程不用想其它的，乖乖等待被其他线程唤醒就行。而定时等待的线程需要在时间到达后被唤醒，至少需要被定时器监视以用来执行唤醒操作）</p></blockquote><ul><li><strong>固定周期</strong>：受执行时常影响，只有当任务结束后才相对于结束时间来计算任务的下次执行时间</li><li><strong>固定频率</strong>：不受任务的执行时常所影响，当任务投递到队列时就可以预判到以后任何执行该任务的时间</li></ul><p>​一个被投递的周期任务首先会封装成ScheduledFutureTask，再根据其下次执行时间放在DelayedWorkQueue的某个位置。如果放在了DelayedWorkQueue的队首，则使用定时任务线程池里的线程超时等待，以便时间到达后开始执行。正常执行完毕则会先根据其是固定周期任务还是固定频率的任务来计算下次执行时间并修赋值到ScheduledFutureTask的time字段，再将这个任务再次入队列，这样递归去执行。执行中如果抛出了异常，则会将ScheduledFutureTask的state修改为异常，之后就不再执行这个任务了</p>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码篇-Future</title>
      <link href="/2020-05-09/java-yuan-ma-pian-future/"/>
      <url>/2020-05-09/java-yuan-ma-pian-future/</url>
      
        <content type="html"><![CDATA[<hr><p>​jdk中Future接口实现类相关源码解析。包括FutureTask和 ScheduledFutureTask</p> <span id="more"></span><p>Future接口表示一个异步操作的结果，即未来的结果，同时实现了 <code>Runnable</code> 和 <code>Future</code> 接口。提供了如下的一些基础方法可获取、判断和取消等操作</p><ul><li><p><code>get()</code>：<strong>阻塞</strong>直到计算完成并返回结果（支持超时设置）</p></li><li><p><code>isDone()</code>：<strong>非阻塞</strong>检查任务是否完成（成功&#x2F;失败&#x2F;取消）</p></li><li><p><code>cancel(boolean mayInterruptIfRunning)</code>：尝试取消任务，参数决定是否中断执行中的线程</p></li><li><p><code>isCancelled()</code>：判断任务是否被取消</p></li></ul><p>其实现类为FutureTask，就是用它来实现Callable接口的功能</p><hr><h2 id="1-1-FutureTask"><a href="#1-1-FutureTask" class="headerlink" title="1.1 FutureTask"></a>1.1 FutureTask</h2><h3 id="1-1-1-重点字段和方法"><a href="#1-1-1-重点字段和方法" class="headerlink" title="1.1.1 重点字段和方法"></a>1.1.1 重点字段和方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RunnableFuture</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// state字段，表示了当前Future的状态，取值为如下字段</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NEW          <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始状态，新建</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COMPLETING   <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正在结束</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NORMAL       <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正常执行完毕</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXCEPTIONAL  <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 异常执行完毕</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED    <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前一个状态必须是NEW，已取消（未中断）</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INTERRUPTING <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前一个状态必须是NEW，正在中断（中断）</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INTERRUPTED  <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取消成功的才可以设置，中断完成（中断）</span>    <span class="token comment" spellcheck="true">// 待运行的Callable任务</span>    <span class="token keyword">private</span> Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> callable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Callable执行的结果。如果出现执行的过程中异常，则保存的是异常对象</span>    <span class="token keyword">private</span> Object outcome<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 运行Callable#call方法的线程（也即是运行业务代码的线程）</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Thread runner<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当这里面的Callable还未执行完，却有其他线程调用Future#get()方法，</span>    <span class="token comment" spellcheck="true">// 会将其他线程阻塞并构造为等待节点，维持一个链表结构，以便在Callable执行完毕后唤醒并回调</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> WaitNode waiters<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> NEW <span class="token operator">||</span>            <span class="token operator">!</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> runnerOffset<span class="token punctuation">,</span>                                         null<span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> c <span class="token operator">=</span> callable<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> state <span class="token operator">==</span> NEW<span class="token punctuation">)</span> <span class="token punctuation">{</span>                V result<span class="token punctuation">;</span>                <span class="token keyword">boolean</span> ran<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 执行业务方法</span>                    result <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ran <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result <span class="token operator">=</span> null<span class="token punctuation">;</span>                    ran <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token function">setException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 异常结束，将状态设为EXCEPTIONAL，如果等待队列有节点，则唤醒对应的线程</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ran<span class="token punctuation">)</span>                    <span class="token function">set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正常结束，将状态设为NORMAL，如果等待队列有节点，则唤醒对应的线程</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            runner <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> INTERRUPTING<span class="token punctuation">)</span>                <span class="token function">handlePossibleCancellationInterrupt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 阻塞获取</span>    <span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException <span class="token punctuation">{</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;=</span> COMPLETING<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 还未完全结束Callabke，进入等待</span>            s <span class="token operator">=</span> <span class="token function">awaitDone</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">report</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 根据state判断是否需要阻塞并做对于的事</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">awaitDone</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> timed <span class="token operator">?</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanos <span class="token operator">:</span> 0L<span class="token punctuation">;</span>        WaitNode q <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> queued <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前线程支持响应中断</span>                <span class="token function">removeWaiter</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> COMPLETING<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Callable运行完毕，且result已经设置完毕</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    q<span class="token punctuation">.</span>thread <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">return</span> s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 进入到以下分支，就代表Callable还未完全执行完毕</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> COMPLETING<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// cannot time out yet  Callable运行完毕，但正在设置result，让出执行时间，等待下次判断</span>                Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 第一次循环，构造等待节点</span>                q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WaitNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queued<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 还未加入等待队列，则将节点加入到等待队列中</span>                queued <span class="token operator">=</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> waitersOffset<span class="token punctuation">,</span>                                                     q<span class="token punctuation">.</span>next <span class="token operator">=</span> waiters<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>timed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 是否运行超时判断</span>                nanos <span class="token operator">=</span> deadline <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> 0L<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">removeWaiter</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> state<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                LockSupport<span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// 暂停当前线程，等待任务执行完毕的唤醒</span>                LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 任务执行完毕，唤醒等待队列的所有节点</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">finishCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert state > COMPLETING;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>WaitNode q<span class="token punctuation">;</span> <span class="token punctuation">(</span>q <span class="token operator">=</span> waiters<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> waitersOffset<span class="token punctuation">,</span> q<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Thread t <span class="token operator">=</span> q<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        q<span class="token punctuation">.</span>thread <span class="token operator">=</span> null<span class="token punctuation">;</span>                        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    WaitNode next <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    q<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// unlink to help gc</span>                    q <span class="token operator">=</span> next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        callable <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// to reduce footprint</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-2-总结"><a href="#1-1-2-总结" class="headerlink" title="1.1.2 总结"></a>1.1.2 总结</h3><ol><li>FutureTask根据内部的state字段来判断当前任务运行到了哪个阶段并作出对于的抉择，也使用<strong>volatile修饰保证它在多线程环境下的可见性</strong>。<ul><li><strong>state状态流转</strong>：<ul><li>NEW<code>→</code>COMPLETING<code>→</code>NORMAL<code>（成功）</code></li><li>NEW<code>→</code>COMPLETING<code>→</code>EXCEPTIONAL<code>（失败）</code></li><li>NEW<code>→</code>CANCELLED&#x2F;INTERRUPTED<code>（取消）</code></li></ul></li></ul></li><li>如果想获取任务执行的结果，要使用get来获取结果，get是个阻塞的方法。当任务还未执行完毕时，会将调用get的方法阻塞并构造成WaitNode，再通过内部的next字段链接下一个WaitNode，形成一个链表结构。当任务执行完毕后，内部调用的finishCompletion方法会判断等待链表是否为空，不为空就代表有线程在获取结果时被阻塞了，这时唤醒阻塞队列的所有线程，最终，调用get方法的线程返回结果。即<strong>使用 <code>WaitNode</code> 链表 + CAS 操作管理阻塞线程，避免显式锁开销</strong></li><li>只会允许任务执行一次，状态不可逆转</li></ol><h2 id="1-2-ScheduledFutureTask"><a href="#1-2-ScheduledFutureTask" class="headerlink" title="1.2 ScheduledFutureTask"></a>1.2 ScheduledFutureTask</h2><p>​ScheduledFutureTask继承了FutureTask，当<strong>向定时任务线程池投递任务时（Runnable或Callable），都会将其封装为ScheduledFutureTask</strong></p><h3 id="1-2-1-重点字段和方法"><a href="#1-2-1-重点字段和方法" class="headerlink" title="1.2.1 重点字段和方法"></a>1.2.1 重点字段和方法</h3><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledFutureTask</span><span class="token operator">&lt;</span>V<span class="token operator">></span>            <span class="token keyword">extends</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RunnableScheduledFuture</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 当前任务的id（自增的），代表了进入队列的顺序 &lt;br/>     * 当两个定时任务下次执行时间一致时，sequenceNumber越小就会越早执行     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceNumber<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 下次执行当前任务的纳秒时间戳</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> time<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 执行定时任务的纳秒间隔时间     * 大于0：代表固定的频率，不受任务的执行所花费的时间影响     * 等于0：代表不是一个重复的任务（只会执行一次     * 小于0：代表固定的时间间隔，基于任务执行完毕后的时间计算。（任务执行完后再基于当前时间计算下次执行时间）     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> period<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前任务在数组中的索引</span>    <span class="token keyword">int</span> heapIndex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>time <span class="token operator">-</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 比较方法，决定了放入数组的位置</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Delayed other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>other <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// compare zero if same object</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>other <span class="token keyword">instanceof</span> <span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ScheduledFutureTask<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">(</span>ScheduledFutureTask<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span>other<span class="token punctuation">;</span>            <span class="token keyword">long</span> diff <span class="token operator">=</span> time <span class="token operator">-</span> x<span class="token punctuation">.</span>time<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前任务的下次执行时间更长，返回正数</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sequenceNumber <span class="token operator">&lt;</span> x<span class="token punctuation">.</span>sequenceNumber<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> diff <span class="token operator">=</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span> <span class="token operator">-</span> other<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>diff <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>diff <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * false: 代表当前任务为一次性任务     * true: 定时任务     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPeriodic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> period <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当前任务执行完毕后，用来计算下次执行时间</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setNextRunTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> p <span class="token operator">=</span> period<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// p为两次执行时间的时间间隔的纳秒值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p大于0，即为固定时间执行的任务，基于初始运行时间计算下一次的执行时间</span>            time <span class="token operator">+=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// p小于0，为基于完成任务的时间来执行，基于任务运行完的时间，来计算出下一次的执行时间</span>            time <span class="token operator">=</span> <span class="token function">triggerTime</span><span class="token punctuation">(</span><span class="token operator">-</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 主方法，运行当前定时任务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> periodic <span class="token operator">=</span> <span class="token function">isPeriodic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canRunInCurrentRunState</span><span class="token punctuation">(</span>periodic<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>periodic<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 非定时任务，当作普通任务直接调用FutureTask的run方法运行</span>            ScheduledFutureTask<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ScheduledFutureTask<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">runAndReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 运行定时任务，且运行成功（没抛异常）</span>            <span class="token function">setNextRunTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置下一次执行时间</span>            <span class="token function">reExecutePeriodic</span><span class="token punctuation">(</span>outerTask<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 再把当前任务重新入队列</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**      父类的FutureTask中的方法，运行并重置状态，用于任务的多次执行          * 正常执行时：不会修改运行状态（也就是说这个操作不会修改state字段值，保持初始值，以支持重复执行）。         * 出现异常时：还是将state设为EXCEPTIONAL，也就是说一个定时任务要是抛出了异常，之后就不会再执行它了         */</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">runAndReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> NEW <span class="token operator">||</span> <span class="token comment" spellcheck="true">// 不为NEW状态的都不执行</span>            <span class="token operator">!</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> runnerOffset<span class="token punctuation">,</span>                                         null<span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> ran <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> c <span class="token operator">=</span> callable<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> s <span class="token operator">==</span> NEW<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不设置返回结果。多次执行的任务就不该有执行结果</span>                    ran <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 抛出异常，修改state为EXCEPTIONAL，以后也不在执行它</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// runner must be non-null until state is settled to</span>            <span class="token comment" spellcheck="true">// prevent concurrent calls to run()</span>            runner <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// state must be re-read after nulling runner to prevent</span>            <span class="token comment" spellcheck="true">// leaked interrupts</span>            s <span class="token operator">=</span> state<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> INTERRUPTING<span class="token punctuation">)</span>                <span class="token function">handlePossibleCancellationInterrupt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ran <span class="token operator">&amp;&amp;</span> s <span class="token operator">==</span> NEW<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-2-总结"><a href="#1-2-2-总结" class="headerlink" title="1.2.2 总结"></a>1.2.2 总结</h3><p><code>ScheduledFutureTask</code> 通过 <code>period</code> 字段判断任务类型：<code>0</code> 表示一次性任务，<code>&gt;0</code> 表示固定频率，<code>&lt;0</code> 表示固定延迟。</p><p>在 <code>run()</code> 方法中，若<strong>任务为周期性任务，执行完当前任务后会计算下次执行时间，并将自身重新提交至基于小顶堆的 <code>DelayedWorkQueue</code> 中，以维持调度</strong>。</p><ul><li>基于纳秒时间精度，避免 <code>System.currentTimeMillis()</code> 的系统时间变动干扰。</li><li>复用 <code>FutureTask</code> 的任务封装机制，增强任务调度能力。</li><li>精简实现，不依赖额外锁，主要通过最小堆和 <code>Delayed</code> 接口实现调度。</li></ul>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码篇-锁</title>
      <link href="/2020-04-18/java-yuan-ma-pian-suo/"/>
      <url>/2020-04-18/java-yuan-ma-pian-suo/</url>
      
        <content type="html"><![CDATA[<p>​jdk中AQS实现类相关源码解析。包括 ReentrantLock，Condition，CountDownLatch，Semaphore，ReentrantReadWriteLock</p><span id="more"></span><h2 id="1-ReentrantLock"><a href="#1-ReentrantLock" class="headerlink" title="1 ReentrantLock"></a>1 ReentrantLock</h2><p>​基于AQS实现的一种可重入互斥锁，所以只允许一个线程获取到锁。获取到锁时state设为1，当获取到锁的线程尝试重入时，便会增加state，同理需要将state减到0才会释放锁</p><h3 id="1-1-非公平锁（NonfairSync）"><a href="#1-1-非公平锁（NonfairSync）" class="headerlink" title="1.1 非公平锁（NonfairSync）"></a>1.1 非公平锁（NonfairSync）</h3><h4 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h4><blockquote><ol><li>java.util.concurrent.locks.ReentrantLock.Sync#nonfairTryAcquire：利用CAS尝试设置state，能设置成功，代表获取到锁，成功返回。设置失败，代表已经被其他线程获取了锁，返回失败</li><li>返回失败后将当前线程构造为Node节点，设置到同步队列的链表中进入到<strong>java.util.concurrent.locks.AbstractQueuedSynchronizer#acquireQueued</strong>方法：死循环获取当前Node的前一个节点（<strong>同步队列的首节点是成功获取到锁的节点</strong>），如果前驱结点为首节点，当前Node才有资格获取锁。如果还是获取不到，就调用<strong>java.util.concurrent.locks.LockSupport#park</strong>(java.lang.Object)方法阻塞当前线程，等待其他线程唤醒再去竞争锁</li></ol></blockquote><h4 id="unlock"><a href="#unlock" class="headerlink" title="unlock"></a><strong>unlock</strong></h4><blockquote><ol><li>java.util.concurrent.locks.ReentrantLock.Sync#tryRelease：复原state（将其归0），exclusiveOwnerThread设为null</li><li>java.util.concurrent.locks.AbstractQueuedSynchronizer#release：在tryRelease成功后，使用<strong>java.util.concurrent.locks.LockSupport#unpark</strong>方法唤醒同步队列首节点的下一个节点里的线程，让他再去尝试获取锁</li></ol></blockquote><h3 id="1-2-公平锁（FairSync）"><a href="#1-2-公平锁（FairSync）" class="headerlink" title="1.2 公平锁（FairSync）"></a>1.2 公平锁（FairSync）</h3><h4 id="lock-1"><a href="#lock-1" class="headerlink" title="lock"></a><strong>lock</strong></h4><blockquote><p>​和非公平锁很像，不同的部分就在覆盖了<strong>java.util.concurrent.locks.AbstractQueuedSynchronizer#tryAcquire</strong>这个方法和非公平锁略有不同。在新的线程获取锁失败，并将自己构造为Node节点并放入同步队列链表后，还会通过调用<strong>java.util.concurrent.locks.AbstractQueuedSynchronizer#hasQueuedPredecessors</strong>方法</p></blockquote><h4 id="unlock：和非公平锁一样"><a href="#unlock：和非公平锁一样" class="headerlink" title="unlock：和非公平锁一样"></a><strong>unlock</strong>：和非公平锁一样</h4><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ReentrantLock的公平锁第一次尝试获取锁</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// 测试当前线程是否是等待最久的线程</span>                <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 查询是否有线程等待获取的时间长于当前线程 * 判断是否存在队列中第二个Node(因为首节点是个空节点)，且第二个节点中的线程是否是当前线程 * 也就是说：判断同步队列中当前节点是否有前驱结点 * true:代表当前线程不是等待最久的线程或压根就没有等待的线程 * false:在代表当前线程已经是等待最久的线程（毕竟队列越前面，则代表进去的越久）&lt;p/> * 只有公平锁才需要用到这个方法，来判断当前线程是否等待时间最长 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>     Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>    Node s<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用 h != t 来做判断是因为调用这个方法的线程此时还没有进入等待队列</span>    <span class="token comment" spellcheck="true">// 如果 h != t，则代表队列中有线程在等待获取锁</span>    <span class="token keyword">return</span> h <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>thread <span class="token operator">!=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h3><h4 id="1-3-1-为什么叫公平锁和非公平锁"><a href="#1-3-1-为什么叫公平锁和非公平锁" class="headerlink" title="1.3.1 为什么叫公平锁和非公平锁"></a>1.3.1 为什么叫公平锁和非公平锁</h4><p>​根据上面的分析，<strong>公平锁在获取锁是总是会先判断当前线程是否是等待最久的线程</strong>。<strong>所以，就算是同步队列存在大量Node，且有线程第一次在获取锁，那么，下一次获取到锁的线程也一定是同步队列的首节点的下一个节点，即必须排队。（首节点就是当前获取到锁的节点，只有获取成功了，同步才会更新首节点）</strong></p><p>​<strong>非公平锁中：对于已经进入同步队列的线程来说，也只能首节点的下一个节点里的线程能尝试获取锁。但对于还未构造成Node加入到同步队列的线程来说，这个线程和首节点的下一个节点里的线程能竞争获取锁</strong>，所以非公平。<strong>但对于已经进入同步队列的线程来说，前驱结点是一定比后面的节点先获取到锁的</strong></p><h4 id="1-3-2-各自优势"><a href="#1-3-2-各自优势" class="headerlink" title="1.3.2 各自优势"></a>1.3.2 各自优势</h4><ul><li>公平锁：防止线程饥饿，分散性很好，适合线程等待时间敏感的场景</li><li>非公平锁：更快。一是<strong>获取锁是不用判断当前线程是否是等待最久的线程</strong>。二是<strong>上下文交换没有公平锁频繁</strong>。在存在大量锁竞争的前提下，可以肯定，公平锁上下文切换很频繁，获取锁后的线程再次获取锁时是一定会阻塞的。而非公平锁则不一样，下一次获取到锁的线程仍可能是上一次获取到锁的线程，没有上下文切换</li></ul><h2 id="2-Condition"><a href="#2-Condition" class="headerlink" title="2 Condition"></a>2 Condition</h2><p>等待通知接口，代替Object原生的wait和notify，其具体实现为AQS里的ConditionObject（定义在AQS里的非静态内部类，所以使用了AQS部分方法来实现其功能）。<strong>只有获取到锁的线程才能调用Condition的阻塞和唤醒方法</strong>。三个核心组件如下</p><ul><li>等待队列：使用 Node 节点串联，与 AQS 同步队列共用 Node 结构 </li><li>状态转换：Node 在等待队列和同步队列之间的转换 </li><li>线程控制：包括阻塞、唤醒、中断处理等机制</li></ul><p>主要字段</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 等待队列中的首节点</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Node firstWaiter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等待队列中的尾节点</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Node lastWaiter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-Condition-await"><a href="#2-1-Condition-await" class="headerlink" title="2.1 Condition#await"></a>2.1 Condition#await</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><blockquote><ul><li>首先将当前线程构造为等待节点，并加入到等待队列的末尾</li><li>其次释放锁资源（能够await的线程一定是获取到锁的），同时唤醒同步队列的第二个节点，让其尝试获取锁</li><li>死循环判断当前节点是否为同步节点（等待节点在等待队列里，是一定要阻塞的。同步节点在同步队列里，是可以并被唤醒并尝试获取锁的），await到这里线程就阻塞了</li><li>当被唤醒后，当前节点一定被加入了同步队列，再尝试获取锁，如果能获取到，代表就可以返回了。如果获取不到，就表示当前同步块被其他线程暂用了，也还是阻塞。不过下一次被唤醒后就会通过同步队列的唤醒方式来尝试获取锁</li></ul></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 响应中断</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建等待节点并加入等待队列</span>    Node node <span class="token operator">=</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 先检查当前线程是否已获取到锁，否则抛异常。然后完全释放锁并且唤醒同步队列中的第二个节点</span>    <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> interruptMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 死循环判断当前节点是否在等待队列中</span>    <span class="token comment" spellcheck="true">// 等待队列中的节点一定要阻塞，而同步队列中的节点是可以被唤醒的</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interruptMode <span class="token operator">=</span> <span class="token function">checkInterruptWhileWaiting</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当signal后，需要重新获取锁，要复原现场，需要重新持有上一次所持有的所有的state值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> savedState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> interruptMode <span class="token operator">!=</span> THROW_IE<span class="token punctuation">)</span>        interruptMode <span class="token operator">=</span> REINTERRUPT<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nextWaiter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// clean up if cancelled</span>        <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptMode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前节点有中断</span>        <span class="token function">reportInterruptAfterWait</span><span class="token punctuation">(</span>interruptMode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** *   将当前线程构造为一个等待节点，并加入到等待队列的尾部，并通过nextWaiter字段建立联系 &lt;br/> *  注意：等待队列建立关联用的是nextWaiter字段，不是prev和next字段 */</span><span class="token keyword">private</span> Node <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node lastW <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 尾节点</span>    <span class="token comment" spellcheck="true">// If lastWaiter is cancelled, clean out.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastW <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> lastW<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastW <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastW <span class="token operator">==</span> null<span class="token punctuation">)</span>        firstWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">else</span>        lastW<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    lastWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ====================以下为AQS中的方法===================</span><span class="token comment" spellcheck="true">// 判断这个节点是否在同步队列上</span><span class="token comment" spellcheck="true">// false -> 这个节点在等待队列上</span><span class="token comment" spellcheck="true">// true -> 这个节点在同步队列上</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>waitStatus <span class="token operator">==</span> Node<span class="token punctuation">.</span>CONDITION <span class="token operator">||</span> node<span class="token punctuation">.</span>prev <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If has successor, it must be on queue</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">findNodeFromTail</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 当前节点尝试获取锁* 返回true -> 获取锁的过程有中断*/</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Node prevNode <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 只有当前节点的前驱结点为首节点，当前节点里的线程才有资格获取锁</span>            <span class="token comment" spellcheck="true">// 只可能有一个线程获取成功（即获取锁），所以设置首节点不需要同步了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prevNode <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                prevNode<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Condition-signal和signalAll"><a href="#2-2-Condition-signal和signalAll" class="headerlink" title="2.2 Condition#signal和signalAll"></a>2.2 Condition#signal和signalAll</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>singal的目的很简单，就是将等待队列的首节点转移到同步队列的尾节点，signalAll则是将等待队列中的所有节点都转移到同步节点。<strong>signal方法本身不能唤醒线程，只是让这些节点里的线程有资格被唤醒</strong>，可以将signal和排队买票做类比</p><ul><li>等待队列相当于候补区</li><li>signal 相当于叫号，让候补区的人去正式排队区（同步队列）</li><li>但叫号本身并不会直接让人拿到票，还需要排队区的人按顺序获取票（锁）</li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSignal</span><span class="token punctuation">(</span>Node first<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将首节点的nextWaiter转移到首节点，如果nextWaiter为空，则表示队列中只有一个节点，且首尾相同</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>firstWaiter <span class="token operator">=</span> first<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            lastWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// gc处理</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">transferForSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>             <span class="token punctuation">(</span>first <span class="token operator">=</span> firstWaiter<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将当前的等待节点转换为同步节点，并加入到同步队列的末尾</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">transferForSignal</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Node p <span class="token operator">=</span> <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> p<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">)</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前驱节点被取消了，或者设置为SIGNAL失败</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3 总结"></a>2.3 总结</h3><p>​Condition实现了等待通知，当一个线程进入同步块后，就可以调用await，释放自己获取的锁资源，将自己阻塞。内部实现是<strong>首先将当前线程构造成一个等待节点，加入ConditionObject的等待队列的末尾，再释放锁资源，之后唤醒同步队列的第二个节点让其尝试获取锁</strong>。而当其他进入同步块的线程调用signal后，会将等待队列的首节点转移到同步队列，并将其变成同步节点，最后再使用同步队列的唤醒机制等待被唤醒。</p><p>​所以signal并不能直接唤醒一个await的线程，最佳使用案例就是消费者发送者机制，比如阻塞队列。</p><h2 id="3-CountDownLatch"><a href="#3-CountDownLatch" class="headerlink" title="3 CountDownLatch"></a>3 CountDownLatch</h2><p>CountDownLatch为共享锁实现，只能使用一次。用来“卡点”，阻塞的线程需要等待其他线程准备好了后（countDown直到AQS里的state为0），才继续被唤醒执行后面的代码。</p><p>在CountDownLatch中，AQS里的state值并不表示可获取到锁的次数，而是<strong>java.util.concurrent.CountDownLatch#countDown</strong> state值的次数后会释放所有调用了**java.util.concurrent.CountDownLatch#await()**的线程</p><p>内部的同步器Sync主要方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    获取共享锁，只有AQS的state为0才能获取到    通过这个接口就可以猜到，当state为0时（拉下了所有门闩），总会返回1，代表获取锁成功。    并依次传播下去递归调用这个方法，直到同步队列的所有Node里的线程全部唤醒，这就是CountDownLatch的原理*/</span><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 释放共享锁，state第一次被减为0才释放成功，也就表示了CountDownLatch只能用一次</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Decrement count; signal when transition to zero</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>await方法会阻塞当前线程，直到其他线程“拉下所有门闩”。阻塞的线程会构造为共享节点加入同步队列，只有队首节点的下一个节点才有资格尝试获取锁，获取不到就LockSupport#park</p><p>countDown会将state值减小1，当state将为0时，释放同步队列里的第二个共享节点里的线程。当这个线程释放后，就能成功获取到锁了，将这个事件传播下去，一次唤醒同步队列里的所有共享节点。至此，所有被阻塞的线程都被唤醒且会成功获取到锁，最终从await方法里返回</p><h2 id="4-Semaphore"><a href="#4-Semaphore" class="headerlink" title="4 Semaphore"></a>4 Semaphore</h2><p><strong>信号量，共享锁实现。可以利用构造器指定令牌（permits）的数量。当线程到达时，获取（acquire）指定数量的令牌，当没有可用令牌（premits为0）时，阻塞线程，等待令牌的释放（release）再被唤醒后继续执行。基于此，即可实现共享锁（permits大于1），也可实现不可重入的互斥锁（permits为1）</strong></p><p>也分为公平锁和分公平锁，其判断方式完全和ReentrantLock一致。</p><p>​<strong>非公平锁允许准备进入同步块的线程（还未加入同步队列）和同步队列中的第二个节点竞争获取锁。而公平锁则只允许同步队列中第二个节点里的线程能尝试获取锁。</strong></p><p>​<strong>其实现方式就是将state设为我们允许并发运行的线程数量，每当一个线程获取到锁后，将state - 1，如果state为0则阻塞所有准备进入同步块的线程，并将其构造为共享节点加入同步队列。每当有线程从同步块退出时，将state + 1，并根据是否非公平来唤醒同步队列的第二个节点来尝试获取锁</strong></p><h2 id="5-ReentrantReadWriteLock"><a href="#5-ReentrantReadWriteLock" class="headerlink" title="5 ReentrantReadWriteLock"></a>5 ReentrantReadWriteLock</h2><p>​读写锁，<strong>支持并发的读或互斥的写</strong>。读写锁分别各自实现，读锁使用共享锁，写锁使用互斥锁。ReentrantReadWriteLock内部的ReadLock和WriteLock都使用了内部同一个Sync对象来实现读写加锁的功能，在Sync内，他将AQS的state转换为二进制，高十六位表示读状态位，低十六位表示写状态位。由于读是共享的，所以state的高十六位表示了当前有多少个线程在读，在此期间写锁是禁用的。而低十六位是写锁，所以只可能有一个线程，但可能数字大于1（这是就表示写锁重入了）。当写锁被占用是，读是不允许的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHARED_SHIFT<span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//   读状态位            写状态位</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHARED_UNIT  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0000000000000001 0000000000000000</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_COUNT <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000000000000000 1111111111111111</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXCLUSIVE_MASK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000000000000000 1111111111111111</span><span class="token comment" spellcheck="true">// 获取共享锁冲入次数（读锁专用）</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">>>></span> SHARED_SHIFT<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取排他锁冲入次数（写锁专用）</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> EXCLUSIVE_MASK<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>读写锁都支持重入，但写锁只能让当前线程重入，并且要解锁时需要unlock重入的次数。</strong></p></li><li><p><strong>支持锁降级但不支持锁升级</strong></p><blockquote><p> 锁降级：即一个线程在持有写锁的情况下，可以继续获取读锁，然后释放写锁，从而将写锁降级为读锁。在某些场景下很有用，比如</p><ul><li>在写操作完成后，仍然需要保持对数据的读访问权限</li><li>避免其他线程在写锁释放后立即获取写锁，导致数据不一致</li></ul></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS实现类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码篇-AQS</title>
      <link href="/2020-04-17/java-yuan-ma-pian-aqs/"/>
      <url>/2020-04-17/java-yuan-ma-pian-aqs/</url>
      
        <content type="html"><![CDATA[<hr><p>​总结了LockSupport的作用，并从源码分析了AbstractQueuedSynchronizer的实现逻辑</p><span id="more"></span><h2 id="1-LockSupport"><a href="#1-LockSupport" class="headerlink" title="1 LockSupport"></a>1 LockSupport</h2><h3 id="1-1-总结"><a href="#1-1-总结" class="headerlink" title="1.1 总结"></a>1.1 总结</h3><p>Java中实现<strong>当前线程的阻塞和定时阻塞</strong>，并提供<strong>唤醒指定线程</strong>的工具，在内部使用sun.misc.Unsafe来实现这一系列的操作。在AQS中普遍被使用</p><ul><li><strong>阻塞当前线程</strong>：通过 <code>park()</code> 方法使当前线程进入等待状态。</li><li><strong>定时阻塞</strong>：通过 <code>parkNanos(long nanos)</code> 或 <code>parkUntil(long deadline)</code> 方法使当前线程在指定时间内等待。</li><li><strong>唤醒指定线程</strong>：通过 <code>unpark(Thread thread)</code> 方法唤醒指定的处于等待状态的线程。</li></ul><h3 id="1-2-核心代码"><a href="#1-2-核心代码" class="headerlink" title="1.2 核心代码"></a>1.2 核心代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 唤醒指定的线程（如果该线程被park了） * 如果线程先被unpark（解除等待）了，那么该线程下一次调用park(进入等待)则不起作用，也就不会被阻塞 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unpark</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">!=</span> null<span class="token punctuation">)</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 阻塞当前线程，并设置一个blocker（俗称阻塞器，这个只是用来jstack查看，并不能通过notifyAll来唤醒阻塞的线程） * blocker只能用来调试和诊断，并不影响线程的阻塞和唤醒 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span>Object blocker<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setBlocker</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> blocker<span class="token punctuation">)</span><span class="token punctuation">;</span>    UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setBlocker</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 定时等待，阻塞当前线程指定的纳秒数，当时间到达时就自动唤醒（定时任务会调用） */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 定时等待，阻塞当前线程直到指定的时间戳（deadline）到来就自动唤醒（定时任务会调用） */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parkUntil</span><span class="token punctuation">(</span><span class="token keyword">long</span> deadline<span class="token punctuation">)</span> <span class="token punctuation">{</span>    UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> deadline<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-AbstractQueuedSynchronizer"><a href="#2-AbstractQueuedSynchronizer" class="headerlink" title="2 AbstractQueuedSynchronizer"></a>2 AbstractQueuedSynchronizer</h2><blockquote><p>​Node是AQS的核心内部类，它是构建同步器的基础数据结构，通过不同的配置可以实现同步队列，也可实现等待队列</p></blockquote><h3 id="2-1-同步队列"><a href="#2-1-同步队列" class="headerlink" title="2.1 同步队列"></a>2.1 同步队列</h3><p>​<strong>当线程尝试获取锁时，未获取到锁的线程会被构造成一个Node，利用CAS放入同步尾部作为尾节点，等待被唤醒。同步队列关联的是整个锁，一对一的关系。而同步队列中的Node又根据nextWaiter字段判断当前Node是共享节点还是独占节点</strong></p><ul><li><p>Node之间通过<strong>prev和next指针构成双向链表</strong></p></li><li><p><strong>头节点(head)代表当前持有锁的线程</strong></p></li><li><p>包含waitStatus字段标记节点状态</p><ul><li><strong>CANCELLED(1): 线程已取消</strong></li><li><strong>SIGNAL(-1): 后继节点需要唤醒</strong></li><li><strong>CONDITION(-2): 节点在等待队列中</strong></li><li>PROPAGATE(-3): 共享锁需要向后传播</li><li>0: 初始状态</li></ul></li><li><p>使用nextWaiter区分共享&#x2F;互斥模式</p><ul><li><p><strong>共享节点：共享锁的实现（Semaphore、CountDownLatch等）。nextWaiter字段为固定的Node#SHARED。释放当前节点的线程后，还具有向后传播的能力（根据state的值判断是否需要释放后继共享节点里的线程）</strong></p></li><li><p><strong>互斥节点：互斥锁的实现（ReentrantLock等），nextWaiter字段为Node#EXCLUSIVE（即null），只会释放当前节点里的线程</strong></p></li></ul></li></ul><h3 id="2-2-等待队列"><a href="#2-2-等待队列" class="headerlink" title="2.2 等待队列"></a>2.2 等待队列</h3><p>​当已经获取到锁的线程触发<strong>java.util.concurrent.locks.Condition#await()<strong>方法阻塞自己，让出锁时。</strong>会将当前线程构造成一个Node（等待节点，状态为CONDITION），利用CAS放入等待队列尾部。等待队列关联的是Condition。所以，当ReentrantLock构造多个Condition时，就有多个等待队列，ReentrantLock和等待队列可以为一对多，而Condition和等待队列时一对一</strong>。而<strong>当其他线程获取当前锁（ReentrantLock）的线程调用java.util.concurrent.locks.Condition#signal等方法时，便会将等待队列的首节点转入到同步队列的尾节点，并重新设置Node的状态</strong></p><ul><li><p>单向链表结构，只使用nextWaiter指针</p></li><li><p><strong>nextWaiter字段为等待队列中下一个等待节点的指针</strong></p></li><li><p>当调用signal()时，节点从等待队列转移到同步队列过程中的状态变化如下</p><ol><li>CONDITION -&gt; 0</li><li>入队同步队列</li><li>等待获取锁</li></ol></li></ul><h3 id="2-3-核心代码"><a href="#2-3-核心代码" class="headerlink" title="2.3 核心代码"></a>2.3 核心代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 同步队列专属的头尾节点。</span><span class="token comment" spellcheck="true">// 因为只有在同步队列里的线程才需要被唤醒。等待队列里的线程如果要被唤醒，需要先加入到同步队列</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node head<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 核心，可获取到锁的次数</span><span class="token comment" spellcheck="true">// - ReentrantLock: 表示重入次数</span><span class="token comment" spellcheck="true">// - Semaphore: 表示剩余许可数</span><span class="token comment" spellcheck="true">// - CountDownLatch: 表示剩余计数</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自旋的阈值（纳秒）。当超时等待时间小于这个值时，就不会再暂停线程，而是自旋。因为这个时间已经很少了，考虑到阻塞线程后上线文切换会消耗时间，就没必要再阻塞了</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> spinForTimeoutThreshold <span class="token operator">=</span> 1000L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取到独占锁的线程</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Thread exclusiveOwnerThread<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**    留给子类实现的尝试获取共享锁的方法，共享锁获取，返回AQS里state的剩余值     1：返回值 > 0，代表当前线程获取成功，且state还有剩余值，表示可以继续传播给下一个共享节点线程，让其尝试获取锁     2：返回值 = 0，代表当前线程获取成功，但state值刚好被用完，那么下一个共享节点线程就不应该被唤醒了（因为这时已经获取不到state的剩余值了）    3：返回值 &lt; 0，代表当前线程都没获取成功，直接获取失败，阻塞等待被其他线程唤醒后在尝试获取*/</span><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取共享锁</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>SHARED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 首节点的下个节点才有资格获取锁（首节点就是获取到锁的节点）</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 至少当前线程获取成功了，但可能state值已经被用完了</span>                    <span class="token comment" spellcheck="true">// 获取成功，传播给下一个共享Node，根据state的剩余值来判断是否需要唤醒下一个共享Node里的线程</span>                    <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不能获取到锁线程就park</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 释放共享锁（Semaphore会使用）</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 必要的循环</span>      <span class="token comment" spellcheck="true">// 1. CAS操作可能失败需要重试</span>    <span class="token comment" spellcheck="true">// 2. 在设置head的过程中可能有新的节点入队</span>    <span class="token comment" spellcheck="true">// 3. 传播机制要求必须确保传播状态正确设置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// h != tail 检查确保队列中还有后继节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> ws <span class="token operator">=</span> h<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// loop to recheck cases</span>                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                     <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Node<span class="token punctuation">.</span>PROPAGATE<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// loop on failed CAS</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> head<span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">// loop if head changed</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    将目标节点（参数node）设为同步队列的尾部（使用CAS来解决并发问题）。    所以，在这整个过程中，链表中除首节点外其余节点的prev在任何时刻都不会为空；        但除尾节点外其余节点的next字段有可能为空 （刚好走完第②步，还没走到第③步）*/</span><span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 初始化同步队列，设置一个空Node为首尾节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先将目标节点的prev设置程原尾节点 ①</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// CAS设置尾节点 ②</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置成功了，才把原尾节点的next设为目标节点（现尾节点）③</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 唤醒目标节点（参数node）的最近下一个可唤醒节点中的线程</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 首节点的下个节点唤醒失败时，就从尾节点向前遍历，直到找到距首节点最近的可唤醒的节点</span>    <span class="token comment" spellcheck="true">// 目的是避免并发时（节点入队列和唤醒），倒数第二个节点（甚至不止）的next字段为空，导致拿不到其实已经入队列里的后续节点</span>    Node s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ============内部的Node数据结构=================</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 共享锁</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Node SHARED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 互斥锁</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Node EXCLUSIVE <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  取消获取锁</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SIGNAL    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待condition唤醒（等待队列才会用到这个状态）</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CONDITION <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PROPAGATE <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前节点的状态</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 同步队列专用</span>    <span class="token keyword">volatile</span> Node prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 同步队列专用</span>    <span class="token keyword">volatile</span> Node next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待线程</span>    <span class="token keyword">volatile</span> Thread thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 当前Node为同步队列中的共享节点时：SHARED</span>    <span class="token comment" spellcheck="true">// 2. 当前Node为同步队列中的独占节点时：null</span>    <span class="token comment" spellcheck="true">// 3. 当前Node为等待队列中的节点时：下一个等待节点的指针</span>    Node nextWaiter<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断当前节点是互斥锁，还是共享锁</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextWaiter <span class="token operator">==</span> SHARED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当前节点的前驱结点</span>    <span class="token keyword">final</span> Node <span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NullPointerException <span class="token punctuation">{</span>        Node p <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LockSupport </tag>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码篇-Map</title>
      <link href="/2020-04-09/java-yuan-ma-pian-map/"/>
      <url>/2020-04-09/java-yuan-ma-pian-map/</url>
      
        <content type="html"><![CDATA[<p>​jdk中常用Map实现类相关源码解析。包括 HashMap，LinkedHashMap，ConcurrentHashMap</p> <span id="more"></span><h2 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1 HashMap"></a>1 HashMap</h2><h3 id="1-1-重点字段"><a href="#1-1-重点字段" class="headerlink" title="1.1 重点字段"></a>1.1 重点字段</h3><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/** * 数组默认长度 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span><span class="token comment" spellcheck="true">/** * 最大容量（即数组最大长度） */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 默认加载因子 * 加载因子（loadFactor）是哈希表中用于控制数组存放数据疏密程度的参数。 * 当loadFactor越趋近于1时，数组中存放的数据（entry）越多，哈希冲突的概率增加， * 导致单个桶中的链表长度可能增加，进而影响查找元素的效率。反之，当loadFactor越小， * 数组中存放的数据越少，数据分布越稀疏，数组的利用率降低。 * * 默认的loadFactor值为0.75f，是官方经过权衡后给出的一个较为理想的平衡点， * 旨在兼顾查找效率和空间利用率。 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 树化阈值。当桶(bucket)上的结点数大于这个值时会转成红黑树 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 链表化阈值（当桶(bucket)上的结点数小于这个值时树转链表） */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 桶中结构树化对应的table的最小长度 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 扩容阈值（threshold） * threshold = loadFactor * 数组长度 * 当HashMap中元素的数量超过threshold时，会触发数组的扩容操作。 * 扩容是为了减少哈希冲突，保持查找效率。 */</span><span class="token keyword">int</span> threshold<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-核心方法"><a href="#1-2-核心方法" class="headerlink" title="1.2 核心方法"></a>1.2 核心方法</h3><h4 id="1-2-1-put"><a href="#1-2-1-put" class="headerlink" title="1.2.1 put"></a>1.2.1 put</h4><h5 id="1-初始化数组"><a href="#1-初始化数组" class="headerlink" title="1 初始化数组"></a>1 <strong>初始化数组</strong></h5><ul><li>如果是第一次添加元素，先初始化数组（即分配内存空间）。</li><li>计算键的哈希值并确定索引位置，然后将键值对放入对应的桶（bucket）中。</li></ul><h5 id="2-目标桶为空"><a href="#2-目标桶为空" class="headerlink" title="2 目标桶为空"></a>2 <strong>目标桶为空</strong></h5><ul><li>如果计算索引后，数组中对应的桶为空，则直接将键值对放入该桶中。</li></ul><h5 id="3-目标桶不为空"><a href="#3-目标桶不为空" class="headerlink" title="3 目标桶不为空"></a>3 <strong>目标桶不为空</strong></h5><ul><li><strong>根节点匹配</strong>：<ul><li>如果桶中的根节点（第一个节点）与待插入节点的键 <code>equals</code>，则直接替换根节点的值。</li></ul></li><li><strong>树化节点</strong>：<ul><li>如果根节点是树形节点（即红黑树节点），则调用红黑树的插入方法将节点放入树中。</li></ul></li><li><strong>链表遍历</strong>：<ul><li>如果根节点是链表节点，则遍历链表：<ul><li>如果找到与待插入节点键 <code>equals</code> 的节点，则替换其值。</li><li>如果遍历到链表末尾仍未找到匹配的节点，则将新节点插入链表末尾。</li><li><strong>树化条件</strong>：<ul><li>如果链表长度（包括待插入节点）达到 8 且数组长度大于等于 64，则将链表转换为红黑树。</li><li>如果链表长度达到 8 但数组长度小于 64，则仅进行数组扩容，不进行树化。</li></ul></li></ul></li></ul></li></ul><h4 id="1-2-2-resize"><a href="#1-2-2-resize" class="headerlink" title="1.2.2 resize"></a>1.2.2 resize</h4><p><strong>HashMap 数组的长度始终为 2 的次幂，且扩容时长度加倍。这样设计的主要目的是为了方便扩容时的索引计算。</strong>以下为具体的扩容过程</p><h5 id="1-创建新数组"><a href="#1-创建新数组" class="headerlink" title="1 创建新数组"></a>1 <strong>创建新数组</strong></h5><ul><li>先创建一个长度为原数组 2 倍的新数组。</li></ul><h5 id="2-迁移数据"><a href="#2-迁移数据" class="headerlink" title="2 迁移数据"></a>2 <strong>迁移数据</strong></h5><ul><li><p>遍历原数组中的每个桶（bucket）：</p><ul><li><p><strong>如果桶为空或只有一个元素</strong>：</p><ul><li>直接计算该元素在新数组中的索引，并将其放入新数组。</li></ul></li><li><p><strong>如果桶中有链表结构</strong>：</p><ul><li><p>遍历链表中的每个节点（Node），计算其在新数组中的索引。</p></li><li><p>由于新数组长度是原数组的 2 倍，且长度始终为 2 的次幂，因此新索引的计算方法为：</p><pre class="line-numbers language-java"><code class="language-java">newIndex <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新索引的结果只有两种可能：</p><ul><li><strong>与原索引相同</strong>：如果 key 的哈希值在高一位为 0。</li><li><strong>等于原索引加上原数组长度</strong>：如果 key 的哈希值在高一位为 1。</li></ul></li><li><p>根据计算结果，将节点放入新数组的对应位置。</p></li></ul></li></ul></li></ul><h5 id="3-链表拆分"><a href="#3-链表拆分" class="headerlink" title="3 链表拆分"></a>3 <strong>链表拆分</strong></h5><ul><li>如果原桶中的链表被拆分为两个链表（一个保持原索引，另一个为原索引加上原数组长度），则分别将它们放入新数组的对应位置。</li></ul><h4 id="1-2-3-部分核心代码"><a href="#1-2-3-部分核心代码" class="headerlink" title="1.2.3 部分核心代码"></a>1.2.3 部分核心代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>             <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> rootNode<span class="token punctuation">;</span> <span class="token keyword">int</span> tableLength<span class="token punctuation">,</span> index<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>tableLength <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 添加第一个元素</span>      tableLength <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rootNode <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>tableLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 数组上对于的索引为空，代表这个kv可以直接放到这</span>      tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>      Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>rootNode<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> rootNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// bucket上的元素equals要放进来的kv，直接覆盖</span>          e <span class="token operator">=</span> rootNode<span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rootNode <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// bucket上已经是红黑树结构了，直接存放为红黑树结构</span>          e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 向链表的末尾添加</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> rootNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 到链表末尾了</span>                  rootNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>                  <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 链表的长度（算上bucket）已经大于等于了8，转换为红黑树</span>                      <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                  <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遍历链表时有equals，直接替换</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              rootNode <span class="token operator">=</span> e<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// existing mapping for key</span>          <span class="token comment" spellcheck="true">// e不为空，代表是覆盖的情况，不是新增</span>          V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>              e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>          <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token operator">++</span>modCount<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>      <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * resize方法，只展示了部分核心代码 * 数组的初始化或扩容，扩容是加倍的 */</span><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 旧数组存在元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// bucket存在元素</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这个bucket没有链表，只需要将它重新计算下在新数组的索引，并放入对于的bucket中</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 红黑树结构</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// preserve order</span>                    <span class="token comment" spellcheck="true">/* 旧数组的桶在新数组的索引位的节点 */</span>                    <span class="token comment" spellcheck="true">// 索引大小没有变化</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 索引扩大了旧数组的长度（即新索引位：旧索引位+旧数组长度）</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// e.hash &amp; oldCap == 0 就代表e的hash值（转换为2进制）高一位为0，</span>                        <span class="token comment" spellcheck="true">// 与（新的容量-1）相与后，其在数组的索引位置不变</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 这里则高一位为1，与新的容量 &amp; 后，</span>                             <span class="token comment" spellcheck="true">// 其在新数组的索引位置会增加新容量的扩大值（即原容量的大小）</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-线程不安全"><a href="#1-3-线程不安全" class="headerlink" title="1.3 线程不安全"></a>1.3 线程不安全</h3><blockquote><ul><li>当两个线程同时put数据时，且被put的两个数据能定位到HashMap数组的相同那个bucket位置上，就可能产生一个覆盖掉另一个的可能，造成一个数据消失。</li><li>多个线程同时修改 HashMap的结构时（如插入、删除或扩容），可能会导致部分数据丢失。比如线程A插入，而线程B正在扩容，最终导致A线程插入的数据丢失</li><li>没有volatile或锁的同步机制，会导致一个线程的修改对另一个线程不可见</li></ul></blockquote><h2 id="2-LinkedHashMap"><a href="#2-LinkedHashMap" class="headerlink" title="2 LinkedHashMap"></a>2 LinkedHashMap</h2><p><code>LinkedHashMap</code> 是 <code>HashMap</code> 的子类，它不仅实现了 <code>Map</code> 接口，还具有排序功能。其排序行为由 <code>accessOrder</code> 字段控制</p><h3 id="2-1-核心字段"><a href="#2-1-核心字段" class="headerlink" title="2.1 核心字段"></a>2.1 核心字段</h3><ul><li><code>head</code>：链表的头节点，指向最早插入或访问的节点。</li><li><code>tail</code>：链表的尾节点，指向最近插入或访问的节点。</li><li><code>accessOrder</code>（默认 <code>false</code>）：<ul><li><code>false</code>：按照<strong>插入顺序排序</strong>，越晚插入的元素越排在链表末尾。</li><li><code>true</code>：按照<strong>访问顺序排序</strong>，最近访问的元素会被移动到链表末尾。<strong>可用于实现 LRU 缓存。</strong></li></ul></li></ul><h3 id="2-2-排序实现原理"><a href="#2-2-排序实现原理" class="headerlink" title="2.2 排序实现原理"></a>2.2 排序实现原理</h3><h4 id="2-2-1-双向链表"><a href="#2-2-1-双向链表" class="headerlink" title="2.2.1 双向链表"></a>2.2.1 双向链表</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 继承了HashMap.Node的Entry内部结构</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 具有链表结构的Entry</span>    <span class="token comment" spellcheck="true">// 前驱节点和后继节点</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> before<span class="token punctuation">,</span> after<span class="token punctuation">;</span>    <span class="token function">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-添加元素"><a href="#2-2-2-添加元素" class="headerlink" title="2.2.2 添加元素"></a>2.2.2 添加元素</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 重写了HashMap的newNode方法，在构造新节点时将其添加到链表末尾</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">newNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将新节点链接到链表末尾</span>    <span class="token function">linkNodeLast</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-访问节点移动到末尾"><a href="#2-2-3-访问节点移动到末尾" class="headerlink" title="2.2.3 访问节点移动到末尾"></a>2.2.3 访问节点移动到末尾</h4><p>如果 <code>accessOrder</code> 为 <code>true</code>，<code>LinkedHashMap</code> 会在访问节点时（如调用 <code>get</code> 方法）触发 <code>afterNodeAccess</code> 方法，将最近访问的节点移动到链表末尾，基于此<strong>可以实现LRU缓存</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 重写的HashMap#afterNodeAccess方法，</span><span class="token keyword">void</span> <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> last<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>accessOrder <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>last <span class="token operator">=</span> tail<span class="token punctuation">)</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// accessOrder为true，e不为tail</span>        <span class="token comment" spellcheck="true">// 重排序当前元素，将当前节点设为新的tail（保持最近一次被访问的节点在最后面）</span>        LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span>            <span class="token punctuation">(</span>LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">,</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>before<span class="token punctuation">,</span> a <span class="token operator">=</span> p<span class="token punctuation">.</span>after<span class="token punctuation">;</span>        p<span class="token punctuation">.</span>after <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// e为head，更新头节点</span>            head <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">else</span>            b<span class="token punctuation">.</span>after <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// e不为tail</span>            a<span class="token punctuation">.</span>before <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">else</span>            last <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> null<span class="token punctuation">)</span>            head <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>before <span class="token operator">=</span> last<span class="token punctuation">;</span>            last<span class="token punctuation">.</span>after <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tail <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-ConcurrentHashMap"><a href="#3-ConcurrentHashMap" class="headerlink" title="3 ConcurrentHashMap"></a>3 ConcurrentHashMap</h2><p><code>ConcurrentHashMap</code> 是一个线程安全的 <code>Map</code> 实现，通过 **CAS 和 <strong>分段锁</strong> 机制实现高效的并发操作。其数据结构与 <code>HashMap</code> 类似，采用 <strong>数组 + 链表 + 红黑树</strong> 的形式：</p><ul><li>当链表长度超过 8 时，链表会转换为红黑树。</li><li>当红黑树节点数小于 6 时，红黑树会退化为链表。</li></ul><h3 id="3-1-put方法"><a href="#3-1-put方法" class="headerlink" title="3.1 put方法"></a>3.1 put方法</h3><p><strong>死循环put元素</strong>，直到操作成功才退出</p><ul><li>数组还没初始化，开始数组的初始化</li><li>数组的bucket还未被占用，CAS占用（成功了就break，失败了就代表已经被其他节点占用了，进行下一次循环进入其他if分支）</li><li><strong>当前桶为<code>ForwardingNode</code>，表示有线程正在进行扩容操作，则先帮助扩容，等扩容完毕在继续put</strong></li><li>bucket被占用，锁住根节点，开始构造到链表的为尾节点。添加到尾节点后，在判断当前链表长度是否超过8，否则就转换为红黑树</li></ul><h3 id="3-2-扩容（重点）"><a href="#3-2-扩容（重点）" class="headerlink" title="3.2 扩容（重点）"></a>3.2 扩容（重点）</h3><p>​核心是通过 <strong>多线程协作</strong> 和 <strong>分段迁移</strong> 的方式进行高效的数据迁移，同时尽量减少对读写操作的影响</p><h4 id="3-2-1-扩容触发时机"><a href="#3-2-1-扩容触发时机" class="headerlink" title="3.2.1 扩容触发时机"></a>3.2.1 扩容触发时机</h4><ul><li>当 <code>ConcurrentHashMap</code> 中的元素数量超过 <strong>阈值（threshold）</strong> 时触发</li><li>阈值计算公式：<code>阈值 = 数组长度 * 负载因子（loadFactor，默认 0.75）</code>。</li></ul><h4 id="3-2-2-具体步骤"><a href="#3-2-2-具体步骤" class="headerlink" title="3.2.2 具体步骤"></a>3.2.2 具体步骤</h4><ul><li><p>首先创建一个新的数据，为元素组大小的2倍。将其设置到nextTable字段</p></li><li><p>通过CAS设置transferIndex（初始设为旧数组的长度，即是从旧数组末尾开始向前遍历转移数据的）</p></li><li><p>每个线程通过CAS从transferIndex获取一段连续长度为stride（步长）的桶，stride计算如下</p><ul><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 计算步长：即扩容时每个线程每次最小处理的数组连续长度</span><span class="token comment" spellcheck="true">// cpu为1，则由这个线程全部处理；cpu数量大于1，每个核心负责的步长为 数组长度/(8 * cpu核数) ，不过如果计算出步长小于16，则会被设置为16。确保线程的工作量均衡</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stride <span class="token operator">=</span> <span class="token punctuation">(</span>NCPU <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> NCPU <span class="token operator">:</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TRANSFER_STRIDE<span class="token punctuation">)</span><span class="token punctuation">{</span>  stride <span class="token operator">=</span> MIN_TRANSFER_STRIDE<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>开始迁移数据，到这一步了每个线程就只会迁移自己所负责的步长索引数据，不会冲突</p><ul><li>空桶：则放置一个 <code>ForwardingNode</code>，表示该桶已迁移</li><li>桶为<code>ForwardingNode</code>：当前桶已迁移。因为整体是从后向前迁移的，可推测当前线程负责的这段步长索引一定已处理完毕，即这段步长内这个桶后面的所有桶也都已经被处理完成了，需要重新计算它下一次该负责的新步长索引</li><li>桶未迁移：则操作加锁，对桶中的链表或红黑树进行迁移，迁移完成后，再将当前桶放置为<code>ForwardingNode</code>节点</li></ul></li><li><p>当最后一个线程迁移完毕后，则更新table为新数据和sizeCtl，表示扩容完成</p></li></ul><h4 id="3-2-3-相关思考"><a href="#3-2-3-相关思考" class="headerlink" title="3.2.3 相关思考"></a>3.2.3 相关思考</h4><ul><li><p>步长计算安全嘛？</p><blockquote><p>​安全，通过CAS设置公共变量transferIndex（初始值为table.length），同时该变量为volatile，它的变化能立马被其他线程感知到，可以保证每个线程处理的步长索引不会重复和交叉</p></blockquote></li><li><p>其他线程如何感知并帮助扩容？</p><blockquote><p>​通过判断桶节点为ForwardingNode，则表示正在扩容，此时这个线程则帮助扩容，计算自己需要处理的步长索引来转移数据到新数组中。每处理完一个桶也将其设为ForwardingNode节点</p></blockquote></li><li><p>get方法并没有加锁，如果桶已被转移怎么获取到数据？</p><blockquote><p>​首先扩容是读写分离的，扩容时不会对桶本身做任何修改（即不会修改Node的内部指针数据），所以如果拿到原桶数据，则能直接遍历获取数据。而如果拿到的是ForwardingNode，它本身也提供了find方法，会到新数组中去找到需要的数据</p></blockquote></li><li><p>扩容完成如何处理？</p><blockquote><p>​每个线程完成自己负责区间的迁移后，会更新<code>sizeCtl</code>字段中的扩容线程数计数，判断确定最后一个完成迁移的线程会将新数组赋值给table并重新计算<code>sizeCtl</code>的阈值</p></blockquote></li><li><p>最后需要注意，在操作数组中的桶时，都会获取这个桶节点的锁（put和resize等等修改方法），锁是相同的，所以不必担心某一个桶的相关数据被多个线程同时处理（put，resize等）</p></li></ul><h4 id="3-2-4-核心代码"><a href="#3-2-4-核心代码" class="headerlink" title="3.2.4 核心代码"></a>3.2.4 核心代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTab<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">,</span> stride<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算步长：即扩容时每个线程每次最小处理的数组连续长度</span>    <span class="token comment" spellcheck="true">// cpu为1，则由这个线程全部处理；cpu数量大于1，每个核心负责的步长为 数组长度/(8 * cpu核数) ，不过如何计算出步长小于16，则会被设置为16。确保线程的工作量均衡</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stride <span class="token operator">=</span> <span class="token punctuation">(</span>NCPU <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> NCPU <span class="token operator">:</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TRANSFER_STRIDE<span class="token punctuation">)</span>        stride <span class="token operator">=</span> MIN_TRANSFER_STRIDE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// subdivide range</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// initiating</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 创建新数组，2次幂便于扩容计算新索引位置</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            nextTab <span class="token operator">=</span> nt<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// try to cope with OOME</span>            sizeCtl <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nextTable <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 表示从数组末尾开始分配迁移任务</span>        transferIndex <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> nextn <span class="token operator">=</span> nextTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    ForwardingNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> fwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForwardingNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>nextTab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前线程是否需要继续在旧数组上截取一段桶来处理数据，默认是</span>    <span class="token keyword">boolean</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 扩容完毕的标志</span>    <span class="token keyword">boolean</span> finishing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// to ensure sweep before committing nextTab</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// i 是当前线程正在处理的桶的索引，bound 是当前线程负责的迁移任务的起始索引（也就是在处理中则 i>bound）</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> fh<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 检查当前线程负责的步长内的桶是否处理完毕。处理完毕，则选取下一段当前现场该处理的步长索引段</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>advance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nextIndex<span class="token punctuation">,</span> nextBound<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">>=</span> bound <span class="token operator">||</span> finishing<span class="token punctuation">)</span>                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nextIndex <span class="token operator">=</span> transferIndex<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span>                     <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> TRANSFERINDEX<span class="token punctuation">,</span> nextIndex<span class="token punctuation">,</span>                      nextBound <span class="token operator">=</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">></span> stride <span class="token operator">?</span>                                   nextIndex <span class="token operator">-</span> stride <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bound <span class="token operator">=</span> nextBound<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// i初始化为旧数组最后一个索引位置</span>                i <span class="token operator">=</span> nextIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> n <span class="token operator">||</span> i <span class="token operator">+</span> n <span class="token operator">>=</span> nextn<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前线程扩容完毕处理</span>            <span class="token keyword">int</span> sc<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>finishing<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nextTable <span class="token operator">=</span> null<span class="token punctuation">;</span>                table <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>                sizeCtl <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">,</span> sc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> RESIZE_STAMP_SHIFT<span class="token punctuation">)</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                finishing <span class="token operator">=</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// recheck before commit</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 空桶，CAS放置ForwardingNode，让其他线程可以感知到，以帮助扩容</span>            advance <span class="token operator">=</span> <span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> MOVED<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前桶已被处理</span>            <span class="token comment" spellcheck="true">// 到这了就说明这段步长索引处理完毕，需要重新计算新步长索引</span>            advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// already processed</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 桶加锁，开始转移当前桶的链表或红黑树到新的数组里</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 获取成功，再次校验桶节点是否变化，未变才继续操作（避免被其他刚释放了这个锁的线程给修改了）</span>                    <span class="token comment" spellcheck="true">// 桶数据转移到新数组去，和HashMap类似计算新数组中的索引</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> ln<span class="token punctuation">,</span> hn<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> runBit <span class="token operator">=</span> fh <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> lastRun <span class="token operator">=</span> f<span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span> p <span class="token operator">!=</span> null<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> runBit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                runBit <span class="token operator">=</span> b<span class="token punctuation">;</span>                                lastRun <span class="token operator">=</span> p<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>runBit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            ln <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                            hn <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            hn <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                            ln <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> f<span class="token punctuation">;</span> p <span class="token operator">!=</span> lastRun<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">;</span> K pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">;</span> V pv <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                                ln <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 转移完后，旧数组的桶放置ForwardingNode，表示当前桶已处理完毕并表示为扩容中</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                        advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> t <span class="token operator">=</span> <span class="token punctuation">(</span>TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>f<span class="token punctuation">;</span>                        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> lo <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hi <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token keyword">int</span> lc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> h <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>                            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>                                <span class="token punctuation">(</span>h<span class="token punctuation">,</span> e<span class="token punctuation">.</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span>val<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> loTail<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    lo <span class="token operator">=</span> p<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                                loTail <span class="token operator">=</span> p<span class="token punctuation">;</span>                                <span class="token operator">++</span>lc<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> hiTail<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    hi <span class="token operator">=</span> p<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                                hiTail <span class="token operator">=</span> p<span class="token punctuation">;</span>                                <span class="token operator">++</span>hc<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        ln <span class="token operator">=</span> <span class="token punctuation">(</span>lc <span class="token operator">&lt;=</span> UNTREEIFY_THRESHOLD<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">untreeify</span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span> <span class="token operator">:</span>                            <span class="token punctuation">(</span>hc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>                        hn <span class="token operator">=</span> <span class="token punctuation">(</span>hc <span class="token operator">&lt;=</span> UNTREEIFY_THRESHOLD<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">untreeify</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span> <span class="token operator">:</span>                            <span class="token punctuation">(</span>lc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 转移完后，旧数组的桶放置ForwardingNode，表示当前桶已处理完毕并表示为扩容中</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                        advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-为什么key和value不允许为null，而HashMap可以呢？"><a href="#3-4-为什么key和value不允许为null，而HashMap可以呢？" class="headerlink" title="3.4 为什么key和value不允许为null，而HashMap可以呢？"></a>3.4 为什么key和value不允许为null，而HashMap可以呢？</h3><blockquote><p>​<strong>ConcurrentHashMap如果允许key和value为null，会产生二义性</strong>。即不能确定map里本身没有这个数据，还是说有这个数据，但这个数据存的是null值。</p><p>​为什么HashMap可以允许呢？因为它不会产生二义性，使用<strong>HashMap设计用于单线程下，假设我们获取key为A的数据返回了null，之后还马上可以通过containsKey来判断到底是不存在A还是A就为null（因为是单线程，不用担心其他线程会修改数据）</strong></p><p>​但ConcurrentHashMap是线程安全的，也就是默认会在多线程下修改数据。假设ConcurrentHashMap支持设置null，这时线程A获取key为null的数据返回了null，此时我们不确定A在不在ConcurrentHashMap里，需要用containsKey来判断key为null是否存在于ConcurrentHashMap里。但多线程的情况下，B线程在A线程containsKey操作前添加了key为null的数据，导致A线程containsKey返回了true，导致和第一步预期不同（第一步可能是不存在key为null的数据）</p><p>​综上：<strong>ConcurrentHashMap，它是为并发而生的，它是要用在并发场景中的。假如允许使用 map.get(key)返回 null ，这时是没办法通过 map.containsKey来准确的检测，因为在检测过程中可能会被其他线程锁修改，而导致检测结果并不可靠。所以直接禁用了null，好处就是返回null一定能表示key不存在，而不是有其他的含义，让语义更明确了</strong></p><p>​所以这个设计选择反映了<strong>并发编程的一个重要原则：通过适当的限制来换取更好的可靠性和简单性</strong>。虽然失去了存储null值的能力，但换来了更清晰的语义和更好的并发安全性。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Map </tag>
            
            <tag> ConcurrentHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2020-02-07/git/"/>
      <url>/2020-02-07/git/</url>
      
        <content type="html"><![CDATA[<p>​Git常用命令总结</p><span id="more"></span><h2 id="1-git-config"><a href="#1-git-config" class="headerlink" title="1 git config"></a>1 git config</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># git查看配置</span><span class="token function">git</span> config --list<span class="token comment" spellcheck="true"># ================= 全局配置（保存在用户目录下的 ～/.gitconfig 文件中）======================</span><span class="token comment" spellcheck="true"># 设置全局用户名和邮箱（在 git commit 时记录为提交者信息））</span><span class="token function">git</span> config --global user.name  <span class="token string">"reef"</span><span class="token function">git</span> config --global user.email <span class="token string">"shanzhao.rd@gmail.com"</span><span class="token comment" spellcheck="true"># 设置全局代理（socks5 协议，端口号为 7890）</span><span class="token function">git</span> config --global http.proxy<span class="token operator">=</span>socks5://127.0.0.1:7890<span class="token function">git</span> config --global https.proxy<span class="token operator">=</span>socks5://127.0.0.1:7890<span class="token comment" spellcheck="true"># ================= 当前仓库单独配置（保存在当前仓库中 .git/config 文件中）======================</span><span class="token comment" spellcheck="true"># 设置仓库专属用户名和邮箱（覆盖全局设置）</span><span class="token function">git</span> config  user.name  <span class="token string">"reef"</span><span class="token function">git</span> config  user.email <span class="token string">"shanzhao.rd@gmail.com"</span><span class="token comment" spellcheck="true"># 设置当前仓库的代理（仅对该仓库生效）</span><span class="token function">git</span> config  http.proxy<span class="token operator">=</span>socks5://127.0.0.1:7890<span class="token function">git</span> config  https.proxy<span class="token operator">=</span>socks5://127.0.0.1:7890<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-初始化仓库"><a href="#2-初始化仓库" class="headerlink" title="2 初始化仓库"></a>2 初始化仓库</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将当前文件夹初始化为一个 Git 本地仓库</span><span class="token function">git</span> init<span class="token comment" spellcheck="true"># 将指定文件夹初始化为一个 Git 本地仓库</span><span class="token function">git</span> init <span class="token operator">&lt;</span>目录路径<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-本地仓库的操作"><a href="#3-本地仓库的操作" class="headerlink" title="3 本地仓库的操作"></a>3 本地仓库的操作</h2><h3 id="3-1-查看文件状态"><a href="#3-1-查看文件状态" class="headerlink" title="3.1 查看文件状态"></a>3.1 查看文件状态</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 可以查看分支名（branch）和文件的状态，如已修改（Modified），未跟踪的（untracked）,未修改的不会有提示</span><span class="token function">git</span> status<span class="token comment" spellcheck="true"># 简洁版的git status</span><span class="token comment" spellcheck="true"># 红色M 代表文件修改了但未加入暂存区</span><span class="token comment" spellcheck="true"># 绿色M 代表文件修改了并且已加入暂存区</span><span class="token comment" spellcheck="true"># ?? 代表未跟踪的，</span><span class="token comment" spellcheck="true"># A 代表文件已被加入到暂存区</span><span class="token function">git</span> status -s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-未暂存的文件添加到暂存区和解暂存"><a href="#3-2-未暂存的文件添加到暂存区和解暂存" class="headerlink" title="3.2 未暂存的文件添加到暂存区和解暂存"></a>3.2 未暂存的文件添加到暂存区和解暂存</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将文件加入暂存区</span><span class="token function">git</span> add 文件名<span class="token comment" spellcheck="true"># 将暂存区的文件取消暂存</span><span class="token function">git</span> reset 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-commit-暂存区文件的提交"><a href="#3-3-commit-暂存区文件的提交" class="headerlink" title="3.3 commit(暂存区文件的提交)"></a>3.3 commit(暂存区文件的提交)</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 不带文件名会提交暂存区所有的文件</span><span class="token function">git</span> commit -m <span class="token string">"提交的日志信息"</span><span class="token comment" spellcheck="true"># 提交全部暂存区文件，并打开一个编辑器，让你写入提交日志（'i':插入，'ESC':退出编辑，':wq':保存并退出）</span><span class="token function">git</span> commit<span class="token comment" spellcheck="true"># 该语句可将不是暂存区的文件直接commit，因为-a就代表提交到了暂存区。两步合为一步了</span><span class="token function">git</span> commit -a -m <span class="token string">"提交的日志信息"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-已commit的文件删除"><a href="#3-4-已commit的文件删除" class="headerlink" title="3.4 已commit的文件删除"></a>3.4 已commit的文件删除</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 会放在暂存区，在commit之后就删除了。如果直接在文件夹中删除，则不会放在暂存区，要将其删除，就必须先add进暂存区，再commit</span><span class="token function">git</span> <span class="token function">rm</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-5-将文件添加至忽略列表"><a href="#3-5-将文件添加至忽略列表" class="headerlink" title="3.5 将文件添加至忽略列表"></a>3.5 将文件添加至忽略列表</h3><blockquote><p> 自动生成的文件，比如日志文件，class文件就不需要通过git提交，git一般只负责提交源代码。这种情况下，我们可以在<strong>工作区中创建一个.gitignore文件</strong>（文件名固定，可以在git命令行中用touch .gitignore语句创建）</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 通配符（匹配任意）</span>*<span class="token comment" spellcheck="true"># 取反。比如!hello.class文件，git就不会忽略掉hello.class文件</span><span class="token operator">!</span><span class="token comment" spellcheck="true"># 忽略当前目录下的xxx文件</span>/xxx<span class="token comment" spellcheck="true"># 忽略当前目录下的doc文件夹下的所有</span>doc/<span class="token comment" spellcheck="true"># 忽略当前目录下的doc文件夹里的所有txt文件</span>doc/*.txt<span class="token comment" spellcheck="true"># 忽略当前目录下的doc文件里的所有文件夹里的class文件</span>doc/**/*.class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6-查看git操作日志"><a href="#3-6-查看git操作日志" class="headerlink" title="3.6 查看git操作日志"></a>3.6 查看git操作日志</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 因为日志太多，不会一次性全部显示，按回车会显示下面的，按Q会退出。</span><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-远程仓库的操作"><a href="#4-远程仓库的操作" class="headerlink" title="4. 远程仓库的操作"></a>4. 远程仓库的操作</h2><h3 id="4-1-remote"><a href="#4-1-remote" class="headerlink" title="4.1 remote"></a>4.1 remote</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 可以查看到本地关联的的远程仓库的别名（粗略查看）</span><span class="token function">git</span> remote<span class="token comment" spellcheck="true"># 显示远程仓库地址（详细点）</span><span class="token function">git</span> remote -v<span class="token comment" spellcheck="true"># 可查看更多信息（更详细）</span><span class="token function">git</span> remote show 远程仓库的别名<span class="token comment" spellcheck="true"># 添加(add)远程仓库（一个本地仓库可以添加多个远程仓库）</span><span class="token function">git</span> remote add 仓库别名 远程仓库的url<span class="token comment" spellcheck="true"># 删除本地仓库中配置的某个远程仓库别名及其对应的 URL（该命令不会影响到真正的远程仓库）</span><span class="token function">git</span> remote <span class="token function">rm</span> 远程仓库的别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-clone"><a href="#4-2-clone" class="headerlink" title="4.2 clone"></a>4.2 clone</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 克隆远程仓库到此命令行文件夹下面</span><span class="token function">git</span> clone 远程仓库的url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-3-fetch-pull"><a href="#4-3-fetch-pull" class="headerlink" title="4.3 fetch &amp; pull"></a>4.3 fetch &amp; pull</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 从远程仓库获取最新版本带本地仓库，不会合并(merge)。如果省略这两个参数，即别名为origin，分支为matser</span><span class="token function">git</span> fetch 仓库别名 远程仓库的branchName<span class="token comment" spellcheck="true"># 合并到本地仓库</span><span class="token function">git</span> merge origin/master<span class="token comment" spellcheck="true"># 从远程仓库获取最新版本带本地仓库，会合并(merge)。如果省略这两个参数，即别名为origin，分支为matser</span><span class="token function">git</span> pull 仓库别名 远程仓库的branchName<span class="token comment" spellcheck="true"># 用于合并本地和远程仓库之间没有共同历史的分支内容。（强制合并）</span><span class="token function">git</span> pull 仓库别名 远程仓库的branchName --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Git分支操作"><a href="#5-Git分支操作" class="headerlink" title="5 Git分支操作"></a>5 Git分支操作</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出所有本地分支</span><span class="token function">git</span> branch<span class="token comment" spellcheck="true"># 列出所有远程分支</span><span class="token function">git</span> branch -r<span class="token comment" spellcheck="true"># 列出所有本地和远程的分支</span><span class="token function">git</span> branch -a<span class="token comment" spellcheck="true"># 查看所有本地分支，并可查看是否和远程分支建立映射关系</span><span class="token function">git</span> branch -v<span class="token comment" spellcheck="true"># 在本仓库中新建一个分支(在正在使用的分支下创建新的分支，新的分支将会复制正在使用的分支的所有内容进行初始化)</span><span class="token function">git</span> branch 新分支名<span class="token comment" spellcheck="true"># 切换到指定的分支下，前面会有*提示</span><span class="token function">git</span> checkout 已存在的分支名<span class="token comment" spellcheck="true"># 本地仓库分支推送到远程仓库</span><span class="token function">git</span> push 仓库别名<span class="token punctuation">(</span>shortname<span class="token punctuation">)</span> 本地仓库的分支名<span class="token punctuation">(</span>branchName<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将指定的分支名的分支文件合并到正在使用的分支里（branchName -> 正在使用的分支）</span><span class="token function">git</span> merge 分支名<span class="token punctuation">(</span>branchName<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 根据分支名删除分支，未push的不能删除</span><span class="token function">git</span> branch -d 分支名<span class="token comment" spellcheck="true"># 根据分支名强力删除分支，未push的也能删除</span><span class="token function">git</span> branch -D 分支名<span class="token comment" spellcheck="true"># 删除远程仓库中的分支</span><span class="token function">git</span> push 远程仓库的别名 -d 分支名<span class="token comment" spellcheck="true"># oldName是当前分支名，newName是想改成的名</span><span class="token function">git</span> branch -m oldName newName<span class="token comment" spellcheck="true"># 本地更新远程仓库分支</span><span class="token function">git</span> remote update origin --prune<span class="token comment" spellcheck="true"># =========分支追踪（名字不同也可以）============</span><span class="token comment" spellcheck="true"># 在本地新建分支local-branchName，并和对应的远程分支remote-branchName做映射，最后再checkout并pull</span><span class="token function">git</span> checkout -b local-branchName origin/remote-branchName<span class="token comment" spellcheck="true"># 将本地分支local-branchName分支追踪远程分支origin/remote-branchName（建立映射关系）   </span><span class="token function">git</span> branch --set-upstream local-branchName origin/remote-branchName<span class="token comment" spellcheck="true"># 将当前分支跟踪远程分支origin/remote-branchName   </span><span class="token function">git</span> branch -u origin/remote-branchName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-Git标签操作"><a href="#6-Git标签操作" class="headerlink" title="6 Git标签操作"></a>6 Git标签操作</h2><blockquote><p> 标签指的是某个分支的某个特定时间点的状态，记录了截止到当前时间的当前分支的全部内容。根据标签，我们可以很方便的切回到标签标记时的状态</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建一个新标签</span><span class="token function">git</span> tag 新的标签名<span class="token comment" spellcheck="true"># 列出所有标签</span><span class="token function">git</span> tag<span class="token comment" spellcheck="true"># 查看tag的信息</span><span class="token function">git</span> show 标签名<span class="token comment" spellcheck="true"># 将指定的标签推送至远程仓库</span><span class="token function">git</span> push 仓库别名 标签名<span class="token comment" spellcheck="true"># 新建一个分支，根据标签名指向指定的标签</span><span class="token function">git</span> checkout -b 新的分支名 标签名<span class="token comment" spellcheck="true"># 删除本地仓库中指定的标签</span><span class="token function">git</span> tag -d 标签名<span class="token comment" spellcheck="true"># 删除远程仓库中指定的标签</span><span class="token function">git</span> push origin :refs/tags/标签名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-SSH（secure-shell）认证"><a href="#7-SSH（secure-shell）认证" class="headerlink" title="7 SSH（secure shell）认证"></a>7 SSH（secure shell）认证</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成 SSH 密钥对的命令（由公钥和私钥组成，常用语SSH的连接和认证）</span>ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上诉命令会生成两个文件，将公钥放在git远程仓库的ssh key里接可以使用ssh操作远程仓库了</p><ul><li><strong>~&#x2F;.ssh&#x2F;id_rsa：私钥，用于客户端身份认证，需保密，放在本地</strong></li><li><strong>~&#x2F;.ssh&#x2F;id_rsa.pub：公钥，可放在远程服务器上</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
