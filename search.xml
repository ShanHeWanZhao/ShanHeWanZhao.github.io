<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CloudFlare-CDN缓存清除</title>
      <link href="/2024-06-14/cloudflare-cdn-huan-cun-qing-chu/"/>
      <url>/2024-06-14/cloudflare-cdn-huan-cun-qing-chu/</url>
      
        <content type="html"><![CDATA[<hr><p>​给出了一些api用于清除Cloudflare的CDN缓存方式</p> <span id="more"></span><h1 id="CloudFlare-CDN缓存清除"><a href="#CloudFlare-CDN缓存清除" class="headerlink" title="CloudFlare-CDN缓存清除"></a>CloudFlare-CDN缓存清除</h1><p>​搭建个人博客网站时，域名托管到CF，会使用CF的CDN。当你重新修改博客网站的样式css和js文件等再重新部署，一般都不会立马生效，因为CDN里的缓存还在，前端访问用的还是旧css和js文件。这时我们需要主动清除CDN的缓存，来让缓存重新加载，以便让我们修改的样式在网站立马生效</p><h2 id="1-purgeUrl"><a href="#1-purgeUrl" class="headerlink" title="1 purgeUrl"></a>1 purgeUrl</h2><p><img src="/img/cloudflare-purge-url.png"></p><h2 id="2-使用ApiKey清除（不推荐）"><a href="#2-使用ApiKey清除（不推荐）" class="headerlink" title="2 使用ApiKey清除（不推荐）"></a>2 使用ApiKey清除（不推荐）</h2><ul><li>ZONE_ID：区域id，即你在CF上托管的根域名id</li><li>EMAIL：你的邮箱</li><li>API_KEY：可自建apiKey，也可使用CF默认有的GlobalApiKey（<strong>个人资料 -&gt; API令牌 -&gt; API密钥 -&gt; Global API Key</strong>）</li></ul><h3 id="2-1-全部清除"><a href="#2-1-全部清除" class="headerlink" title="2.1 全部清除"></a>2.1 全部清除</h3><pre class="line-numbers language-bash"><code class="language-bash">curl https://api.cloudflare.com/client/v4/zones/<span class="token variable">$ZONE_ID</span>/purge_cache \    -H <span class="token string">'Content-Type: application/json'</span> \    -H <span class="token string">"X-Auth-Email: <span class="token variable">$EMAIL</span>"</span> \    -H <span class="token string">"X-Auth-Key: <span class="token variable">$API_KEY</span>"</span> \    -d <span class="token string">'{"purge_everything": true}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-批量清除具体文件"><a href="#2-2-批量清除具体文件" class="headerlink" title="2.2 批量清除具体文件"></a>2.2 批量清除具体文件</h3><p>一次性调用有文件数量限制： <strong>Free&#x2F;Pro&#x2F;Business一次上限30个，Enterprise一次上限500个</strong></p><pre class="line-numbers language-bash"><code class="language-bash">curl https://api.cloudflare.com/client/v4/zones/<span class="token variable">$ZONE_ID</span>/purge_cache \    -H <span class="token string">'Content-Type: application/json'</span> \    -H <span class="token string">"X-Auth-Email: <span class="token variable">$EMAIL</span>"</span> \    -H <span class="token string">"X-Auth-Key: <span class="token variable">$API_KEY</span>"</span> \    -d <span class="token string">'{    "files": [        "https://blog.shanzhao.site/css/my.css",        "https://blog.shanzhao.site/libs/others/snow.js"    ]}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-自定义token清除（推荐）"><a href="#3-自定义token清除（推荐）" class="headerlink" title="3 自定义token清除（推荐）"></a>3 自定义token清除（推荐）</h2><p>自定义token不仅<strong>可以最小化的控制权限，也可以设置token的有效时常</strong>。使用如下方式创建一个专用于清理指定根域名的token</p><p><img src="/img/couldflare-purge-token.png"></p><h3 id="3-1-验证token是否生效"><a href="#3-1-验证token是否生效" class="headerlink" title="3.1 验证token是否生效"></a>3.1 验证token是否生效</h3><pre class="line-numbers language-bash"><code class="language-bash">curl -X GET <span class="token string">"https://api.cloudflare.com/client/v4/user/tokens/verify"</span> \     -H <span class="token string">"Authorization: Bearer <span class="token variable">$API_TOKEN</span>"</span> \     -H <span class="token string">"Content-Type:application/json"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-2-全部清除"><a href="#3-2-全部清除" class="headerlink" title="3.2 全部清除"></a>3.2 全部清除</h3><pre class="line-numbers language-bash"><code class="language-bash">curl https://api.cloudflare.com/client/v4/zones/<span class="token variable">$ZONE_ID</span>/purge_cache \    -H <span class="token string">'Content-Type: application/json'</span> \    -H <span class="token string">"Authorization: Bearer <span class="token variable">$API_TOKEN</span>"</span> \    -d <span class="token string">'{"purge_everything": true}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-批量清除具体文件"><a href="#3-3-批量清除具体文件" class="headerlink" title="3.3 批量清除具体文件"></a>3.3 批量清除具体文件</h3><p>一次性调用有文件数量限制： <strong>Free&#x2F;Pro&#x2F;Business一次上限30个，Enterprise一次上限500个</strong></p><pre class="line-numbers language-bash"><code class="language-bash">curl https://api.cloudflare.com/client/v4/zones/<span class="token variable">$ZONE_ID</span>/purge_cache \    -H <span class="token string">'Content-Type: application/json'</span> \    -H <span class="token string">"Authorization: Bearer <span class="token variable">$API_TOKEN</span>"</span> \    -d <span class="token string">'{    "files": [        "https://blog.shanzhao.site/css/my.css",        "https://blog.shanzhao.site/libs/others/snow.js"    ]}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4 其他"></a>4 其他</h2><p>还有其他的参数，比如tags，hosts，prefixes，但这些都是企业版的用户才能使用，这里就不写了</p><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5 参考链接"></a>5 参考链接</h2><ul><li><a href="https://developers.cloudflare.com/api/resources/cache/methods/purge/">官方清除缓存文档</a></li><li><a href="https://dash.cloudflare.com/profile/api-tokens">cloudflare dashboard创建token和查看ApiKey</a></li><li><a href="https://developers.cloudflare.com/fundamentals/setup/find-account-and-zone-ids/">ZoneId获取</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> cloudflare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cdn缓存清除 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-事物NOT_SUPPORTED策略下多数据源切换的问题</title>
      <link href="/2022-03-03/spring-shi-wu-not-supported-ce-lue-xia-duo-shu-ju-yuan-qie-huan-de-wen-ti/"/>
      <url>/2022-03-03/spring-shi-wu-not-supported-ce-lue-xia-duo-shu-ju-yuan-qie-huan-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>​从案例中分析了NOT_SUPPORTED默认情况下为什么不能进行多数据源切换以及优雅的解决办法，以及给出了自己的思考</p><span id="more"></span><h1 id="Spring-事物NOT-SUPPORTED策略下多数据源切换的问题"><a href="#Spring-事物NOT-SUPPORTED策略下多数据源切换的问题" class="headerlink" title="Spring-事物NOT_SUPPORTED策略下多数据源切换的问题"></a>Spring-事物NOT_SUPPORTED策略下多数据源切换的问题</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天写代码时遇到一个多数据源的切换问题，框架为Spring和Mybatus-Plus。在完全没事物的情况下pgsql和mysql切换没问题，但<strong>在@Transactional(propagation &#x3D; Propagation.NOT_SUPPORTED)下却切换不了</strong>。翻了以前的<a href="https://blog.shanzhao.site/2021/02/23/spring-transactional/">Spring-Transactional文章</a>和代码，遂记录一下原因和解决思路，以及整体的思考</p><p>​在有事物的情况下多数据源切换不了这是很正常的，毕竟Connection绑定到ThreadLocal了。但我开始简单的认为只要使用<strong>Propagation.NOT_SUPPORTED</strong>传播策略，毕竟这都不支持事物了，应该就能进行数据源切换。实际就是代码报错了，还是切换不了</p><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>ProductService#recommend被调用在一个事物里</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>NOT_SUPPORTED<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recommend</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// pgsqlMapper这个mapper有注解 @DS("postgresql")，走pqsql库</span>        pgsqlMapper<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 走mysql库</span>        msyqlMapper<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h2><p>​ProductService#recommend使用了@Transactional(propagation &#x3D; Propagation.NOT_SUPPORTED)注解，它构造出来的DefaultTransactionStatus中有如下两个字段需要重点关注。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultTransactionStatus</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTransactionStatus</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 是否开启了真实的物理事物</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> newTransaction<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否由当前事务初始化并管理事务同步器（如注册连接绑定、hook 回调）</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> newSynchronization<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<strong>其中newTransaction&#x3D;false, newSynchronization&#x3D;true（受AbstractPlatformTransactionManager.transactionSynchronization字段控制）。</strong></p><blockquote><p><strong>表示尽管当前未开启物理事务，但事务管理器仍会初始化事务同步器（<code>TransactionSynchronizationManager.initSynchronization()</code>），并允许资源绑定（如 <code>ConnectionHolder</code>）与注册事务hook（<code>TransactionSynchronization</code>）。</strong></p><p>换句话说，<strong>“没有物理事务，但仍可进行事务性资源管理和 hook 回调”</strong></p></blockquote><p>​所以当触发pgsqlMapper.queryById(i)方法时，会绑定如下资源。（<strong>这一切必须要newSynchronization&#x3D;true</strong>）</p><blockquote><ul><li>获取SqlSession时（SqlSessionUtils#getSqlSession）将<strong>SqlSessionFactory -&gt; SqlSessionHolder 给缓存到TransactionSynchronizationManager#resources中</strong></li><li>获取Connection时（DataSourceUtils#doGetConnection）将<strong>DataSource -&gt; ConnectionHolder 也缓存到TransactionSynchronizationManager#resources中</strong></li></ul></blockquote><p>​<strong>所以，当走到第二个方法msyqlMapper.queryById(i)时，会拿到上一步中缓存的SqlSessionHolder，内部操作的是同一个Connection（具体为DefaultSqlSession.executor.transaction.connection），即pgsql的Connection，所以报错了</strong></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>​<strong>将这个字段AbstractPlatformTransactionManager.transactionSynchronization由默认的SYNCHRONIZATION_ALWAYS改为SYNCHRONIZATION_ON_ACTUAL_TRANSACTION</strong>。直接获取这个AbstractPlatformTransactionManager bean再进行改动有些不优雅，我翻了一遍发现有这个<strong>PlatformTransactionManagerCustomizer接口，可以对PlatformTransactionManager的子类进行定制化修改</strong>。所以可以添加如下的bean到容器中即可</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionSynchronizationCustomizer</span> <span class="token keyword">implements</span> <span class="token class-name">PlatformTransactionManagerCustomizer</span><span class="token operator">&lt;</span>AbstractPlatformTransactionManager<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>AbstractPlatformTransactionManager transactionManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解决Propagation.NOT_SUPPORTED下多数据源不能切换动态切换的问题</span>        transactionManager<span class="token punctuation">.</span><span class="token function">setTransactionSynchronization</span><span class="token punctuation">(</span>AbstractPlatformTransactionManager<span class="token punctuation">.</span>SYNCHRONIZATION_ON_ACTUAL_TRANSACTION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思考（重点）"><a href="#思考（重点）" class="headerlink" title="思考（重点）"></a>思考（重点）</h2><p>​在 Spring 的事务模型中，<code>Propagation.NOT_SUPPORTED</code> 虽然会挂起当前事务，但默认配置下（<code>SYNCHRONIZATION_ALWAYS</code>）仍会注册事务同步器。<br> 这导致<strong>即使没有物理事务，依然会出现线程绑定连接的行为（</strong>如通过 <code>DataSourceUtils.getConnection()</code> 获得的 Connection 会复用）。</p><p>​所以<strong>如果希望这个方法在语义上和“非事务环境”（即不使用@Transactional等情况）一致，避免隐式连接绑定，应将 <code>transactionSynchronization</code> 设置为 <code>SYNCHRONIZATION_ON_ACTUAL_TRANSACTION</code>。</strong></p><p>​看样子应该是<strong>Spring 为了支持某些非事务性方法（Propagation.NOT_SUPPORTED）也能参与事务资源控制</strong>才这样设计的</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-Context,ContextConfig和Wrapper</title>
      <link href="/2021-10-03/tomcat-context-contextconfig-he-wrapper/"/>
      <url>/2021-10-03/tomcat-context-contextconfig-he-wrapper/</url>
      
        <content type="html"><![CDATA[<hr><p>​StandardContext、ContextConfig以及StandardWrapper的核心逻辑源码解析及总结</p><span id="more"></span><h1 id="Tomcat-Context-ContextConfig和Wrapper"><a href="#Tomcat-Context-ContextConfig和Wrapper" class="headerlink" title="Tomcat-Context,ContextConfig和Wrapper"></a>Tomcat-Context,ContextConfig和Wrapper</h1><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>​<code>Context</code> 是 Tomcat 中最关键的容器组件，默认实现为 <code>StandardContext</code>。<strong>每一个 <code>Context</code> 实例代表一个独立的 Web 应用</strong>。在内部，<code>Context</code> 承担了大量与 Web 应用生命周期相关的工作，比如<strong>类加载器的初始化、<code>web.xml</code> 的解析、<code>Servlet</code>&#x2F;<code>Filter</code>&#x2F;<code>Listener</code> 的注册与实例化等</strong>。</p><p>​<strong>每个 <code>Context</code> 对应一个唯一的 <code>ServletContext</code>，用于代表当前 Web 应用的上下文环境</strong>。通过 <code>StandardContext</code> 的 <code>startInternal</code> 方法，我们可以深入了解 Tomcat 是如何逐步构建一个 Web 应用的，并是在哪一步触发Spring启动的。</p><h3 id="start核心流程总结"><a href="#start核心流程总结" class="headerlink" title="start核心流程总结"></a>start核心流程总结</h3><ol><li>初始化和设置类加载器<ul><li>设置StandardContext.loader为WebappLoader（和当前Context的使用的类加载器有关）</li><li>启动WebappLoader（内部会创建ParallelWebappClassLoader）</li><li><strong>切换当前线程的类加载器为上述的ParallelWebappClassLoader，为后续类的隔离加载做准备（尤其是 SPI 加载）</strong></li></ul></li><li>触发配置解析流程<ul><li>发布 <code>Lifecycle.CONFIGURE_START_EVENT</code> 事件，触发内部的 ContextConfig 监听器</li><li><strong>ContextConfig开始解析当前项目的web.xml和其他jar包里的web-fragment.xml，并将解析后的结果合并放到StandardContext中</strong>（比如将servlet配置构造成Warpper添加到Context中作为其子容器）</li></ul></li><li>tomcat 内部组件设置与启动<ul><li>启动Warpper（StandardWrapper启动阶段不会做什么，不是实例化关联的Servlet）</li><li>触发当前contxet的Pipeline#start</li><li><strong>创建StandardManager作为session的默认管理器</strong></li></ul></li><li><strong>实例和初始化关键Servlet相关组件</strong><ul><li>调用ServletContainerInitializer#onStartup</li><li><strong>实例化并调用ServletContextListener#contextInitialized（Spring + Tomcat组合时用到的ContextLoaderListener就会在这时启动。所以，这里就是spring开始实例化的开始）</strong></li><li><strong>调用Manager#start（内部会恢复上一次context中持久化的session）</strong></li><li><strong>实例化所有 Filter，并调用其init()方法</strong></li><li><strong>实例全部loadOnStartup &gt; 0的Servlet，并调用其init()方法</strong></li></ul></li></ol><h3 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardContext</span> <span class="token keyword">extends</span> <span class="token class-name">ContainerBase</span>        <span class="token keyword">implements</span> <span class="token class-name">Context</span><span class="token punctuation">,</span> NotificationEmitter <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StandardContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">setBasic</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardContextValve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// web.xml里的listener标签里配置的各种监听器className</span>    <span class="token keyword">private</span> String applicationListeners<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ServletContextListener集和</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> noPluggabilityListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ServletContext实现</span>    <span class="token keyword">protected</span> ApplicationContext context <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在当前tomcat实例中，是否允许javax.servlet.ServletContext#getContext方法跨context获取当前context的ServletContext</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> crossContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前web的path（即 URL 前缀）</span>    <span class="token keyword">private</span> String path <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Filter 实例与其配置类之间的映射（FilterConfig），用于实际调用</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ApplicationFilterConfig<span class="token operator">></span> filterConfigs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Filter配置的抽象集和（在wel.xml里配置的Filter）</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> FilterDef<span class="token operator">></span> filterDefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认为StandardManager（管理和持久化Session）</span>    <span class="token keyword">protected</span> Manager manager <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否开启可重新加载的检测</span>    <span class="token comment" spellcheck="true">// 为true时，当当前环境的Class文件或jar有改变时（增加或修改），会重新加载当前Context</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> reloadable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Servlet 映射关系，key 为 URL pattern，value 为 Servlet 名称</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> servletMappings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// session超时事件（分钟单位）</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sessionTimeout <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ============ Cookie相关配置 ================</span>    <span class="token keyword">private</span> String sessionCookieName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> useHttpOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String sessionCookieDomain<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sessionCookiePath<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否在cookie1路径最后面添加/，默认否（比如路径为/foo，避免请求/foobar也带上这个cookie）</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> sessionCookiePathUsesTrailingSlash <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否接受客户端提供的（但服务端不存在的）Session ID 并创建新的 Session。设为false和context path为 / 才会生效</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> validateClientProvidedNewSessionId <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * start方法，可以说是整个tomcat中最关键的部分     */</span>    <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化资源对象：WebResourceRoot（提供静态资源访问、JAR管理等），Loader会用到</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">setResources</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardRoot</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 启动资源对象，确保资源可用</span>            <span class="token function">resourcesStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 设置Loader。这时当前组件的state为STARTING_PREP，不会触发Loader的start</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            WebappLoader webappLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebappLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            webappLoader<span class="token punctuation">.</span><span class="token function">setDelegate</span><span class="token punctuation">(</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setLoader</span><span class="token punctuation">(</span>webappLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 初始化 Cookie 解析器（符合 RFC6265）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookieProcessor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cookieProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rfc6265CookieProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 绑定ClassLoader到当前线程，并返回旧的classLoader</span>        ClassLoader oldCCL <span class="token operator">=</span> <span class="token function">bindThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 启动 WebappLoader，内部会创建 ParallelWebappClassLoader</span>                Loader loader <span class="token operator">=</span> <span class="token function">getLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>loader <span class="token keyword">instanceof</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> loader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">unbindThread</span><span class="token punctuation">(</span>oldCCL<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将ParallelWebappClassLoader绑定到当前线程上线文里，作为当前context的类加载器</span>                oldCCL <span class="token operator">=</span> <span class="token function">bindThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 通知 ContextConfig 进行 web.xml（当前项目）、web-fragment.xml（其他依赖jar包） 等配置解析和组合</span>                <span class="token function">fireLifecycleEvent</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>CONFIGURE_START_EVENT<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// ================ 走到这，xml里的所有Servlet,Filter,Listener等配置都解析完毕，放置到当前Context内部中了</span>                <span class="token comment" spellcheck="true">// 启动所有Wrapper（内部基本不会做什么）</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Container child <span class="token operator">:</span> <span class="token function">findChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        child<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 启动当前context的pipeline</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pipeline <span class="token keyword">instanceof</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> pipeline<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 创建并设置 Session 管理器（如 StandardManager）</span>                Manager contextManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>contextManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setManager</span><span class="token punctuation">(</span>contextManager<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 检查配置是否成功（由 ContextConfig 设置）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getConfigured</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"standardContext.configurationFail"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 调用所有的ServletContainerInitializer</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>ServletContainerInitializer<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>>></span> entry <span class="token operator">:</span> initializers<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 调用ServletContextListener的contextInitialized方法</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">listenerStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"standardContext.listenerFail"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 启动 Session 管理器</span>                Manager manager <span class="token operator">=</span> <span class="token function">getManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>manager <span class="token keyword">instanceof</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> manager<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 实例化并配置好当前context的全部Filter，并触发其init方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">filterStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 加载并实例化各种loadOnStartup > 0 的Servlet（并执行init方法）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">loadOnStartup</span><span class="token punctuation">(</span><span class="token function">findChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 默认不会启动Context的backgroundProcessor（由Engine处理）</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">threadStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 恢复线程上下文类加载器</span>            <span class="token function">unbindThread</span><span class="token punctuation">(</span>oldCCL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 清理 Web 资源缓存（避免 JAR 文件句柄未释放）</span>        <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置最终状态</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setState</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>FAILED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Send j2ee.object.failed notification</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getObjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Notification notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token string">"j2ee.object.failed"</span><span class="token punctuation">,</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getObjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sequenceNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcaster<span class="token punctuation">.</span><span class="token function">sendNotification</span><span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">setState</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ContextConfig"><a href="#ContextConfig" class="headerlink" title="ContextConfig"></a>ContextConfig</h3><p>​当 <code>HostConfig</code> 实例化并部署 <code>Context</code> 时，会自动注册 <code>ContextConfig</code> 作为 <code>Context</code> 的一个 <code>LifecycleListener</code>。<strong>其主要职责是在 <code>Context</code> 启动（<code>startInternal()</code>）期间解析各种配置（web.xml、注解、SCI 等），并将解析结果装配到 <code>StandardContext</code> 中，以保证 Web 应用能完整启动</strong></p><p>​核心方法主要在ContextConfig#webConfig()中，被调用的链路为:</p><blockquote><ol><li>StandardContext#startInternal()中触发Lifecycle.CONFIGURE_START_EVENT事件</li><li>ContextConfig#lifecycleEvent</li><li>ContextConfig#configureStart</li><li>ContextConfig#webConfig</li></ol></blockquote><h4 id="webConfig-核心逻辑"><a href="#webConfig-核心逻辑" class="headerlink" title="webConfig()核心逻辑"></a>webConfig()核心逻辑</h4><ol><li><p><strong>web.xml解析</strong></p><ul><li><strong>${catalina.base}&#x2F;conf&#x2F;web.xml：server级别</strong>，即全局级别</li><li><strong>${catalina.base}&#x2F;conf&#x2F;Catalina&#x2F;{hostname}&#x2F;web.xml.default：host级别</strong></li><li><strong>WEB-INF&#x2F;web.xml：当前context级</strong>，在context根目录下</li><li><strong>WEB-INF&#x2F;lib&#x2F;*.jar!&#x2F;META-INF&#x2F;web-fragment.xml：fragment级别</strong>，当前web的依赖jar（WEB-INF&#x2F;lib&#x2F;目录）包里</li></ul></li><li><p><strong>Servlet 3.0特性支持</strong></p><ul><li><p>识别并加载 ServletContainerInitializer（WEB-INF&#x2F;lib&#x2F;*.jar!&#x2F;META-INF&#x2F;services&#x2F;javax.servlet.ServletContainerInitializer）</p></li><li><p><strong>使用字节码技术解析项目class和jar包里的@WebServlet, @WebFilter, @WebListener，@HandlesType等注解，避免无用的class被加载进JVM</strong></p></li></ul></li><li><p><strong>web.xml合并注册</strong></p><ul><li><strong>将第1步里解析到的全部WebXml按优先级合并为一个WebXml对象，优先级： context &gt; fragment &gt; host &gt; server</strong></li><li>将<strong>合并后的WebXml注册到StandardContext中</strong>（Filter、Listener、Wrapper、Session config、欢迎页等）</li></ul></li></ol><h4 id="webConfig-源码"><a href="#webConfig-源码" class="headerlink" title="webConfig()源码"></a>webConfig()源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">webConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// web.xml的解析器</span>    WebXmlParser webXmlParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebXmlParser</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getXmlNamespaceAware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            context<span class="token punctuation">.</span><span class="token function">getXmlValidation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getXmlBlockExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>WebXml<span class="token operator">></span> defaults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 解析全局默认的web.xml，即conf/web.xml文件</span>    <span class="token comment" spellcheck="true">// 2. 解析host级别默认的web.xml，即conf/Catalina/{hostname}/web.xml.default 文件</span>    defaults<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getDefaultWebXmlFragment</span><span class="token punctuation">(</span>webXmlParser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// web.xml的解析结果</span>    WebXml webXml <span class="token operator">=</span> <span class="token function">createWebXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将当前context级别的 WEB-INF/web.xml文件解析到webXml对象里</span>    InputSource contextWebXml <span class="token operator">=</span> <span class="token function">getContextWebXmlSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>webXmlParser<span class="token punctuation">.</span><span class="token function">parseWebXml</span><span class="token punctuation">(</span>contextWebXml<span class="token punctuation">,</span> webXml<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ServletContext sContext <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将Web应用中的所有jar包（即WEB-INF/lib/ 目录）里的META-INF/web-fragment.xml 解析为一个个的WebXml对象</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>WebXml<span class="token operator">></span> fragments <span class="token operator">=</span> <span class="token function">processJarsForWebFragments</span><span class="token punctuation">(</span>webXml<span class="token punctuation">,</span> webXmlParser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 排序</span>    Set<span class="token operator">&lt;</span>WebXml<span class="token operator">></span> orderedFragments <span class="token operator">=</span> null<span class="token punctuation">;</span>    orderedFragments <span class="token operator">=</span>            WebXml<span class="token punctuation">.</span><span class="token function">orderWebFragments</span><span class="token punctuation">(</span>webXml<span class="token punctuation">,</span> fragments<span class="token punctuation">,</span> sContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实例化META-INF/services/javax.servlet.ServletContainerInitializer文件里的SCI</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">processServletContainerInitializers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span>  <span class="token punctuation">(</span><span class="token operator">!</span>webXml<span class="token punctuation">.</span><span class="token function">isMetadataComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> typeInitializerMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 使用字节码方式解析class文件并处理相关注解（@WebServlet, @WebFilter, @WebListener等）</span>        <span class="token comment" spellcheck="true">// 2. 找出符合 @HandlesType 的类</span>        <span class="token function">processClasses</span><span class="token punctuation">(</span>webXml<span class="token punctuation">,</span> orderedFragments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>webXml<span class="token punctuation">.</span><span class="token function">isMetadataComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 先合并jar包里web-fragment.xml配置到当前context的web.xml里</span>            ok <span class="token operator">=</span> webXml<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>orderedFragments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 再将全局默认和host的合并到当前context的web.xml里</span>        webXml<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>defaults<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">convertJsps</span><span class="token punctuation">(</span>webXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将合并完成的web.xml信息注册到当前StandardContext中</span>            <span class="token function">configureContext</span><span class="token punctuation">(</span>webXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        webXml<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>defaults<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">convertJsps</span><span class="token punctuation">(</span>webXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">configureContext</span><span class="token punctuation">(</span>webXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 暴露出jar包中META-INF/resources/的静态资源，让其可以直接通过url访问</span>        Set<span class="token operator">&lt;</span>WebXml<span class="token operator">></span> resourceJars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>orderedFragments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>WebXml fragment <span class="token operator">:</span> fragments<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resourceJars<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                resourceJars<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">processResourceJARs</span><span class="token punctuation">(</span>resourceJars<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注册 ServletContainerInitializer 到 Context</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>ServletContainerInitializer<span class="token punctuation">,</span>                Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>>></span> entry <span class="token operator">:</span>                    initializerClassMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">addServletContainerInitializer</span><span class="token punctuation">(</span>                        entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">addServletContainerInitializer</span><span class="token punctuation">(</span>                        entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Wrapper"><a href="#Wrapper" class="headerlink" title="Wrapper"></a>Wrapper</h2><p>​Wrapper即Servlet，默认实现为StandardWrapper，其主要任务为：</p><blockquote><ul><li>管理 Servlet 的 <strong>生命周期</strong>（加载、初始化、分配和销毁）</li><li>支持 <strong>线程安全策略</strong>（如 <code>SingleThreadModel</code>）</li></ul></blockquote><p>​<strong>Servlet 的实例化不依赖 StandardWrapper的 <code>init()</code> 或 <code>start()</code> 方法，而是由 <code>loadOnStartup</code>字段决定</strong>。也就没必要分析着两个生命周期方法</p><blockquote><ul><li>loadOnStartup &gt;&#x3D; 0：在应用启动阶段就会实例化并初始化 Servlet（StandardContext内的start阶段）</li><li>loadOnStartup &lt; 0（默认）：延迟到首次请求时才实例化</li></ul></blockquote><p>​值得关注allocate()方法，这是在http请求到来时分配当前Wrapper的Servlet方法，其实现了SingleThreadModel（即STM，尽管已被废弃）逻辑的支持。内部<strong>利用栈进行缓存，让每个运行在当前STM Servlet里的线程能独享一个Servlet，默认最多20个缓存</strong>，到达最大数量时当前请求会被阻塞，只能等deallocate()方法（归还Servlet）来唤醒。</p><p>​所以，可以得出一个关键结论：<strong>对STM Servlet来说，其http请求的最大并发数为Min(StandardWrapper.maxInstances, tomcat的worker线程池最大线程数)</strong></p><h3 id="核心源码-1"><a href="#核心源码-1" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">ContainerBase</span>        <span class="token keyword">implements</span> <span class="token class-name">ServletConfig</span><span class="token punctuation">,</span> Wrapper<span class="token punctuation">,</span> NotificationEmitter <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StandardWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 向pipeline添加StandardWrapperValve，这个valve主要实例化servlet并构造filter来处理请求</span>        swValve <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardWrapperValve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">setBasic</span><span class="token punctuation">(</span>swValve<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// servlet实例（针对多线程共用时的）</span>    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> Servlet instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前servlet是否已经初始化（就是调用了init接口）</span>    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> instanceInitialized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> loadOnStartup <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前servlet的InitParam参数缓存</span>    <span class="token keyword">protected</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否是单线程模式。默认false，表示为单例Servlet。如果为true，代表Servlet在每个运行的线程中是不同的，即多例</span>    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> singleThreadModel <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单线程模式下默认最多20个单线程servlet</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> maxInstances <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单线程模式下servlet的实例树</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> nInstances <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单线程模式下基于栈实现的servlet实例池</span>    <span class="token keyword">protected</span> Stack<span class="token operator">&lt;</span>Servlet<span class="token operator">></span> instancePool <span class="token operator">=</span> null<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 根据singleThreadModel采用不同的分配策略，进行Servlet实例的分配     */</span>    <span class="token keyword">public</span> Servlet <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> newInstance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 非STM的，每次都返回相同的servlet（多线程共用这个对象）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singleThreadModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>instanceInitialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 实例化</span>                            instance <span class="token operator">=</span> <span class="token function">loadServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            newInstance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singleThreadModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                countAllocated<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"standardWrapper.allocate"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 如果未初始化，则调用Servlet#init方法</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instanceInitialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">initServlet</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 再次检测STM（Servlet第一次实例化时才会设置这个值），如果是STM则先入栈（即缓存）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>singleThreadModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>instancePool<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        instancePool<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>                        nInstances<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 非STM则直接返回</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    countAllocated<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ================== 走到这，表示为STM Servlet ==================</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>instancePool<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>countAllocated<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> nInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 缓存的STM Servlet不够分</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nInstances <span class="token operator">&lt;</span> maxInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 没到上限，则进行实例化</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        instancePool<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">loadServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        nInstances<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"standardWrapper.allocate"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 超过上限，则阻塞等待归还Servlet时的唤醒</span>                        instancePool<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Ignore</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 增加servlet正在使用的数量</span>            countAllocated<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> instancePool<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**     * 释放已使用完的Servlet实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span>Servlet servlet<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singleThreadModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            countAllocated<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 归还到栈中，让其可以重复使用</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>instancePool<span class="token punctuation">)</span> <span class="token punctuation">{</span>            countAllocated<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            instancePool<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>            instancePool<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-Engine,Host和HostConfig</title>
      <link href="/2021-09-23/tomcat-engine-host-he-hostconfig/"/>
      <url>/2021-09-23/tomcat-engine-host-he-hostconfig/</url>
      
        <content type="html"><![CDATA[<hr><p>​从源码分析了ContainerBase，StandardEngine，StandardHost和HostConfig的实现逻辑。需要<strong>重点注意HostConfig的作用和部署流程</strong></p><span id="more"></span><h1 id="Tomcat-Engine-Host和HostConfig"><a href="#Tomcat-Engine-Host和HostConfig" class="headerlink" title="Tomcat-Engine,Host和HostConfig"></a>Tomcat-Engine,Host和HostConfig</h1><h2 id="ContainerBase"><a href="#ContainerBase" class="headerlink" title="ContainerBase"></a>ContainerBase</h2><p>​是所有容器（Engine、Host、Context、Wrapper）的核心抽象基类，<strong>定义并维护了容器通用的结构、生命周期管理机制和后台任务调度能力</strong>。核心职责如下：</p><ul><li>init<ul><li>构建一个<strong>可过期的核心线程数为1的线程池（生命周期短，仅用来启动子容器）</strong>，准备用于并发start子容器</li></ul></li><li>start<ul><li>并发启动所有子容器，阻塞等待其完成</li><li>启动自身的 <code>Pipeline</code>（包含所有 <code>Valve</code>）</li><li>根据 <code>backgroundProcessorDelay</code> 的配置，<strong>决定是否启动后台线程</strong> <code>ContainerBackgroundProcessor</code>（默认仅 <code>Engine</code> 容器会设置该值（为 10 秒），其它容器默认不启动），用于<strong>周期性执行后台任务（如 session 过期清理）</strong></li></ul></li></ul><h3 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ContainerBase</span> <span class="token keyword">extends</span> <span class="token class-name">LifecycleMBeanBase</span> <span class="token keyword">implements</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 子容器集合，key 为容器名，每个Container都有唯一name</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Container<span class="token operator">></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 后台处理线程执行间隔（秒），用于处理如 session 过期等后台任务。     * - 默认值为 -1，表示不启动后台线程。     * - 仅 Engine 容器会设置为 10，其它容器（Host、Context、Wrapper）默认不设置。     * - ContainerBackgroundProcessor 线程由 Engine 启动，并递归处理其所有子容器的后台任务。     */</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> backgroundProcessorDelay <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 容器监听器（用于监听子容器结构或状态变更）</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>ContainerListener<span class="token operator">></span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前容器名</span>    <span class="token keyword">protected</span> String name <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前容器的父容器（Engine为最顶层的容器，所以为null）</span>    <span class="token keyword">protected</span> Container parent <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前容器的 Pipeline，用于处理请求链路（Valve）</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> Pipeline pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardPipeline</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后台线程引用（用于执行 backgroundProcessor）</span>    <span class="token keyword">private</span> Thread thread <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启动/停止子容器的线程数（默认 1）</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> startStopThreads <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启动或暂停当前容器的子容器线程池（默认线程数就为上面的1，且允许核心线程过期。一般只有在启动才需要用到，所以启动完毕后这个线程池就没啥用了，让里面的线程过期）</span>    <span class="token keyword">protected</span> ThreadPoolExecutor startStopExecutor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> startStopQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认一个线程</span>        startStopExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                <span class="token function">getStartStopThreadsInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">getStartStopThreadsInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                startStopQueue<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">StartStopThreadFactory</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-startStop-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 允许核心线程过期</span>        startStopExecutor<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先启动Cluster和Realm</span>        logger <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cluster cluster <span class="token operator">=</span> <span class="token function">getClusterInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cluster <span class="token keyword">instanceof</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> cluster<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Realm realm <span class="token operator">=</span> <span class="token function">getRealmInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>realm <span class="token keyword">instanceof</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> realm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 并发启动所有子容器</span>        Container children<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">findChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Future<span class="token operator">&lt;</span>Void<span class="token operator">>></span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Container child <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>startStopExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StartChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        MultiThrowable multiThrowable <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 阻塞等待所有子容器启动完成</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Future<span class="token operator">&lt;</span>Void<span class="token operator">></span> result <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"containerBase.threadedStartFailed"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>multiThrowable <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    multiThrowable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                multiThrowable<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>multiThrowable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LifecycleException</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"containerBase.threadedStartFailed"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    multiThrowable<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 等所有子容器启动完毕，再启动当前容器的Pipeline（包括 Basic Valve）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pipeline <span class="token keyword">instanceof</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">)</span> pipeline<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 触发当前组件里监听器lifecycleListeners的start事件</span>        <span class="token function">setState</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动后台线程（如配置，线程也是daemon）</span>        <span class="token function">threadStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Engine"><a href="#Engine" class="headerlink" title="Engine"></a>Engine</h2><p>​Engine是Tomcat最顶层的容器（没有父容器），和Service是一对一的关系，在他们内部互相保存了对方的引用，<strong>默认实现类时StandardEngine</strong>。</p><p>​该容器本身不负责具体请求处理，核心职责是承载多个 <code>Host</code> 子容器，因此<strong>其初始化和启动过程直接复用了父类 <code>ContainerBase</code> 的逻辑</strong>。</p><p>​需要注意的是，<strong>构造方法中设置了 <code>backgroundProcessorDelay = 10</code>，这会启动一个后台线程，周期性执行所有子容器的后台任务（如 session 过期清理等）。Tomcat 默认仅在 <code>Engine</code> 层启用此功能，从而递归驱动整个容器树的后台处理流程。</strong></p><h3 id="核心源码-1"><a href="#核心源码-1" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardEngine</span> <span class="token keyword">extends</span> <span class="token class-name">ContainerBase</span> <span class="token keyword">implements</span> <span class="token class-name">Engine</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StandardEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置当前容器的basic value, 此 Valve 会作为 Pipeline 中的最后一个节点。</span>        pipeline<span class="token punctuation">.</span><span class="token function">setBasic</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardEngineValve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置后台处理线程的执行间隔（单位：秒）</span>        <span class="token comment" spellcheck="true">// 用于周期性执行容器级的后台任务，如 session 清理等，仅 Engine 层默认启用</span>        backgroundProcessorDelay <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 默认主机名。     * 当请求url的host未匹配到任何具体的 Host 容器时，将路由到该默认 Host     * 对应 server.xml 中 &lt;Engine> 的 defaultHost 属性，默认值通常为 localhost     */</span>    <span class="token keyword">private</span> String defaultHost <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前 Engine 所绑定的 Service（Engine 和 Service 是一对一关系）。     */</span>    <span class="token keyword">private</span> Service service <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h2><p>​Host 是 Engine 的子容器，默认实现为 <code>StandardHost</code>，表示对 HTTP 请求中 host 的抽象。请求到达时，<strong>Tomcat 会根据请求的 host 名（域名）查找匹配的 <code>Host</code> 实例；若无匹配项，则使用默认 Host（即 <code>defaultHost</code>，通常为 <code>localhost</code>）</strong></p><p>​<code>StandardHost</code> 的初始化和启动逻辑沿用 <code>ContainerBase</code> 的通用流程，本身没有特殊处理。 <strong>真正负责扫描部署目录、创建并启动子容器 <code>Context</code> 的工作，实际上由其监听器 <code>HostConfig</code> 完成</strong>。</p><h3 id="核心源码-2"><a href="#核心源码-2" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardHost</span> <span class="token keyword">extends</span> <span class="token class-name">ContainerBase</span> <span class="token keyword">implements</span> <span class="token class-name">Host</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StandardHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// StandardHostValve也会作为当前容器的pipeline的last value</span>        pipeline<span class="token punctuation">.</span><span class="token function">setBasic</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardHostValve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当前Host的别名，匹配别名也能匹配到当前Host</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> aliases <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前Host下的Web应用部署根目录，相对路径默认值为webapps</span>    <span class="token keyword">private</span> String appBase <span class="token operator">=</span> <span class="token string">"webapps"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认：${catalina.base}/webapps</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> File appBaseFile <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认为：conf/Catalina/localhost目录</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> File hostConfigBase <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否自动部署</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> autoDeploy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加到当前Host的子容器Context里的监听器（ContextConfig）</span>    <span class="token keyword">private</span> String configClass <span class="token operator">=</span> <span class="token string">"org.apache.catalina.startup.ContextConfig"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前Host的子容器Context的实现类</span>    <span class="token keyword">private</span> String contextClass <span class="token operator">=</span> <span class="token string">"org.apache.catalina.core.StandardContext"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启动时部署Context</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> deployOnStartup <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// （应该被忽略的Context）默认为null</span>    <span class="token keyword">private</span> Pattern deployIgnore <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HostConfig"><a href="#HostConfig" class="headerlink" title="HostConfig"></a>HostConfig</h3><p>​在默认的 <code>server.xml</code> 配置中，<code>&lt;Host&gt;</code> 元素下并没有显式配置 <code>&lt;Context&gt;</code> 子元素，因此在解析 <code>server.xml</code> 时并不会为 Host 创建任何 Context 子容器。尽管如此，Tomcat 仍能在启动时自动部署 <code>$&#123;catalina.base&#125;/webapps/</code> 目录下的应用，这正是由 <code>HostConfig</code> 这个 <code>LifecycleListener</code> 完成的。</p><ul><li><p>注册方式</p><blockquote><p>​在 Tomcat 启动期间，通过 Digester 解析 server.xml 时，会由 <code>HostRuleSet#addRuleInstances()</code> 方法为每个 Host 元素注册默认的生命周期监听器org.apache.catalina.startup.HostConfig，其会被实例化添加为Host的LifecycleListener</p></blockquote></li><li><p>启动时机</p><blockquote><p>​         StandardHost<strong>在startInternal()期间中的子容器启动完成后（默认没有子容器），但后台线程还未启动时，会触发lifecycle的START_EVENT事件，从而触发HostConfig的start</strong>，来解析目标文件夹下webapps的项目，自动部署所有符合规则的 Web 应用。</p></blockquote></li><li><p>三种部署方式</p><ul><li><strong>XML 配置部署（conf&#x2F;Catalina&#x2F;{hostname}&#x2F;*.xml）</strong><ul><li>每个xml文件即为一个Context（IDEA的war exploded就是这种方式）</li></ul></li><li><strong>WAR 包部署（webapps&#x2F;*.war）</strong><ul><li>每个war包即为一个Context</li></ul></li><li><strong>directory部署（webapps&#x2F;{dir}）</strong><ul><li>每个目录被当作一个Context，是项目中最常用的一种</li></ul></li></ul></li><li><p>路径问题</p><blockquote><p>​上诉三种部署方式都遵循相同的路径规则。即Context的name和path为去除拓展名后的部分。<strong>对于特殊的ROOT，则表示为根路径<code>/ </code>。</strong></p></blockquote></li></ul><h4 id="核心源码-3"><a href="#核心源码-3" class="headerlink" title="核心源码"></a>核心源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HostConfig</span> <span class="token keyword">implements</span> <span class="token class-name">LifecycleListener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// context默认实现类</span>    <span class="token keyword">protected</span> String contextClass <span class="token operator">=</span> <span class="token string">"org.apache.catalina.core.StandardContext"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前绑定的 Host 容器</span>    <span class="token keyword">protected</span> Host host <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 已部署的应用（用于记录当前 host 下部署的 context 状态）</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> DeployedApplication<span class="token operator">></span> deployed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 正在处理部署/卸载操作的 Context 名集合（用于防止重复并发部署）</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> servicedSet <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">newSetFromMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Host 生命周期监听方法，根据不同生命周期阶段执行对应操作：     * - BEFORE_START：确认所需目录存在     * - START：执行部署流程     * - PERIODIC：周期性检查（autoDeploy 场景下可能重新部署）     * - STOP：停止并清理部署     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lifecycleEvent</span><span class="token punctuation">(</span>LifecycleEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>PERIODIC_EVENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 周期任务（例如监测部署目录变更）</span>            <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>BEFORE_START_EVENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// StandardHost启动前触发</span>            <span class="token comment" spellcheck="true">// 确保 ${catalina.base}/webapps和conf/Catalina/localhost目录存在（不存在也只会打日志）</span>            <span class="token function">beforeStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>START_EVENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// StanardHost正在启动</span>            <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>STOP_EVENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 默认：${catalina.base}/webapps</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>host<span class="token punctuation">.</span><span class="token function">getAppBaseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// app文件目录不是文件夹，代表不需要部署</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"hostConfig.appBase"</span><span class="token punctuation">,</span> host<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    host<span class="token punctuation">.</span><span class="token function">getAppBaseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            host<span class="token punctuation">.</span><span class="token function">setDeployOnStartup</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            host<span class="token punctuation">.</span><span class="token function">setAutoDeploy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">getDeployOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 默认为true，开始部署</span>            <span class="token function">deployApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">deployApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        File appBase <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">getAppBaseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File configBase <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">getConfigBaseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 过滤器默认为null，所以还是返回全部</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> filteredAppPaths <span class="token operator">=</span> <span class="token function">filterAppPaths</span><span class="token punctuation">(</span>appBase<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 过滤webapps文件夹下的所有文件</span>        <span class="token comment" spellcheck="true">// conf/Catalina/localhost目录下所有的xml方式部署（IDEA的war exploded就是这种方式）</span>        <span class="token comment" spellcheck="true">// 每一个xml其实就是一个context，文件名就是context的ptah。ROOT.xml就是默认的context，即path为空字符串</span>        <span class="token function">deployDescriptors</span><span class="token punctuation">(</span>configBase<span class="token punctuation">,</span> configBase<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// war包的形式部署</span>        <span class="token comment" spellcheck="true">// 部署${catalina.base}/webapps目录下的所有war包</span>        <span class="token function">deployWARs</span><span class="token punctuation">(</span>appBase<span class="token punctuation">,</span> filteredAppPaths<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 直接以文件夹的形式部署</span>        <span class="token comment" spellcheck="true">// 部署${catalina.base}/webapps目录下的所有文件夹形式的context</span>        <span class="token function">deployDirectories</span><span class="token punctuation">(</span>appBase<span class="token punctuation">,</span> filteredAppPaths<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="directory部署"><a href="#directory部署" class="headerlink" title="directory部署"></a>directory部署</h4><p>​重点解析下directory部署方式，毕竟这是最常用的。其<strong>会在当前host的startStop线程池中异步部署</strong>，根据如下源码总结出核心流程</p><ol><li><strong>优先使用 META-INF&#x2F;context.xml 配置（如果存在）</strong></li><li>解析并构造出Context实例</li><li>设置Context的一些基础属性（name和path等，以项目目录名为准）</li><li><strong>将Context添加为对应Host的子容器（此时会触发Context的start）</strong></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 以文件夹方式部署应用（appBase 下的目录结构） * - 忽略 META-INF、WEB-INF * - 忽略已存在的部署 * - 支持异步并发部署（通过 Host 提供的线程池） */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">deployDirectories</span><span class="token punctuation">(</span>File appBase<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ExecutorService es <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">getStartStopExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// META-INF和WEB-INF文件加不部署</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"META-INF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"WEB-INF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>appBase<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ROOT文件夹会被解析为 根context，也就是path为空字符串</span>            ContextName cn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextName</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAddServiced</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">deploymentExists</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">removeServiced</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 异步部署</span>                    results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>es<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeployDirectory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> cn<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">removeServiced</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 同步等待</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> result <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"hostConfig.deployDir.threaded.error"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ================ 开始部署 ==================</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">deployDirectory</span><span class="token punctuation">(</span>ContextName cn<span class="token punctuation">,</span> File dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Context context <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Web 应用目录下的META-INF/context.xml 文件</span>    File xml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> Constants<span class="token punctuation">.</span>ApplicationContextXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将META-INF/context.xml拷贝到的目标位置：conf/Catalina/localhost/${contextName}.xml</span>    File xmlCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">getConfigBaseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cn<span class="token punctuation">.</span><span class="token function">getBaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DeployedApplication deployedApp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否拷贝 META-INF/context.xml 到 conf 目录（Host 默认 false，可被 Context 覆盖）</span>    <span class="token keyword">boolean</span> copyThisXml <span class="token operator">=</span> <span class="token function">isCopyXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否允许部署该 META-INF/context.xml（默认true）</span>    <span class="token keyword">boolean</span> deployThisXML <span class="token operator">=</span> <span class="token function">isDeployThisXML</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>deployThisXML <span class="token operator">&amp;&amp;</span> xml<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 存在有效 META-INF/context.xml 且支持部署这个xml，则通过 digester 解析生成 Context</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>digesterLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                context <span class="token operator">=</span> <span class="token punctuation">(</span>Context<span class="token punctuation">)</span> digester<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果 host 设置不允许拷贝xml，则再次通过 context的copyXML 判断一次</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>copyThisXml <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> context <span class="token keyword">instanceof</span> <span class="token class-name">StandardContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                copyThisXml <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>StandardContext<span class="token punctuation">)</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCopyXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 根据是否拷贝，设置 context 的配置文件位置（conf 目录 or 原始目录）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>copyThisXml<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Files<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>xml<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xmlCopy<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">setConfigFile</span><span class="token punctuation">(</span>xmlCopy<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">setConfigFile</span><span class="token punctuation">(</span>xml<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deployThisXML <span class="token operator">&amp;&amp;</span> xml<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 禁止部署，但 META-INF/context.xml 存在 —— 为安全考虑，阻止启动（避免绕过配置）</span>            context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FailedContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 没有 META-INF/context.xml文件，则手动 new 一个 context 实例</span>            context <span class="token operator">=</span> <span class="token punctuation">(</span>Context<span class="token punctuation">)</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 为 Context 添加生命周期监听器（默认是 ContextConfig，用于触发解析 web.xml等）</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">getConfigClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LifecycleListener listener <span class="token operator">=</span> <span class="token punctuation">(</span>LifecycleListener<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">addLifecycleListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置 Context 的一些基础信息</span>        context<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setWebappVersion</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setDocBase</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getBaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将 Context 添加到当前 Host，并自动触发生命周期（start/init）</span>        host<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"hostConfig.deployDir.error"</span><span class="token punctuation">,</span> dir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 部署完成后记录已部署信息，构建 DeployedApplication（省略细节）</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    deployed<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cn<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deployedApp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-Server和Service</title>
      <link href="/2021-09-04/tomcat-server-he-service/"/>
      <url>/2021-09-04/tomcat-server-he-service/</url>
      
        <content type="html"><![CDATA[<hr><p>​对Tomcat中Server，Service的init和start方法 + 核心字段进行了分析，并<strong>重点分析了Connector-NioEndpoint内部的Acceptor和Poller线程，并用图文的方法做了总结</strong>。并简单总结了Mapper和MapperListener的作用</p><span id="more"></span><h1 id="Tomcat-Server和Service"><a href="#Tomcat-Server和Service" class="headerlink" title="Tomcat-Server和Service"></a>Tomcat-Server和Service</h1><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>​<code>Server</code> 表示 Tomcat 的顶层容器，默认实现为 <code>StandardServer</code>。它的职责相对简单，主要包括</p><ul><li><p>负责管理整个 Tomcat 的生命周期事件（如 <code>start()</code>、<code>stop()</code> 等），并将其传递给所有子组件 <code>Service</code></p></li><li><p><strong>监听关闭端口</strong>：默认会在 <code>8005</code> 端口监听本地连接，用于接收特定的 <code>SHUTDOWN</code> 命令，从而实现优雅关闭</p></li><li><p>监听行为可通过配置项（如 <code>port</code> 和 <code>shutdown</code>）启用、关闭或修改shutdown命令</p></li><li><p>当监听到SHUTDOWN命令，await()则返回，main线程会退出。<strong>可以推测出，tomcat启动的其他线程池应该是daemon线程的，否则整个进程是不会退出的</strong>。后续我会陆续验证这个猜想</p></li></ul><h3 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h3><p>​我这里只展示了部分优化后的核心源码，不重要的我都删了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StandardServer</span> <span class="token keyword">extends</span> <span class="token class-name">LifecycleMBeanBase</span> <span class="token keyword">implements</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// shutdown监听端口</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8005</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String address <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 内部所有的Service</span>    <span class="token keyword">private</span> Service services<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object servicesLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// shutdown命令，默认就是SHUTDOWN</span>    <span class="token keyword">private</span> String shutdown <span class="token operator">=</span> <span class="token string">"SHUTDOWN"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stopAwait <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Catalina catalina <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 监听shutdown端口的ServerSocket</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> ServerSocket awaitSocket <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        <span class="token function">fireLifecycleEvent</span><span class="token punctuation">(</span>CONFIGURE_START_EVENT<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING<span class="token punctuation">)</span><span class="token punctuation">;</span>        globalNamingResources<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 依次启动内部所有的Service</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>servicesLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Service service <span class="token operator">:</span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>                service<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// -2：完全不等待（可用于嵌入式）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// -1：无限睡眠轮询（用于不想用端口，但主线程又不能退出的场景）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                awaitThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stopAwait<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// continue and check the flag</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                awaitThread <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 启动ServerSocket，监听本地端口（默认8005），用于接收 SHUTDOWN 命令</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            awaitSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            awaitThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 循环</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stopAwait<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ServerSocket serverSocket <span class="token operator">=</span> awaitSocket<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>serverSocket <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>                StringBuilder command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    InputStream stream<span class="token punctuation">;</span>                    <span class="token keyword">long</span> acceptStartTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 阻塞，等待连接建立（当返回时表示已获取到客户端的连接）</span>                    socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    socket<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Ten seconds</span>                    stream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 安全防御：预设最大读取长度，防止 DOS 攻击</span>                    <span class="token keyword">int</span> expected <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>expected <span class="token operator">&lt;</span> shutdown<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        expected <span class="token operator">+=</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 读取字符，直到遇到控制字符/EOF</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>expected <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> ch <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token number">127</span><span class="token punctuation">)</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        command<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                        expected<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 接受完一次请求就关闭客户端的连接</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 判断是否是合法的 SHUTDOWN 命令</span>                <span class="token keyword">boolean</span> match <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>shutdown<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 跳出循环，结束main</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 清理资源</span>            ServerSocket serverSocket <span class="token operator">=</span> awaitSocket<span class="token punctuation">;</span>            awaitThread <span class="token operator">=</span> null<span class="token punctuation">;</span>            awaitSocket <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>serverSocket <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Ignore</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>​<code>Service</code> 是 Tomcat 中的一个核心组件，其默认实现类为 <code>StandardService</code>，表示一个具体的服务实例。它与最顶层的容器 <code>Engine</code> 是一对一的</p><p>​<strong>一个 <code>Service</code> 通常包含多个 <code>Connector</code>，每个 <code>Connector</code> 监听一个本地端口，支持特定协议（如 HTTP、AJP），接收客户端请求。请求经过 <code>Mapper</code> 映射到对应的 <code>Host</code>、<code>Context</code>、<code>Wrapper</code>，最终交由目标 <code>Servlet</code> 处理</strong></p><h3 id="核心生命周期方法"><a href="#核心生命周期方法" class="headerlink" title="核心生命周期方法"></a>核心生命周期方法</h3><ul><li>initInternal()<ul><li>初始化绑定的 <code>Engine</code> 容器</li><li>等待 <code>Engine</code> 及其子容器完成初始化后，注册相关 MBean（用于 JMX 监控）</li><li>初始化所有 <code>Connector</code>（<strong>主要是是创建并绑定 <code>ServerSocketChannel</code> 到指定端口</strong>）</li></ul></li><li>startInternal()<ul><li>启动关联的 <code>Engine</code></li><li>启动 <code>MapperListener</code>（用于监听容器结构变化并更新路由）</li><li>启动所有 <code>Connector</code>（<strong>主要是启动Acceptor和Poller线程，开始监听端口并接受请求</strong>）</li></ul></li></ul><h3 id="核心源码-1"><a href="#核心源码-1" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardService</span> <span class="token keyword">extends</span> <span class="token class-name">LifecycleMBeanBase</span> <span class="token keyword">implements</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当前Service名名</span>    <span class="token keyword">private</span> String name <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关联的Server</span>    <span class="token keyword">private</span> Server server <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前 Service 管理的所有 Connector（支持 HTTP、AJP 等协议）</span>    <span class="token keyword">protected</span> Connector connectors<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object connectorsLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前 Service 下配置的所有线程池 Executor（一般为空，由 Connector 自带）</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Executor<span class="token operator">></span> executors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前 Service 使用的 Engine（容器的顶层容器，代表整个虚拟主机群）</span>    <span class="token keyword">private</span> Engine engine <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 我把它叫请求路由器，用于将请求映射到对应的 Wrapper（最终的 Servlet）。     * 由 Connector 配置协议解析后交给 Mapper 做 URI 到容器层级的映射。     */</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> Mapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Mapper 的生命周期监听器。主要注册 MBean，不参与请求处理。</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> MapperListener mapperListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化容器结构</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>engine <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            engine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Service下的Executor节点，默认没有</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Executor executor <span class="token operator">:</span> <span class="token function">findExecutors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token keyword">instanceof</span> <span class="token class-name">JmxEnabled</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>JmxEnabled<span class="token punctuation">)</span> executor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDomain</span><span class="token punctuation">(</span><span class="token function">getDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            executor<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没做啥有用的事，仅仅注册个MBean</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 没做啥有用的事，仅仅注册个MBean</span>        mapperListener<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Initialize our defined Connectors</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>connectorsLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Connector connector <span class="token operator">:</span> connectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 构建ProtocolHandler和Endpoint，绑定服务器端口</span>                    connector<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LifecycleException</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        <span class="token function">setState</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动容器 Engine，进而递归启动 Host、Context、Wrapper</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>engine <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>                engine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 启动所有线程池 Executor（默认为空）</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>executors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Executor executor <span class="token operator">:</span> executors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                executor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        mapperListener<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>connectorsLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Connector connector <span class="token operator">:</span> connectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>connector<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> LifecycleState<span class="token punctuation">.</span>FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 启动底层 ProtocolHandler 和 Acceptor 线程</span>                    connector<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h3><p>​用来处理Socket的抽象，主要关注内部的ProtocolHandler和Adapter</p><h4 id="ProtocolHandler"><a href="#ProtocolHandler" class="headerlink" title="ProtocolHandler"></a>ProtocolHandler</h4><p>​用来处理具体协议，默认处理http1.1协议使用的是Http11NioProtocol这个类，内部通过NioEndpoint来真正操作Soeket，封装了Socket的相关操作Mapper</p><h5 id="NioEndpoint"><a href="#NioEndpoint" class="headerlink" title="NioEndpoint"></a>NioEndpoint</h5><h6 id="Acceptor（连接处理器）"><a href="#Acceptor（连接处理器）" class="headerlink" title="Acceptor（连接处理器）"></a>Acceptor（连接处理器）</h6><p>​一个处理连接的专用线程（默认线程名为 <code>http-nio-8080-Acceptor</code>），负责监听客户端连接，职责类似 Netty 中的 <code>ServerBootstrapAcceptor</code>。其核心流程如下：</p><ul><li><strong>阻塞监听客户端连接请求</strong>（调用 <code>ServerSocketChannel.accept()</code>）</li><li>建立连接后，封装为 <code>SocketChannel</code>，并设置相应的 socket 参数（如非阻塞、超时等）</li><li><strong>构造 <code>PollerEvent</code> 对象，设为对 <code>OP_READ</code> 事件感兴趣</strong></li><li><strong>将事件投递至 <code>Poller</code> 线程，由其负责后续的事件注册和处理</strong></li></ul><blockquote><p>补充说明：Acceptor 只负责连接建立，不处理任何 I&#x2F;O 数据交互，也不触发SocketChannel向Selector注册感兴趣的事件</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Acceptor线程核心源码，只保留了一些核心逻辑</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 主循环：阻塞接收客户端连接请求</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 连接限制计数（默认10000）</span>            <span class="token function">countUpOrAwaitConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SocketChannel socket <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 阻塞等待客户端连接（accept）</span>            socket <span class="token operator">=</span> serverSock<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>running <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>paused<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 初始化客户端连接并注册到 Poller</span>                <span class="token comment" spellcheck="true">// 若失败则关闭 socket 并增加可用的LimitLatch</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">setSocketOptions</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">closeSocket</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">closeSocket</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">setSocketOptions</span><span class="token punctuation">(</span>SocketChannel socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置客户端 socket 为非阻塞模式</span>        socket<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Socket sock <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置Socket参数</span>        socketProperties<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从缓存中获取或创建 NioChannel（用于封装 SocketChannel + Buffer）</span>        NioChannel channel <span class="token operator">=</span> nioChannels<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SocketBufferHandler bufhandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SocketBufferHandler</span><span class="token punctuation">(</span>                    socketProperties<span class="token punctuation">.</span><span class="token function">getAppReadBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    socketProperties<span class="token punctuation">.</span><span class="token function">getAppWriteBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    socketProperties<span class="token punctuation">.</span><span class="token function">getDirectBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSSLEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureNioChannel</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> bufhandler<span class="token punctuation">,</span> selectorPool<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioChannel</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> bufhandler<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 有缓存，就重置</span>            channel<span class="token punctuation">.</span><span class="token function">setIOChannel</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 注册到 Poller，由其负责后续事件驱动处理</span>        <span class="token function">getPoller0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">final</span> NioChannel socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 绑定所属 poller</span>    socket<span class="token punctuation">.</span><span class="token function">setPoller</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 包装为 NioSocketWrapper，承载 socket 的 I/O 状态管理</span>    NioSocketWrapper ka <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioSocketWrapper</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> NioEndpoint<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">setSocketWrapper</span><span class="token punctuation">(</span>ka<span class="token punctuation">)</span><span class="token punctuation">;</span>    ka<span class="token punctuation">.</span><span class="token function">setPoller</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// socket参数设置（超时等）</span>    ka<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token function">getSocketProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSoTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ka<span class="token punctuation">.</span><span class="token function">setWriteTimeout</span><span class="token punctuation">(</span><span class="token function">getSocketProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSoTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ka<span class="token punctuation">.</span><span class="token function">setKeepAliveLeft</span><span class="token punctuation">(</span>NioEndpoint<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMaxKeepAliveRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ka<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token function">getConnectionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ka<span class="token punctuation">.</span><span class="token function">setWriteTimeout</span><span class="token punctuation">(</span><span class="token function">getConnectionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PollerEvent r <span class="token operator">=</span> eventCache<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置其能监听的可读事件（当SocketChannel可读时触发）</span>    ka<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PollerEvent</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> ka<span class="token punctuation">,</span> OP_REGISTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> ka<span class="token punctuation">,</span> OP_REGISTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 投递到 Poller 的事件队列，等待 selector 执行注册</span>    <span class="token function">addEvent</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Poller（事件轮询器）"><a href="#Poller（事件轮询器）" class="headerlink" title="Poller（事件轮询器）"></a>Poller（事件轮询器）</h6><p>​<code>Poller</code> 是 NIO 模型中负责事件监听的线程，线程名一般为 <code>http-nio-8080-ClientPoller</code>。它持续轮询 <code>Selector</code>，将感兴趣的 IO 事件分发出去，核心流程如下：</p><ul><li><strong>接收来自 <code>Acceptor</code> 的 SocketChannel，将其注册到 Selector 中，关注 OP_READ 等事件</strong></li><li><strong>循环调用 <code>Selector.select()</code> 等待事件就绪</strong></li><li><strong>对于就绪事件，将对应连接封装为 <code>SocketProcessor</code>，提交给 Worker 线程池处理（负责请求解析与响应）</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Poller关键部分源码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poller</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Selector selector<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// PollerEvent事件队列</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> SynchronizedQueue<span class="token operator">&lt;</span>PollerEvent<span class="token operator">></span> events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> AtomicLong wakeupCounter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Poller</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加 PollerEvent 到事件队列，并根据 wakeupCounter 唤醒 Selector，     * 以确保 selector 能及时处理注册/取消等变更     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addEvent</span><span class="token punctuation">(</span>PollerEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        events<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wakeupCounter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            selector<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 循环处理事件监听</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> hasEvents <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>close<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 处理事件队列中的注册/取消请求</span>                hasEvents <span class="token operator">=</span> <span class="token function">events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>wakeupCounter<span class="token punctuation">.</span><span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// wakeupCounter值大于0，代表Acceptor向事件队列里push了新对象，</span>                    <span class="token comment" spellcheck="true">// 说明有新的连接，则立即执行非阻塞 select</span>                    keyCount <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 否则阻塞等待一定时间（默认1秒）以监听 I/O 事件</span>                    keyCount <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>selectorTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 重置</span>                wakeupCounter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果没有事件触发，检查是否还有待处理的注册事件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                hasEvents <span class="token operator">=</span> <span class="token punctuation">(</span>hasEvents <span class="token operator">|</span> <span class="token function">events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 遍历触发的事件（如 OP_READ）</span>            Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> iterator <span class="token operator">=</span> keyCount <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SelectionKey sk <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                NioSocketWrapper socketWrapper <span class="token operator">=</span> <span class="token punctuation">(</span>NioSocketWrapper<span class="token punctuation">)</span> sk<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>socketWrapper <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/**                     * 将就绪事件交由 Worker 线程处理（例如封装为 SocketProcessor 执行 OP_READ）                     * 实际业务处理在 Processor 中完成                     */</span>                    <span class="token function">processKey</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> socketWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 扫描并关闭超时连接</span>            <span class="token function">timeout</span><span class="token punctuation">(</span>keyCount<span class="token punctuation">,</span> hasEvents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">getStopLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="init"><a href="#init" class="headerlink" title="init()"></a>init()</h6><p>初始化阶段会触发的方法，调用路径：<strong>StandardService#init -&gt; Connector#init -&gt; ProtocolHandler#init -&gt; AbstractEndpoint#init -&gt; NioEndpoint#bind</strong>，核心作用如下</p><ul><li>创建 <code>ServerSocketChannel</code>，并绑定至指定端口（默认 8080）</li><li>将 <code>ServerSocketChannel</code> 配置为 <strong>阻塞模式</strong>（<code>accept()</code> 会阻塞直到有连接）</li><li>初始化 Selector 池，管理 I&#x2F;O 多路复用</li><li>启动 <strong>BlockPoller  后台线程</strong>，异步检测空闲连接、关闭已超时 socket 等后台任务</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 若未启用继承的 channel（默认如此），则创建新的 ServerSocketChannel</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getUseInheritedChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        serverSock <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socketProperties<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>serverSock<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InetSocketAddress addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token operator">?</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSock<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span><span class="token function">getAcceptCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Channel ic <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">inheritedChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ic <span class="token keyword">instanceof</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            serverSock <span class="token operator">=</span> <span class="token punctuation">(</span>ServerSocketChannel<span class="token punctuation">)</span> ic<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>serverSock <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"endpoint.init.bind.inherited"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 配置为阻塞模式，accept时期阻塞（重要）</span>    serverSock<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 合理化接收线程数（默认为 1）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>acceptorThreadCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        acceptorThreadCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 合理化Poller线程数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pollerThreadCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pollerThreadCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化关闭控制器，用于 await Poller 线程退出</span>    <span class="token function">setStopLatch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>pollerThreadCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initialiseSsl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化 Selector 池，启动BlockPoller线程</span>    selectorPool<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="start"><a href="#start" class="headerlink" title="start()"></a>start()</h6><p>启动阶段触发的核心方法，调用路径：<strong>StandardService#start -&gt; Connector#start -&gt; ProtocolHandler#start -&gt; AbstractEndpoint#start</strong>，核心步骤如下</p><ul><li>用栈的数据结构初始化Processor、Event、Nio缓存池</li><li><strong>初始化 Worker 线程池（事件处理线程池）</strong></li><li>初始化LimitLatch，用来限制连接个数</li><li><strong>创建并启动Poller线程（Poller是事件轮询器，SocketChannel会将READ事件注册，并让其轮询）</strong></li><li><strong>创建并启动Acceptor线程（连接接收器），专用来处理连接</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>running<span class="token punctuation">)</span> <span class="token punctuation">{</span>        running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        paused <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// =========== 初始化各类缓存栈（预分配池），提升对象复用效率，减少 GC 压力 ================</span>        <span class="token comment" spellcheck="true">// 请求处理器缓存池</span>        processorCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedStack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>SynchronizedStack<span class="token punctuation">.</span>DEFAULT_SIZE<span class="token punctuation">,</span> socketProperties<span class="token punctuation">.</span><span class="token function">getProcessorCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 事件对象缓存池</span>        eventCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedStack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>SynchronizedStack<span class="token punctuation">.</span>DEFAULT_SIZE<span class="token punctuation">,</span> socketProperties<span class="token punctuation">.</span><span class="token function">getEventCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// NIO Channel 缓存池</span>        nioChannels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedStack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>SynchronizedStack<span class="token punctuation">.</span>DEFAULT_SIZE<span class="token punctuation">,</span> socketProperties<span class="token punctuation">.</span><span class="token function">getBufferPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 初始化工作线程池（Worker Thread Pool）         * - 若 server.xml里的Connector 节点未指定 executor，则使用默认实现。         * - 实际线程为 daemon，线程名格式：http-nio-端口号-exec-索引         * - 线程池大小由 AbstractEndpoint 的 minSpareThreads 和 maxThreads 控制         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">createExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 初始化连接限制器（内部用 Semaphore 控制最大连接数）</span>        <span class="token function">initializeConnectionLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动 Poller 线程（其数量可通过 server.xml 中 Connector 属性 `pollerThreadCount`配置）</span>        pollers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Poller</span><span class="token punctuation">[</span><span class="token function">getPollerThreadCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pollers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pollers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Poller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread pollerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>pollers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-ClientPoller-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            pollerThread<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>threadPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>            pollerThread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 也是daemon线程</span>            pollerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 启动 Acceptor 线程</span>        <span class="token function">startAcceptorThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MapperListener"><a href="#MapperListener" class="headerlink" title="MapperListener"></a>MapperListener</h3><p>​这个组件理解其作用就行，源码不值得深入分析，价值不大。<strong>它是一个用于监听容器结构变化、并同步更新到<code>Mapper</code> 组件中映射关系的辅助组件</strong>。其核心作用如下：</p><ul><li><strong>启动时注册</strong><ul><li>在 <code>startInternal()</code> 中：<ul><li>将自身注册为 <code>Engine</code>、<code>Host</code>、<code>Context</code>、<code>Wrapper</code> 容器的 <code>ContainerListener</code></li><li>遍历并将当前 <code>Engine</code> 及其所有子容器的路由信息（如 host name、context path、wrapper mapping 等）注册进 <code>Mapper</code></li></ul></li></ul></li><li><strong>监听容器事件</strong><ul><li>实现 <code>containerEvent()</code> 方法，监听容器结构变化事件（如 Host 增加 alias、Context 增加&#x2F;移除 Wrapper 等），<strong>当结构变更时，自动将变化同步更新到 <code>Mapper</code>，保证路由信息的时效性</strong></li></ul></li></ul><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h3><p>​同上面的MapperListener，理解作用即可，源码深入分析的价值不大。我把它叫做路由器，其<strong>负责将 HTTP 请求路径快速匹配到对应的 <code>Servlet</code>。其本身不参与请求处理，仅提供路径与容器结构之间的高性能映射机制。</strong></p><p>​内部通过 <code>MapperListener</code> 监听容器层级（Engine → Host → Context → Wrapper）的结构变更，动态构建和维护内部的映射模型。其<strong>内部将Container抽象为轻量级MapElement结构体并按层级关系嵌套组织，构建出一棵用于快速匹配的树状结构</strong>。当请求到来时，根据url从左至右快速的查找到对应唯一的Host -&gt; Context -&gt; Wrapper，让它们来处理对应的请求。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://img.shanzhao.site/file/1748695204947_tomcat-connector-handle.png" alt="tomcat-connector-handle.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Acceptor </tag>
            
            <tag> Poller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-整体架构和Lifecycle</title>
      <link href="/2021-08-19/tomcat-zheng-ti-jia-gou-he-lifecycle/"/>
      <url>/2021-08-19/tomcat-zheng-ti-jia-gou-he-lifecycle/</url>
      
        <content type="html"><![CDATA[<hr><p>​基于Tomcat-8.5.x版本，简单分析了整体的架构和核心组件。并详细分析和总结了Lifecycle机制</p><span id="more"></span><h1 id="Tomcat-整体架构和Lifecycle"><a href="#Tomcat-整体架构和Lifecycle" class="headerlink" title="Tomcat-整体架构和Lifecycle"></a>Tomcat-整体架构和Lifecycle</h1><h2 id="核心组件和架构"><a href="#核心组件和架构" class="headerlink" title="核心组件和架构"></a>核心组件和架构</h2><p>Tomcat 的架构可以抽象为一棵树，核心组件结构如下：</p><ul><li><strong>根节点是 Server</strong>，表示整个 Tomcat 实例（即一个 JVM 进程）</li><li><strong>Server 下包含一个或多个 Service</strong>，代表一组 Web 服务</li><li>每个 <code>Service</code> 包含：<ul><li><strong>一个或多个 Connector</strong>，负责监听不同协议&#x2F;端口的请求（如 HTTP、HTTPS）</li><li><strong>唯一的一个 Engine，与Service一对一的关系</strong>，用于处理由 Connector 接收到的请求</li></ul></li><li><strong>Engine 下包含多个 Host</strong>，每个 <code>Host</code> 对应一个虚拟主机（通过域名区分）</li><li><strong>每个 Host管理多个 Context</strong>，每个 <code>Context</code> 对应一个 Web 应用（即一个 war）</li><li><strong>每个 Context 下包含多个 Wrapper</strong>，每个 <code>Wrapper</code> 对应一个具体的 Servlet</li></ul><p><img src="https://img.shanzhao.site/file/1748326195967_tomcat-architecture.png" alt="tomcat-architecture.png"></p><h2 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h2><p>​<code>Lifecycle</code> 是 Tomcat 中最核心的接口之一。所有关键组件都实现了该接口，以便<strong>在生命周期事件（如init、start、stop等）到来时执行自身的职责，并将事件级联传递给子组件</strong>。因此，深入理解 <code>Lifecycle</code> 的作用和机制，是阅读和掌握 Tomcat 源码的基础。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ======================== 生命周期事件常量 ========================</span>    String BEFORE_INIT_EVENT <span class="token operator">=</span> <span class="token string">"before_init"</span><span class="token punctuation">;</span>    String AFTER_INIT_EVENT <span class="token operator">=</span> <span class="token string">"after_init"</span><span class="token punctuation">;</span>    String BEFORE_START_EVENT <span class="token operator">=</span> <span class="token string">"before_start"</span><span class="token punctuation">;</span>    String START_EVENT <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">;</span>    String AFTER_START_EVENT <span class="token operator">=</span> <span class="token string">"after_start"</span><span class="token punctuation">;</span>    String BEFORE_STOP_EVENT <span class="token operator">=</span> <span class="token string">"before_stop"</span><span class="token punctuation">;</span>    String STOP_EVENT <span class="token operator">=</span> <span class="token string">"stop"</span><span class="token punctuation">;</span>    String AFTER_STOP_EVENT <span class="token operator">=</span> <span class="token string">"after_stop"</span><span class="token punctuation">;</span>    String BEFORE_DESTROY_EVENT <span class="token operator">=</span> <span class="token string">"before_destroy"</span><span class="token punctuation">;</span>    String AFTER_DESTROY_EVENT <span class="token operator">=</span> <span class="token string">"after_destroy"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 周期性事件（如后台定时任务触发） */</span>    String PERIODIC_EVENT <span class="token operator">=</span> <span class="token string">"periodic"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 配置启动事件（内部扩展使用） */</span>    String CONFIGURE_START_EVENT <span class="token operator">=</span> <span class="token string">"configure_start"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 配置停止事件（内部扩展使用） */</span>    String CONFIGURE_STOP_EVENT <span class="token operator">=</span> <span class="token string">"configure_stop"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ======================== 生命周期监听器相关方法 ========================</span>    <span class="token keyword">void</span> <span class="token function">addLifecycleListener</span><span class="token punctuation">(</span>LifecycleListener listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    LifecycleListener<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findLifecycleListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">removeLifecycleListener</span><span class="token punctuation">(</span>LifecycleListener listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ======================== 生命周期控制方法 ========================</span>    <span class="token comment" spellcheck="true">/**     * 初始化组件。组件只能初始化一次，且必须在启动前完成。     */</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 启动组件。如果未初始化，会隐式调用 init()     */</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 停止组件。可在调用 start() 后再次调用以恢复运行     */</span>    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 销毁组件，释放资源。此操作不可逆。     */</span>    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException<span class="token punctuation">;</span>    LifecycleState <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getStateName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 标记接口：表示该组件只能使用一次（单次使用后即不可重启）     */</span>    <span class="token keyword">interface</span> <span class="token class-name">SingleUse</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LifecycleState"><a href="#LifecycleState" class="headerlink" title="LifecycleState"></a>LifecycleState</h3><p>​组件的生命周期状态枚举。每个状态标记了当前组件是否处于“可用”状态（available），以及对应的生命周期事件名（lifecycleEvent）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> LifecycleState <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始状态，尚未进行任何初始化操作</span>    <span class="token function">NEW</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ================= 初始化阶段 =================</span>    <span class="token comment" spellcheck="true">// 初始化中，调用 init() 时进入此状态，发布 before_init 事件</span>    <span class="token function">INITIALIZING</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>BEFORE_INIT_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 初始化完成，进入 INITIALIZED 状态，发布 after_init 事件</span>    <span class="token function">INITIALIZED</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>AFTER_INIT_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ================= 启动阶段 =================</span>    <span class="token comment" spellcheck="true">// 启动准备中，准备启动前进入该状态，发布 before_start 事件</span>    <span class="token function">STARTING_PREP</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>BEFORE_START_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 正在启动，执行 startInternal() 时进入此状态，发布 start 事件</span>    <span class="token function">STARTING</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>START_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 启动完成，组件已处于工作状态，发布 after_start 事件</span>    <span class="token function">STARTED</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>AFTER_START_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ================= 停止阶段 =================</span>    <span class="token comment" spellcheck="true">// 停止准备阶段，准备停止时进入该状态，发布 before_stop 事件</span>    <span class="token function">STOPPING_PREP</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>BEFORE_STOP_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 正在停止，组件关闭过程中进入该状态，发布 stop 事件</span>    <span class="token function">STOPPING</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>STOP_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 停止完成，组件已不可用，发布 after_stop 事件</span>    <span class="token function">STOPPED</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>AFTER_STOP_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ================= 销毁阶段 =================</span>    <span class="token comment" spellcheck="true">// 销毁准备阶段，发布 before_destroy 事件</span>    <span class="token function">DESTROYING</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>BEFORE_DESTROY_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 销毁完成，组件进入不可恢复终态，发布 after_destroy 事件</span>    <span class="token function">DESTROYED</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>AFTER_DESTROY_EVENT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ================= 异常状态 =================</span>    <span class="token comment" spellcheck="true">// 异常失败状态，组件启动或运行中发生未处理异常，进入失败态。无生命周期事件发布</span>    <span class="token function">FAILED</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前状态是否为组件的“可用”状态，即是否可对外提供服务（如 STARTING、STARTED 等）     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> available<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String lifecycleEvent<span class="token punctuation">;</span>    <span class="token function">LifecycleState</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> available<span class="token punctuation">,</span> String lifecycleEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>available <span class="token operator">=</span> available<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleEvent <span class="token operator">=</span> lifecycleEvent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> available<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getLifecycleEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lifecycleEvent<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LifecycleBase"><a href="#LifecycleBase" class="headerlink" title="LifecycleBase"></a>LifecycleBase</h3><p>​<code>LifecycleBase</code> 是 <code>Lifecycle</code> 接口的基础实现类，提供了生命周期控制方法（如 <code>init()</code>、<code>start()</code>、<code>stop()</code>、<code>destroy()</code>）的通用模板逻辑。Tomcat 中绝大多数实现了 <code>Lifecycle</code> 接口的核心组件，都会继承该类，从而复用其统一的状态管理和事件分发机制。</p><p>​核心start方法分析如下，（其余的init，stop等方法差不太多，就不做详细的分析了）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LifecycleBase</span> <span class="token keyword">implements</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 启动组件。线程安全，具备幂等性。     *      * 生命周期状态迁移如下：     * NEW -> INITIALIZED -> STARTING_PREP -> STARTING -> STARTED     * 如果启动失败，将进入 FAILED 状态。     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING_PREP<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">||</span> LifecycleState<span class="token punctuation">.</span>STARTING<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">||</span>                LifecycleState<span class="token punctuation">.</span>STARTED<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 正在启动中或已启动，无视直接返回</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ============= 前置状态判断 =================</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>NEW<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果还是初始化状态，就先初始化</span>            <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>FAILED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若之前启动失败，先尝试停止，清理资源后重新启动</span>            <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>INITIALIZED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STOPPED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 其余非法前置状态，直接异常</span>            <span class="token function">invalidTransition</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>BEFORE_START_EVENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ============== 到这表示前置状态处理完毕，可以真正start了 ===================</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置状态为 STARTING_PREP，并发布 before_start 事件</span>            <span class="token function">setStateInternal</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING_PREP<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 调用子类实现的实际启动逻辑（模板方法模式）</span>            <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// ============ 走到这，正常情况state就应该为STARTING了 =================</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>FAILED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 启动失败，执行stop</span>                <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTING<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 非STARTING（正常不应该出现，避免子类实现不规范的一种fallback），直接抛异常</span>                <span class="token function">invalidTransition</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>AFTER_START_EVENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 正常会走到这，状态自动置为STARTED。并发布 after_start 事件</span>                <span class="token function">setStateInternal</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>STARTED<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">handleSubClassException</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"lifecycleBase.startFail"</span><span class="token punctuation">,</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://img.shanzhao.site/file/1748332081804_tomcat-lifecycle.png" alt="tomcat-lifecycle.png"></p><p align="center" style="color: #888;">Lifecycle状态转换图</p><p>状态机核心要点：</p><ul><li><strong>启动组件必定要先init，也只会调用一次init</strong></li><li><strong>start和stop状态可以循环相互转化（即STOPPED状态不是终态）</strong></li><li>NEW可直接到STOPPED状态（很少这么用）</li><li><strong>DESTROYED才是终态，不可逆转</strong>（FAILED都不是终态，它还可以stop() -&gt; startI()，虽然不一定成功）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Bean的Scope</title>
      <link href="/2021-06-28/spring-bean-de-scope/"/>
      <url>/2021-06-28/spring-bean-de-scope/</url>
      
        <content type="html"><![CDATA[<hr><p>​分析了Spring Scope的作用和实现类。并<strong>从源码分析了其Scoped Proxy作用和实现，并在最后用arthas进行了简单的验证</strong>。重点应该关注基于代理的其他作用域Bean注册的<strong>两个BeanDefinition异同点，以及为何会注册两个BeanDefinition</strong></p><span id="more"></span><h1 id="Spring-Bean的Scope"><a href="#Spring-Bean的Scope" class="headerlink" title="Spring-Bean的Scope"></a>Spring-Bean的Scope</h1><p>​在 Spring 中，所有组件本质上都是 Bean，虽然它们的创建方式一致，但生命周期和缓存策略并不统一。为了支持不同的使用场景，Spring 设计了 Scope（作用域）机制，来决定 Bean 实例在容器中的缓存行为。</p><h2 id="常见的-Scope"><a href="#常见的-Scope" class="headerlink" title="常见的 Scope"></a>常见的 Scope</h2><ul><li><p>通用环境</p><ul><li><blockquote><ol><li><strong>singleton</strong>：默认作用域。单例bean，由Spring进行全局缓存</li><li><strong>prototype</strong>：很多博客翻译为多例，其实容易误导，因为session和request中的bean也算多例。翻译为原型bean更好，因为它是基于 <strong>Bean 定义模板进行实例化 的原型模式，每次获取Bean时都会创建一个新的实例（即取即创建）</strong>。因此，它<strong>不能被缓存，也不能被循环依赖</strong></li></ol></blockquote></li></ul></li><li><p>web环境</p><ul><li><blockquote><p><strong>session</strong>：web环境下的缓存在Session里的bean</p><ol><li><strong>request</strong>：web环境下的缓存在Request里的bean。意味着每次新的Request，都需要创建新的bean</li><li><strong>application</strong>：web环境下缓存在ServletContext里的bean。是存在于另一个容器里单例bean</li></ol></blockquote></li></ul></li><li><p>cloud环境</p><ul><li><blockquote><p> <strong>refresh</strong>：spring colud环境下的一种作用域，在<strong>这个作用域里的bean意味着每次环境刷新后（RefreshEvent事件触发），都需要创建新的bean，并destory以前bean</strong>。例如cloud环境下如果配置中心支持动态更改kv，每次修改kv后就出触发RefreshEvent事件</p></blockquote></li></ul></li></ul><h2 id="Scope实现"><a href="#Scope实现" class="headerlink" title="Scope实现"></a>Scope实现</h2><p>​在 <code>AbstractBeanFactory#doGetBean</code> 方法中，<strong>所有非默认作用域（非 singleton&#x2F;prototype）的 Bean 获取，均通过 <code>Scope</code> 接口实现支持</strong>。每种运行环境对应一个 <code>Scope</code> 实例，由它统一负责该环境下 Bean 的 <strong>创建、缓存与销毁</strong>。Spring提供的常见Scope实现如下</p><ul><li><p>SessionScope：session域的实现</p></li><li><p>RequestScope：request域的实现</p></li><li><p>ServletContextScope：application域的实现</p></li><li><p>RefreshScope：refresh域的实现</p></li><li><p>SimpleThreadScope：用ThreadLocal实现的Bean的缓存域。即线程可见Bean</p></li><li><p>SimpleTransactionScope：事务作用域，将 Bean 缓存绑定到当前事务，内部存储在 <code>TransactionSynchronizationManager.resources</code> 中</p></li></ul><h3 id="session域"><a href="#session域" class="headerlink" title="session域"></a>session域</h3><p>主要逻辑为<strong>获取当前request的HttpSession，从内部中获取bean，没有则再实例化bean并缓存到当前Session里</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionScope</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRequestAttributesScope</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> objectFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object mutex <span class="token operator">=</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSessionMutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 加锁，避免多线程同时创建bean</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> objectFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 父类中的AbstractRequestAttributesScope方法</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> objectFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RequestAttributes attributes <span class="token operator">=</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对于session域，是通过HttpSession#getAttribute方法操作的</span>        Object scopedObject <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scopedObject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建bean</span>            scopedObject <span class="token operator">=</span> objectFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            attributes<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> scopedObject<span class="token punctuation">,</span> <span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object retrievedObject <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>retrievedObject <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                scopedObject <span class="token operator">=</span> retrievedObject<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> scopedObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Scope注解"><a href="#Scope注解" class="headerlink" title="@Scope注解"></a>@Scope注解</h2><p>用于定义 Spring 容器中 Bean 的作用域（Scope）。该注解通常配合 <code>@Component</code> 或 <code>@Bean</code> 使用，控制 Bean 在容器中的生命周期及缓存策略</p><ul><li>value：指定当前 Bean 的作用域名称，可以使用我们自定义的scope。Spring解析时不会校验</li><li>scopeName：同value</li><li><strong>proxyMode</strong>：指定当前 Bean 是否需要通过代理方式注入。枚举类型为 <code>ScopedProxyMode</code>，常用值包括：<ul><li><code>DEFAULT</code>（默认值）：等价于 <code>NO</code></li><li><code>NO</code>：<strong>不使用代理。意味着当前Bean不能被其他singleton bean给依赖注入</strong></li><li><code>INTERFACES</code>：JDK 动态代理，即接口代理</li><li><code>TARGET_CLASS</code>：CGLIB 代理，即继承代理</li></ul></li></ul><h2 id="Scope代理"><a href="#Scope代理" class="headerlink" title="Scope代理"></a>Scope代理</h2><p>​还有个重要的问题，Spring 中<strong>非 singleton 作用域的 Bean 无法直接注入到 singleton Bean 中</strong>，原因在于<strong>singleton Bean一旦被创建，其内部的依赖也随之固定。而诸如 <code>request</code>、<code>session</code> 等作用域下的 Bean 生命周期较短，其实例在运行时可能会动态变化。</strong></p><p>​所以<strong>为了解决这种作用域不一致带来的注入问题</strong>，Spring 提供了 <strong>作用域代理机制（Scoped Proxy）</strong>。核心思想为<strong>将实际的Scope Bean 包装成一个代理对象，注入到 singleton Bean 中；每次通过该代理访问时，都会根据当前上下文（如当前request或session）动态获取真实的目标 Bean</strong>。这样，<strong>从开发者视角来看，这个 Bean 就像是 singleton 一样稳定可用</strong>，但实际底层访问的却是随作用域动态变化的目标实例。</p><h3 id="ScopedProxyUtils"><a href="#ScopedProxyUtils" class="headerlink" title="ScopedProxyUtils"></a>ScopedProxyUtils</h3><p>​是 Spring 在注册特定作用域（如 <code>request</code>、<code>session</code>）BeanDefinition 之前，用于创建作用域代理的工具类。它的核心作用是：<strong>在注册 BeanDefinition 前，将其包装成作用域代理，从而允许非 singleton Bean 被注入到 singleton Bean 中。</strong>其最终会在容器中注册一下两个 Bean</p><ul><li><p><strong>代理 Bean（Scoped Proxy）</strong></p><ul><li>类型为 <code>ScopedProxyFactoryBean</code>，作用域为 <code>singleton</code></li><li><strong>Bean 名为原始 Bean 的名称</strong>（例如 <code>userService</code>）</li><li>负责在运行时根据当前作用域动态获取实际 Bean 实例</li><li><strong>保留原始 Bean 的自动注入相关属性（如 <code>@Primary</code>、限定符），因此它才是被注入到其他 Bean 中的“主 Bean”</strong></li></ul><p>  <strong>目标 Bean（Target Bean）</strong></p><ul><li>Bean 名为 <code>&quot;scopedTarget.&quot; + 原始名称</code>（如 <code>scopedTarget.userService</code>）</li><li>保持原有的作用域定义（如 <code>request</code>、<code>session</code> 等）</li><li><strong>被设置为不可自动注入（<code>autowireCandidate = false</code>）。都注入代理bean</strong></li></ul></li></ul><h4 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ScopedProxyUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代理目标 Bean 的命名前缀</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TARGET_NAME_PREFIX <span class="token operator">=</span> <span class="token string">"scopedTarget."</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TARGET_NAME_PREFIX_LENGTH <span class="token operator">=</span> TARGET_NAME_PREFIX<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建作用域代理：将一个具有非单例作用域的 Bean 包装为一个 ScopedProxyFactoryBean，     * 用于在注入到 singleton Bean 时仍保持作用域语义。     *     * 实现原理：将原始 Bean 注册为一个带前缀的新 Bean，然后为原始 Bean 名称注册一个代理 Bean，     * 每次访问这个代理 Bean 时，都会动态地从容器中获取当前作用域下的真实 Bean。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> BeanDefinitionHolder <span class="token function">createScopedProxy</span><span class="token punctuation">(</span>BeanDefinitionHolder definition<span class="token punctuation">,</span>            BeanDefinitionRegistry registry<span class="token punctuation">,</span> <span class="token keyword">boolean</span> proxyTargetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String originalBeanName <span class="token operator">=</span> definition<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanDefinition targetDefinition <span class="token operator">=</span> definition<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 原bean修改后的目标beanName： scopedTarget. + 原beanName</span>        String targetBeanName <span class="token operator">=</span> <span class="token function">getTargetBeanName</span><span class="token punctuation">(</span>originalBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 ScopedProxyFactoryBean 的定义，用于代理原始 Bean</span>        RootBeanDefinition proxyDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>ScopedProxyFactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">setDecoratedDefinition</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>targetDefinition<span class="token punctuation">,</span> targetBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">setOriginatingBeanDefinition</span><span class="token punctuation">(</span>targetDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span>targetDefinition<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置代理bean中targetBeanName（用来在BeanFactory中原始bean）</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"targetBeanName"</span><span class="token punctuation">,</span> targetBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyTargetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// cglib proxy</span>            targetDefinition<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>AutoProxyUtils<span class="token punctuation">.</span>PRESERVE_TARGET_CLASS_ATTRIBUTE<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// jdk proxy</span>            proxyDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"proxyTargetClass"</span><span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 复制原始 Bean 的自动注入相关属性</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span>targetDefinition<span class="token punctuation">.</span><span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyDefinition<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span>targetDefinition<span class="token punctuation">.</span><span class="token function">isPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetDefinition <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            proxyDefinition<span class="token punctuation">.</span><span class="token function">copyQualifiersFrom</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> targetDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将原始 Bean 设为非primary且不可自动注入（避免与代理冲突，这样Spring注册的这个bean始终是代理bean）</span>        targetDefinition<span class="token punctuation">.</span><span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetDefinition<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册原bean到容器中，此时beanName已被替换</span>        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>targetBeanName<span class="token punctuation">,</span> targetDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回代理 Bean 的定义（仍然使用原始Bean的beanName）</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>proxyDefinition<span class="token punctuation">,</span> originalBeanName<span class="token punctuation">,</span> definition<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ScopedProxyFactoryBean"><a href="#ScopedProxyFactoryBean" class="headerlink" title="ScopedProxyFactoryBean"></a>ScopedProxyFactoryBean</h3><p>​它构建了一个用于作用域代理的单例增强 Bean，这个bean具有如下特点</p><ul><li>**TargetSource 为 <code>SimpleBeanTargetSource</code>**：每次方法调用时，动态从 <code>BeanFactory</code> 获取目标 bean 实例（不做任何缓存）</li><li><strong>代理类实现了目标 bean 的所有接口和类</strong>：对外表现为原始 bean，可被其他 bean 正常依赖和注入（作为主 bean 使用）。</li><li><strong>实现了 <code>AopInfrastructureBean</code> 接口</strong>：标记为基础设施类，避免再次被 AOP、事务、异步等机制增强。</li><li>**仅使用一个拦截器：<code>DelegatingIntroductionInterceptor</code>**：<ul><li>对被“引入”的接口方法（如 <code>ScopedObject#getTargetObject()</code>）进行特殊处理；</li><li>对其他方法则调用 <code>MethodInvocation#proceed()</code>，由原始 bean 执行具体逻辑。</li></ul></li></ul><h4 id="核心源码-1"><a href="#核心源码-1" class="headerlink" title="核心源码"></a>核心源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScopedProxyFactoryBean</span> <span class="token keyword">extends</span> <span class="token class-name">ProxyConfig</span>        <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">,</span> BeanFactoryAware<span class="token punctuation">,</span> AopInfrastructureBean <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span>BeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Not running in a ConfigurableBeanFactory: "</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ConfigurableBeanFactory cbf <span class="token operator">=</span> <span class="token punctuation">(</span>ConfigurableBeanFactory<span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将 BeanFactory 注入目标作用域对象（这样才有能力从BeanFactory中获取目标作用域对象）</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scopedTargetSource<span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        ProxyFactory pf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pf<span class="token punctuation">.</span><span class="token function">copyFrom</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置代理目标为 scopedTargetSource（默认为SimpleBeanTargetSource，其获取目标对象每次都调用BeanFactory#getBean）</span>        <span class="token comment" spellcheck="true">// 且scopedTargetSource的getTargetClass()方法会解析并返回原始bean的class，用于代理增强</span>        pf<span class="token punctuation">.</span><span class="token function">setTargetSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scopedTargetSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetBeanName<span class="token punctuation">,</span> <span class="token string">"Property 'targetBeanName' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot create scoped proxy for bean '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetBeanName <span class="token operator">+</span>                    <span class="token string">"': Target type could not be determined at the time of proxy creation."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// jdk代理判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> beanType<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> Modifier<span class="token punctuation">.</span><span class="token function">isPrivate</span><span class="token punctuation">(</span>beanType<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pf<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getAllInterfacesForClass</span><span class="token punctuation">(</span>beanType<span class="token punctuation">,</span> cbf<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Add an introduction that implements only the methods on ScopedObject.</span>        ScopedObject scopedObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultScopedObject</span><span class="token punctuation">(</span>cbf<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopedTargetSource<span class="token punctuation">.</span><span class="token function">getTargetBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pf<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelegatingIntroductionInterceptor</span><span class="token punctuation">(</span>scopedObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置该bean不会被其他自动代理 代理了</span>        <span class="token comment" spellcheck="true">/*         * 为什么会这么设置？         * 这个bean以及是个代理增强bean了，它所需要增强的地方也是唯一的地方就是找到目标scope里真实的bean，并将方法的调用行为转移到目标作用域的真实的bean中去         *         * 例：session域的bean，该bean被自动注入的就应该是这个代理bean，这个bean存在的目的也只是找到session域         * 里对应的真实bean，然后调用该bean的方法全走session域的真实bean的方法，且由这个真实bean来进行其他自动代理的增强         */</span>        pf<span class="token punctuation">.</span><span class="token function">addInterface</span><span class="token punctuation">(</span>AopInfrastructureBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建好代理对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>proxy <span class="token operator">=</span> pf<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>cbf<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 单例     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="arthas验证"><a href="#arthas验证" class="headerlink" title="arthas验证"></a>arthas验证</h4><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> site<span class="token punctuation">.</span>shanzhao<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@SessionScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionScopeDemo</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="class信息查询"><a href="#class信息查询" class="headerlink" title="class信息查询"></a>class信息查询</h5><p>用sc -d site.shanzhao.config.SessionScopeDemo命令，我这里只展示了增强的class，重点观察到</p><ul><li>父类为site.shanzhao.config.SessionScopeDemo</li><li>相比普通AOP，多增加的接口有：<ul><li>org.springframework.aop.scope.ScopedObject</li><li>org.springframework.aop.framework.AopInfrastructureBean</li></ul></li></ul><pre class="line-numbers language-bash"><code class="language-bash"> class-info        site.shanzhao.config.SessionScopeDemo$<span class="token variable">$EnhancerBySpringCGLIB</span>$<span class="token variable">$9851f0cb</span> code-source       /Users/reef/IdeaProjects/soil/target/classes/ name              site.shanzhao.config.SessionScopeDemo$<span class="token variable">$EnhancerBySpringCGLIB</span>$<span class="token variable">$9851f0cb</span> isInterface       <span class="token boolean">false</span> isAnnotation      <span class="token boolean">false</span> isEnum            <span class="token boolean">false</span> isAnonymousClass  <span class="token boolean">false</span> isArray           <span class="token boolean">false</span> isLocalClass      <span class="token boolean">false</span> isMemberClass     <span class="token boolean">false</span> isPrimitive       <span class="token boolean">false</span> isSynthetic       <span class="token boolean">false</span> simple-name       SessionScopeDemo$<span class="token variable">$EnhancerBySpringCGLIB</span>$<span class="token variable">$9851f0cb</span> modifier          public annotation interfaces        org.springframework.aop.scope.ScopedObject,java.io.Serializable,org.springframework.aop.framework.AopInfrastructureBean,org.springframework.aop.SpringProxy,org.springframework.aop.framework.                   Advised,org.springframework.cglib.proxy.Factory super-class       +-site.shanzhao.config.SessionScopeDemo                     +-java.lang.Object class-loader      +-jdk.internal.loader.ClassLoaders<span class="token variable">$AppClassLoader@311d617d</span>                     +-jdk.internal.loader.ClassLoaders<span class="token variable">$PlatformClassLoader@1b4ae4e0</span> classLoaderHash   311d617d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ognl查询beanName"><a href="#ognl查询beanName" class="headerlink" title="ognl查询beanName"></a>ognl查询beanName</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用ApplicationContext.getBeanNamesForType()方法，可知有两个SessionScopeDemo class的BeanDefinition</span><span class="token punctuation">[</span>arthas@35578<span class="token punctuation">]</span>$ ognl <span class="token string">"@site.shanzhao.util.ApplicationContextUtils@applicationContext.getBeanNamesForType(@site.shanzhao.config.SessionScopeDemo@class)"</span>@String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>    @String<span class="token punctuation">[</span>scopedTarget.sessionScopeDemo<span class="token punctuation">]</span>,    @String<span class="token punctuation">[</span>sessionScopeDemo<span class="token punctuation">]</span>,<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring-容器refresh</title>
      <link href="/2021-06-03/spring-rong-qi-refresh/"/>
      <url>/2021-06-03/spring-rong-qi-refresh/</url>
      
        <content type="html"><![CDATA[<hr><p>​从源码分析了Spring容器的refresh过程，并通过图文的方式记录了整个流程的核心步骤</p><span id="more"></span><h1 id="容器refresh"><a href="#容器refresh" class="headerlink" title="容器refresh"></a>容器refresh</h1><h2 id="核心步骤总结"><a href="#核心步骤总结" class="headerlink" title="核心步骤总结"></a>核心步骤总结</h2><ol><li><strong>准备 BeanFactory</strong>（包括类加载器、SPEL解析器等基础设施）</li><li><strong>执行 BeanDefinitionRegistryPostProcessor</strong>：优先处理配置类等，动态注册更多 BeanDefinition</li><li><strong>执行 BeanFactoryPostProcessor</strong>：可用来修改 BeanDefinition 信息</li><li><strong>注册 BeanPostProcessor</strong>：用于后续 Bean 创建生命周期中的扩展</li><li>初始化 MessageSource：国际化消息解析支持</li><li><strong>初始化事件广播器</strong>（ApplicationEventMulticaster）并注册为 Bean</li><li><strong>调用 onRefresh</strong>()：留给子类扩展（如创建 Web Server）</li><li><strong>注册 ApplicationListener</strong>：用于监听容器事件</li><li><strong>实例化非懒加载的单例 Bean</strong></li><li><strong>完成刷新</strong>：启动 SmartLifecycle Bean，发布 ContextRefreshedEvent</li></ol><p><img src="https://img.shanzhao.site/file/1748002941275_spring-context-refresh.png" alt="spring-context-refresh.png"></p><h2 id="AbstractApplicationContext-refresh-源码分析"><a href="#AbstractApplicationContext-refresh-源码分析" class="headerlink" title="AbstractApplicationContext#refresh-源码分析"></a>AbstractApplicationContext#refresh-源码分析</h2><h3 id="整体的refresh"><a href="#整体的refresh" class="headerlink" title="整体的refresh"></a>整体的refresh</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 准备上下文环境（包括设置启动时间、状态标志位、初始化环境属性等）</span>        <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 创建并刷新 BeanFactory（默认 DefaultListableBeanFactory）</span>        ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 对BeanFactory做各种填充</span>        <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 4. hook方法，供子类在 BeanFactory 初始化后、自定义修改它</span>            <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 5. 调用 BeanFactoryPostProcessor(BeanDefinitionRegistryPostProcessor ></span>            <span class="token comment" spellcheck="true">// BeanFactoryPostProcessor)</span>            <span class="token comment" spellcheck="true">// ConfigurationClassPostProcessor就是这阶段处理的</span>            <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 6. 注册 BeanPostProcessor（并非调用），用于后续Bean实例化的hook</span>            <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 7. 为上下文初始化Message源，国际化处理</span>            <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 8. 初始化事件广播器（默认实现为SimpleApplicationEventMulticaster，专门用来查找对应ApplicationEvent应该使用哪个ApplicationListener（按类型匹配））</span>            <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 9. 留给子类初始化其他bean（spring boot中子类会初始化web服务器）</span>            <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 10. 注册所有实现了 ApplicationListener 的 Bean 到广播器中</span>            <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 11. 初始化剩下Bean（非lazy 且 singleton）</span>            <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 12. SmartLifecycle的Bean可以start了，并且发布ContextRefreshedEvent事件</span>            <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                        <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 异常处理1：销毁已创建的单例 bean，避免资源泄漏</span>            <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 异常处理2：重置 context 状态标志，保证下次调用 refresh 可以重新开始</span>            <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 最终清除 Spring 内部使用的一些缓存（如反射、泛型元信息等）</span>            <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键步骤分析"><a href="#关键步骤分析" class="headerlink" title="关键步骤分析"></a>关键步骤分析</h3><h4 id="prepareBeanFactory"><a href="#prepareBeanFactory" class="headerlink" title="prepareBeanFactory"></a>prepareBeanFactory</h4><p>​目的是对内部 <code>BeanFactory</code> 进行增强配置，注入 ApplicationContext 级别的基础能力，主要包括如下</p><ul><li>设置类加载器、<strong>SpEL 表达式解析器</strong>与资源编辑器</li><li>注册<strong>常见 Aware 接口的处理器</strong>与<strong>特殊依赖的自动解析</strong></li><li>注册内置基础 Bean（如 <strong>Spring Environment、系统属性、系统环境变量</strong>）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置类加载器（用于加载 bean 类、AOP 等）</span>    beanFactory<span class="token punctuation">.</span><span class="token function">setBeanClassLoader</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置beanFactory的表达式语言（SpEL）处理器</span>    beanFactory<span class="token punctuation">.</span><span class="token function">setBeanExpressionResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardBeanExpressionResolver</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置各种PropertyEditor（用于解析 Resource 等）</span>    beanFactory<span class="token punctuation">.</span><span class="token function">addPropertyEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册 ApplicationContextAwareProcessor，处理以下几个 Aware 接口注入</span>    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置一些忽略自动装配的接口,上面的ApplicationContextAwareProcessor就已经搞定了</span>    beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>EnvironmentAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>EmbeddedValueResolverAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>ResourceLoaderAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>ApplicationEventPublisherAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>MessageSourceAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>ApplicationContextAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置几个特殊的依赖注入值（无需在容器中定义，注入时直接解析为指定对象）</span>    beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>BeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ResourceLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ApplicationEventPublisher<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加ApplicationListener的监听器，当单例bean初始化后，且实现了ApplicationListener接口，就将其缓存起来以便使用</span>    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果容器中有 LoadTimeWeaver，注册对应的 Aware 处理器，并设置临时 ClassLoader</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>LOAD_TIME_WEAVER_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoadTimeWeaverAwareProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextTypeMatchClassLoader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Spring Environment Bean 注册（当前环境信息）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>ENVIRONMENT_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>ENVIRONMENT_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 系统属性（System.getProperties()）Bean注册</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>SYSTEM_PROPERTIES_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>SYSTEM_PROPERTIES_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 系统环境变量（System.getenv()）Bean注册</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>SYSTEM_ENVIRONMENT_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>SYSTEM_ENVIRONMENT_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="invokeBeanFactoryPostProcessors"><a href="#invokeBeanFactoryPostProcessors" class="headerlink" title="invokeBeanFactoryPostProcessors"></a>invokeBeanFactoryPostProcessors</h4><blockquote><ol><li><strong>先处理 <code>BeanDefinitionRegistryPostProcessor</code>：</strong><ul><li>手动传入的优先执行</li><li>容器中的按 <code>PriorityOrdered</code> &gt; <code>Ordered</code> &gt; 剩下的</li><li>若执行过程中有动态注册的后处理器，继续迭代</li></ul></li><li><strong>再处理 <code>BeanFactoryPostProcessor</code>：</strong><ul><li>优先级一样， <code>PriorityOrdered</code> &gt; <code>Ordered</code> &gt; 剩下的</li></ul></li><li>最后清除合并后的 <code>BeanDefinition</code> 缓存，确保后处理器修改生效</li></ol></blockquote><p>​<strong><code>ConfigurationClassPostProcessor</code> 就是最早执行的 <code>BeanDefinitionRegistryPostProcessor</code>之一，其负责解析 <code>@Configuration</code> 等注解并动态注册大量 BeanDefinition。因此，我们可以通过自定义 <code>BeanDefinitionRegistryPostProcessor</code> 在它之后介入，统一处理或修改所有后续注册的 BeanDefinition，实现排除、添加或调整</strong>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// PostProcessorRegistrationDelegate类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>        ConfigurableListableBeanFactory beanFactory<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 已经处理过了的BeanDefinitionRegistryPostProcessors集和，避免重复处理bean</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> processedBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// 判断 beanFactory 是否支持注册</span>    <span class="token comment" spellcheck="true">/// BeanDefinition，以优先处理BeanDefinitionRegistryPostProcessor</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanDefinitionRegistry registry <span class="token operator">=</span> <span class="token punctuation">(</span>BeanDefinitionRegistry<span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> regularPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>BeanDefinitionRegistryPostProcessor<span class="token operator">></span> registryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanFactoryPostProcessor postProcessor <span class="token operator">:</span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>postProcessor <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                BeanDefinitionRegistryPostProcessor registryProcessor <span class="token operator">=</span> <span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">)</span> postProcessor<span class="token punctuation">;</span>                registryProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>                registryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registryProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                regularPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>postProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当前阶段要执行的 BeanDefinitionRegistryPostProcessor 处理器列表，处理的优先级：PriorityOrdered ></span>        <span class="token comment" spellcheck="true">// Ordered > 剩下的</span>        List<span class="token operator">&lt;</span>BeanDefinitionRegistryPostProcessor<span class="token operator">></span> currentRegistryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// =================== 第一轮：处理 PriorityOrdered 的 BD 处理器 ===================</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// =================== 第二轮：处理 Ordered 的 BD 处理器 ===================</span>        postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// =================== 最后：处理剩余的无序 BD 处理器（可能动态注册） ===================</span>        <span class="token keyword">boolean</span> reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>reiterate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            reiterate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    currentRegistryProcessors                            <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>            currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// =================== 执行所有已注册 BD 处理器的 postProcessBeanFactory 回调</span>        <span class="token comment" spellcheck="true">// ===================</span>        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>registryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// =================== 执行用户提供的常规 BeanFactoryPostProcessor ===================</span>        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>regularPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactoryPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// =================== 从配置中获取剩余的 BeanFactoryPostProcessor ===================</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分类收集 PriorityOrdered、Ordered、其他的 三类处理器</span>    List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> priorityOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> orderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> nonOrderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// skip - already processed in first phase above</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priorityOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行顺序类似上面的BD处理器</span>    <span class="token comment" spellcheck="true">// PriorityOrdered</span>    <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Ordered</span>    List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> orderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String postProcessorName <span class="token operator">:</span> orderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>postProcessorName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 其他的</span>    List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> nonOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String postProcessorName <span class="token operator">:</span> nonOrderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nonOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>postProcessorName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>nonOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 清理 BeanDefinition 的缓存，防止元信息过期（如占位符已被替换）</span>    beanFactory<span class="token punctuation">.</span><span class="token function">clearMetadataCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="registerBeanPostProcessors"><a href="#registerBeanPostProcessors" class="headerlink" title="registerBeanPostProcessors"></a>registerBeanPostProcessors</h4><p>​<strong>实例化并注册所有 <code>BeanPostProcessor</code>，按 <code>PriorityOrdered</code> &gt; <code>Ordered</code> &gt; 无序 的优先级添加到容器中，确保 Bean 生命周期中的处理器执行顺序符合预期；内部处理器（<code>MergedBeanDefinitionPostProcessor</code>）统一放在末尾，确保其在所有普通处理器之后执行。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// PostProcessorRegistrationDelegate类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>        ConfigurableListableBeanFactory beanFactory<span class="token punctuation">,</span> AbstractApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取所有实现了 BeanPostProcessor 接口的 beanName（不实例化）</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录目标 BeanPostProcessor 总数：现有 + 新注册 + 最终数量</span>    <span class="token keyword">int</span> beanProcessorTargetCount <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanPostProcessorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> postProcessorNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*     *   专门用来检查普通bean是否走完所有的BeanPostProcessor的     *     * 一个普通的bean在实例化时，正常情况下应该走完所有的BeanPostProcessor，     * 但当只注册了部分的BeanPostProcessor(放到IOC容器中)时，     * 此时实例化一个bean可能就导致还未注册的BeanPostProcessor处理不了（看优先级），     * 就会由这个checker来日志提醒（仅打印info日志）     */</span>    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanPostProcessorChecker</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> beanProcessorTargetCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 准备分组存储不同优先级的 BeanPostProcessor</span>    List<span class="token operator">&lt;</span>BeanPostProcessor<span class="token operator">></span> priorityOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>BeanPostProcessor<span class="token operator">></span> internalPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> orderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> nonOrderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分类：根据是否实现 PriorityOrdered / Ordered / 无排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// PriorityOrdered的直接实例化</span>            BeanPostProcessor pp <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            priorityOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token keyword">instanceof</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                internalPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// PriorityOrdered以及实例化了，就可直接 排序 ->  注册</span>    <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> priorityOrderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Ordered，实例化 -> 排序 -> 注册</span>    List<span class="token operator">&lt;</span>BeanPostProcessor<span class="token operator">></span> orderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> orderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanPostProcessor pp <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token keyword">instanceof</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            internalPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> orderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无顺序，实例化 -> 注册</span>    List<span class="token operator">&lt;</span>BeanPostProcessor<span class="token operator">></span> nonOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> nonOrderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanPostProcessor pp <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nonOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token keyword">instanceof</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            internalPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> nonOrderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 四、最后统一注册 MergedBeanDefinitionPostProcessor（内部BPP），例如：</span>    <span class="token comment" spellcheck="true">// - AutowiredAnnotationBeanPostProcessor</span>    <span class="token comment" spellcheck="true">// - CommonAnnotationBeanPostProcessor</span>    <span class="token comment" spellcheck="true">// - ApplicationListenerDetector 等</span>    <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>internalPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> internalPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 五、重新注册 ApplicationListenerDetector，用来收集ApplicationListener Bean（确保在链末尾执行（避免过早代理））</span>    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="initApplicationEventMulticaster"><a href="#initApplicationEventMulticaster" class="headerlink" title="initApplicationEventMulticaster"></a>initApplicationEventMulticaster</h4><p>​注册的默认事件广播器为<strong>SimpleApplicationEventMulticaster，其主要是对所有的ApplicationEvent事件进行分发匹配到对应的ApplicationListener中</strong>（<strong>支持异步，线程池为SimpleApplicationEventMulticaster.taskExecutor，默认同步分发</strong>）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>APPLICATION_EVENT_MULTICASTER_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster <span class="token operator">=</span>                beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>APPLICATION_EVENT_MULTICASTER_BEAN_NAME<span class="token punctuation">,</span> ApplicationEventMulticaster<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Using ApplicationEventMulticaster ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例化并注册默认的事件广播器Bean：SimpleApplicationEventMulticaster</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleApplicationEventMulticaster</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>APPLICATION_EVENT_MULTICASTER_BEAN_NAME<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No '"</span> <span class="token operator">+</span> APPLICATION_EVENT_MULTICASTER_BEAN_NAME <span class="token operator">+</span> <span class="token string">"' bean, using "</span> <span class="token operator">+</span>                    <span class="token string">"["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh"></a>onRefresh</h4><p>​一个模板方法（hook），由子类实现，用于在 <code>refresh()</code> 流程中 <strong>容器刷新完成、所有 BeanFactory 初始化完毕之后</strong>，进行特定上下文的扩展初始化工作。</p><p>​比如在 <code>Spring Boot</code> 中，<code>AnnotationConfigServletWebServerApplicationContext</code> 会在该方法中创建和启动内嵌的 Web 服务器（<strong>默认是 Tomcat</strong>，可选 Jetty 或 Undertow），并完成 Web 环境相关的初始化。</p><h4 id="finishBeanFactoryInitialization"><a href="#finishBeanFactoryInitialization" class="headerlink" title="finishBeanFactoryInitialization"></a>finishBeanFactoryInitialization</h4><p>是 Spring 容器刷新流程中的 <strong>核心收尾步骤之一</strong>，主要职责如下：</p><ol><li><strong>初始化所有非懒加载（non-lazy）、非抽象的单例 Bean</strong><ul><li>这一步会触发 Bean 的完整生命周期流程：依赖注入（populate）、初始化方法调用（如 <code>@PostConstruct</code>、<code>InitializingBean#afterPropertiesSet</code>）、AOP 代理包装等</li></ul></li><li><strong>触发 <code>SmartInitializingSingleton</code> 回调</strong><ul><li>所有实现了 <code>SmartInitializingSingleton</code> 接口的单例 Bean，会在 <strong>所有非懒加载的单例 Bean 完成初始化之后</strong> 统一回调其 <code>afterSingletonsInstantiated()</code> 方法。</li><li>这是容器中所有 Bean 都就绪之后的 “最后的hook”，用于执行依赖所有 Bean 的集中初始化逻辑</li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// AbstractApplicationContext</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 清空临时类加载器</span>    beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 冻结BeanDefinition的配置，代表需要的地方可以缓存了</span>    <span class="token comment" spellcheck="true">// 走到这，BeanDefinition都已经处理完毕了，所以可以考虑缓存了</span>    beanFactory<span class="token punctuation">.</span><span class="token function">freezeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实例化所有非lazy加载的单例bean，并在加载完后调用SmartInitializingSingleton接口</span>    <span class="token comment" spellcheck="true">// SmartInitializingSingleton这个接口就是在实例化所有非lazy且单例bean完成后需要调用的</span>    beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>真正初始化单例bean（DefaultListableBeanFactory#preInstantiateSingletons方法）</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> beanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RootBeanDefinition bd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 非抽象 + 单例 + 非lazy加载</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 实例化工厂Bean</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>FACTORY_BEAN_PREFIX <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factory <span class="token operator">=</span> <span class="token punctuation">(</span>FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> isEagerInit<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        isEagerInit <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">:</span>isEagerInit<span class="token punctuation">,</span>                                <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        isEagerInit <span class="token operator">=</span> <span class="token punctuation">(</span>factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span> <span class="token operator">&amp;&amp;</span>                                <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEagerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isEagerInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 实例化非工厂Bean</span>                <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// apply所有SmartInitializingSingleton Bean逻辑</span>    <span class="token comment" spellcheck="true">// 重要的拓展口，可以在这里最早感知到大部分Bean准备完毕，可以放心调用这些bean的各种方法了</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object singletonInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonInstance <span class="token keyword">instanceof</span> <span class="token class-name">SmartInitializingSingleton</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            SmartInitializingSingleton smartSingleton <span class="token operator">=</span> <span class="token punctuation">(</span>SmartInitializingSingleton<span class="token punctuation">)</span> singletonInstance<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="finishRefresh"><a href="#finishRefresh" class="headerlink" title="finishRefresh"></a>finishRefresh</h4><p>​这一步结束，容器对外就完全可用了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 清除上下文级别的缓存资源，例如类扫描过程中缓存的 ASM 元数据。</span>    <span class="token function">clearResourceCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化生命周期处理器（LifecycleProcessor）。</span>    <span class="token comment" spellcheck="true">// 默认实现为 DefaultLifecycleProcessor，用于统一管理实现了 Lifecycle 接口的 bean 的启动与停止</span>    <span class="token function">initLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通知生命周期处理器，容器刷新完成</span>    <span class="token comment" spellcheck="true">// 将启动所有实现了 SmartLifecycle 接口并设置了 autoStartup = true 的 Bean（通常用于自动启动的组件，如消息监听容器、调度器等）</span>    <span class="token function">getLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 广播容器刷新完成事件：ContextRefreshedEvent</span>    <span class="token comment" spellcheck="true">// 所有实现了 ApplicationListener 接口，监听该事件的 Bean 都会收到通知，可用于执行基于“容器就绪”的后置逻辑。</span>    <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将当前 ApplicationContext 注册到 JMX 的 LiveBeansView 中（如果启用）</span>    <span class="token comment" spellcheck="true">// 这允许通过 JMX 客户端动态查看容器中所有 Bean 的状态（例如 VisualVM 插件）</span>    LiveBeansView<span class="token punctuation">.</span><span class="token function">registerApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring-ConfigurationClassPostProcessor</title>
      <link href="/2021-05-13/spring-configurationclasspostprocessor/"/>
      <url>/2021-05-13/spring-configurationclasspostprocessor/</url>
      
        <content type="html"><![CDATA[<hr><p>​呕心沥血的分析了ConfigurationClassPostProcessor的核心源码，深入剖析了Spring注解驱动的原理。对其中的<strong>延迟机制、字节码解析优化和代理模型</strong>进行了深度的思考，并通过arthas反编译反向验证了full configuration的代理</p><span id="more"></span><h1 id="ConfigurationClassPostProcessor"><a href="#ConfigurationClassPostProcessor" class="headerlink" title="ConfigurationClassPostProcessor"></a>ConfigurationClassPostProcessor</h1><p>​是Spring 容器中最重要的 <code>BeanFactoryPostProcessor</code> ，它负责解析并处理大量核心注解，其<strong>核心职责</strong>是：</p><blockquote><p><strong>统一解析所有来源的组件定义（BeanDefinition），并注册到 BeanFactory 中，为后续 Bean 的实例化做好准备。</strong></p></blockquote><p>其处理过程是<strong>递归执行的</strong>， 每当发现新的配置类、新的导入组件或扫描结果，它都会再次触发处理，直到不再有新组件为止。也就是说，新解析出的类本身也可能包含注解配置，需要进一步递归处理。</p><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td><code>@Configuration</code></td><td>标记一个类为配置类，作为入口被首次处理，并会被标记为 <code>full</code>  配置类。</td></tr><tr><td><code>@ComponentScan</code></td><td>扫描指定包路径下的组件类，将扫描到的 <code>@Component</code>、和元注解中包含 <code>@Component</code>的注解等注册为 <code>BeanDefinition</code>。</td></tr><tr><td><code>@Import</code></td><td>导入外部配置类（普通类、<code>ImportSelector</code>），注册其中定义的 Bean。</td></tr><tr><td><code>@ImportResource</code></td><td>加载 XML 配置文件中的 Bean 定义，与传统的 <code>applicationContext.xml</code> 类似。</td></tr><tr><td><code>@Bean</code></td><td>方法级别的注解，注册方法返回值作为 Bean，由 Spring 容器管理。</td></tr><tr><td><code>@PropertySource</code></td><td>加载外部配置文件（如 <code>.properties</code>），供 <code>@Value</code> 和 <code>Environment</code> 使用。</td></tr><tr><td><code>@Conditional</code></td><td>根据条件决定是否注册当前配置类或 Bean，贯穿上述所有注解的执行过程。</td></tr></tbody></table><h2 id="处理BeanDefinition"><a href="#处理BeanDefinition" class="headerlink" title="处理BeanDefinition"></a>处理BeanDefinition</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processConfigBeanDefinitions</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 收集所有配置类候选项（Full/Lite）</span>    List<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> configCandidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> candidateNames <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanDefinition beanDef <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断这个BeanDefinition是否已经被处理过（只有被处理过才会设置configurationClass属性）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">isFullConfigurationClass</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">)</span> <span class="token operator">||</span>                ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">isLiteConfigurationClass</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean definition has already been processed as a configuration class: "</span> <span class="token operator">+</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 判断配置类是full（优先判断）还是lite         *          * full: 类上存在@Configuration元注解         *          * lite: 类上存在@Component，@ComponentScan，@Import，@ImportResource元注解。         * 或方法上存在@Bean方法注解         *          */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            configCandidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 没有配置类则立即返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configCandidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// bean排序（@Order）</span>    configCandidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bd1<span class="token punctuation">,</span> bd2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span>bd1<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span>bd2<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SingletonBeanRegistry sbr <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>registry <span class="token keyword">instanceof</span> <span class="token class-name">SingletonBeanRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sbr <span class="token operator">=</span> <span class="token punctuation">(</span>SingletonBeanRegistry<span class="token punctuation">)</span> registry<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>localBeanNameGeneratorSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BeanNameGenerator generator <span class="token operator">=</span> <span class="token punctuation">(</span>BeanNameGenerator<span class="token punctuation">)</span> sbr<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span>CONFIGURATION_BEAN_NAME_GENERATOR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>generator <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>componentScanBeanNameGenerator <span class="token operator">=</span> generator<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>importBeanNameGenerator <span class="token operator">=</span> generator<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建Full和Lite的解析器</span>    ConfigurationClassParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">(</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>problemReporter<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>componentScanBeanNameGenerator<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>configCandidates<span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>ConfigurationClass<span class="token operator">></span> alreadyParsed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>configCandidates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解析Full Configuration和Lite Configuration类（会递归解析）</span>        parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析完成后的校验（@Configuration类的final校验）</span>        parser<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取所有新解析出来的 ConfigurationClass</span>        Set<span class="token operator">&lt;</span>ConfigurationClass<span class="token operator">></span> configClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">getConfigurationClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 移除已经解析完成的类</span>        configClasses<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>alreadyParsed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Read the model and create bean definitions based on its content</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassBeanDefinitionReader</span><span class="token punctuation">(</span>                    registry<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sourceExtractor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>importBeanNameGenerator<span class="token punctuation">,</span> parser<span class="token punctuation">.</span><span class="token function">getImportRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将解析出来的 ConfigurationClass 转换为真正的 BeanDefinition 注册到容器中</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>        alreadyParsed<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>        candidates<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> candidateNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> newCandidateNames <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> oldCandidateNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>candidateNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> alreadyParsedClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>ConfigurationClass configurationClass <span class="token operator">:</span> alreadyParsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                alreadyParsedClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>configurationClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String candidateName <span class="token operator">:</span> newCandidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldCandidateNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>candidateName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    BeanDefinition bd <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>candidateName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                            <span class="token operator">!</span>alreadyParsedClasses<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span> candidateName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            candidateNames <span class="token operator">=</span> newCandidateNames<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>candidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// // 注册 ImportRegistry 用于支持 ImportAware 的功能</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sbr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sbr<span class="token punctuation">.</span><span class="token function">containsSingleton</span><span class="token punctuation">(</span>IMPORT_REGISTRY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sbr<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>IMPORT_REGISTRY_BEAN_NAME<span class="token punctuation">,</span> parser<span class="token punctuation">.</span><span class="token function">getImportRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory <span class="token keyword">instanceof</span> <span class="token class-name">CachingMetadataReaderFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>CachingMetadataReaderFactory<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析BeanDefinition"><a href="#解析BeanDefinition" class="headerlink" title="解析BeanDefinition"></a>解析BeanDefinition</h3><h4 id="ConfigurationClassParser-doProcessConfigurationClass"><a href="#ConfigurationClassParser-doProcessConfigurationClass" class="headerlink" title="ConfigurationClassParser#doProcessConfigurationClass"></a>ConfigurationClassParser#doProcessConfigurationClass</h4><p>​真正解析Configuration Class的工具类（真正的解析上面的核心注解），并实现递归解析</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> SourceClass <span class="token function">doProcessConfigurationClass</span><span class="token punctuation">(</span>ConfigurationClass configClass<span class="token punctuation">,</span> SourceClass sourceClass<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.如果类包含元注解@Component，则递归处理当前类的所有内部类（包括private的）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotated</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Recursively process any member (nested) classes first</span>        <span class="token function">processMemberClasses</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> sourceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2.处理 @PropertySource注解</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>AnnotationAttributes propertySource <span class="token operator">:</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesForRepeatable</span><span class="token punctuation">(</span>            sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> PropertySources<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>            org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertySource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableEnvironment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">processPropertySource</span><span class="token punctuation">(</span>propertySource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Ignoring @PropertySource annotation on ["</span> <span class="token operator">+</span> sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">"]. Reason: Environment must implement ConfigurableEnvironment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3.处理@ComponentScan注解</span>    Set<span class="token operator">&lt;</span>AnnotationAttributes<span class="token operator">></span> componentScans <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesForRepeatable</span><span class="token punctuation">(</span>            sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ComponentScans<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ComponentScan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>componentScans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ConfigurationPhase<span class="token punctuation">.</span>REGISTER_BEAN<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>AnnotationAttributes componentScan <span class="token operator">:</span> componentScans<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 执行 @ComponentScan，扫描</span>            Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> scannedBeanDefinitions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>componentScanParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>componentScan<span class="token punctuation">,</span>                    sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 继续检查这些新扫描的出来的BeanDefinition，递归处理</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinitionHolder holder <span class="token operator">:</span> scannedBeanDefinitions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                BeanDefinition bdCand <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginatingBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bdCand <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bdCand <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 递归继续解析新扫描出来的BeanDefinition</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>bdCand<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">parse</span><span class="token punctuation">(</span>bdCand<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4.处理@Import注解</span>    <span class="token function">processImports</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> sourceClass<span class="token punctuation">,</span> <span class="token function">getImports</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5.处理 @ImportResource注解</span>    AnnotationAttributes importResource <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesFor</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ImportResource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>importResource <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> importResource<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"locations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanDefinitionReader</span><span class="token operator">></span> readerClass <span class="token operator">=</span> importResource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"reader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String resolvedResource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">resolveRequiredPlaceholders</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            configClass<span class="token punctuation">.</span><span class="token function">addImportedResource</span><span class="token punctuation">(</span>resolvedResource<span class="token punctuation">,</span> readerClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 6.处理有@Bean注解的方法，将这种方法封装为BeanMethod对象并加入beanMethods缓存里，等待后续的处理</span>    Set<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> beanMethods <span class="token operator">=</span> <span class="token function">retrieveBeanMethodMetadata</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>MethodMetadata methodMetadata <span class="token operator">:</span> beanMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>        configClass<span class="token punctuation">.</span><span class="token function">addBeanMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanMethod</span><span class="token punctuation">(</span>methodMetadata<span class="token punctuation">,</span> configClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 解析配置类实现的接口中的带有@Bean注解的default方法</span>    <span class="token function">processInterfaces</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> sourceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理父类</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String superclass <span class="token operator">=</span> sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>superclass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>superclass<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>knownSuperclasses<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>superclass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>knownSuperclasses<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>superclass<span class="token punctuation">,</span> configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Superclass found, return its annotation metadata and recurse</span>            <span class="token keyword">return</span> sourceClass<span class="token punctuation">.</span><span class="token function">getSuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 没有父类或父类已处理完毕，则这个配置类解析完毕</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-内部类处理（递归处理）"><a href="#1-内部类处理（递归处理）" class="headerlink" title="1. 内部类处理（递归处理）"></a>1. 内部类处理（递归处理）</h5><p>​用于<strong>处理配置类内部的成员类（例如静态内部类），若其本身也是一个配置类（full 或 lite），则递归进行解析</strong>（<strong>并使用importStack防止循环依赖解析</strong>）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processMemberClasses</span><span class="token punctuation">(</span>ConfigurationClass configClass<span class="token punctuation">,</span> SourceClass sourceClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取所有成员类（包括静态/非静态内部类）</span>    Collection<span class="token operator">&lt;</span>SourceClass<span class="token operator">></span> memberClasses <span class="token operator">=</span> sourceClass<span class="token punctuation">.</span><span class="token function">getMemberClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>memberClasses<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>SourceClass<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>memberClasses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SourceClass memberClass <span class="token operator">:</span> memberClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断该成员类是否是一个有效的配置类（full 或 lite），且不是当前类本身</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">isConfigurationCandidate</span><span class="token punctuation">(</span>memberClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span>memberClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>memberClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 对候选配置类进行排序，排序依据可能是 @Order 注解或实现 Ordered 接口</span>        OrderComparator<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 逐个处理符合条件的成员配置类</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SourceClass candidate <span class="token operator">:</span> candidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 检查 import 栈中是否存在当前 configClass，防止循环 import 导致死递归</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>problemReporter<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CircularImportProblem</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 将当前配置类推入 import 栈，准备递归处理内部类</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 将该成员类包装成 ConfigurationClass 并递归处理</span>                    <span class="token function">processConfigurationClass</span><span class="token punctuation">(</span>candidate<span class="token punctuation">.</span><span class="token function">asConfigClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 处理完成后将当前配置类弹出 import 栈</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-PropertySource"><a href="#2-PropertySource" class="headerlink" title="2.  @PropertySource"></a>2.  @PropertySource</h5><p>​将指定的 <code>.properties</code> 配置文件解析并注册到 Spring 的 <code>Environment</code> 中，使配置文件中的属性在应用中可用，并支持如下功能</p><ul><li>多路径</li><li>编码设置</li><li>自定义的 <code>PropertySourceFactory</code></li><li>占位符解析</li><li>是否忽略加载失败的配置文件</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processPropertySource</span><span class="token punctuation">(</span>AnnotationAttributes propertySource<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String name <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String encoding <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"encoding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        encoding <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取 value 属性（属性文件路径），不能为空</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> locations <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>locations<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"At least one @PropertySource(value) location is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取是否忽略找不到资源的异常标志</span>    <span class="token keyword">boolean</span> ignoreResourceNotFound <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"ignoreResourceNotFound"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取指定的 PropertySourceFactory。默认使用DefaultPropertySourceFactory</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">PropertySourceFactory</span><span class="token operator">></span> factoryClass <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PropertySourceFactory factory <span class="token operator">=</span> <span class="token punctuation">(</span>factoryClass <span class="token operator">==</span> PropertySourceFactory<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">?</span>            DEFAULT_PROPERTY_SOURCE_FACTORY <span class="token operator">:</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>factoryClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String location <span class="token operator">:</span> locations<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析占位符（如 ${user.home}/config.properties）</span>            String resolvedLocation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">resolveRequiredPlaceholders</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 加载资源（通常是 classpath 或文件系统路径）</span>            Resource resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>resolvedLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用 factory 解析资源并加入 Environment 的 PropertySources 中</span>            <span class="token function">addPropertySource</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">createPropertySource</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> encoding<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">|</span> FileNotFoundException <span class="token operator">|</span> UnknownHostException <span class="token operator">|</span> SocketException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 根据异常标志判断是否抛异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ignoreResourceNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Properties location ["</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"] not resolvable: "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-ComponentScan"><a href="#3-ComponentScan" class="headerlink" title="3. @ComponentScan"></a>3. @ComponentScan</h5><h6 id="注解解析"><a href="#注解解析" class="headerlink" title="注解解析"></a>注解解析</h6><p>ComponentScanAnnotationParser#parse方法解析@ComponentScan注解，为后续的真正扫描做准备</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">parse</span><span class="token punctuation">(</span>AnnotationAttributes componentScan<span class="token punctuation">,</span> <span class="token keyword">final</span> String declaringClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建 ClassPathBeanDefinitionScanner（包扫描器）</span>    <span class="token comment" spellcheck="true">// 默认启用 useDefaultFilters，会注册默认过滤器，只扫描 @Component、@ManagedBean、@Named 等组件</span>    ClassPathBeanDefinitionScanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">,</span>            componentScan<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"useDefaultFilters"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置 BeanNameGenerator（用于生成 Bean 的名称）</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanNameGenerator</span><span class="token operator">></span> generatorClass <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"nameGenerator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> useInheritedGenerator <span class="token operator">=</span> <span class="token punctuation">(</span>BeanNameGenerator<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> generatorClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    scanner<span class="token punctuation">.</span><span class="token function">setBeanNameGenerator</span><span class="token punctuation">(</span>            useInheritedGenerator <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator <span class="token operator">:</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>generatorClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理 @Scope 注解代理方式：ScopedProxyMode</span>    ScopedProxyMode scopedProxyMode <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getEnum</span><span class="token punctuation">(</span><span class="token string">"scopedProxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scopedProxyMode <span class="token operator">!=</span> ScopedProxyMode<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scanner<span class="token punctuation">.</span><span class="token function">setScopedProxyMode</span><span class="token punctuation">(</span>scopedProxyMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ScopeMetadataResolver</span><span class="token operator">></span> resolverClass <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"scopeResolver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">setScopeMetadataResolver</span><span class="token punctuation">(</span>BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>resolverClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    scanner<span class="token punctuation">.</span><span class="token function">setResourcePattern</span><span class="token punctuation">(</span>componentScan<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"resourcePattern"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加 includeFilters（包含过滤器），只匹配指定条件的类</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>AnnotationAttributes filter <span class="token operator">:</span> componentScan<span class="token punctuation">.</span><span class="token function">getAnnotationArray</span><span class="token punctuation">(</span><span class="token string">"includeFilters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>TypeFilter typeFilter <span class="token operator">:</span> <span class="token function">typeFiltersFor</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            scanner<span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span>typeFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加 excludeFilters（排除过滤器），排除不需要的类</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>AnnotationAttributes filter <span class="token operator">:</span> componentScan<span class="token punctuation">.</span><span class="token function">getAnnotationArray</span><span class="token punctuation">(</span><span class="token string">"excludeFilters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>TypeFilter typeFilter <span class="token operator">:</span> <span class="token function">typeFiltersFor</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            scanner<span class="token punctuation">.</span><span class="token function">addExcludeFilter</span><span class="token punctuation">(</span>typeFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置默认的懒加载（如果开启，则所有扫描到的 Bean 默认 lazy-init）</span>    <span class="token keyword">boolean</span> lazyInit <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"lazyInit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scanner<span class="token punctuation">.</span><span class="token function">getBeanDefinitionDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> basePackages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> basePackagesArray <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"basePackages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String pkg <span class="token operator">:</span> basePackagesArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> tokenized <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">,</span>                ConfigurableApplicationContext<span class="token punctuation">.</span>CONFIG_LOCATION_DELIMITERS<span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">,</span> tokenized<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">:</span> componentScan<span class="token punctuation">.</span><span class="token function">getClassArray</span><span class="token punctuation">(</span><span class="token string">"basePackageClasses"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        basePackages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果未显式指定 basePackages，则默认扫描当前配置类所在的包</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>basePackages<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        basePackages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span>declaringClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 排除当前class，避免source class的重复解析</span>    scanner<span class="token punctuation">.</span><span class="token function">addExcludeFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AbstractTypeHierarchyTraversingFilter</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">matchClassName</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> declaringClass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 准备工作完成，开始扫描</span>    <span class="token keyword">return</span> scanner<span class="token punctuation">.</span><span class="token function">doScan</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h6><p>​ClassPathBeanDefinitionScanner类开始真正的扫描包（<strong>使用ASM而不是反射，避免无用的Class被JVM加载</strong>），并进行一系列的过滤以判断是否该纳入容器中。过滤如下</p><ul><li>需要有**@Component、@ManagedBean、@Named**元注解</li><li>是<strong>具体类</strong>（非抽象），或者是<strong>抽象类但包含 <code>@Lookup</code> 注解的方法</strong></li><li><strong>excludeFilters（黑名单）和includeFilters（白名单）匹配（excludeFilters优先级更高）</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">doScan</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 至少有1个被扫描的包</span>    Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">,</span> <span class="token string">"At least one base package must be specified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最终BeanDefinitionHolder合集</span>    Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefinitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String basePackage <span class="token operator">:</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token function">findCandidateComponents</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinition candidate <span class="token operator">:</span> candidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析 @Scope 作用域元数据（如 singleton、prototype、request 等）</span>            ScopeMetadata scopeMetadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopeMetadataResolver<span class="token punctuation">.</span><span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>            candidate<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">.</span><span class="token function">getScopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String beanName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对 AbstractBeanDefinition 进行后处理（如设置懒加载、自动注入模式等）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">postProcessBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> candidate<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 处理通用注解（@Lazy、@Primary、@DependsOn、@Role、@Description 等）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AnnotatedBeanDefinition<span class="token punctuation">)</span> candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 再次检查BeanDefinition，校验是否重复冲突</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkCandidate</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                BeanDefinitionHolder definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果是request、session 等作用域，可能会应用 scoped proxy 代理模式（如 JDK 或 CGLIB）</span>                definitionHolder <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>                beanDefinitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 最终将其注册到 BeanDefinitionRegistry 中（供 Spring 后续实例化使用）</span>                <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> beanDefinitions<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> <span class="token function">scanCandidateComponents</span><span class="token punctuation">(</span>String basePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 例如扫描site.shanzhao包 -> classpath*:site/shanzhao</span><span class="token comment" spellcheck="true">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token keyword">class</span>        <span class="token class-name">String</span> packageSearchPath <span class="token operator">=</span> ResourcePatternResolver<span class="token punctuation">.</span>CLASSPATH_ALL_URL_PREFIX <span class="token operator">+</span>                <span class="token function">resolveBasePackage</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcePattern<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上述指定路径下的每个class文件将被封装成Resource对象并返回</span>        Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> <span class="token function">getResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>packageSearchPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> traceEnabled <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> debugEnabled <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Resource resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>traceEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Scanning "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 不使用反射，使用asm直接将字节码的信息解析出来（包括所有注解（父注解等））</span>                    MetadataReader metadataReader <span class="token operator">=</span> <span class="token function">getMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 对metaData进行判断，是否纳入容器中（@Component、@ManagedBean、@Named判断，@Conditional校验）</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        ScannedGenericBeanDefinition sbd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScannedGenericBeanDefinition</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">;</span>                        sbd<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 再次校验是否为合法的候选组件（是具体类（非抽象），或者是抽象类但包含 @Lookup 注解的方法）</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>sbd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Identified candidate component class: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Ignored because not a concrete top-level class: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>traceEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Ignored because not matching any filter: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>                            <span class="token string">"Failed to read candidate component class: "</span> <span class="token operator">+</span> resource<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>traceEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Ignored because not readable: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token string">"I/O failure during classpath scanning"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> candidates<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h6><p>​对上述返回的Set集合BeanDefinitionHolder继续full或lite判断，并递归解析其所有的导入情况</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 继续检查这些新扫描的出来的BeanDefinition，递归处理</span><span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinitionHolder holder <span class="token operator">:</span> scannedBeanDefinitions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BeanDefinition bdCand <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginatingBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bdCand <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bdCand <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 递归继续解析新扫描出来的BeanDefinition</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>bdCand<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">parse</span><span class="token punctuation">(</span>bdCand<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-Import"><a href="#4-Import" class="headerlink" title="4. @Import"></a>4. @Import</h5><p>​处理 @Import 注解导入的配置类，是一种<strong>显式导入配置类或组件</strong>的机制。<strong>其相比@ComponentScan，这个注解更轻量和有针对性</strong>。它包括以下三类情况</p><ol><li>ImportSelector（<code>DeferredImportSelector</code> 是其延迟版本，会<strong>在所有配置类处理完后统一处理，常用于 Spring Boot 自动配置机制</strong>）： 动态返回要导入的类名（递归）</li><li>ImportBeanDefinitionRegistrar ：<strong>手动注册 BeanDefinition（不会递归）</strong></li><li>普通类 ：按照配置类继续解析（递归）</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processImports</span><span class="token punctuation">(</span>ConfigurationClass configClass<span class="token punctuation">,</span> SourceClass currentSourceClass<span class="token punctuation">,</span>        Collection<span class="token operator">&lt;</span>SourceClass<span class="token operator">></span> importCandidates<span class="token punctuation">,</span> <span class="token keyword">boolean</span> checkForCircularImports<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>importCandidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// @Import导入为空，就直接返回</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 检查是否存在循环导入链，例如 A -> B -> C -> A</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>checkForCircularImports <span class="token operator">&amp;&amp;</span> <span class="token function">isChainedImportOnStack</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>problemReporter<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CircularImportProblem</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 压栈当前 configClass，防止循环引用</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>SourceClass candidate <span class="token operator">:</span> importCandidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ImportSelector解析（会循环解析）</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate<span class="token punctuation">.</span><span class="token function">isAssignable</span><span class="token punctuation">(</span>ImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> candidateClass <span class="token operator">=</span> candidate<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ImportSelector selector <span class="token operator">=</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>candidateClass<span class="token punctuation">,</span> ImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// aware注入</span>                    ParserStrategyUtils<span class="token punctuation">.</span><span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>                            selector<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>selector <span class="token keyword">instanceof</span> <span class="token class-name">DeferredImportSelector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// DeferredImportSelector暂不处理（Spring boot用到）</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>deferredImportSelectorHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> <span class="token punctuation">(</span>DeferredImportSelector<span class="token punctuation">)</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 普通 ImportSelector 立即执行 selectImports() 获取要导入的类名数组</span>                        String<span class="token punctuation">[</span><span class="token punctuation">]</span> importClassNames <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectImports</span><span class="token punctuation">(</span>currentSourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Collection<span class="token operator">&lt;</span>SourceClass<span class="token operator">></span> importSourceClasses <span class="token operator">=</span> <span class="token function">asSourceClasses</span><span class="token punctuation">(</span>importClassNames<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 递归解析新导入的类</span>                        <span class="token function">processImports</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> currentSourceClass<span class="token punctuation">,</span> importSourceClasses<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// ImportBeanDefinitionRegistrar解析</span>                <span class="token comment" spellcheck="true">// 不会递归，因为这个接口已经给了BeanDefinitionRegistry，就是让你自由发挥注册BeanDefinition的</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate<span class="token punctuation">.</span><span class="token function">isAssignable</span><span class="token punctuation">(</span>ImportBeanDefinitionRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Candidate class is an ImportBeanDefinitionRegistrar -></span>                    <span class="token comment" spellcheck="true">// delegate to it to register additional bean definitions</span>                    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> candidateClass <span class="token operator">=</span> candidate<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ImportBeanDefinitionRegistrar registrar <span class="token operator">=</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>candidateClass<span class="token punctuation">,</span>                            ImportBeanDefinitionRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ParserStrategyUtils<span class="token punctuation">.</span><span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>                            registrar<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 将 registrar 注册到当前配置类中，后续统一调用</span>                    configClass<span class="token punctuation">.</span><span class="token function">addImportBeanDefinitionRegistrar</span><span class="token punctuation">(</span>registrar<span class="token punctuation">,</span> currentSourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 其他类型的类（即非 ImportSelector / ImportBeanDefinitionRegistrar）</span>                    <span class="token comment" spellcheck="true">// 作为普通的 @Configuration 类进行解析处理（可能再次触发 @Import）</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">registerImport</span><span class="token punctuation">(</span>                            currentSourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> candidate<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">processConfigurationClass</span><span class="token punctuation">(</span>candidate<span class="token punctuation">.</span><span class="token function">asConfigClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>                    <span class="token string">"Failed to process import candidates for configuration class ["</span> <span class="token operator">+</span>                            configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span>                    ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析完成后出栈</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>ConfigurationClass configClass<span class="token punctuation">,</span> DeferredImportSelector importSelector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    DeferredImportSelectorHolder holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeferredImportSelectorHolder</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> importSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deferredImportSelectors <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// deferredImportSelectors 为 null，说明当前不是“延迟批量处理阶段”，而是递归触发时遇到的</span>        <span class="token comment" spellcheck="true">// DeferredImportSelector</span>        <span class="token comment" spellcheck="true">// 此时直接单独处理当前这个 DeferredImportSelector，不等到后面统一处理</span>        DeferredImportSelectorGroupingHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeferredImportSelectorGroupingHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">processGroupImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// deferredImportSelectors 不为 null，说明当前处于“延迟导入收集阶段”，此时仅将当前 holder 暂存下来，后续由</span>        <span class="token comment" spellcheck="true">// ConfigurationClassParser#process 统一处理</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deferredImportSelectors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-ImportResource解析"><a href="#5-ImportResource解析" class="headerlink" title="5. @ImportResource解析"></a>5. @ImportResource解析</h5><p>​解析@ImportResource，将解析后得到的数据缓存到ConfigurationClass#importedResources中，等待后续注册BeanDefinition使用</p><pre class="line-numbers language-java"><code class="language-java">AnnotationAttributes importResource <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesFor</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ImportResource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>importResource <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> importResource<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"locations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanDefinitionReader</span><span class="token operator">></span> readerClass <span class="token operator">=</span> importResource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"reader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String resolvedResource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">resolveRequiredPlaceholders</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        configClass<span class="token punctuation">.</span><span class="token function">addImportedResource</span><span class="token punctuation">(</span>resolvedResource<span class="token punctuation">,</span> readerClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-Bean解析"><a href="#6-Bean解析" class="headerlink" title="6. @Bean解析"></a>6. @Bean解析</h5><p>​@Bean注解的解析和缓存，主要步骤总结：</p><ol><li><strong>使用 ASM 而非反射</strong>：通过 ASM 读取类字节码，获取所有 <code>@Bean</code> 方法的有序列表，避免 JVM 反射 API 导致的无序行为</li><li><strong>封装为 BeanMethod</strong>：每个方法会被抽象为 <code>BeanMethod</code>（包含方法元信息和所属配置类引用）。</li><li><strong>缓存到 ConfigurationClass</strong>：最终这些 <code>BeanMethod</code> 会被缓存到 <code>ConfigurationClass#beanMethods</code> 集合中，等到配置类加载完成后由 <code>ConfigurationClassBeanDefinitionReader</code> 注册为真正的 <code>BeanDefinition</code>。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Set<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> <span class="token function">retrieveBeanMethodMetadata</span><span class="token punctuation">(</span>SourceClass sourceClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AnnotationMetadata original <span class="token operator">=</span> sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> beanMethods <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">getAnnotatedMethods</span><span class="token punctuation">(</span>Bean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果 Bean 方法数量大于1 且使用的是基于反射的元数据，尝试使用 ASM 获取确定顺序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> original <span class="token keyword">instanceof</span> <span class="token class-name">StandardAnnotationMetadata</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用 ASM 从 class 文件中获取元数据（包括方法顺序）</span>            AnnotationMetadata asm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> asmMethods <span class="token operator">=</span> asm<span class="token punctuation">.</span><span class="token function">getAnnotatedMethods</span><span class="token punctuation">(</span>Bean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 若 ASM 获取的 @Bean 方法数量 >= 反射获取的，且名字匹配，则使用 ASM 顺序</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>asmMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> beanMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Set<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> selectedMethods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>asmMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>MethodMetadata asmMethod <span class="token operator">:</span> asmMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>MethodMetadata beanMethod <span class="token operator">:</span> beanMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>asmMethod<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 保留反射对象，但按 ASM 顺序排列</span>                            selectedMethods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果反射获取的所有方法都在 ASM 中找到，则使用 ASM 顺序</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> beanMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// All reflection-detected methods found in ASM method set -> proceed</span>                    beanMethods <span class="token operator">=</span> selectedMethods<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Failed to read class file via ASM for determining @Bean method order"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 忽略异常，降级使用反射获取的 Bean 方法集合，虽然顺序不稳定，但逻辑不受影响</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> beanMethods<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注册BeanDefinition"><a href="#注册BeanDefinition" class="headerlink" title="注册BeanDefinition"></a>注册BeanDefinition</h3><h4 id="ConfigurationClassBeanDefinitionReader-loadBeanDefinitionsForConfigurationClass"><a href="#ConfigurationClassBeanDefinitionReader-loadBeanDefinitionsForConfigurationClass" class="headerlink" title="ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForConfigurationClass"></a>ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForConfigurationClass</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitionsForConfigurationClass</span><span class="token punctuation">(</span>        ConfigurationClass configClass<span class="token punctuation">,</span> TrackedConditionEvaluator trackedConditionEvaluator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// @Conditional注解判断（OnBeanCondition会在这发挥作用）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trackedConditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若被跳过且之前已注册过 beanDefinition，则将其移除</span>        String beanName <span class="token operator">=</span> configClass<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">removeBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>importRegistry<span class="token punctuation">.</span><span class="token function">removeImportingClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果是被 @Import 导入的配置类，注册为一个 beanDefinition</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">isImported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">registerBeanDefinitionForImportedConfigurationClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 加载@Bean注解方法的BeanDefinition，并设置使用工厂方法构造</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanMethod beanMethod <span class="token operator">:</span> configClass<span class="token punctuation">.</span><span class="token function">getBeanMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">loadBeanDefinitionsForBeanMethod</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 处理 @ImportResource 注解导入的 XML 配置文件，注册其中定义的 bean</span>    <span class="token function">loadBeanDefinitionsFromImportedResources</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getImportedResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// @Import注解(ImportBeanDefinitionRegistrar)的结果注册bean</span>    <span class="token function">loadBeanDefinitionsFromRegistrars</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getImportBeanDefinitionRegistrars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Bean注册"><a href="#Bean注册" class="headerlink" title="@Bean注册"></a>@Bean注册</h5><p>​真正将@Bean方法抽象为ConfigurationClassBeanDefinition并注册到容器中，主要步骤总结：</p><ol><li><strong>条件匹配判断</strong>：若 <code>@Bean</code> 方法上存在 <code>@Conditional</code>，需判断是否应跳过注册</li><li><strong>确定 Bean 名称与别名</strong></li><li><strong>构建 BeanDefinition</strong>：将方法封装为 <code>ConfigurationClassBeanDefinition</code>，并设置元数据、作用域、初始化和销毁方法、autowire 策略等属性</li><li><strong>区分方法类型调用方式</strong><ol><li><strong>静态方法</strong>：无需依赖配置类实例，直接通过类调用工厂方法。</li><li><strong>实例方法</strong>：需要通过配置类的 Bean 实例来调用方法（即依赖于配置类自身作为 FactoryBean）。</li></ol></li><li><strong>作用域代理支持</strong>：若存在 <code>@Scope(proxyMode = ...)</code>，则通过 <code>ScopedProxyCreator</code> 构造代理 BeanDefinition</li><li><strong>注册 BeanDefinition 到容器中</strong>：最终调用 <code>registry.registerBeanDefinition()</code> 完成注册。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitionsForBeanMethod</span><span class="token punctuation">(</span>BeanMethod beanMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ConfigurationClass configClass <span class="token operator">=</span> beanMethod<span class="token punctuation">.</span><span class="token function">getConfigurationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MethodMetadata metadata <span class="token operator">=</span> beanMethod<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String methodName <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// @Conditional注解判断是否该跳过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> ConfigurationPhase<span class="token punctuation">.</span>REGISTER_BEAN<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        configClass<span class="token punctuation">.</span>skippedBeanMethods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass<span class="token punctuation">.</span>skippedBeanMethods<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    AnnotationAttributes bean <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesFor</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> Bean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"No @Bean annotation attributes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String beanName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span>names<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> names<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String alias <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> alias<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 检查是否存在覆盖（例如 XML ），再根据beanName判断是否抛异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOverriddenByExistingDefinition</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getConfigurationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getConfigurationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    beanName<span class="token punctuation">,</span> <span class="token string">"Bean name derived from @Bean method '"</span> <span class="token operator">+</span> beanMethod<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                            <span class="token string">"' clashes with bean name for containing configuration class; please make those names unique!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 构建 BeanDefinition，封装元信息</span>    ConfigurationClassBeanDefinition beanDef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassBeanDefinition</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    beanDef<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sourceExtractor<span class="token punctuation">.</span><span class="token function">extractSource</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> configClass<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用工厂模式实例化bean：静态方法 or 实例方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 静态方法直接使用class对象调用</span>        beanDef<span class="token punctuation">.</span><span class="token function">setBeanClassName</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDef<span class="token punctuation">.</span><span class="token function">setFactoryMethodName</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 实例方法要使用FactoryBean对象调用</span>        beanDef<span class="token punctuation">.</span><span class="token function">setFactoryBeanName</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDef<span class="token punctuation">.</span><span class="token function">setUniqueFactoryMethodName</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置自动装配模式为构造器注入</span>    beanDef<span class="token punctuation">.</span><span class="token function">setAutowireMode</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_CONSTRUCTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>            org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequiredAnnotationBeanPostProcessor<span class="token punctuation">.</span>SKIP_REQUIRED_CHECK_ATTRIBUTE<span class="token punctuation">,</span>            Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// @Bean方法上的常用注解解析@Lazy等等</span>    AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    Autowire autowire <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getEnum</span><span class="token punctuation">(</span><span class="token string">"autowire"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowire<span class="token punctuation">.</span><span class="token function">isAutowire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanDef<span class="token punctuation">.</span><span class="token function">setAutowireMode</span><span class="token punctuation">(</span>autowire<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> autowireCandidate <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"autowireCandidate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>autowireCandidate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanDef<span class="token punctuation">.</span><span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String initMethodName <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"initMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanDef<span class="token punctuation">.</span><span class="token function">setInitMethodName</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String destroyMethodName <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"destroyMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beanDef<span class="token punctuation">.</span><span class="token function">setDestroyMethodName</span><span class="token punctuation">(</span>destroyMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    ScopedProxyMode proxyMode <span class="token operator">=</span> ScopedProxyMode<span class="token punctuation">.</span>NO<span class="token punctuation">;</span>    AnnotationAttributes attributes <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesFor</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> Scope<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>attributes <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanDef<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>attributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyMode <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getEnum</span><span class="token punctuation">(</span><span class="token string">"proxyMode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认就为No</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyMode <span class="token operator">==</span> ScopedProxyMode<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            proxyMode <span class="token operator">=</span> ScopedProxyMode<span class="token punctuation">.</span>NO<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 若需要作用域代理（如 request-scoped Bean），则创建代理 BeanDefinition</span>    BeanDefinition beanDefToRegister <span class="token operator">=</span> beanDef<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyMode <span class="token operator">!=</span> ScopedProxyMode<span class="token punctuation">.</span>NO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanDefinitionHolder proxyDef <span class="token operator">=</span> ScopedProxyCreator<span class="token punctuation">.</span><span class="token function">createScopedProxy</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">,</span>                proxyMode <span class="token operator">==</span> ScopedProxyMode<span class="token punctuation">.</span>TARGET_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefToRegister <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassBeanDefinition</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>RootBeanDefinition<span class="token punctuation">)</span> proxyDef<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configClass<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Registering bean definition for @Bean method %s.%s()"</span><span class="token punctuation">,</span>                configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 最终注册 BeanDefinition</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefToRegister<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代理Full-Configuration"><a href="#代理Full-Configuration" class="headerlink" title="代理Full Configuration"></a>代理Full Configuration</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enhanceConfigurationClasses</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 记录所有需要增强的配置类</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> AbstractBeanDefinition<span class="token operator">></span> configBeanDefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanDefinition beanDef <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// @Configuration类才会被增强（即full configuration class）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">isFullConfigurationClass</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 必须是 AbstractBeanDefinition 类型，否则无法增强（不支持自定义 BeanDefinition 实现）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanDef <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token string">"Cannot enhance @Configuration bean definition '"</span> <span class="token operator">+</span>                        beanName <span class="token operator">+</span> <span class="token string">"' since it is not stored in an AbstractBeanDefinition subclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果这个 @Configuration Bean 已经被提前实例化，则无法再增强，打印警告日志</span>                <span class="token comment" spellcheck="true">// 这种情况通常发生在某些早期调用触发了配置类的提前加载，比如BeanDefinitionRegistryPostProcessor这类bean</span>                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Cannot enhance @Configuration bean definition '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                        <span class="token string">"' since its singleton instance has been created too early. The typical cause "</span> <span class="token operator">+</span>                        <span class="token string">"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor "</span> <span class="token operator">+</span>                        <span class="token string">"return type: Consider declaring such methods as 'static'."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            configBeanDefs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configBeanDefs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 无full则直接返回</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建配置类增强器</span>    ConfigurationClassEnhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassEnhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> AbstractBeanDefinition<span class="token operator">></span> entry <span class="token operator">:</span> configBeanDefs<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        AbstractBeanDefinition beanDef <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>AutoProxyUtils<span class="token punctuation">.</span>PRESERVE_TARGET_CLASS_ATTRIBUTE<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> configClass <span class="token operator">=</span> beanDef<span class="token punctuation">.</span><span class="token function">resolveBeanClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 使用ConfigurationClassEnhancer开始增强</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> enhancedClass <span class="token operator">=</span> enhancer<span class="token punctuation">.</span><span class="token function">enhance</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果增强成功（即 class 被改动了），则更新 beanDefinition 中的 beanClass，用增强后的class来实例化这个bean，而抛弃原class</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass <span class="token operator">!=</span> enhancedClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    beanDef<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>enhancedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot load configuration class: "</span> <span class="token operator">+</span> beanDef<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ConfigurationClassEnhancer"><a href="#ConfigurationClassEnhancer" class="headerlink" title="ConfigurationClassEnhancer"></a>ConfigurationClassEnhancer</h3><h4 id="增强class"><a href="#增强class" class="headerlink" title="增强class"></a>增强class</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法拦截器</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Callback<span class="token punctuation">[</span><span class="token punctuation">]</span> CALLBACKS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">BeanMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// @Bean方法拦截器</span>        <span class="token keyword">new</span> <span class="token class-name">BeanFactoryAwareMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// setBeanFactory方法拦截器</span>        NoOp<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法拦截器的匹配器，用于匹配class中的具体方法该使用上诉的某个具体拦截器</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ConditionalCallbackFilter CALLBACK_FILTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionalCallbackFilter</span><span class="token punctuation">(</span>CALLBACKS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 增强类内部新增的字段名（类型为BeanFactory）</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BEAN_FACTORY_FIELD <span class="token operator">=</span> <span class="token string">"$$beanFactory"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 增强后的@Configuration类会实现此接口，既是一种标记，也具备注入BeanFactory的能力 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EnhancedConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">BeanFactoryAware</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">enhance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> configClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否实现了EnhancedConfiguration接口，以此来判断是否已经增强</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>EnhancedConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Ignoring request to enhance %s as it has "</span> <span class="token operator">+</span>                    <span class="token string">"already been enhanced. This usually indicates that more than one "</span> <span class="token operator">+</span>                    <span class="token string">"ConfigurationClassPostProcessor has been registered (e.g. via "</span> <span class="token operator">+</span>                    <span class="token string">"&lt;context:annotation-config>). This is harmless, but you may "</span> <span class="token operator">+</span>                    <span class="token string">"want check your configuration and remove one CCPP if possible"</span><span class="token punctuation">,</span>                    configClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> configClass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开始增强</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> enhancedClass <span class="token operator">=</span> <span class="token function">createClass</span><span class="token punctuation">(</span><span class="token function">newEnhancer</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> enhancedClass<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 创建CGLIB Enhancer对象并配置参数 */</span><span class="token keyword">private</span> Enhancer <span class="token function">newEnhancer</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> configSuperClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>configSuperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置EnhancedConfiguration接口，这个也实现了BeanFactoryAware接口</span>    <span class="token comment" spellcheck="true">// 这样才能获得BeanFactory，让@Bean方法间的调用结果先从BeanFactory中取，维持单例</span>    enhancer<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> EnhancedConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    enhancer<span class="token punctuation">.</span><span class="token function">setUseFactory</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    enhancer<span class="token punctuation">.</span><span class="token function">setNamingPolicy</span><span class="token punctuation">(</span>SpringNamingPolicy<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自定义生成策略，注入BeanFactory字段（字段名就是$$beanFactory）</span>    enhancer<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanFactoryAwareGeneratorStrategy</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置拦截器（@Bean方法拦截器和BeanFactoryAware接口里的setBeanFactory方法拦截器）</span>    enhancer<span class="token punctuation">.</span><span class="token function">setCallbackFilter</span><span class="token punctuation">(</span>CALLBACK_FILTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    enhancer<span class="token punctuation">.</span><span class="token function">setCallbackTypes</span><span class="token punctuation">(</span>CALLBACK_FILTER<span class="token punctuation">.</span><span class="token function">getCallbackTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> enhancer<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BeanMethodInterceptor"><a href="#BeanMethodInterceptor" class="headerlink" title="BeanMethodInterceptor"></a>BeanMethodInterceptor</h4><p>​根据其isMatch方法可知其<strong>是一个专用于拦截 @Bean 方法调用的 CGLIB 方法拦截器</strong>，主要解决了以下两个问题：</p><blockquote><ol><li>避免每次调用 @Bean 方法都重复创建 bean 实例</li><li>支持 @Bean 方法之间的依赖注入（即<strong>方法之间互调不再是直接 new，而是走容器获取</strong>）</li></ol></blockquote><h5 id="核心执行流程"><a href="#核心执行流程" class="headerlink" title="核心执行流程"></a>核心执行流程</h5><ol><li>获取BeanFactoryAwareMethodInterceptor设置的BeanFactory</li><li>FactoryBean特殊处理</li><li><strong>判断是否是工厂方法正在被调用（即二次调用）：是为避免通过 getBean(beanName) 自身递归调用，必须直接调用原始方法体（即 super）执行实例化逻辑</strong></li><li>根据方法的参数，利用BeanFactory真正获取bean（使用的是sourceClass的工厂方法进行实例化）</li></ol><h5 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BeanMethodInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">,</span> ConditionalCallback <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object enhancedConfigInstance<span class="token punctuation">,</span> Method beanMethod<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> beanMethodArgs<span class="token punctuation">,</span>            MethodProxy cglibMethodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取 BeanFactory 实例（通过代理类中的字段注入）</span>        ConfigurableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span>enhancedConfigInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>        String beanName <span class="token operator">=</span> BeanAnnotationHelper<span class="token punctuation">.</span><span class="token function">determineBeanNameFor</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若是作用域代理（如 @Scope(proxyMode = TARGET_CLASS)），需要特殊处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>BeanAnnotationHelper<span class="token punctuation">.</span><span class="token function">isScopedProxy</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String scopedBeanName <span class="token operator">=</span> ScopedProxyCreator<span class="token punctuation">.</span><span class="token function">getTargetBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>scopedBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                beanName <span class="token operator">=</span> scopedBeanName<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 处理 FactoryBean 的特殊情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">factoryContainsBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> BeanFactory<span class="token punctuation">.</span>FACTORY_BEAN_PREFIX <span class="token operator">+</span> beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">factoryContainsBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object factoryBean <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>BeanFactory<span class="token punctuation">.</span>FACTORY_BEAN_PREFIX <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>factoryBean <span class="token keyword">instanceof</span> <span class="token class-name">ScopedProxyFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Scoped proxy factory beans are a special case and should not be further</span>                <span class="token comment" spellcheck="true">// proxied</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// It is a candidate FactoryBean - go ahead with enhancement</span>                <span class="token keyword">return</span> <span class="token function">enhanceFactoryBean</span><span class="token punctuation">(</span>factoryBean<span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 很重要</span>        <span class="token comment" spellcheck="true">// 判断当前是否正在通过本方法实例化 bean；如果是，为避免递归代理，直接执行原始方法体（super）创建实例</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCurrentlyInvokedFactoryMethod</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"@Bean method %s.%s is non-static and returns an object "</span> <span class="token operator">+</span>                        <span class="token string">"assignable to Spring's BeanFactoryPostProcessor interface. This will "</span> <span class="token operator">+</span>                        <span class="token string">"result in a failure to process annotations such as @Autowired, "</span> <span class="token operator">+</span>                        <span class="token string">"@Resource and @PostConstruct within the method's declaring "</span> <span class="token operator">+</span>                        <span class="token string">"@Configuration class. Add the 'static' modifier to this method to avoid "</span> <span class="token operator">+</span>                        <span class="token string">"these container lifecycle issues; see @Bean javadoc for complete details."</span><span class="token punctuation">,</span>                        beanMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> cglibMethodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>enhancedConfigInstance<span class="token punctuation">,</span> beanMethodArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从 BeanFactory 中解析目标 Bean 的引用，必要时传递参数</span>        <span class="token keyword">return</span> <span class="token function">resolveBeanReference</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">,</span> beanMethodArgs<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Object <span class="token function">resolveBeanReference</span><span class="token punctuation">(</span>Method beanMethod<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> beanMethodArgs<span class="token punctuation">,</span>            ConfigurableBeanFactory beanFactory<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> alreadyInCreation <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 防止循环依赖死锁：临时将当前 bean 标记为非创建中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>alreadyInCreation<span class="token punctuation">)</span> <span class="token punctuation">{</span>                beanFactory<span class="token punctuation">.</span><span class="token function">setCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">boolean</span> useArgs <span class="token operator">=</span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>beanMethodArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>useArgs <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Object arg <span class="token operator">:</span> beanMethodArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        useArgs <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 根据参数从容器中获取 Bean</span>            Object beanInstance <span class="token operator">=</span> <span class="token punctuation">(</span>useArgs <span class="token operator">?</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanMethodArgs<span class="token punctuation">)</span>                    <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 返回值不匹配，需要抛出异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isAssignableValue</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanInstance<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 兼容处理 Spring 的 NullBean</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>beanInstance<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"@Bean method %s.%s called as bean reference "</span> <span class="token operator">+</span>                                <span class="token string">"for type [%s] returned null bean; resolving to null value."</span><span class="token punctuation">,</span>                                beanMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    beanInstance <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 不为空抛异常</span>                    String msg <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"@Bean method %s.%s called as bean reference "</span> <span class="token operator">+</span>                            <span class="token string">"for type [%s] but overridden by non-compatible bean instance of type [%s]."</span><span class="token punctuation">,</span>                            beanMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        BeanDefinition beanDefinition <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getMergedBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        msg <span class="token operator">+=</span> <span class="token string">" Overriding bean of same name declared in: "</span> <span class="token operator">+</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 最后再注册依赖关系：当前 bean 被哪个外部工厂方法创建</span>            Method currentlyInvoked <span class="token operator">=</span> SimpleInstantiationStrategy<span class="token punctuation">.</span><span class="token function">getCurrentlyInvokedFactoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentlyInvoked <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String outerBeanName <span class="token operator">=</span> BeanAnnotationHelper<span class="token punctuation">.</span><span class="token function">determineBeanNameFor</span><span class="token punctuation">(</span>currentlyInvoked<span class="token punctuation">)</span><span class="token punctuation">;</span>                beanFactory<span class="token punctuation">.</span><span class="token function">registerDependentBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> outerBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>alreadyInCreation<span class="token punctuation">)</span> <span class="token punctuation">{</span>                beanFactory<span class="token punctuation">.</span><span class="token function">setCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BeanFactoryAwareMethodInterceptor"><a href="#BeanFactoryAwareMethodInterceptor" class="headerlink" title="BeanFactoryAwareMethodInterceptor"></a>BeanFactoryAwareMethodInterceptor</h4><p>​主要的作用是填充$$beanFactory字段</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactoryAwareMethodInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">,</span> ConditionalCallback <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Field field <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">findField</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BEAN_FACTORY_FIELD<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>field <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"Unable to find generated BeanFactory field"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将BeanFactoryAware接口传来的BeanFactory实例设置到内部新增的$$beanFactory字段上</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断SourceClass是否实现了BeanFactoryAware接口。如果也实现了，则再调用其setBeanFactory方法，将BeanFactory实例设置进去</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>BeanFactoryAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getUserClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>Method candidateMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">isSetBeanFactory</span><span class="token punctuation">(</span>candidateMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSetBeanFactory</span><span class="token punctuation">(</span>Method candidateMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>candidateMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"setBeanFactory"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                candidateMethod<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>                BeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> candidateMethod<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>                BeanFactoryAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>candidateMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="arthas反向验证"><a href="#arthas反向验证" class="headerlink" title="arthas反向验证"></a>arthas反向验证</h3><h4 id="full-class-demo"><a href="#full-class-demo" class="headerlink" title="full class demo"></a>full class demo</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationClassDemo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"initMethod"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> A <span class="token function">beanA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"initMethod"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> B <span class="token function">beanB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token function">beanA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">beanA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"impossible error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bean A initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bean B initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="arthas反编译后"><a href="#arthas反编译后" class="headerlink" title="arthas反编译后"></a>arthas反编译后</h4><p>只保留了关键代码，从反编译后的源码可进行上诉源码分析的验证：</p><ul><li>实现了ConfigurationClassEnhancer.EnhancedConfiguration接口</li><li>cglib代理，继承了原class</li><li>@Bean方法走的是CGLIB$CALLBACK_0，即BeanMethodInterceptor</li><li>setBeanFactory方法走的是CGLIB$CALLBACK_1，即BeanFactoryAwareMethodInterceptor</li><li>存在新增的$$beanFactory这个BeanFactory字段</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationClassDemo</span>$$EnhancerBySpringCGLIB$$988746da<span class="token keyword">extends</span> <span class="token class-name">ConfigurationClassDemo</span><span class="token keyword">implements</span> <span class="token class-name">ConfigurationClassEnhancer<span class="token punctuation">.</span>EnhancedConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// BeanMethodInterceptor</span>    <span class="token keyword">private</span> MethodInterceptor CGLIB$CALLBACK_0<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// BeanFactoryAwareMethodInterceptor</span>    <span class="token keyword">private</span> MethodInterceptor CGLIB$CALLBACK_1<span class="token punctuation">;</span>    <span class="token keyword">private</span> NoOp CGLIB$CALLBACK_2<span class="token punctuation">;</span>    <span class="token keyword">public</span> BeanFactory $$beanFactory<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ConfigurationClassDemo<span class="token punctuation">.</span>B <span class="token function">beanB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodInterceptor methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ConfigurationClassDemo$$EnhancerBySpringCGLIB$$988746da<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>ConfigurationClassDemo<span class="token punctuation">.</span>B<span class="token punctuation">)</span>methodInterceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CGLIB$beanB$<span class="token number">0</span>$Method<span class="token punctuation">,</span> CGLIB$emptyArgs<span class="token punctuation">,</span> CGLIB$beanB$<span class="token number">0</span>$Proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">beanB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ConfigurationClassDemo<span class="token punctuation">.</span>A <span class="token function">beanA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodInterceptor methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ConfigurationClassDemo$$EnhancerBySpringCGLIB$$988746da<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>ConfigurationClassDemo<span class="token punctuation">.</span>A<span class="token punctuation">)</span>methodInterceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CGLIB$beanA$<span class="token number">1</span>$Method<span class="token punctuation">,</span> CGLIB$emptyArgs<span class="token punctuation">,</span> CGLIB$beanA$<span class="token number">1</span>$Proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">beanA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span>BeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        MethodInterceptor methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_1<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ConfigurationClassDemo$$EnhancerBySpringCGLIB$$988746da<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object object <span class="token operator">=</span> methodInterceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CGLIB$setBeanFactory$<span class="token number">6</span>$Method<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>beanFactory<span class="token punctuation">}</span><span class="token punctuation">,</span> CGLIB$setBeanFactory$<span class="token number">6</span>$Proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>通过增强 Full 模式的 <code>@Configuration</code> 类</strong>，确保 <code>@Bean</code> 方法之间的调用不会绕过容器，而是始终返回容器中管理的单例 Bean，避免出现多个实例</li><li><strong>通过 <code>BeanFactoryAwareMethodInterceptor</code> 拦截器</strong>，使增强类持有 BeanFactory 的引用，为后续拦截器中从容器获取 Bean 提供支持</li><li><strong>通过 <code>BeanMethodInterceptor</code> 拦截器</strong>，拦截所有 <code>@Bean</code> 方法调用，并通过 BeanFactory 获取对应 Bean，从而确保每次调用返回的都是同一个（单例）实例</li></ul><p>总之，Full 模式的增强本质上是<strong>让配置类自身也成为容器管理的入口</strong>，避免“Java 方法调用”破坏了 Spring 的生命周期和作用域控制</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​通过整体的源码分析，可知ConfigurationClassPostProcessor是Spring注解驱动的核心，其内部的<strong>延迟机制、字节码解析优化和代理模型</strong>，是 Spring 保持灵活与健壮性的体现。 最后我再总结以下几个核心的问题</p><h3 id="ASM的使用"><a href="#ASM的使用" class="headerlink" title="ASM的使用"></a>ASM的使用</h3><ul><li><code>@ComponentScan</code> 扫描 class 文件时，使用 <strong>ASM 而不是反射</strong> 来提取类的元数据<ul><li>ASM 更高效，不会触发类的加载，避免了对未来可能不会用到的类进行 JVM 加载。</li><li>此阶段 Spring 尚未确定是否要注册这些类为 Bean，因此避免使用反射是出于性能和安全性的双重考量。</li></ul></li><li><code>@Bean</code> 方法也通过 ASM 解析为 <code>MethodMetadata</code> 对象：<ul><li>反射获取的方法列表顺序是不确定的，使用 ASM 能保留 <code>@Bean</code> 方法在 <code>.class</code> 文件中的<strong>定义顺序</strong></li></ul></li></ul><h3 id="DeferredImportSelector的作用"><a href="#DeferredImportSelector的作用" class="headerlink" title="DeferredImportSelector的作用"></a>DeferredImportSelector的作用</h3><p>​顾名思义，和延迟相关。<strong>是SpringBoot中自动配置的关键，确保了优先解析当前项目中所有的BeanDefinition，以达到覆盖SpringBoot中提供的默认Bean</strong>（比如，项目中配置了DataSource的BeanDefinition，这样Springboot提供的DataSourceAutoConfiguration中的DataSource则不会生效）</p><h3 id="full-configration-class的增强"><a href="#full-configration-class的增强" class="headerlink" title="full configration class的增强"></a>full configration class的增强</h3><p>​和lite configration class唯一的区别，就是<strong>full会被cglib增强，确保@Bean方法始终返回单例bean</strong>。所以，可以得出结论，<strong>如果配置类不使用 <code>@Bean</code> 方法，只做组件聚合，建议使用 <code>@Component</code> 而非 <code>@Configuration</code>，可节省 CGLIB 增强开销</strong></p><h3 id="Bean方法拦截获取bean如何避免循环调用"><a href="#Bean方法拦截获取bean如何避免循环调用" class="headerlink" title="@Bean方法拦截获取bean如何避免循环调用"></a>@Bean方法拦截获取bean如何避免循环调用</h3><p>​full中@Bean方法会走代理，代理内部会用BeanFactory.getBean()来真正获取bean，获取bean时最终又会走到@Bean代理方法。不怕死循环吗？</p><p>​其实不用担心，BeanFactory.getBean()来真正获取bean是用工厂方法来创建实例的，调用时会将此方法保存在当前线程的ThreadLocal里（SimpleInstantiationStrategy.currentlyInvokedFactoryMethod字段）。再<strong>第二次进入代理时会检查当前方法是否就是调用栈顶部的那个工厂方法，如果是，则绕开代理直接调用 <code>super</code> 方法生成实例。</strong> 这一机制确保了代理与容器实例化流程之间协同工作，不会引发死循环</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeanPostProcessor </tag>
            
            <tag> BeanDefinitionRegistryPostProcessor </tag>
            
            <tag> Configuration注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-其他重要的BeanPostProcesor</title>
      <link href="/2021-04-01/spring-qi-ta-chong-yao-de-beanpostprocesor/"/>
      <url>/2021-04-01/spring-qi-ta-chong-yao-de-beanpostprocesor/</url>
      
        <content type="html"><![CDATA[<hr><p>​AsyncAnnotationBeanPostProcessor和ScheduledAnnotationBeanPostProcessor源码解析</p><span id="more"></span><h1 id="Spring-其他重要的BeanPostProcesor"><a href="#Spring-其他重要的BeanPostProcesor" class="headerlink" title="Spring-其他重要的BeanPostProcesor"></a>Spring-其他重要的BeanPostProcesor</h1><h2 id="AsyncAnnotationBeanPostProcessor"><a href="#AsyncAnnotationBeanPostProcessor" class="headerlink" title="AsyncAnnotationBeanPostProcessor"></a>AsyncAnnotationBeanPostProcessor</h2><h3 id="EnableAsync"><a href="#EnableAsync" class="headerlink" title="@EnableAsync"></a>@EnableAsync</h3><p>​其主要功能是<strong>向容器中注册AsyncAnnotationBeanPostProcessor这个BeanDefinition，其继承了<a href="https://blog.shanzhao.site/2021/02/17/spring-abstractadvisingbeanpostprocessor/">AbstractBeanFactoryAwareAdvisingPostProcessor</a>，可以处理指定的Advisor以此实现@Async的代理，来开启异步</strong></p><p>主要属性</p><table><thead><tr><th align="left">属性</th><th>说明</th></tr></thead><tbody><tr><td align="left"><code>annotation</code></td><td>自定义的异步注解，可以用来定制化</td></tr><tr><td align="left"><code>proxyTargetClass</code></td><td>是否代理目标类。默认为false，即走jdk代理；为true则用cglib代理</td></tr><tr><td align="left"><code>mode</code></td><td>AOP 模式，取值有：<br/> <code>PROXY</code>（默认）：使用 Spring 的代理机制<br/> <code>ASPECTJ</code>：使用 AspectJ（需要额外依赖与编译时&#x2F;加载时织入配置）</td></tr><tr><td align="left"><code>order</code></td><td>AsyncAnnotationBeanPostProcessor的执行顺序，默认最后才执行</td></tr></tbody></table><h3 id="AsyncAnnotationAdvisor"><a href="#AsyncAnnotationAdvisor" class="headerlink" title="AsyncAnnotationAdvisor"></a>AsyncAnnotationAdvisor</h3><p>​在AsyncAnnotationBeanPostProcessor#setBeanFactory（bean初始化阶段的一个hook方法，用于给bean填充BeanFactory）中设置的Advisor</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncAnnotationAdvisor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPointcutAdvisor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryAware</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Advice advice<span class="token punctuation">;</span>    <span class="token keyword">private</span> Pointcut pointcut<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AsyncAnnotationAdvisor</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Nullable</span> Supplier<span class="token operator">&lt;</span>Executor<span class="token operator">></span> executor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Supplier<span class="token operator">&lt;</span>AsyncUncaughtExceptionHandler<span class="token operator">></span> exceptionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">>></span> asyncAnnotationTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 支持@Async</span>        asyncAnnotationTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Async<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 也支持EJB的@Asynchronous</span>            asyncAnnotationTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span><span class="token punctuation">)</span> ClassUtils<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.ejb.Asynchronous"</span><span class="token punctuation">,</span>                    AsyncAnnotationAdvisor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 类路径里不存在@javax.ejb.Asynchronous，也无所谓</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>advice <span class="token operator">=</span> <span class="token function">buildAdvice</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> exceptionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pointcut <span class="token operator">=</span> <span class="token function">buildPointcut</span><span class="token punctuation">(</span>asyncAnnotationTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 构建异步拦截器 Advice：用于真正执行异步调用逻辑     */</span>    <span class="token keyword">protected</span> Advice <span class="token function">buildAdvice</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Nullable</span> Supplier<span class="token operator">&lt;</span>Executor<span class="token operator">></span> executor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Supplier<span class="token operator">&lt;</span>AsyncUncaughtExceptionHandler<span class="token operator">></span> exceptionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationAsyncExecutionInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationAsyncExecutionInterceptor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> exceptionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将asyncAnnotationTypes所有注解构造成一个ComposablePointcut，只要class或method上存在任意一个asyncAnnotationType，即可进行代理     */</span>    <span class="token keyword">protected</span> Pointcut <span class="token function">buildPointcut</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">>></span> asyncAnnotationTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ComposablePointcut result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> asyncAnnotationType <span class="token operator">:</span> asyncAnnotationTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// AnnotationMatchingPointcut是用于注解进行匹配的Pointcut</span>            <span class="token comment" spellcheck="true">// cpc用于class匹配（只要class上存在asyncAnnotationType注解就行）</span>            Pointcut cpc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationMatchingPointcut</span><span class="token punctuation">(</span>asyncAnnotationType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// mpc用于方法匹配（只要method上存在asyncAnnotationType注解就行）</span>            Pointcut mpc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationMatchingPointcut</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> asyncAnnotationType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// ComposablePointcut为注解组合，或逻辑。只要内部的ClasaFilter匹配一个就为true。MethodMatcher匹配一个就为true</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComposablePointcut</span><span class="token punctuation">(</span>cpc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>cpc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>mpc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null <span class="token operator">?</span> result <span class="token operator">:</span> Pointcut<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AnnotationAsyncExecutionInterceptor"><a href="#AnnotationAsyncExecutionInterceptor" class="headerlink" title="AnnotationAsyncExecutionInterceptor"></a>AnnotationAsyncExecutionInterceptor</h3><p>​拦截器核心，用于解析指定的执行器，并异步执行目标方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationAsyncExecutionInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncExecutionInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">final</span> MethodInvocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> AopUtils<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Method specificMethod <span class="token operator">=</span> ClassUtils<span class="token punctuation">.</span><span class="token function">getMostSpecificMethod</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Method userDeclaredMethod <span class="token operator">=</span> BridgeMethodResolver<span class="token punctuation">.</span><span class="token function">findBridgedMethod</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据@Async的value来获取容器中对象的执行器，准备在这个Executor中执行代理逻辑</span>        AsyncTaskExecutor executor <span class="token operator">=</span> <span class="token function">determineAsyncExecutor</span><span class="token punctuation">(</span>userDeclaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                    <span class="token string">"No executor specified and no default executor set on AsyncExecutionInterceptor either"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 构建Callable</span>        Callable<span class="token operator">&lt;</span>Object<span class="token operator">></span> task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Object result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Future</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">handleError</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDeclaredMethod<span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">handleError</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> userDeclaredMethod<span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 提交任务到Executor中</span>        <span class="token keyword">return</span> <span class="token function">doSubmit</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  可知对于CompletableFuture，ListenableFuture，Future这三种返回值都是支持的，但对于其他返回值都直接返回null了     */</span>    <span class="token keyword">protected</span> Object <span class="token function">doSubmit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>Object<span class="token operator">></span> task<span class="token punctuation">,</span> AsyncTaskExecutor executor<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> returnType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CompletableFuture<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> task<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CompletionException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ListenableFuture<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AsyncListenableTaskExecutor<span class="token punctuation">)</span> executor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submitListenable</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Future<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>方法或类上只要存在@Async或@Asynchronous即可走异步</li><li>可使用@Async的value字段指定异步线程池（前提是要这个线程池在容器中）<ul><li>如未指定value，则使用容器中的AsyncConfigurer提供的Executor<ul><li>如果容器中没有AsyncConfigurer，则使用默认的SimpleAsyncTaskExecutor。其每次execute都会新开一个线程</li></ul></li></ul></li><li><strong>只支持CompletableFuture，ListenableFuture，Future这三种返回值</strong>。其余返回值都直接返回null</li><li><strong>异步切面会在这个方法中的所有切面里最先执行</strong>（因为其AsyncAnnotationBeanPostProcessor.beforeExistingAdvisors &#x3D; true）</li></ul><h2 id="ScheduledAnnotationBeanPostProcessor"><a href="#ScheduledAnnotationBeanPostProcessor" class="headerlink" title="ScheduledAnnotationBeanPostProcessor"></a>ScheduledAnnotationBeanPostProcessor</h2><h3 id="EnableScheduling"><a href="#EnableScheduling" class="headerlink" title="@EnableScheduling"></a>@EnableScheduling</h3><p>​向容器中注册ScheduledAnnotationBeanPostProcessor这个BeanDefinition，用于@Schedules和@Scheduled的解析和注册</p><h3 id="ScheduledAnnotationBeanPostProcessor-1"><a href="#ScheduledAnnotationBeanPostProcessor-1" class="headerlink" title="ScheduledAnnotationBeanPostProcessor"></a>ScheduledAnnotationBeanPostProcessor</h3><h4 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledAnnotationBeanPostProcessor</span>        <span class="token keyword">implements</span> <span class="token class-name">ScheduledTaskHolder</span><span class="token punctuation">,</span> MergedBeanDefinitionPostProcessor<span class="token punctuation">,</span> DestructionAwareBeanPostProcessor<span class="token punctuation">,</span>        Ordered<span class="token punctuation">,</span> EmbeddedValueResolverAware<span class="token punctuation">,</span> BeanNameAware<span class="token punctuation">,</span> BeanFactoryAware<span class="token punctuation">,</span> ApplicationContextAware<span class="token punctuation">,</span>        SmartInitializingSingleton<span class="token punctuation">,</span> ApplicationListener<span class="token operator">&lt;</span>ContextRefreshedEvent<span class="token operator">></span><span class="token punctuation">,</span> DisposableBean <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * bean初始化完成后的hook，只做定时任务的解析和封装，这里并不执行     */</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">AopInfrastructureBean</span> <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">TaskScheduler</span> <span class="token operator">||</span>                bean <span class="token keyword">instanceof</span> <span class="token class-name">ScheduledExecutorService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Ignore AOP infrastructure such as scoped proxies.</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">ultimateTargetClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>nonAnnotatedClasses<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析方法上的@Schedules和@Scheduled</span>            Map<span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Scheduled<span class="token operator">>></span> annotatedMethods <span class="token operator">=</span> MethodIntrospector<span class="token punctuation">.</span><span class="token function">selectMethods</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span>                    <span class="token punctuation">(</span>MethodIntrospector<span class="token punctuation">.</span>MetadataLookup<span class="token operator">&lt;</span>Set<span class="token operator">&lt;</span>Scheduled<span class="token operator">>></span><span class="token punctuation">)</span> method <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                        Set<span class="token operator">&lt;</span>Scheduled<span class="token operator">></span> scheduledMethods <span class="token operator">=</span> AnnotatedElementUtils<span class="token punctuation">.</span><span class="token function">getMergedRepeatableAnnotations</span><span class="token punctuation">(</span>                                method<span class="token punctuation">,</span> Scheduled<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Schedules<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>scheduledMethods<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> scheduledMethods <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>annotatedMethods<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>nonAnnotatedClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 存在注解，对每个定时任务方法进行处理</span>                annotatedMethods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> scheduledMethods<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> scheduledMethods                        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>scheduled <span class="token operator">-</span><span class="token operator">></span> <span class="token function">processScheduled</span><span class="token punctuation">(</span>scheduled<span class="token punctuation">,</span> method<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解析@Scheduled注解，可知其定时字段优先级：cron > fixedDelay > fixedDelayString > fixedRate > fixedRateString     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processScheduled</span><span class="token punctuation">(</span>Scheduled scheduled<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将方法封装为可直接运行的Runnable（方法不能有参数）</span>            Runnable runnable <span class="token operator">=</span> <span class="token function">createRunnable</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 是否已处理过（一个@Scheduled只能使用一个定时）</span>            <span class="token keyword">boolean</span> processedSchedule <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            String errorMessage <span class="token operator">=</span> <span class="token string">"Exactly one of the 'cron', 'fixedDelay(String)', or 'fixedRate(String)' attributes is required"</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>ScheduledTask<span class="token operator">></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析初始延时</span>            <span class="token keyword">long</span> initialDelay <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">initialDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String initialDelayString <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">initialDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>initialDelayString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>initialDelay <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Specify 'initialDelay' or 'initialDelayString', not both"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    initialDelayString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>initialDelayString<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>initialDelayString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        initialDelay <span class="token operator">=</span> <span class="token function">parseDelayAsLong</span><span class="token punctuation">(</span>initialDelayString<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                                <span class="token string">"Invalid initialDelayString value \""</span> <span class="token operator">+</span> initialDelayString                                        <span class="token operator">+</span> <span class="token string">"\" - cannot parse into long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 优先解析cron表达式</span>            String cron <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String zone <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">zone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cron <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">;</span>                    zone <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 校验cron不支持初始延时</span>                    Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>initialDelay <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"'initialDelay' not supported for cron triggers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Scheduled<span class="token punctuation">.</span>CRON_DISABLED<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        TimeZone timeZone<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            timeZone <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">parseTimeZoneString</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            timeZone <span class="token operator">=</span> TimeZone<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 构造为CronTask，先缓存起来</span>                        tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar                                <span class="token punctuation">.</span><span class="token function">scheduleCronTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CronTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span>cron<span class="token punctuation">,</span> timeZone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>initialDelay <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                initialDelay <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 解析固定周期</span>            <span class="token keyword">long</span> fixedDelay <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">fixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fixedDelay <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>                processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">scheduleFixedDelayTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedDelayTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> fixedDelay<span class="token punctuation">,</span> initialDelay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String fixedDelayString <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">fixedDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>fixedDelayString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fixedDelayString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>fixedDelayString<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>fixedDelayString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>                    processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        fixedDelay <span class="token operator">=</span> <span class="token function">parseDelayAsLong</span><span class="token punctuation">(</span>fixedDelayString<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                                <span class="token string">"Invalid fixedDelayString value \""</span> <span class="token operator">+</span> fixedDelayString <span class="token operator">+</span> <span class="token string">"\" - cannot parse into long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 构造为FixedDelayTask，先缓存起来</span>                    tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar                            <span class="token punctuation">.</span><span class="token function">scheduleFixedDelayTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedDelayTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> fixedDelay<span class="token punctuation">,</span> initialDelay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 最后才解析固定频率</span>            <span class="token keyword">long</span> fixedRate <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">fixedRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fixedRate <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>                processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">scheduleFixedRateTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedRateTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> fixedRate<span class="token punctuation">,</span> initialDelay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String fixedRateString <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">fixedRateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>fixedRateString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fixedRateString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>fixedRateString<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>fixedRateString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>                    processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        fixedRate <span class="token operator">=</span> <span class="token function">parseDelayAsLong</span><span class="token punctuation">(</span>fixedRateString<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                                <span class="token string">"Invalid fixedRateString value \""</span> <span class="token operator">+</span> fixedRateString <span class="token operator">+</span> <span class="token string">"\" - cannot parse into long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 构造为FixedRateTask，先缓存起来</span>                    tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">scheduleFixedRateTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedRateTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> fixedRate<span class="token punctuation">,</span> initialDelay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 校验使用了注解的必须有定时任务</span>            Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Finally register the scheduled tasks</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scheduledTasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Set<span class="token operator">&lt;</span>ScheduledTask<span class="token operator">></span> regTasks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledTasks<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> key <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                regTasks<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                    <span class="token string">"Encountered invalid @Scheduled method '"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"': "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * ContextRefreshed事件，表示容器刷新完毕，可以真正的注册定时任务了     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ContextRefreshedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">finishRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 开始真正的投递定时任务到线程池中。     * 定时线程池优先级：     * 1. scheduler     * 2. TaskScheduler(beanName为taskScheduler) bean     * 3. 任意TaskScheduler bean     * 4. ScheduledExecutorService(beanName为taskScheduler) bean     * 5. 任意ScheduledExecutorService bean     * 6. ScheduledThreadPoolExecutor（线程数为1）     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">finishRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scheduler <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">setScheduler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">ListableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> SchedulingConfigurer<span class="token operator">></span> beans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ListableBeanFactory<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>SchedulingConfigurer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>SchedulingConfigurer<span class="token operator">></span> configurers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>beans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            AnnotationAwareOrderComparator<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>SchedulingConfigurer configurer <span class="token operator">:</span> configurers<span class="token punctuation">)</span> <span class="token punctuation">{</span>                configurer<span class="token punctuation">.</span><span class="token function">configureTasks</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">hasTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"BeanFactory must be set to find scheduler by type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 先获取beanName为taskScheduler的TaskScheduler bean</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span><span class="token function">resolveSchedulerBean</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> TaskScheduler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoUniqueBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 再按class获取TaskScheduler bean</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span><span class="token function">resolveSchedulerBean</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> TaskScheduler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 再获取beanName为taskScheduler的ScheduledExecutorService bean</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">setScheduler</span><span class="token punctuation">(</span>                            <span class="token function">resolveSchedulerBean</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> ScheduledExecutorService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoUniqueBeanDefinitionException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 再按class获取ScheduledExecutorService bean</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">setScheduler</span><span class="token punctuation">(</span>                                <span class="token function">resolveSchedulerBean</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> ScheduledExecutorService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex3<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 到这了如果taskScheduler还没有，内部则会创建一个容量为1的ScheduledThreadPoolExecutor去执行定时任务</span>        <span class="token comment" spellcheck="true">// 将bean解析完成的所有定时任务投递到定时任务线程吃</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li>bean初始化完成后解析才@Scheduled和@Schedules（<strong>只是解析，并不投递），缓存到统一的ScheduledTaskRegistrar中</strong><ul><li>@Scheduled只能解析为一个定时任务，优先级：<ol><li>cron</li><li>fixedDelay</li><li>fixedDelayString</li><li>fixedRate</li><li>fixedRateString</li></ol></li><li>要定时成多个任务需要使用@Schedules</li></ul></li><li><strong>ContextRefreshedEvent事件触发，开始投递任务</strong><ul><li>先获取任务定时器，定时线程池优先级：<ol><li>ScheduledAnnotationBeanPostProcessor#scheduler（只能为TaskScheduler或ScheduledExecutorService的子类）</li><li>任意TaskScheduler  bean</li><li>TaskScheduler(beanName为taskScheduler)  bean</li><li>任意ScheduledExecutorService  bean</li><li>ScheduledExecutorService(beanName为taskScheduler)  bean</li><li><strong>ScheduledThreadPoolExecutor（线程数为1），即默认线程池</strong></li></ol></li><li>将解析阶段ScheduledTaskRegistrar内缓存的Task都投递到定时线程池中</li></ul></li><li>重点了解下<strong>cron，它会被封装为ReschedulingRunnable</strong>，每次执行完后才根据cron计算下一次任务的执行时间，这样循环动态的计算执行时间</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeanPostProcessor </tag>
            
            <tag> Async注解 </tag>
            
            <tag> Scheduled注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Transactional</title>
      <link href="/2021-02-23/spring-transactional/"/>
      <url>/2021-02-23/spring-transactional/</url>
      
        <content type="html"><![CDATA[<hr><p>​从<strong>源码分析了@Transactional的解析和切面使用流程</strong>。Spring事物如此复杂是因为不同的PROPAGATION有不同的策略，特别是在嵌套的流程中，所以<strong>重点分析了PlatformTransactionManager的事物获取流程，深入了解了PROPAGATION的实现</strong></p><span id="more"></span><h1 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h1><h2 id="EnableTransactionManagement"><a href="#EnableTransactionManagement" class="headerlink" title="@EnableTransactionManagement"></a>@EnableTransactionManagement</h2><p>​开启Spring基于注解的事务管理，其背后主要通过<strong>导入一个基础配置类 <code>ProxyTransactionManagementConfiguration</code></strong> 来实现核心功能。</p><p>该配置类定义并注册了事务功能所依赖的三个关键 Bean：</p><table><thead><tr><th>Bean 名称</th><th>作用概述</th></tr></thead><tbody><tr><td><strong>TransactionAttributeSource</strong></td><td>用于解析方法或类上的 <code>@Transactional</code> 注解，提取事务属性（如传播行为、回滚规则等）。默认实现为 <code>AnnotationTransactionAttributeSource</code>。</td></tr><tr><td><strong>TransactionInterceptor</strong></td><td>真正的事务拦截器，在目标方法执行前后进行事务管理操作（开启、提交、回滚等）。本质上是一个 <code>MethodInterceptor</code>。</td></tr><tr><td><strong>BeanFactoryTransactionAttributeSourceAdvisor</strong></td><td>是 Spring AOP 中的 <code>Advisor</code>，封装了 <code>TransactionAttributeSource</code> 和 <code>TransactionInterceptor</code>，通过切点判断哪些方法需要事务，并将拦截器应用到这些方法上。</td></tr></tbody></table><h2 id="BeanFactoryTransactionAttributeSourceAdvisor"><a href="#BeanFactoryTransactionAttributeSourceAdvisor" class="headerlink" title="BeanFactoryTransactionAttributeSourceAdvisor"></a>BeanFactoryTransactionAttributeSourceAdvisor</h2><p>​是一个PointcutAdvisor，既可以解析方法和类的注解事物信息，也能将真正的拦截器应用到代理中，实现注解事物的支持。</p><h3 id="TransactionAttributeSourcePointcut"><a href="#TransactionAttributeSourcePointcut" class="headerlink" title="TransactionAttributeSourcePointcut"></a>TransactionAttributeSourcePointcut</h3><p>​<code>TransactionAttributeSourcePointcut</code> 是 Spring 声明式事务机制中的关键组件之一，它继承自 <code>StaticMethodMatcherPointcut</code>，这是一个<strong>仅关注方法匹配、对类无过滤限制的 Pointcut 实现</strong>。</p><p>为什么这么设计？因为在事务注解的处理逻辑中</p><ul><li>是否应用事务主要取决于<strong>方法级别是否存在 <code>@Transactional</code> 注解</strong></li><li>若<strong>方法上无注解，才会回退查找类级别上的事务配置</strong></li><li>因此，从设计上讲，应该<strong>保留对所有类的匹配资格</strong>，不能在 <code>ClassFilter</code> 层面就提前“判死刑”</li></ul><p>换句话说，Spring 不会直接排除某些类，而是逐个方法检查是否具备事务属性，从而实现最大化的灵活性和兼容性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">StaticMethodMatcherPointcut</span> <span class="token keyword">extends</span> <span class="token class-name">StaticMethodMatcher</span> <span class="token keyword">implements</span> <span class="token class-name">Pointcut</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 始终匹配为true的ClassFilter</span>    <span class="token keyword">private</span> ClassFilter classFilter <span class="token operator">=</span> ClassFilter<span class="token punctuation">.</span>TRUE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClassFilter</span><span class="token punctuation">(</span>ClassFilter classFilter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>classFilter <span class="token operator">=</span> classFilter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ClassFilter <span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>classFilter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> MethodMatcher <span class="token function">getMethodMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法解析"><a href="#方法解析" class="headerlink" title="方法解析"></a>方法解析</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// === 排除掉一些不需要事务增强的内部类 ===</span>    <span class="token comment" spellcheck="true">// 例如事务代理自身、事务管理器、异常翻译器等，避免不必要的切面增强</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>TransactionalProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span> <span class="token operator">||</span>        PlatformTransactionManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span> <span class="token operator">||</span>        PersistenceExceptionTranslator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// === 通过 TransactionAttributeSource 判断该方法是否需要事务处理 ===</span>    <span class="token comment" spellcheck="true">// 如果解析不到事务属性（即无 @Transactional 注解），则不匹配</span>    TransactionAttributeSource tas <span class="token operator">=</span> <span class="token function">getTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>tas <span class="token operator">==</span> null <span class="token operator">||</span> tas<span class="token punctuation">.</span><span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TransactionAttributeSource"><a href="#TransactionAttributeSource" class="headerlink" title="TransactionAttributeSource"></a>TransactionAttributeSource</h3><p>​<code>TransactionAttributeSource</code> 是 Spring 中用于解析方法&#x2F;类上的事务注解的核心接口，Spring 的默认实现为 **<code>AnnotationTransactionAttributeSource</code>**。</p><p>它的作用是从方法或类中提取事务元信息，并将其封装为一个 <strong><code>TransactionAttribute</code></strong> 对象，供后续事务切面使用。</p><blockquote><p>支持的注解类型包括：</p><ul><li>Spring 自身的 <code>@org.springframework.transaction.annotation.Transactional</code></li><li>Java 标准的 <code>@javax.transaction.Transactional</code></li><li>EJB 标准的 <code>@javax.ejb.TransactionAttribute</code></li></ul></blockquote><p>​Spring 的 <code>@Transactional</code> 注解最终会被解析为一个 <strong><code>RuleBasedTransactionAttribute</code></strong> 对象，该对象包含了传播行为、隔离级别、超时、只读等完整事务配置。</p><h4 id="解析优先级"><a href="#解析优先级" class="headerlink" title="解析优先级"></a>解析优先级</h4><p>​在执行方法事务增强前，Spring 会根据如下顺序查找事务注解，<strong>一旦某一层找到了，就立即返回，停止继续向上查找</strong></p><ol><li><strong>目标类中“具体实现方法”上的注解</strong></li><li><strong>目标类上（Class级别）的注解</strong></li><li><strong>接口中定义的“方法”上的注解</strong></li><li><strong>接口自身（Class级别）的注解</strong></li></ol><h4 id="关键源码"><a href="#关键源码" class="headerlink" title="关键源码"></a>关键源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationTransactionAttributeSource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFallbackTransactionAttributeSource</span>        <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// javax.transaction.Transactional注解支持</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> jta12Present<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// javax.ejb.TransactionAttribute注解支持</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> ejb3Present<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        ClassLoader classLoader <span class="token operator">=</span> AnnotationTransactionAttributeSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jta12Present <span class="token operator">=</span> ClassUtils<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token string">"javax.transaction.Transactional"</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        ejb3Present <span class="token operator">=</span> ClassUtils<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token string">"javax.ejb.TransactionAttribute"</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 是否只代理public方法，默认为true</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> publicMethodsOnly<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 事物解析器，顺序有优先级</span>    <span class="token comment" spellcheck="true">// 1. SpringTransactionAnnotationParser (这个是一定会有的)</span>    <span class="token comment" spellcheck="true">// 2. JtaTransactionAnnotationParser（需要有javax.transaction.Transactional注解）</span>    <span class="token comment" spellcheck="true">// 3. Ejb3TransactionAnnotationParser（需要有javax.ejb.TransactionAttribute注解）</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>TransactionAnnotationParser<span class="token operator">></span> annotationParsers<span class="token punctuation">;</span>    <span class="token keyword">public</span> TransactionAttribute <span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 先看看有没有缓存</span>        Object cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        TransactionAttribute cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attributeCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// NULL_TRANSACTION_ATTRIBUTE表示无事物</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">==</span> NULL_TRANSACTION_ATTRIBUTE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> cached<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 事物信息查找</span>            TransactionAttribute txAttr <span class="token operator">=</span> <span class="token function">computeTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 缓存并返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>attributeCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> NULL_TRANSACTION_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                String methodIdentification <span class="token operator">=</span> ClassUtils<span class="token punctuation">.</span><span class="token function">getQualifiedMethodName</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token keyword">instanceof</span> <span class="token class-name">DefaultTransactionAttribute</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>DefaultTransactionAttribute<span class="token punctuation">)</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescriptor</span><span class="token punctuation">(</span>methodIdentification<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>                            <span class="token string">"Adding transactional method '"</span> <span class="token operator">+</span> methodIdentification <span class="token operator">+</span> <span class="token string">"' with attribute: "</span> <span class="token operator">+</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>attributeCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> TransactionAttribute <span class="token function">computeTransactionAttribute</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 默认非public方法不支持</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">allowPublicMethodsOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取最具体的方法（桥接方法处理），确保是目标类中的实现方法</span>        Method specificMethod <span class="token operator">=</span> AopUtils<span class="token punctuation">.</span><span class="token function">getMostSpecificMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先解析方法上的解析事务注解</span>        TransactionAttribute txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 方法上没有，在解析类上的事务注解</span>        txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> ClassUtils<span class="token punctuation">.</span><span class="token function">isUserLevelMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// === 此时 specificMethod ≠ method（说明原始 method 是接口定义） ===</span>        <span class="token comment" spellcheck="true">// 再尝试解析接口方法本身及其声明类（即接口）上的事务注解</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>specificMethod <span class="token operator">!=</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>            txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> ClassUtils<span class="token punctuation">.</span><span class="token function">isUserLevelMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TransactionInterceptor"><a href="#TransactionInterceptor" class="headerlink" title="TransactionInterceptor"></a>TransactionInterceptor</h3><p>​TransactionInterceptor 是用于处理声明式事务（@Transactional 注解）的 AOP 拦截器，<strong>本质上是一个环绕（Around）通知</strong>，拦截被 @Transactional 标注的方法。</p><p>​它自身并不直接实现事务的提交、回滚等核心逻辑，而是将这些操作委托给底层的PlatformTransactionManager 来完成。</p><h4 id="主要职责"><a href="#主要职责" class="headerlink" title="主要职责"></a>主要职责</h4><ul><li>从 TransactionAttributeSource 中获取事务属性（如传播行为、隔离级别、是否只读等）</li><li>调用 TransactionManager 获取或创建事务</li><li>执行目标方法，捕获异常判断是否回滚</li><li>正常返回时提交事务，异常时进行回滚</li><li>管理当前事务上下文（通过 ThreadLocal）以支持事务传播</li></ul><h4 id="关键源码-1"><a href="#关键源码-1" class="headerlink" title="关键源码"></a>关键源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionAspectSupport</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// =============== 父类TransactionAspectSupport中的字段 =================</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>TransactionInfo<span class="token operator">></span> transactionInfoHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>            <span class="token string">"Current aspect-driven transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * AOP拦截器核心逻辑：拦截事务方法，并根据事务配置（声明式 or 编程式）处理事务生命周期     */</span>    <span class="token keyword">protected</span> Object <span class="token function">invokeWithinTransaction</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">,</span>            <span class="token keyword">final</span> InvocationCallback invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        TransactionAttributeSource tas <span class="token operator">=</span> <span class="token function">getTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取事务属性</span>        <span class="token keyword">final</span> TransactionAttribute txAttr <span class="token operator">=</span> <span class="token punctuation">(</span>tas <span class="token operator">!=</span> null <span class="token operator">?</span> tas<span class="token punctuation">.</span><span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取beanFactory中的TransactionManager（可能是DataSourceTransactionManager、JtaTransactionManager等）</span>        <span class="token keyword">final</span> PlatformTransactionManager tm <span class="token operator">=</span> <span class="token function">determineTransactionManager</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构造方法唯一标识（例如：site.shanzhao.UserService.save）</span>        <span class="token keyword">final</span> String joinpointIdentification <span class="token operator">=</span> <span class="token function">methodIdentification</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声明式事务处理（@Transactional注解就走这）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>tm <span class="token keyword">instanceof</span> <span class="token class-name">CallbackPreferringPlatformTransactionManager</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建事务信息对象，必要时启动事务</span>            TransactionInfo txInfo <span class="token operator">=</span> <span class="token function">createTransactionIfNecessary</span><span class="token punctuation">(</span>tm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object retVal<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行被增强的方法</span>                retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceedWithInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 处理异常回滚</span>                <span class="token function">completeTransactionAfterThrowing</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 清理ThreadLocal中的事务信息</span>                <span class="token function">cleanupTransactionInfo</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 方法正常返回则提交事务</span>            <span class="token function">commitTransactionAfterReturning</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 编程式事务处理</span>            Object result<span class="token punctuation">;</span>            <span class="token keyword">final</span> ThrowableHolder throwableHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThrowableHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CallbackPreferringPlatformTransactionManager<span class="token punctuation">)</span> tm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">,</span> status <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    TransactionInfo txInfo <span class="token operator">=</span> <span class="token function">prepareTransactionInfo</span><span class="token punctuation">(</span>tm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceedWithInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr<span class="token punctuation">.</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">throw</span> <span class="token punctuation">(</span>RuntimeException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ThrowableHolderException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">=</span> ex<span class="token punctuation">;</span>                            <span class="token keyword">return</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token function">cleanupTransactionInfo</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ThrowableHolderException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSystemException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by commit exception"</span><span class="token punctuation">,</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ex2<span class="token punctuation">.</span><span class="token function">initApplicationException</span><span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by commit exception"</span><span class="token punctuation">,</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Check result state: It might indicate a Throwable to rethrow.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据事务属性创建事务（如果有必要）。     *     * - 若当前方法配置了事务属性（如 @Transactional），则获取事务管理器并尝试开启事务。     * - 若未指定事务名称，则使用方法签名作为事务名称（便于日志跟踪和调试）。     * - 最终返回一个封装了事务状态的 TransactionInfo 对象（用于后续提交或回滚处理）。     *     */</span>    <span class="token keyword">protected</span> TransactionInfo <span class="token function">createTransactionIfNecessary</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Nullable</span> PlatformTransactionManager tm<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> TransactionAttribute txAttr<span class="token punctuation">,</span>            <span class="token keyword">final</span> String joinpointIdentification<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果没有设置事务名称，则使用方法签名作为名称，并封装成 DelegatingTransactionAttribute。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> txAttr<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            txAttr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingTransactionAttribute</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> joinpointIdentification<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TransactionStatus status <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若存在事务属性，表示方法需要事务处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 调用事务管理器开启事务，返回事务状态（可能是新事务，也可能是参与已有事务）</span>                status <span class="token operator">=</span> tm<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 没有配置事务管理器，无法执行事务控制，打印调试日志</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Skipping transactional joinpoint ["</span> <span class="token operator">+</span> joinpointIdentification <span class="token operator">+</span>                            <span class="token string">"] because no transaction manager has been configured"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 构造 TransactionInfo 对象，并将其绑定到父类TransactionAspectSupport#ThreadLocal 中，</span>        <span class="token comment" spellcheck="true">// 用于在线程内部保存当前事务的上下文信息（如 TransactionStatus、事务属性等），</span>        <span class="token comment" spellcheck="true">// 以支持事务传播、回滚控制和资源清理等操作</span>        <span class="token keyword">return</span> <span class="token function">prepareTransactionInfo</span><span class="token punctuation">(</span>tm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在目标方法抛出异常后完成事务处理（回滚或提交）     *     * 该方法根据事务属性（如 @Transactional 中的 rollbackFor）判断是否需要回滚，     * 若不需要回滚则尝试提交（注意：提交时内部仍可能因为标记了 rollbackOnly 而实际执行回滚）。     *     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">completeTransactionAfterThrowing</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> TransactionInfo txInfo<span class="token punctuation">,</span> Throwable ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txInfo <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Completing transaction for ["</span> <span class="token operator">+</span> txInfo<span class="token punctuation">.</span><span class="token function">getJoinpointIdentification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                        <span class="token string">"] after exception: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span>transactionAttribute <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> txInfo<span class="token punctuation">.</span>transactionAttribute<span class="token punctuation">.</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 命中回滚异常，需要操作事务回滚</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    txInfo<span class="token punctuation">.</span><span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSystemException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by rollback exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ex2<span class="token punctuation">.</span><span class="token function">initApplicationException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by rollback exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 出现了异常但不需要回滚。则尝试commit（不一定真的会commit，内部还是可能根据rollbackOnly来判断是否rollback）</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    txInfo<span class="token punctuation">.</span><span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSystemException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by commit exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ex2<span class="token punctuation">.</span><span class="token function">initApplicationException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by commit exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h2><p>​PlatformTransactionManager <strong>抽象了事务的获取、提交、回滚</strong>，是 Spring 事务架构的核心入口。所有 @Transactional 的底层实现最终都依赖它完成真正的事务操作。基本<strong>实现类为DataSourceTransactionManager</strong>。</p><h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h3><p>​默认实现为DefaultTransactionStatus。<strong>每个@Transactional注解都会生成一个DefaultTransactionStatus，用于表示当前事物的允许状态</strong>。在事务执行流程中，它作为事务的运行时上下文贯穿始终，PlatformTransactionManager 对其进行更新和查询，以决定事务的提交、回滚及其他控制逻辑。</p><p>​<strong>其中的isNewTransaction()方法决定了当前@Transactional生成的事物是否有资格进行commit或rollback</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultTransactionStatus</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTransactionStatus</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 当前事务对象，一般为具体事务实现（如 DataSourceTransactionObject）。     *     * - 若当前方法运行在事务上下文中，则 非null；     * - 若未开启事务（如事务传播行为为 NOT_SUPPORTED），则为 null；     *     * 注意：即使在同一个物理事务中，每个 @Transactional 方法对应的 DefaultTransactionStatus 实例不同，     * 但它们内部的 transaction（如 ConnectionHolder）可能是同一个对象，表示共享同一底层连接。     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object transaction<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 是否是“新事务”的创建者。     *     * - true：当前方法通过传播行为触发了事务创建；     * - false：当前方法加入了已有事务；     *     * 注意：该值为 true 不等于事务实际存在，需结合 transaction 字段判断是否真有事务资源。     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> newTransaction<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 是否注册了 TransactionSynchronizationManager，同步管理器用于事务钩子（如 afterCommit）。     * 即是否是本方法负责事务同步的初始化（如绑定资源、触发同步回调）。     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> newSynchronization<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前事务是否只读，由 @Transactional 配置     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> readOnly<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前日志是否是debug等级以上     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> debug<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 很重要     * 如果当前事务为嵌套事务或需要挂起上一个事务，则用于保存被挂起的事务资源。     *     * 一般为 SuspendedResourcesHolder 类型，用于在当前事务完成后恢复之前的事务状态。     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object suspendedResources<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ============ 父类AbstractTransactionStatus中的字段 ============</span>    <span class="token comment" spellcheck="true">/**     * 标识当前事务是否被标记为回滚（通常通过 setRollbackOnly() 触发）。     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> rollbackOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前事务是否已完成（无论提交还是回滚）。     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> completed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用于保存事务的保存点（Savepoint），支持嵌套事务回滚。     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> Object savepoint<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 很重要的方法，决定了当前@Transactional生成的事物是否有资格进行commit或rollback     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNewTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">hasTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newTransaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataSourceTransactionManager"><a href="#DataSourceTransactionManager" class="headerlink" title="DataSourceTransactionManager"></a>DataSourceTransactionManager</h3><p>Spring 默认提供的基于 JDBC 数据源（<code>javax.sql.DataSource</code>）的 <code>PlatformTransactionManager</code> 实现</p><p>核心方法<code>getTransaction</code> 流程总结</p><ul><li>首先判断当前线程是否已绑定事务（即 <code>transactionActive</code> 状态）；若存在事务，则代表当前可能处于嵌套或参与中 事务的处理场景</li><li>根据 <code>TransactionDefinition</code> 中指定的事务传播行为（<code>PROPAGATION_*</code>）来决定事务处理策略：<ul><li>是否加入当前事务</li><li>是否挂起已有事务</li><li>是否开启新事务</li></ul></li><li>最终构建 <code>DefaultTransactionStatus</code> 实例，其中封装了当前事务的控制信息（如是否新建、是否可回滚、是否只读等）</li><li>如果事务被创建（非参与），还会：<ul><li>设置数据库连接的自动提交为 false</li><li>绑定资源到当前线程（ThreadLocal）</li><li>注册事务同步管理器（<code>TransactionSynchronizationManager</code>）以支持hook函数的调用（如 beforeCommit、afterCompletion 等）</li></ul></li></ul><h4 id="关键源码-2"><a href="#关键源码-2" class="headerlink" title="关键源码"></a>关键源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPlatformTransactionManager</span>        <span class="token keyword">implements</span> <span class="token class-name">ResourceTransactionManager</span><span class="token punctuation">,</span> InitializingBean <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 事物的获取（父类中AbstractPlatformTransactionManager的方法 ）     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> TransactionStatus <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> TransactionDefinition definition<span class="token punctuation">)</span>            <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取当前事务上下文对象，默认为 DataSourceTransactionObject</span>        <span class="token comment" spellcheck="true">// 初次进入时内部的 ConnectionHolder 为空（即还未绑定连接）</span>        Object transaction <span class="token operator">=</span> <span class="token function">doGetTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 缓存日志等级判断，避免多次调用 logger.isDebugEnabled()</span>        <span class="token keyword">boolean</span> debugEnabled <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若无自定义事务定义，使用默认配置（PROPAGATION_REQUIRED，ISOLATION_DEFAULT 等）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            definition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ========== 检查当前线程是否已存在事务 ========== //</span>        <span class="token comment" spellcheck="true">// 条件：当前线程绑定了 ConnectionHolder 且其 transactionActive = true</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isExistingTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 已存在事务，根据传播行为判断处理方式</span>            <span class="token keyword">return</span> <span class="token function">handleExistingTransaction</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ========== 走到这表示还没有事物，根据传播行为判断是否需要新建事务 ========== //</span>        <span class="token comment" spellcheck="true">// 超时时间校验：不能小于默认值（-1）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> TransactionDefinition<span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidTimeoutException</span><span class="token punctuation">(</span><span class="token string">"Invalid transaction timeout"</span><span class="token punctuation">,</span> definition<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ========== 根据事务传播行为做决策 ========== //</span>        <span class="token comment" spellcheck="true">// 传播行为为 MANDATORY，但当前又没有事务，抛出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_MANDATORY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>                    <span class="token string">"No existing transaction found for transaction marked with propagation 'mandatory'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 传播行为为 REQUIRED、REQUIRES_NEW、NESTED 都需要新建事务</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_REQUIRED <span class="token operator">||</span>                definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_REQUIRES_NEW <span class="token operator">||</span>                definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NESTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 先挂起当前事务（无事务时挂空）</span>            SuspendedResourcesHolder suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Creating new transaction with name ["</span> <span class="token operator">+</span> definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]: "</span> <span class="token operator">+</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断是否启用事务同步，默认是 true（除非设置为 NEVER）</span>                <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SYNCHRONIZATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 构建 DefaultTransactionStatus，封装事务上下文信息</span>                DefaultTransactionStatus status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>                        definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 初始化事务：如创建连接、设置隔离级别、timeout，并将资源绑定到当前线程</span>                <span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 注册事务同步器（如触发 beforeCommit、afterCompletion 等回调）</span>                <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 异常时恢复挂起的事务资源</span>                <span class="token function">resume</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 传播行为为 SUPPORTS、NOT_SUPPORTED、NEVER —— 不启动实际事务，只做同步处理（如果配置了）</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> TransactionDefinition<span class="token punctuation">.</span>ISOLATION_DEFAULT <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Custom isolation level specified but no actual transaction initiated; "</span> <span class="token operator">+</span>                        <span class="token string">"isolation level will effectively be ignored: "</span> <span class="token operator">+</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 是否启用事务同步，SYNCHRONIZATION_ALWAYS 时启用</span>            <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> SYNCHRONIZATION_ALWAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建一个“空事务”状态，主要用于注册同步器，但没有实际事务操作</span>            <span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> TransactionStatus <span class="token function">handleExistingTransaction</span><span class="token punctuation">(</span>            TransactionDefinition definition<span class="token punctuation">,</span> Object transaction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> debugEnabled<span class="token punctuation">)</span>            <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// NEVER：完全不支持事务，当前线程存在事务则抛异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NEVER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>                    <span class="token string">"Existing transaction found for transaction marked with propagation 'never'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// NOT_SUPPORTED：暂停（挂起）当前事务，然后以非事务的方式运行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NOT_SUPPORTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Suspending current transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Object suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> SYNCHRONIZATION_ALWAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>                    definition<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// REQUIRES_NEW：暂停当前事务，新开一个事务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_REQUIRES_NEW<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Suspending current transaction, creating new transaction with name ["</span> <span class="token operator">+</span>                        definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 暂停当前事务，方便之后还原</span>            SuspendedResourcesHolder suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SYNCHRONIZATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">;</span>                DefaultTransactionStatus status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>                        definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error beginEx<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resumeAfterBeginException</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">,</span> beginEx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> beginEx<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// NESTED：先判断是否允许嵌套事务（默认允许），然后优先通过数据库保存点（Savepoint）实现</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NESTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNestedTransactionAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NestedTransactionNotSupportedException</span><span class="token punctuation">(</span>                        <span class="token string">"Transaction manager does not allow nested transactions by default - "</span> <span class="token operator">+</span>                                <span class="token string">"specify 'nestedTransactionAllowed' property with value 'true'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Creating nested transaction with name ["</span> <span class="token operator">+</span> definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">useSavepointForNestedTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 默认走这，使用数据库Savepoint模拟嵌套事务</span>                DefaultTransactionStatus status <span class="token operator">=</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        debugEnabled<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                status<span class="token punctuation">.</span><span class="token function">createAndHoldSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 少数情况使用真正的嵌套事务，如JTA中可能嵌套 begin/commit 调用</span>                <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SYNCHRONIZATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">;</span>                DefaultTransactionStatus status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>                        definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED.</span>        <span class="token comment" spellcheck="true">// 传播策略为SUPPORTS 或 REQUIRED 或 MANDATORY</span>        <span class="token comment" spellcheck="true">// 这三个对已存在的事务处理方式是一致的，啥也不做，也就是直接加入已存在的事务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Participating in existing transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValidateExistingTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 校验当前传播策略的隔离等级和是否只读与已存在的事务是否一致，不过默认不校验。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> TransactionDefinition<span class="token punctuation">.</span>ISOLATION_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Integer currentIsolationLevel <span class="token operator">=</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">getCurrentTransactionIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>currentIsolationLevel <span class="token operator">==</span> null <span class="token operator">||</span> currentIsolationLevel <span class="token operator">!=</span> definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Constants isoConstants <span class="token operator">=</span> DefaultTransactionDefinition<span class="token punctuation">.</span>constants<span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span><span class="token string">"Participating transaction with definition ["</span> <span class="token operator">+</span>                            definition <span class="token operator">+</span> <span class="token string">"] specifies isolation level which is incompatible with existing transaction: "</span>                            <span class="token operator">+</span>                            <span class="token punctuation">(</span>currentIsolationLevel <span class="token operator">!=</span> null                                    <span class="token operator">?</span> isoConstants<span class="token punctuation">.</span><span class="token function">toCode</span><span class="token punctuation">(</span>currentIsolationLevel<span class="token punctuation">,</span>                                            DefaultTransactionDefinition<span class="token punctuation">.</span>PREFIX_ISOLATION<span class="token punctuation">)</span>                                    <span class="token operator">:</span> <span class="token string">"(unknown)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 校验只读属性</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>definition<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">isCurrentTransactionReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span><span class="token string">"Participating transaction with definition ["</span> <span class="token operator">+</span>                            definition <span class="token operator">+</span> <span class="token string">"] is not marked as read-only but existing transaction is"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建事务状态对象，参与已存在事务</span>        <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SYNCHRONIZATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 开启事物     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doBegin</span><span class="token punctuation">(</span>Object transaction<span class="token punctuation">,</span> TransactionDefinition definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DataSourceTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>DataSourceTransactionObject<span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 是否需要新建 Connection：满足任意一个条件即可</span>            <span class="token comment" spellcheck="true">// 1. 当前没有 ConnectionHolder（首次创建事务）</span>            <span class="token comment" spellcheck="true">// 2. 当前 ConnectionHolder 已参与过其他事务（如嵌套事务 REQUIRES_NEW 中旧连接已同步过）。此时不能复用旧连接，必须重新获取</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>txObject<span class="token punctuation">.</span><span class="token function">hasConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>                    txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Connection newCon <span class="token operator">=</span> <span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Acquired Connection ["</span> <span class="token operator">+</span> newCon <span class="token operator">+</span> <span class="token string">"] for JDBC transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectionHolder</span><span class="token punctuation">(</span>newCon<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 标记当前连接已参与事务同步</span>            txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 根据事务定义设置隔离级别，并记录旧值，事务完成后会恢复</span>            Integer previousIsolationLevel <span class="token operator">=</span> DataSourceUtils<span class="token punctuation">.</span><span class="token function">prepareConnectionForTransaction</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            txObject<span class="token punctuation">.</span><span class="token function">setPreviousIsolationLevel</span><span class="token punctuation">(</span>previousIsolationLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当前Connection设为手动提交。此时把事物提交的控制权交给了Spring</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                txObject<span class="token punctuation">.</span><span class="token function">setMustRestoreAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Switching JDBC Connection ["</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">"] to manual commit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// readOnly 设置</span>            <span class="token function">prepareTransactionalConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 标记事务为“激活”状态（事务已开启）</span>            txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTransactionActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置事务超时时间（单位：秒）</span>            <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token function">determineTimeout</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> TransactionDefinition<span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTimeoutInSeconds</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将当前 ConnectionHolder 绑定到线程上下文中（核心 ThreadLocal 操作）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果创建连接过程中出现异常，释放资源并清理 ConnectionHolder</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                DataSourceUtils<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> <span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CannotCreateTransactionException</span><span class="token punctuation">(</span><span class="token string">"Could not open JDBC Connection for transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 事物的commit判断，根据rollbackOnly字段也可能走rollback。（父类中AbstractPlatformTransactionManager的方法）     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 事务已完成（提交或回滚），不允许再次提交或回滚，属于非法状态</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>                    <span class="token string">"Transaction is already completed - do not call commit or rollback more than once per transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        DefaultTransactionStatus defStatus <span class="token operator">=</span> <span class="token punctuation">(</span>DefaultTransactionStatus<span class="token punctuation">)</span> status<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 标记为rollbackOnly的走强制回滚</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>defStatus<span class="token punctuation">.</span><span class="token function">isLocalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>defStatus<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Transactional code has requested rollback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">processRollback</span><span class="token punctuation">(</span>defStatus<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">shouldCommitOnGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> defStatus<span class="token punctuation">.</span><span class="token function">isGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前事务被标记为全局回滚，说明内部事务标记为回滚，但外层需要commit。</span>            <span class="token comment" spellcheck="true">// 所以会先回滚，再抛UnexpectedRollbackException异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>defStatus<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Global transaction is marked as rollback-only but transactional code requested commit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 出现了意外（外层commit，但内层rollback）unexpected为true</span>            <span class="token function">processRollback</span><span class="token punctuation">(</span>defStatus<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 正常事务提交流程</span>        <span class="token comment" spellcheck="true">// 1. 调用 beforeCommit 和 beforeCompletion 钩子</span>        <span class="token comment" spellcheck="true">// 2. 如果存在保存点（Savepoint）则处理嵌套事务</span>        <span class="token comment" spellcheck="true">// 3. 真正调用底层数据库事务管理器进行提交</span>        <span class="token comment" spellcheck="true">// 4. 调用 afterCommit 和 afterCompletion 钩子</span>        <span class="token comment" spellcheck="true">// 5. 捕获并处理提交中的异常</span>        <span class="token function">processCommit</span><span class="token punctuation">(</span>defStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PROPAGATION总结"><a href="#PROPAGATION总结" class="headerlink" title="PROPAGATION总结"></a>PROPAGATION总结</h4><blockquote><ol><li><p><strong>肯定派，必须存在事务</strong></p><table><thead><tr><th>传播行为</th><th>说明</th></tr></thead><tbody><tr><td><code>PROPAGATION_REQUIRED</code> （默认）</td><td>不存在就新建，存在就加入</td></tr><tr><td><code>PROPAGATION_REQUIRES_NEW</code></td><td><strong>始终新建一个事务，且与旧事物完全隔离</strong>。也就至少有两此commit或rollback。存在原事务时会将原事务封装为SuspendedResourcesHolder，再重新获取一个新的数据库连接开启事务，等这个新事物运行完，再把SuspendedResourcesHolder复原</td></tr><tr><td><code>PROPAGATION_NESTED</code></td><td>不存在就新建，存在就新开一个嵌套的事务。（先检查<strong>nestedTransactionAllowed，为false就抛异常了，代表不支持嵌套事务。不过默认为true</strong>。）和PROPAGATION_REQUIRES_NEW的区别在于这是用数据库的Savepoint实现，至始至终只会存在一个事务，如果当前回滚，也只会退回到Savepoint，不会对外层的事务造成影响，如果都能提交，最终也<strong>只有一次真正的事务commit</strong>。所以，注册的TransactionSynchronization hook函数也只会等待整个事务的结束来回调。如果不支持安全点（JTA），那实现就完全等于PROPAGATION_REQUIRES_NEW</td></tr><tr><td><code>PROPAGATION_MANDATORY</code></td><td>支持已存在的事务，<strong>不存在则直接抛异常</strong></td></tr></tbody></table></li><li><p><strong>中立派，不一定有事务</strong></p><table><thead><tr><th>传播行为</th><th>说明</th></tr></thead><tbody><tr><td><code>PROPAGATION_SUPPORTS</code></td><td>源码中并没有处理这种的传播策略。所以，它的作用是：存在事务就加入，不存在就以非事务的方式运行</td></tr></tbody></table></li><li><p><strong>否定派，不支持事务</strong></p><table><thead><tr><th>传播行为</th><th>说明</th></tr></thead><tbody><tr><td><code>PROPAGATION_NOT_SUPPORTED</code></td><td>以非事务的方式运行（<strong>有事务就暂停事务，重新获取一个没有事物的Connection使用</strong>。没有就啥也不做），实现和上面的差不多。<strong>但默认仍会注册事物同步器，让当前这个事物始终用同一个Connection</strong></td></tr><tr><td><code>PROPAGATION_NEVER</code></td><td>强制性的不支持事务，要是当前存在事务，就直接抛异常</td></tr></tbody></table></li></ol></blockquote><h2 id="TransactionSynchronizationManager"><a href="#TransactionSynchronizationManager" class="headerlink" title="TransactionSynchronizationManager"></a>TransactionSynchronizationManager</h2><p>​是Spring事物体系中的一个辅助工具，维护线程级事务上下文信息，保证事务行为在多层调用、事务传播、资源管理等场景中保持一致。</p><p>Spring 的事务是<strong>通过 AOP 管理的跨方法事务逻辑</strong>。Spring 需要有个<strong>全局但又线程安全的上下文</strong>去维护事务信息。如果没有它，则：</p><ul><li><p>不同方法无法共享事务资源（比如同一个 JDBC Connection）</p></li><li><p>无法实现事务传播（比如事务嵌套时决定是否复用原事务）</p></li><li><p>无法注册和触发事务的生命周期回调（如 <code>beforeCommit</code>、<code>afterCompletion</code>）</p></li></ul><h3 id="关键字段"><a href="#关键字段" class="headerlink" title="关键字段"></a>关键字段</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TransactionSynchronizationManager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 绑定到当前线程的资源，比如数据库连接（key 为 DataSource ，value 为ConnectionHolder）</span>    <span class="token comment" spellcheck="true">// Spring 在事务开始时绑定，在事务完成后解除绑定。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">>></span> resources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Transactional resources"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前线程注册的事务同步器集合（TransactionSynchronization），</span>    <span class="token comment" spellcheck="true">// 用于在事务生命周期各个阶段（如提交前、提交后、回滚后）执行hook回调。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Set<span class="token operator">&lt;</span>TransactionSynchronization<span class="token operator">>></span> synchronizations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>            <span class="token string">"Transaction synchronizations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前事务的名称（来自 TransactionDefinition#getName），通常用于日志记录和调试。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> currentTransactionName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>            <span class="token string">"Current transaction name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前事务是否被声明为只读，影响底层连接是否设置为只读模式（如 Connection#setReadOnly(true)）。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> currentTransactionReadOnly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>            <span class="token string">"Current transaction read-only status"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前事务的隔离级别（来自 TransactionDefinition）</span>    <span class="token comment" spellcheck="true">// 决定数据库访问的一致性级别，例如 READ_COMMITTED、REPEATABLE_READ 等。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Integer<span class="token operator">></span> currentTransactionIsolationLevel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>            <span class="token string">"Current transaction isolation level"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前事物是否被激活（即运行在有事物的情况下），不一定有commit或rollback的资格</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> actualTransactionActive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>            <span class="token string">"Actual transaction active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DataSourceUtils"><a href="#DataSourceUtils" class="headerlink" title="DataSourceUtils"></a>DataSourceUtils</h2><p>​前面我们分析了 Spring 事务的整体流程，但还有1个关键问题：<strong>在实际项目中，Spring 很少直接作为持久化框架，MyBatis、Hibernate 等才是执行数据库操作的主力</strong>。那么事务是 Spring 管的，数据库连接却是由 MyBatis 获取的，<strong>两者如何协同？</strong></p><p>这就引出了 <code>DataSourceUtils</code> 的作用：<strong>为持久层框架提供“Spring 管控下的连接”</strong>，确保它们获取到的 <code>Connection</code> 是当前事务中绑定的那个，这样事务控制（包括 commit&#x2F;rollback）才能正确生效。</p><h3 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceUtils</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">doGetConnection</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token string">"No DataSource specified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 尝试从 TransactionSynchronizationManager 中获取线程绑定的 ConnectionHolder</span>        <span class="token comment" spellcheck="true">// 只要TransactionSynchronizationManager.isSynchronizationActive()，都应该获取的是同一个ConnectionHolder</span>        ConnectionHolder conHolder <span class="token operator">=</span> <span class="token punctuation">(</span>ConnectionHolder<span class="token punctuation">)</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 如果当前线程中存在已关联的 ConnectionHolder 且已经持有连接，或者它被事务标记为已同步</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conHolder <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>conHolder<span class="token punctuation">.</span><span class="token function">hasConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> conHolder<span class="token punctuation">.</span><span class="token function">isSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 引用计数</span>            conHolder<span class="token punctuation">.</span><span class="token function">requested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果还没有设置具体的连接，则新建连接并设置到 holder 中（resume 的场景）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conHolder<span class="token punctuation">.</span><span class="token function">hasConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Fetching resumed JDBC Connection from DataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                conHolder<span class="token punctuation">.</span><span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token function">fetchConnection</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> conHolder<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// =============== 否则：没有事务，或没有绑定连接的事务 ==================</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Fetching JDBC Connection from DataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 获取一个新的物理连接（不在事务中或事务尚未绑定连接）</span>        Connection con <span class="token operator">=</span> <span class="token function">fetchConnection</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果当前事物的事物同步器被激活，则将上面获取的Connection也绑定到事物资源里。让当前事物始终用用一个Connection</span>        <span class="token comment" spellcheck="true">// 就算当前事物是NOT_SUPPORTED，默认也会缓存ConnectionHolder</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">isSynchronizationActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                ConnectionHolder holderToUse <span class="token operator">=</span> conHolder<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>holderToUse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    holderToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionHolder</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    holderToUse<span class="token punctuation">.</span><span class="token function">setConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                holderToUse<span class="token punctuation">.</span><span class="token function">requested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 注册一个事物同步器用于hook</span>                TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">registerSynchronization</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">ConnectionSynchronization</span><span class="token punctuation">(</span>holderToUse<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 标记该连接已参与事务同步</span>                holderToUse<span class="token punctuation">.</span><span class="token function">setSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 第一次调用时才绑定：DataSource -> ConnectionHolder</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>holderToUse <span class="token operator">!=</span> conHolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> holderToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">releaseConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> con<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Transactional注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-AbstractAdvisingBeanPostProcessor</title>
      <link href="/2021-02-17/spring-abstractadvisingbeanpostprocessor/"/>
      <url>/2021-02-17/spring-abstractadvisingbeanpostprocessor/</url>
      
        <content type="html"><![CDATA[<hr><p>​从源码分析了AbstractAdvisingBeanPostProcessor的作用，以及和直接将Advisor注入到容器中使用的区别</p><span id="more"></span><h1 id="Spring-AbstractAdvisingBeanPostProcessor"><a href="#Spring-AbstractAdvisingBeanPostProcessor" class="headerlink" title="Spring-AbstractAdvisingBeanPostProcessor"></a>Spring-AbstractAdvisingBeanPostProcessor</h1><p>​<a href="https://blog.shanzhao.site/2021/02/08/spring-aop/">上一篇注解的切面自动代理</a></p><p>​简单来说<strong>这是一个用于将固定 <code>Advisor</code> 应用于 Bean 的通用基类</strong>，常用于实现基于注解的 AOP 功能（如异步、Validate）。核心子类有</p><ul><li><strong>AsyncAnnotationBeanPostProcessor</strong>：处理标注了 <code>@Async</code> 的方法，将其在调用时提交到线程池异步执行</li><li><strong>MethodValidationPostProcessor</strong>：支持 <code>@Validated</code> 注解，拦截方法调用并对方法参数和返回值执行 JSR-303 Bean Validation</li></ul><h2 id="核心作用"><a href="#核心作用" class="headerlink" title="核心作用"></a>核心作用</h2><ul><li>该类允许你通过定义一个固定的 <code>Advisor</code>（通过其 <code>advisor</code> 字段）来对目标 Bean 进行增强。</li><li><strong>并不主动创建代理</strong>（<strong>因为AnnotationAwareAspectJAutoProxyCreator具有最高的优先级，会最先对bean进行代理</strong>），而是<strong>在 Bean 已被代理的情况下</strong>，将该 <code>Advisor</code> 添加到现有的代理中，从而实现功能增强。</li></ul><p>​不主动创建代理是很好理解的，<strong>Spring 不希望对同一个 Bean 多次生成代理类（多个 CGLIB class 文件或多个 JDK proxy 实例），这不仅浪费资源，还会引发增强混乱</strong>。因此：</p><ul><li>Spring 通过设置 <code>AnnotationAwareAspectJAutoProxyCreator</code> 的最高优先级，<strong>统一负责生成代理对象</strong>。</li><li>后续如 <code>AsyncAnnotationBeanPostProcessor</code>、<code>MethodValidationPostProcessor</code> 等，只需<strong>向已创建的代理对象添加 Advisor</strong>，即向其 <code>AdvisedSupport#advisors</code> 中追加增强逻辑。</li><li>最终所有增强统一挂载在一个代理对象上，<strong>避免了重复代理、类污染与不必要的性能开销</strong>。</li></ul><h2 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAdvisingBeanPostProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">ProxyProcessorSupport</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 由子类设置的Advisot</span>    <span class="token keyword">protected</span> Advisor advisor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否需要将advisor放在整个代理链的最前，以达到最先执行的目的</span>    <span class="token comment" spellcheck="true">// 很有用，@Async会设置成true，从而让异步在第一个切面就开启，避免代理链在不同线程间切换</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> beforeExistingAdvisors <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// bean 初始化后的hook</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisor <span class="token operator">==</span> null <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">AopInfrastructureBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Ignore AOP infrastructure such as scoped proxies.</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断当前的bean是否已经是个代理类了</span>        <span class="token comment" spellcheck="true">// 已经是代理类的bean，就不需要再重新创建proxy，直接用现有的，把advisor加入到list中就行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">Advised</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Advised advised <span class="token operator">=</span> <span class="token punctuation">(</span>Advised<span class="token punctuation">)</span> bean<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 只有再当前proxy未frozen的情况下，且原始bean支持被代理才需要增强</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>advised<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isEligible</span><span class="token punctuation">(</span>AopUtils<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beforeExistingAdvisors<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 放最前面，最先执行</span>                    advised<span class="token punctuation">.</span><span class="token function">addAdvisor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 否则放最后</span>                    advised<span class="token punctuation">.</span><span class="token function">addAdvisor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> bean<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ======== 走到这表示这个bean没被代理或代理已被冻结，新开一个代理再包装这个bean，可能造成层层代理 =============</span>        <span class="token comment" spellcheck="true">// 判断当前的advisor能否对这个bean增强</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEligible</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ProxyFactory proxyFactory <span class="token operator">=</span> <span class="token function">prepareProxyFactory</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>proxyFactory<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">evaluateProxyInterfaces</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            proxyFactory<span class="token punctuation">.</span><span class="token function">addAdvisor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">customizeProxyFactory</span><span class="token punctuation">(</span>proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> proxyFactory<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token function">getProxyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// No proxy needed.</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 也很重要，它默认还是用AopUtils#canApply来判断能否代理这个bean</span>    <span class="token comment" spellcheck="true">// 但子类可以实现它，自定义的来判断能否代理bean</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isEligible</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">isEligible</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一点思考"><a href="#一点思考" class="headerlink" title="一点思考"></a>一点思考</h2><p>​其实向容器中注册一个Advisor也能达到和AbstractAdvisingBeanPostProcessor一样的目的，还更简单点。那为什么还要有AbstractAdvisingBeanPostProcessor呢？</p><p>​因为向容器中注册一个Advisor需要依赖自动代理，即<strong>AnnotationAwareAspectJAutoProxyCreator。这个BeanPostProcessor是比较重的，功能更强也意味着更复杂</strong>。如果我们完全不需要注解式的自动代理，而只需要对某个注解（如@Async）进行代理，那实现AbstractAdvisingBeanPostProcessor是更好的选择，<strong>它不依赖自动代理，独自就能完成指定Advisor的代理，更轻</strong></p><p>​所以，总结AbstractAdvisingBeanPostProcessor的优势：</p><ul><li><strong>不依赖自动代理器</strong>：它本身就是一个 BeanPostProcessor，可以独立完成代理创建</li><li><strong>只处理特定目标</strong>：可以通过内部的 <code>isEligible()</code> 方法自定义增强对象的筛选逻辑</li><li><strong>避免过度代理</strong>：避免引入全局自动代理，减少对容器中其他 bean 的干扰</li><li><strong>具备顺序控制能力</strong>：如 @Async 会将自身的 Advisor 放到代理链最前面，确保异步逻辑在最早执行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeanPostProcessor </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-AOP</title>
      <link href="/2021-02-08/spring-aop/"/>
      <url>/2021-02-08/spring-aop/</url>
      
        <content type="html"><![CDATA[<p>​从源码分析了Spring AOP的实现逻辑，以及利用arthas对代理class进行反编译以更加清晰的理解源码流程</p><span id="more"></span><h2 id="Spring-AOP源码解析"><a href="#Spring-AOP源码解析" class="headerlink" title="Spring-AOP源码解析"></a>Spring-AOP源码解析</h2><h2 id="EnableAspectJAutoProxy"><a href="#EnableAspectJAutoProxy" class="headerlink" title="@EnableAspectJAutoProxy"></a>@EnableAspectJAutoProxy</h2><p>​其主要功能是<strong>向容器中注册AnnotationAwareAspectJAutoProxyCreator这个BeanDefinition，以此实现基于以下注解的代理功能</strong></p><table><thead><tr><th align="left">注解名</th><th>说明</th></tr></thead><tbody><tr><td align="left"><code>@Aspect</code></td><td>声明一个类是切面类</td></tr><tr><td align="left"><code>@Before</code></td><td>前置通知，目标方法执行前执行</td></tr><tr><td align="left"><code>@After</code></td><td>后置通知，目标方法执行后执行（无论是否异常）</td></tr><tr><td align="left"><code>@AfterReturning</code></td><td>返回通知，目标方法<strong>正常返回</strong>后执行</td></tr><tr><td align="left"><code>@AfterThrowing</code></td><td>异常通知，目标方法<strong>抛出异常</strong>时执行</td></tr><tr><td align="left"><code>@Around</code></td><td>环绕通知，<strong>完全控制目标方法执行的时机</strong>，可决定是否继续执行目标方法</td></tr><tr><td align="left"><code>@Pointcut</code></td><td>定义可复用的切点表达式，供上述注解引用</td></tr></tbody></table><h2 id="AnnotationAwareAspectJAutoProxyCreator"><a href="#AnnotationAwareAspectJAutoProxyCreator" class="headerlink" title="AnnotationAwareAspectJAutoProxyCreator"></a>AnnotationAwareAspectJAutoProxyCreator</h2><p>​Spring实现自动装配动态代理的Bean后置处理器，具有<strong>最高的执行优先级</strong>（表示是最先被执行的BeanPostProcessor。设置最高优先级的代码在org.springframework.aop.config.AopConfigUtils#registerOrEscalateApcAsRequired中）</p><h3 id="wrapIfNecessary"><a href="#wrapIfNecessary" class="headerlink" title="wrapIfNecessary"></a>wrapIfNecessary</h3><p>​bean进行包装（增强）的入口，它会在如下两个地方被调用</p><ul><li>postProcessAfterInitialization：常规的的bean初始化完成后hook，需要对bean进行代理并返回给容器</li><li>getEarlyBeanReference：针对循环依赖需要提前获取bean的引用。Spring 会在三级缓存中暴露“早期对象引用”。如果此 bean 需要 AOP，必须在这个阶段就包上代理，否则依赖方会拿到原始对象，导致切面失效。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> Object cacheKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 已经处理过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetSourcedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 无需增强的bean缓存判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 是一个基础设施类或者指定的不需要代理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查找这个bean能使用的所有Advisor</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors <span class="token operator">=</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>specificInterceptors <span class="token operator">!=</span> DO_NOT_PROXY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 存在增强器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建其代理</span>        Object proxy <span class="token operator">=</span> <span class="token function">createProxy</span><span class="token punctuation">(</span>                bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SingletonTargetSource</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>proxyTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当前bean不需要增强，缓存起来</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取Advisor阶段"><a href="#获取Advisor阶段" class="headerlink" title="获取Advisor阶段"></a>获取Advisor阶段</h3><p><strong>首先Advisor是什么？</strong></p><blockquote><p>​我理解为增强器，一个Advisor对应一个切面。既包含Advice，也包含过滤器（判断bean是否需要增强的东西）。所以能用一个Advisor来判断任意一个bean是否能被它增强，并提供增强的Advice。</p><p>​主要子接口为PointcutAdvisor，PointcutAdvisor提供了Pointcut，利用这个Pointcut即可以bean的class和method进行匹配看它是否能被增强。而Advisor获取的Advice则为真正执行代理方法的拦截器。</p></blockquote><h4 id="findCandidateAdvisors"><a href="#findCandidateAdvisors" class="headerlink" title="findCandidateAdvisors"></a>findCandidateAdvisors</h4><p>有两种如下获取Advisor的方式</p><ul><li><p>查找所有实现了Advisor接口的BeanDefinition，并对其进行实例化（这种一般都是框架注册的增强器）</p></li><li><p>注解方式：获取所有基于注解的切面bean，并进行实例化</p><blockquote><p>先拿到容器中所有Bean的beanName，再遍历这些beanName。通过BeanFactory获取当前beanName的Class，再判断Class上是否有@Aspect注解。如果存在@Aspect，就利用ReflectiveAspectJAdvisorFactory去解析这些Bean，<strong>将@Aspect Bean中的每个增强方法（如下注解，每个注解标注的方法就是一个增强方法）构造成一个Advisor（实现类为InstantiationModelAwarePointcutAdvisorImpl）</strong>，最后封装到List<Advisor>里，返回给上层</p></blockquote></li></ul><p><img src="https://img.shanzhao.site/file/1746536967525_spring-aspect-anno.png" alt="切面注解"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 查找spring内置的增强器（包括不限于事务、缓存等）</span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// aspectJAdvisorsBuilder不会为空，默认为BeanFactoryAspectJAdvisorsBuilderAdapter</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdvisorsBuilder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取所有的与@Aspect注解相关的Advisor</span>        advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdvisorsBuilder<span class="token punctuation">.</span><span class="token function">buildAspectJAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 父类中的findAdvisorBeans</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">findAdvisorBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先从缓存中找，没有再搜索</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> advisorNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cachedAdvisorBeanNames<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>advisorNames <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 缓存为空</span>        <span class="token comment" spellcheck="true">// 查找出所有实现了Advisor接口的BeanDefinition，并缓存</span>        advisorNames <span class="token operator">=</span> BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">beanNamesForTypeIncludingAncestors</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> Advisor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cachedAdvisorBeanNames <span class="token operator">=</span> advisorNames<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>advisorNames<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> advisorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEligibleBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Skipping currently created advisor '"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 尝试实例化这个Advisor Bean，并放入结果中</span>                    advisors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> Advisor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Throwable rootCause <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getMostSpecificCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootCause <span class="token keyword">instanceof</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        BeanCreationException bce <span class="token operator">=</span> <span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> rootCause<span class="token punctuation">;</span>                        String bceBeanName <span class="token operator">=</span> bce<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>bceBeanName <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>bceBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Skipping advisor '"</span> <span class="token operator">+</span> name <span class="token operator">+</span>                                        <span class="token string">"' with dependency on currently created bean: "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// Ignore: indicates a reference back to the bean we're trying to advise.</span>                            <span class="token comment" spellcheck="true">// We want to find advisors other than the currently created bean itself.</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// BeanFactoryAspectJAdvisorsBuilder#buildAspectJAdvisors方法，找出基于注解的切面</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">buildAspectJAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// @Aspect注解BeanName的缓存</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> aspectNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            aspectNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                aspectNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 获取所有beanName</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> beanNames <span class="token operator">=</span> BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">beanNamesForTypeIncludingAncestors</span><span class="token punctuation">(</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEligibleBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 获取这个bean的type</span>                    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 存在 org.aspectj.lang.annotation.Aspect 注解</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">isAspect</span><span class="token punctuation">(</span>beanType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        aspectNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        AspectMetadata amd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AspectMetadata</span><span class="token punctuation">(</span>beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 解析@Aspetc的value值，如果没有，默认kind就为SINGLETON</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>amd<span class="token punctuation">.</span><span class="token function">getAjType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPerClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> PerClauseKind<span class="token punctuation">.</span>SINGLETON<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            MetadataAwareAspectInstanceFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanFactoryAspectInstanceFactory</span><span class="token punctuation">(</span>                                    <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 解析标记 AspectJ 注解中的增强方法，并将每个切点方法都构造成一个Advisor</span>                            <span class="token comment" spellcheck="true">// 其实现类为InstantiationModelAwarePointcutAdvisorImpl</span>                            List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> classAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 缓存起来切面的解析结果</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span>advisorsCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> classAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>classAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// Per target or per this.</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                                        <span class="token string">"' is a singleton, but aspect instantiation model is not singleton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            MetadataAwareAspectInstanceFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrototypeAspectInstanceFactory</span><span class="token punctuation">(</span>                                    <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                            advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames <span class="token operator">=</span> aspectNames<span class="token punctuation">;</span>                <span class="token keyword">return</span> advisors<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有自定义的@Aspect，返回空</span>        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String aspectName <span class="token operator">:</span> aspectNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> cachedAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorsCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aspectName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedAdvisors <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cachedAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            MetadataAwareAspectInstanceFactory factory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aspectName<span class="token punctuation">)</span><span class="token punctuation">;</span>            advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="findAdvisorsThatCanApply"><a href="#findAdvisorsThatCanApply" class="headerlink" title="findAdvisorsThatCanApply"></a>findAdvisorsThatCanApply</h4><p>​将上面流程中获取到的所有Advisor做过滤，过滤出可以对当前bean进行增强的Advisor。核心方法在org.springframework.aop.support.AopUtils#canApply中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">canApply</span><span class="token punctuation">(</span>Pointcut pc<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">,</span> <span class="token keyword">boolean</span> hasIntroductions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>pc<span class="token punctuation">,</span> <span class="token string">"Pointcut must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pc<span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 先按类匹配，如果类都匹配不了，那直接就不需要代理了</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    MethodMatcher methodMatcher <span class="token operator">=</span> pc<span class="token punctuation">.</span><span class="token function">getMethodMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取方法匹配器</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>methodMatcher <span class="token operator">==</span> MethodMatcher<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// No need to iterate the methods if we're matching any method anyway...</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    IntroductionAwareMethodMatcher introductionAwareMethodMatcher <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>methodMatcher <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAwareMethodMatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        introductionAwareMethodMatcher <span class="token operator">=</span> <span class="token punctuation">(</span>IntroductionAwareMethodMatcher<span class="token punctuation">)</span> methodMatcher<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 目标类和其所有接口的集和</span>    Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Proxy<span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getUserClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    classes<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getAllInterfacesForClassAsSet</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">getAllDeclaredMethods</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对目标类和其所有接口的每个方法都进行匹配，只要能匹配上，就代表这个类可以增强，直接返回true</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>introductionAwareMethodMatcher <span class="token operator">!=</span> null                    <span class="token operator">?</span> introductionAwareMethodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> hasIntroductions<span class="token punctuation">)</span>                    <span class="token operator">:</span> methodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sortAdvisors"><a href="#sortAdvisors" class="headerlink" title="sortAdvisors"></a>sortAdvisors</h4><p>​源码就不分析了，直接说作用：它是 Spring AOP 中<strong>对多个 Advisor（增强器）进行排序</strong>的关键逻辑。它根据切面、通知类上的 <code>@Order</code> 注解或实现 <code>Ordered</code> 接口的优先级，对同一目标类或方法的所有 Advisor 进行排序。</p><p>​排序完成后，每个类或方法的增强器顺序就被固定下来。在运行时调用该方法时，AOP 拦截器链会<strong>严格按照这个顺序</strong>执行对应的切面逻辑，确保增强行为的预期一致性。</p><h3 id="开始增强（创建代理）"><a href="#开始增强（创建代理）" class="headerlink" title="开始增强（创建代理）"></a>开始增强（创建代理）</h3><h4 id="cglib-getProxy"><a href="#cglib-getProxy" class="headerlink" title="cglib getProxy"></a>cglib getProxy</h4><p>cglib的增强实现主要步骤总结</p><blockquote><ol><li><p>校验final方法（只是打个日志，final方法不能增强）</p></li><li><p>创建<strong>org.springframework.cglib.proxy.Enhancer</strong>（核心的cglib增强器）</p></li><li><p>对Enhancer进行一系列的填充，包括设置当前Class为增强类的父类。当前Class的所有接口，增强类也要实现。</p></li><li><p>设置增强Class的命名策略（BySpringCGLIB）</p></li><li><p>默认再将当前线程上下文的ClassLoader设为加载增强Class字节码的ClassLoader</p></li><li><p><strong>对Enhancer设置一些Callback，并设置固定的CallbackFilter（ProxyCallbackFilter）。</strong>非常重要：</p><p> <img src="https://img.shanzhao.site/file/1746541168408_spring-aop-callbacks.png" alt="Callback数组"></p><p> ​Callback数组（每一个Callback都是方法的拦截器）</p><p> <img src="https://img.shanzhao.site/file/1746541269170_spring-cglib-callbacks-index.png" alt="Callback数组索引"></p><p> ​Callback数组的索引（<strong>ProxyCallbackFilter#accept</strong>实现），用来确定被增强的类的每一个方法该使用具体的某个拦截器，返回的是拦截器的数组索引</p></li><li><p>生成增强Class的字节码并实例化（代理bean就产生了），将其返回</p></li></ol></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// CglibAopProxy的创建代理方法</span><span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating CGLIB proxy: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 上一个被代理的目标类class（有可能已经是cglib的代理类了）</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> rootClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>rootClass <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"Target class must be available for creating a CGLIB proxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 真正代理的目标类class</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> proxySuperClass <span class="token operator">=</span> rootClass<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isCglibProxyClass</span><span class="token punctuation">(</span>rootClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 已经是个cglib代理类了，就需要把真正被代理类的class和接口找出来</span>            proxySuperClass <span class="token operator">=</span> rootClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> additionalInterfaces <span class="token operator">=</span> rootClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> additionalInterface <span class="token operator">:</span> additionalInterfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">addInterface</span><span class="token punctuation">(</span>additionalInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 验证class的final相关方法并写日志</span>        <span class="token function">validateClassIfNecessary</span><span class="token punctuation">(</span>proxySuperClass<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建通用的增强器，准备增强了</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token function">createEnhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            enhancer<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token keyword">instanceof</span> <span class="token class-name">SmartClassLoader</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartClassLoader<span class="token punctuation">)</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isClassReloadable</span><span class="token punctuation">(</span>proxySuperClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                enhancer<span class="token punctuation">.</span><span class="token function">setUseCache</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 设置被代理类class为增强类的父类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>proxySuperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对增强类设置接口：Advised和SpringProxy</span>        enhancer<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span>AopProxyUtils<span class="token punctuation">.</span><span class="token function">completeProxiedInterfaces</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setNamingPolicy</span><span class="token punctuation">(</span>SpringNamingPolicy<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassLoaderAwareUndeclaredThrowableStrategy</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置拦截器（真正支持切面操作的拦截器）</span>        Callback<span class="token punctuation">[</span><span class="token punctuation">]</span> callbacks <span class="token operator">=</span> <span class="token function">getCallbacks</span><span class="token punctuation">(</span>rootClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>callbacks<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> types<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            types<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> callbacks<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 非常重要，就是通过这个filter来确定某个方法应该使用哪一个Callback的</span>        <span class="token comment" spellcheck="true">// 所以，代理类的任何一个方法只会用上一个Callback</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallbackFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProxyCallbackFilter</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getConfigurationOnlyCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fixedInterceptorMap<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fixedInterceptorOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallbackTypes</span><span class="token punctuation">(</span>types<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成代理类的class并实例化其对象</span>        <span class="token keyword">return</span> <span class="token function">createProxyClassAndInstance</span><span class="token punctuation">(</span>enhancer<span class="token punctuation">,</span> callbacks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CodeGenerationException</span> <span class="token operator">|</span> IllegalArgumentException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"Could not generate CGLIB subclass of "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">": Common causes of this problem include using a final class or a non-visible class"</span><span class="token punctuation">,</span>                ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TargetSource.getTarget() failed</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"Unexpected AOP exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jdk-getProxy"><a href="#jdk-getProxy" class="headerlink" title="jdk getProxy"></a>jdk getProxy</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// JdkDynamicAopProxy的创建代理方法，该代理的InvocationHandler就为JdkDynamicAopProxy本身</span><span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating JDK dynamic proxy: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 对增强类设置Interface：Advised和SpringProxy和DecoratingProxy</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> proxiedInterfaces <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">completeProxiedInterfaces</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">findDefinedEqualsAndHashCodeMethods</span><span class="token punctuation">(</span>proxiedInterfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> proxiedInterfaces<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调用阶段"><a href="#调用阶段" class="headerlink" title="调用阶段"></a>调用阶段</h3><h4 id="cglib-invoke"><a href="#cglib-invoke" class="headerlink" title="cglib invoke"></a>cglib invoke</h4><p><strong>cglib代理类中方法有切面时的调用重点流程分析（这时使用的Callback就是DynamicAdvisedInterceptor）</strong></p><ul><li><p><strong>获取方法对应的拦截器链</strong></p><blockquote><p> Spring 会调用 <code>AdvisorChainFactory#getInterceptorsAndDynamicInterceptionAdvice</code> 方法，为当前方法构建拦截器链。<br> 它会遍历所有注册的 <code>Advisor</code>，并依次通过其中的 <code>ClassFilter</code> 和 <code>MethodMatcher</code> 判断当前方法是否匹配。如果匹配，就将该 <code>Advisor</code> 对应的拦截器（<code>MethodInterceptor</code>）加入到列表中，并最终缓存该方法与其拦截器链的映射关系。</p></blockquote></li><li><p><strong>触发代理方法调用</strong></p><blockquote><p>如果目标类采用了 CGLIB 代理（<code>proxyTargetClass = true</code>），则在调用代理对象方法时，会进入 <code>CglibAopProxy.DynamicAdvisedInterceptor#intercept</code> 方法。</p></blockquote></li><li><p><strong>构造并执行拦截链</strong></p><blockquote><p>Spring 会构造一个 <code>CglibMethodInvocation</code> 对象，它是 <code>ReflectiveMethodInvocation</code> 的子类，封装了目标对象、方法、参数、拦截器链等执行上下文。<br> 调用 <code>proceed()</code> 方法开始执行拦截链。</p></blockquote></li><li><p><strong>依次执行拦截器</strong></p><blockquote><p><code>proceed()</code> 方法会通过内部字段 <code>currentInterceptorIndex</code>（初始值为 -1）递增索引，按顺序执行拦截器链中的下一个 <code>MethodInterceptor</code>。<br> 每个拦截器如果调用了 <code>invocation.proceed()</code>，则控制权会继续传递给下一个拦截器，实现“链式调用”。</p></blockquote></li><li><p><strong>执行原始方法</strong></p><blockquote><p>当所有拦截器都执行完后（即 <code>currentInterceptorIndex &gt;= interceptors.size()</code>），会最终调用原始目标对象的实际方法，实现增强与目标方法的结合。</p></blockquote></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DynamicAdvisedInterceptor#intercept的入口</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Object oldProxy <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Object target <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 先准备目标对象源（调用原bean方法时会用到）</span>    TargetSource targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在当前线程上下文中设置了需要暴露代理，就要设置到当前线程ThreadLocal中</span>            <span class="token comment" spellcheck="true">// 就是用来解决方法内部需要调用代理方法</span>            oldProxy <span class="token operator">=</span> AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取真实的，不是代理的目标对象</span>        <span class="token comment" spellcheck="true">// 例：Session域从SimpleBeanTargetSource中获取，再转到BeanFactory，再转到SessionScope中，获取目标对象</span>        target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">?</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对当前方法构造切面链并缓存</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object retVal<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 无切面，且方法为public，直接调用原方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            retVal <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 存在切面，构造方法调用器并执行</span>            retVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> methodProxy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        retVal <span class="token operator">=</span> <span class="token function">processReturnType</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> retVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 方法代理全部执行完毕，恢复执行前的现场</span>            AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jdk-invoke"><a href="#jdk-invoke" class="headerlink" title="jdk invoke"></a>jdk invoke</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Object oldProxy <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    TargetSource targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>targetSource<span class="token punctuation">;</span>    Object target <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一些通用方法的处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>equalsDefined <span class="token operator">&amp;&amp;</span> AopUtils<span class="token punctuation">.</span><span class="token function">isEqualsMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>hashCodeDefined <span class="token operator">&amp;&amp;</span> AopUtils<span class="token punctuation">.</span><span class="token function">isHashCodeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DecoratingProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">ultimateTargetClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// opaque为false，且该方法的类为实现了Advised的接口，则使用advised字段调用该方法</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>opaque <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>Advised<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Service invocations on ProxyConfig with the proxy config...</span>            <span class="token keyword">return</span> AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Object retVal<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 需要暴露当前proxy，以便在本类中调用代理方法</span>            oldProxy <span class="token operator">=</span> AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">?</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取这个方法的所有拦截链</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 拦截链为空，则直接调用原方法</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            retVal <span class="token operator">=</span> AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 构造ReflectiveMethodInvocation，准备走代理方法了</span>            MethodInvocation invocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span>                    chain<span class="token punctuation">)</span><span class="token punctuation">;</span>            retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 处理返回值类型</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> retVal <span class="token operator">==</span> target <span class="token operator">&amp;&amp;</span>                returnType <span class="token operator">!=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span>RawTargetAccess<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            retVal <span class="token operator">=</span> proxy<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> returnType <span class="token operator">!=</span> Void<span class="token punctuation">.</span>TYPE <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopInvocationException</span><span class="token punctuation">(</span>                    <span class="token string">"Null return value from advice does not match primitive return type for: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 恢复现场，移除当前线程上下文中的proxy</span>            AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ReflectiveMethodInvocation"><a href="#ReflectiveMethodInvocation" class="headerlink" title="ReflectiveMethodInvocation"></a>ReflectiveMethodInvocation</h4><p>​Spring AOP 的cglib和jdk代理都会用到的数据结构。是 <strong>方法拦截链执行的核心实现类</strong>。每当调用代理类中的方法时，都会构造一个ReflectiveMethodInvocation对象，内部封装了一个方法调用的上下文，包括目标对象、目标方法、方法参数、拦截器链等。核心是通过调用 <code>proceed()</code> 方法按顺序执行所有拦截器，最终调用目标方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectiveMethodInvocation</span> <span class="token keyword">implements</span> <span class="token class-name">ProxyMethodInvocation</span><span class="token punctuation">,</span> Cloneable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 用于记录当前执行到第几个拦截器</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currentInterceptorIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进行动态增强器的匹配判断，执行拦截器，和传播的实现</span>    <span class="token keyword">public</span> Object <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行完所有增强方法后执行切点方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">invokeJoinpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取下一个要执行的拦截器</span>        Object interceptorOrInterceptionAdvice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用拦截器方法时，都需要将this作为参数传递以保证当前拦截能传播给后面的增强器（proceed方法）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptorOrInterceptionAdvice <span class="token keyword">instanceof</span> <span class="token class-name">InterceptorAndDynamicMethodMatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 动态匹配的增强器，需要进行动态参数匹配</span>            InterceptorAndDynamicMethodMatcher dm <span class="token operator">=</span> <span class="token punctuation">(</span>InterceptorAndDynamicMethodMatcher<span class="token punctuation">)</span> interceptorOrInterceptionAdvice<span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetClass <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetClass <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dm<span class="token punctuation">.</span>methodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 匹配，执行拦截器</span>                <span class="token keyword">return</span> dm<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 匹配失败就不执行拦截器，触发下一个拦截器的判断和执行</span>                <span class="token keyword">return</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 非动态拦截器，比如事务的TransactionInterceptor，和异步的 AnnotationAsyncExecutionInterceptor等等</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>MethodInterceptor<span class="token punctuation">)</span> interceptorOrInterceptionAdvice<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​不论是cglib还是jdk的增强，增强的实现都可以总结为<strong>对原方法可使用的Advisor的收集，再构造成ReflectiveMethodInvocation，由ReflectiveMethodInvocation去进行动态增强器（一般都和参数有关）的判断，执行拦截器和拦截的传播</strong>。<br>​且Spring都会默认对代理bean实现两个接口（代码实现在AopProxyUtils#completeProxiedInterfaces中），分别是<strong>SpringProxy和Advised</strong>。SpringProxy用来表示当前bean已经被spring的增强了，而Advised则可以用来拿到原始bean（所以，要在代理bean中拿到原始bean，直接将代理bean强转为Advised，再利用其getTargetSource方法得到原始非代理bean）</p><h3 id="AOP测试"><a href="#AOP测试" class="headerlink" title="AOP测试"></a>AOP测试</h3><p>被增强的class，其中@BizLog是注解切面，切面类为LogInterceptor，用来做日志打印的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> site<span class="token punctuation">.</span>shanzhao<span class="token punctuation">;</span><span class="token keyword">import</span> site<span class="token punctuation">.</span>shanzhao<span class="token punctuation">.</span>BizLog<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Transactional<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringAopDemo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@BizLog</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aopMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aopMethod run..............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notAopMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"notAopMethod run..............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="arthas解密"><a href="#arthas解密" class="headerlink" title="arthas解密"></a>arthas解密</h4><h5 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h5><ul><li><p><strong>sc -d site.shanzhao.SpringAopDemo</strong>：查看指定的class加载信息（这里有两个class信息，增强class和源class，我这里只关心增强的class）</p><blockquote><p>重点观察interfaces这一行，可以发现这个代理类实现了3个接口，分别为SpringProxy，Advised和Factory</p></blockquote></li></ul><pre><code> class-info        site.shanzhao.SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60 code-source       /Users/shanzhao/IdeaProjects/soil/target/classes/ name              site.shanzhao.SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60 isInterface       false isAnnotation      false isEnum            false isAnonymousClass  false isArray           false isLocalClass      false isMemberClass     false isPrimitive       false isSynthetic       false simple-name       SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60 modifier          public annotation interfaces        org.springframework.aop.SpringProxy,org.springframework.aop.framework.Advised,org.springframework.cglib.proxy.Factory super-class       +-site.shanzhao.SpringAopDemo                     +-java.lang.Object class-loader      +-sun.misc.Launcher$AppClassLoader@18b4aac2                     +-sun.misc.Launcher$ExtClassLoader@13fee20c classLoaderHash   18b4aac2</code></pre><h5 id="jad"><a href="#jad" class="headerlink" title="jad"></a>jad</h5><ul><li><strong>jad site.shanzhao.SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60</strong>：使用jad反编译代理class，这里只展示出了重点代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// package site.shanzhao;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aopalliance<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>Advice<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>Advisor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>SpringProxy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>TargetClassAware<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>TargetSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>Advised<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>AopConfigException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ReflectUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Signature<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Callback<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Dispatcher<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Factory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodProxy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>NoOp<span class="token punctuation">;</span><span class="token keyword">import</span> site<span class="token punctuation">.</span>shanzhao<span class="token punctuation">.</span>SpringAopDemo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringAopDemo</span>$$EnhancerBySpringCGLIB$$6d7e1f60        <span class="token keyword">extends</span> <span class="token class-name">SpringAopDemo</span>        <span class="token keyword">implements</span> <span class="token class-name">SpringProxy</span><span class="token punctuation">,</span>        Advised<span class="token punctuation">,</span>        Factory <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> CGLIB$BOUND<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object CGLIB$FACTORY_DATA<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal CGLIB$THREAD_CALLBACKS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Callback<span class="token punctuation">[</span><span class="token punctuation">]</span> CGLIB$STATIC_CALLBACKS<span class="token punctuation">;</span>    <span class="token keyword">private</span> MethodInterceptor CGLIB$CALLBACK_0<span class="token punctuation">;</span>    <span class="token keyword">private</span> MethodInterceptor CGLIB$CALLBACK_1<span class="token punctuation">;</span>    <span class="token keyword">private</span> NoOp CGLIB$CALLBACK_2<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dispatcher CGLIB$CALLBACK_3<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dispatcher CGLIB$CALLBACK_4<span class="token punctuation">;</span>    <span class="token keyword">private</span> MethodInterceptor CGLIB$CALLBACK_5<span class="token punctuation">;</span>    <span class="token keyword">private</span> MethodInterceptor CGLIB$CALLBACK_6<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 为org.springframework.aop.framework.Advised的接口，内部直接使用4号callback转化为ProxyFactory对象再调用目标方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> TargetSource <span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dispatcher dispatcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_4<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dispatcher <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_4<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Advised<span class="token punctuation">)</span> dispatcher<span class="token punctuation">.</span><span class="token function">loadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// aop增强的方法，使用0号callback进行处理，实现类为DynamicAdvisedInterceptor。</span>    <span class="token comment" spellcheck="true">// 应该有两个适合这个方法的Advisor，一个是@BizLog的LogInterceptor切面，另一个是事物切面</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">aopMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodInterceptor methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object object <span class="token operator">=</span> methodInterceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CGLIB$aopMethod$<span class="token number">0</span>$Method<span class="token punctuation">,</span> CGLIB$emptyArgs<span class="token punctuation">,</span>                    CGLIB$aopMethod$<span class="token number">0</span>$Proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">aopMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 未增强的方法，同样使用0号callback进行处理，但却不会有适合这个方法的Advisor</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">notAopMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodInterceptor methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object object <span class="token operator">=</span> methodInterceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CGLIB$notAopMethod$<span class="token number">1</span>$Method<span class="token punctuation">,</span> CGLIB$emptyArgs<span class="token punctuation">,</span>                    CGLIB$notAopMethod$<span class="token number">1</span>$Proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">notAopMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Object的equals方法，使用5号callback处理，实现类为EqualsInterceptor</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodInterceptor methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_5<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SpringAopDemo$$EnhancerBySpringCGLIB$$6d7e1f60<span class="token punctuation">.</span>CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            methodInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_5<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInterceptor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object object2 <span class="token operator">=</span> methodInterceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CGLIB$equals$<span class="token number">2</span>$Method<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> object <span class="token punctuation">}</span><span class="token punctuation">,</span>                    CGLIB$equals$<span class="token number">2</span>$Proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> object2 <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> object2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="debug下代理类的信息"><a href="#debug下代理类的信息" class="headerlink" title="debug下代理类的信息"></a>debug下代理类的信息</h4><pre><code>这是从容器中直接获取SpringAopDemo这个class得到的对象，也就是代理类而不是源对象</code></pre><p><img src="https://img.shanzhao.site/file/1746685312097_spring-aop-proxy-inner.png" alt="spring-aop-proxy-inner.png"></p><p>重点信息已用红框框处，逐个分析</p><ul><li><strong>CGLIB$CALLBACK_0</strong>：通用拦截器，有切面和没有切面的普通方法方法都会用</li><li><strong>advised</strong>：实现为org.springframework.aop.framework.ProxyFactory。是 Spring AOP 中封装代理创建逻辑的核心工具类，实现了 <code>Advised</code> 接口。它通过维护一系列配置和内部结构，完成对目标对象的<strong>方法级别增强</strong>。<ul><li><strong>targetSource</strong>：内部封装了源对象，可以将当前代理类强转为Advised，在调用其getTargetSource方法获取到源对象</li><li><strong>methodCache</strong>：缓存方法与其对应增强（Advisor）链的映射，加快方法调用时的拦截查找过程。<ul><li>notAopMethod：没有切面，所以size&#x3D;0</li><li>aopMethod：有两个切面，缓存的size&#x3D;2</li></ul></li><li><strong>advisor</strong>：代理类所有的Advisor</li><li><strong>proxyTargetClass</strong>：是否直接代理的目标class。为true则表示cglib proxy，fasle则是jdk proxy</li><li><strong>exposeProxy</strong>：是否将当前代理暴露到 <code>ThreadLocal</code> 上下文中，允许在目标对象内部通过 <code>AopContext.currentProxy()</code> 获取自身代理对象，用于内部方法调用也能被增强。</li><li><strong>frozen</strong>：表示配置是否被冻结。默认为false，支持在运行时动态添加或移除 <code>Advisor</code>。如果设置为 <code>true</code>，配置将被锁定，并跳过 <code>methodCache</code> 的清理逻辑以提升性能。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeanPostProcessor </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-@Resource和@Autowired的分析</title>
      <link href="/2021-01-18/spring-resource-he-autowired-de-fen-xi/"/>
      <url>/2021-01-18/spring-resource-he-autowired-de-fen-xi/</url>
      
        <content type="html"><![CDATA[<hr><p>​从源码分析了@Resource和@Autowired的依赖创建流程和这两个注解的的异同</p><span id="more"></span><h1 id="Spring-Resource和-Autowired的分析"><a href="#Spring-Resource和-Autowired的分析" class="headerlink" title="Spring-@Resource和@Autowired的分析"></a>Spring-@Resource和@Autowired的分析</h1><p>紧接上篇文章<a href="https://blog.shanzhao.site/2021/01/14/spring-bean-de-zi-duan-tian-chong-jie-duan-chu-li/">Spring-Bean的字段填充阶段相关处理器</a></p><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><p>​CommonAnnotationBeanPostProcessor#autowireResource部分核心源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token keyword">instanceof</span> <span class="token class-name">AutowireCapableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  AutowireCapableBeanFactory beanFactory <span class="token operator">=</span> <span class="token punctuation">(</span>AutowireCapableBeanFactory<span class="token punctuation">)</span> factory<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// field依赖会构建成LookupDependencyDescriptor，required只能为true</span>  DependencyDescriptor descriptor <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getDependencyDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// byType</span>  <span class="token comment" spellcheck="true">// 当不设置@Resource.name字段值，以字段名作为beanName的Bean不在容器中</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fallbackToDefaultTypeMatch <span class="token operator">&amp;&amp;</span> element<span class="token punctuation">.</span>isDefaultName <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>factory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    autowiredBeanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析依赖bean</span>    resource <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">resolveDependency</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getLookupType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"No resolvable resource object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// byName</span>    resource <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">resolveBeanByName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    autowiredBeanNames <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>​AutowiredFieldElement#resolveFieldValue部分核心源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 此时required可由我们定义，表示这个bean不再是必须存在的</span>DependencyDescriptor desc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DependencyDescriptor</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>required<span class="token punctuation">)</span><span class="token punctuation">;</span>desc<span class="token punctuation">.</span><span class="token function">setContainingClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> autowiredBeanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>beanFactory <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"No BeanFactory available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>TypeConverter typeConverter <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object value<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 解析依赖bean，只有byType</span>  value <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">resolveDependency</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> typeConverter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsatisfiedDependencyException</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InjectionPoint</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="公共的解析源码"><a href="#公共的解析源码" class="headerlink" title="公共的解析源码"></a>公共的解析源码</h2><h3 id="AutowireCapableBeanFactory-resolveDependency"><a href="#AutowireCapableBeanFactory-resolveDependency" class="headerlink" title="AutowireCapableBeanFactory#resolveDependency"></a>AutowireCapableBeanFactory#resolveDependency</h3><p>主要流程：</p><blockquote><ol><li>判断注入点是否标注了 <code>@Lazy</code>，如有，则返回懒加载代理对象；</li><li>若标注了 <code>@Value</code>，解析其占位符表达式并进行类型转换；</li><li>判断依赖类型，若是集合类型（如 List、Map、Stream 、数组等），则调用 <code>resolveMultipleBeans</code> 获取所有候选</li><li>若为单个 Bean 类型，则根据类型查找候选 Bean，结合 <code>@Qualifier</code>、<code>@Primary</code>、<code>@Priority</code> 等注解进行筛选；</li><li>若无匹配 Bean，是否抛出异常由 <code>required</code> 属性决定。</li></ol></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">resolveDependency</span><span class="token punctuation">(</span>DependencyDescriptor descriptor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String requestingBeanName<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> autowiredBeanNames<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> TypeConverter typeConverter<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>  descriptor<span class="token punctuation">.</span><span class="token function">initParameterNameDiscovery</span><span class="token punctuation">(</span><span class="token function">getParameterNameDiscoverer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Optional<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 处理类型为Optional</span>    <span class="token keyword">return</span> <span class="token function">createOptionalDependency</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectFactory<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>      ObjectProvider<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DependencyObjectProvider</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>javaxInjectProviderClass <span class="token operator">==</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jsr330Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createDependencyProvider</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否有@Lazy注解。使用了@Lazy则在这里直接创建了代理对象并返回</span>    Object result <span class="token operator">=</span> <span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLazyResolutionProxyIfNecessary</span><span class="token punctuation">(</span>        descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 开始获取依赖bean</span>      result <span class="token operator">=</span> <span class="token function">doResolveDependency</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> typeConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> Object <span class="token function">doResolveDependency</span><span class="token punctuation">(</span>DependencyDescriptor descriptor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String beanName<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> autowiredBeanNames<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> TypeConverter typeConverter<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>  InjectionPoint previousInjectionPoint <span class="token operator">=</span> ConstructorResolver<span class="token punctuation">.</span><span class="token function">setCurrentInjectionPoint</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    Object shortcut <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">resolveShortcut</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shortcut <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> shortcut<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> type <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析@Value注解</span>    Object value <span class="token operator">=</span> <span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuggestedValue</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String strVal <span class="token operator">=</span> <span class="token function">resolveEmbeddedValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanDefinition bd <span class="token operator">=</span> <span class="token punctuation">(</span>beanName <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">containsBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">?</span>            <span class="token function">getMergedBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> <span class="token function">evaluateBeanDefinitionString</span><span class="token punctuation">(</span>strVal<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TypeConverter converter <span class="token operator">=</span> <span class="token punctuation">(</span>typeConverter <span class="token operator">!=</span> null <span class="token operator">?</span> typeConverter <span class="token operator">:</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> converter<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> type<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">getTypeDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedOperationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// A custom TypeConverter which does not support TypeDescriptor resolution...</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span>            converter<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> type<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>            converter<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> type<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">getMethodParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 先进行多bean解析</span>    Object multipleBeans <span class="token operator">=</span> <span class="token function">resolveMultipleBeans</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> typeConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>multipleBeans <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 多bean解析出来了则直接返回</span>      <span class="token keyword">return</span> multipleBeans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将这个type所有的可能bean都解析出来</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> matchingBeans <span class="token operator">=</span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> type<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没找到</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRequired</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如过required为true，会直接跑异常</span>        <span class="token comment" spellcheck="true">// 只有@Autowired才可设置required为false</span>        <span class="token function">raiseNoMatchingBeanFound</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ====== 走到这表示这个bean是单个的，需要再根据其他注解来返回一个优先级最高的bean ======</span>    <span class="token comment" spellcheck="true">// 最终的依赖beanName</span>    String autowiredBeanName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最终的依赖bean实例</span>    Object instanceCandidate<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 存在多个候选bean</span>      <span class="token comment" spellcheck="true">// 会先根据@Primary注解筛选，否则根据@Priority筛选出优先级最高的bean</span>      autowiredBeanName <span class="token operator">=</span> <span class="token function">determineAutowireCandidate</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanName <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 异常处理，根据required选择是否跑异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRequired</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">indicatesMultipleBeans</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> descriptor<span class="token punctuation">.</span><span class="token function">resolveNotUnique</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> matchingBeans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      instanceCandidate <span class="token operator">=</span> matchingBeans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只有1个候选bean</span>      Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">=</span> matchingBeans<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      autowiredBeanName <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      instanceCandidate <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      autowiredBeanNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceCandidate <span class="token keyword">instanceof</span> <span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      instanceCandidate <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">resolveCandidate</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object result <span class="token operator">=</span> instanceCandidate<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">NullBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRequired</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">raiseNoMatchingBeanFound</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      result <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isAssignableValue</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">,</span> type<span class="token punctuation">,</span> instanceCandidate<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">finally</span> <span class="token punctuation">{</span>    ConstructorResolver<span class="token punctuation">.</span><span class="token function">setCurrentInjectionPoint</span><span class="token punctuation">(</span>previousInjectionPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DefaultListableBeanFactory-resolveMultipleBeans"><a href="#DefaultListableBeanFactory-resolveMultipleBeans" class="headerlink" title="DefaultListableBeanFactory#resolveMultipleBeans"></a>DefaultListableBeanFactory#resolveMultipleBeans</h3><p>​支持注入类型为 <code>Collection&lt;T&gt;</code>、<code>Map&lt;String, T&gt;</code>、<code>T[]</code> 和 <code>Stream&lt;T&gt;</code> 的多 Bean 依赖。该方法会查找所有匹配的候选 Bean，按类型筛选、处理限定符（如 <code>@Qualifier</code>），并封装成目标集合类型返回。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**处理依赖bean的type是一个容器的情况。可能为 数组、集合、Map甚至Stream*/</span><span class="token keyword">private</span> Object <span class="token function">resolveMultipleBeans</span><span class="token punctuation">(</span>DependencyDescriptor descriptor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String beanName<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> autowiredBeanNames<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> TypeConverter typeConverter<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> type <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>descriptor <span class="token keyword">instanceof</span> <span class="token class-name">StreamDependencyDescriptor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// type = Stream</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> matchingBeans <span class="token operator">=</span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> type<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      autowiredBeanNames<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Stream<span class="token operator">&lt;</span>Object<span class="token operator">></span> stream <span class="token operator">=</span> matchingBeans<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> descriptor<span class="token punctuation">.</span><span class="token function">resolveCandidate</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>bean <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span><span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">NullBean</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>StreamDependencyDescriptor<span class="token punctuation">)</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOrdered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stream <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token function">adaptOrderComparator</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stream<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// type = 数组</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> componentType <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ResolvableType resolvableType <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resolvedArrayType <span class="token operator">=</span> resolvableType<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedArrayType <span class="token operator">!=</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>      componentType <span class="token operator">=</span> resolvableType<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>componentType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> matchingBeans <span class="token operator">=</span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> componentType<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MultiElementDescriptor</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      autowiredBeanNames<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    TypeConverter converter <span class="token operator">=</span> <span class="token punctuation">(</span>typeConverter <span class="token operator">!=</span> null <span class="token operator">?</span> typeConverter <span class="token operator">:</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object result <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resolvedArrayType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Comparator<span class="token operator">&lt;</span>Object<span class="token operator">></span> comparator <span class="token operator">=</span> <span class="token function">adaptDependencyComparator</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> result<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Collection<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// type = 集合</span>    <span class="token comment" spellcheck="true">// 解析出这个bean的范型type</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> elementType <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolveGeneric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 找出匹配范型type的候选bean</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> matchingBeans <span class="token operator">=</span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> elementType<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MultiElementDescriptor</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      autowiredBeanNames<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    TypeConverter converter <span class="token operator">=</span> <span class="token punctuation">(</span>typeConverter <span class="token operator">!=</span> null <span class="token operator">?</span> typeConverter <span class="token operator">:</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object result <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Comparator<span class="token operator">&lt;</span>Object<span class="token operator">></span> comparator <span class="token operator">=</span> <span class="token function">adaptDependencyComparator</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// type = Map</span>    ResolvableType mapType <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> keyType <span class="token operator">=</span> mapType<span class="token punctuation">.</span><span class="token function">resolveGeneric</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">!=</span> keyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 解析出Map中value的type</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> valueType <span class="token operator">=</span> mapType<span class="token punctuation">.</span><span class="token function">resolveGeneric</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>valueType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对value type进行bean搜索，返回</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> matchingBeans <span class="token operator">=</span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> valueType<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MultiElementDescriptor</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      autowiredBeanNames<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> matchingBeans<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DefaultListableBeanFactory-findAutowireCandidates"><a href="#DefaultListableBeanFactory-findAutowireCandidates" class="headerlink" title="DefaultListableBeanFactory#findAutowireCandidates"></a>DefaultListableBeanFactory#findAutowireCandidates</h3><p>​<code>DefaultListableBeanFactory#findAutowireCandidates</code> 用于查找参数中 beanName（如 Bean A）所依赖的、类型为 <code>requiredType</code> 的所有候选 Bean（如 Bean B）。返回结果为一个 <code>Map&lt;String, Object&gt;</code>，其中 <code>key</code> 是候选 Bean 的名称，<code>value</code> 是对应的实例。</p><p>​方法内部会先在 BeanFactory 中找出所有类型匹配 <code>requiredType</code> 的 Bean 名称，然后根据限定注解（如 <code>@Qualifier</code>）等条件进行筛选。筛选通过的候选 Bean 会被递归创建并作为依赖返回。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>    <span class="token annotation punctuation">@Nullable</span> String beanName<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> requiredType<span class="token punctuation">,</span> DependencyDescriptor descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 找出这个type所有的beanName</span>  <span class="token comment" spellcheck="true">// 内部就是遍历BeanFactory中所有的BeanDefinition，依次进行type匹配判断，在收集结果并缓存</span>  String<span class="token punctuation">[</span><span class="token punctuation">]</span> candidateNames <span class="token operator">=</span> BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">beanNamesForTypeIncludingAncestors</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">isEager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>candidateNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 一些特殊bean的处理，比如ApplicationContext之类的bean</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Object<span class="token operator">></span> classObjectEntry <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resolvableDependencies<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> autowiringType <span class="token operator">=</span> classObjectEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiringType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Object autowiringValue <span class="token operator">=</span> classObjectEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      autowiringValue <span class="token operator">=</span> AutowireUtils<span class="token punctuation">.</span><span class="token function">resolveAutowiringValue</span><span class="token punctuation">(</span>autowiringValue<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>autowiringValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">identityToString</span><span class="token punctuation">(</span>autowiringValue<span class="token punctuation">)</span><span class="token punctuation">,</span> autowiringValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 依次判断每个候选beanName，看其是否有资格成为真正的目标bean</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>String candidate <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 非自引用，isAutowireCandidate最终会调用到QualifierAnnotationAutowireCandidateResolver#isAutowireCandidate方法，根据@Qualifier注解来判断是否是目标bean</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSelfReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 目标bean，会使用BeanFactory来获取这个bean。实现递归创建bean</span>      <span class="token function">addCandidateEntry</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> candidate<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 上面的流程没找到，则进行fallback放宽条件继续找</span>    <span class="token keyword">boolean</span> multiple <span class="token operator">=</span> <span class="token function">indicatesMultipleBeans</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>    DependencyDescriptor fallbackDescriptor <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">forFallbackMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String candidate <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSelfReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> fallbackDescriptor<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span><span class="token operator">!</span>multiple <span class="token operator">||</span> <span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasQualifier</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addCandidateEntry</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> candidate<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 继续放宽条件</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String candidate <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSelfReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>descriptor <span class="token keyword">instanceof</span> <span class="token class-name">MultiElementDescriptor</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> fallbackDescriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">addCandidateEntry</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> candidate<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="两个注解总结"><a href="#两个注解总结" class="headerlink" title="两个注解总结"></a>两个注解总结</h2><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><ul><li>都支持容器类型的Bean解析（比如<strong>Stream，数组，集合，Map</strong>）</li><li>都支持<code>@Lazy</code>，<code>@Qualifier</code>，<code>@Value</code>等注解</li><li>都支持字段、方法参数</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li><strong>@Autowired可以设置required为false，即不强制需要这个bean</strong>。而@Resource则必须要对应的bean存在</li><li><strong>@Resource由javax提供，是集byName和byType为一体的注解。框架无关，属于 Java 官方对 IOC 容器的通用约定</strong>。在Spring中，当没设置@Resource的name，并且由框架解析出来的name（字段名or去掉set的方法名）不在容器中才会使用byType</li><li><strong>@Autowired本身只能byType，搭配@Qualifier才可实现byName</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeanPostProcessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Bean的字段填充阶段处理</title>
      <link href="/2021-01-14/spring-bean-de-zi-duan-tian-chong-jie-duan-chu-li/"/>
      <url>/2021-01-14/spring-bean-de-zi-duan-tian-chong-jie-duan-chu-li/</url>
      
        <content type="html"><![CDATA[<hr><p>​对CommonAnnotationBeanPostProcessor和AutowiredAnnotationBeanPostProcessor从源码分析了其依赖的解析、创建流程</p> <span id="more"></span><h1 id="Spring-Bean的字段填充阶段相关处理器"><a href="#Spring-Bean的字段填充阶段相关处理器" class="headerlink" title="Spring-Bean的字段填充阶段相关处理器"></a>Spring-Bean的字段填充阶段相关处理器</h1><h2 id="CommonAnnotationBeanPostProcessor"><a href="#CommonAnnotationBeanPostProcessor" class="headerlink" title="CommonAnnotationBeanPostProcessor"></a>CommonAnnotationBeanPostProcessor</h2><p>​专用来处理非Srping官方提供，而是javax的通用如下注解：</p><ul><li><strong>@javax.annotation.Resource</strong></li><li><strong>@javax.annotation.PostConstruct</strong></li><li><strong>@javax.annotation.PreDestroy</strong></li><li><strong>@javax.ejb.EJB</strong></li><li><strong>@javax.xml.ws.WebServiceRef</strong></li></ul><p>其主要有两个重要过程，<strong>一是提取这些注解所在字段或方法的元数据。之后才是使用这些注解</strong></p><p>其架构如下图所示。1被用在解析注解所在字段的元数据，2则是使用这些注解的处理器接口，3则表示它也具备Init和Destory注解解析的功能</p><p><img src="https://img.shanzhao.site/file/1745844102894_spring-common-annotation-bpp.png" alt="CommonAnnotationBeanPostProcessor架构"></p><p align="center" style="color: #888;">CommonAnnotationBeanPostProcessor架构</p><h3 id="解析Field和方法"><a href="#解析Field和方法" class="headerlink" title="解析Field和方法"></a>解析Field和方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessMergedBeanDefinition</span><span class="token punctuation">(</span>RootBeanDefinition beanDefinition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 调用父接口，解析@PostConstruct和@PreDestroy相关方法</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postProcessMergedBeanDefinition</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析其余的注解</span>    InjectionMetadata metadata <span class="token operator">=</span> <span class="token function">findResourceMetadata</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanType<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    metadata<span class="token punctuation">.</span><span class="token function">checkConfigMembers</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> InjectionMetadata <span class="token function">findResourceMetadata</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> PropertyValues pvs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 构建当前bean的缓存key，用于存放这个bean的所有依赖</span>        String cacheKey <span class="token operator">=</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">?</span> beanName <span class="token operator">:</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先从injectionMetadataCache缓存中拿，没有再构造，最后放入缓存</span>        InjectionMetadata metadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>InjectionMetadata<span class="token punctuation">.</span><span class="token function">needsRefresh</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>                metadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>InjectionMetadata<span class="token punctuation">.</span><span class="token function">needsRefresh</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        metadata<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    metadata <span class="token operator">=</span> <span class="token function">buildResourceMetadata</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> metadata<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 开始解析@WebServiceRef，@EJB和@Resource</span><span class="token comment" spellcheck="true">// 这里面任意一个解析后都会进行Modifier.isStatic判断。可知静态字段或方法不支持自动注入，直接抛出了异常</span><span class="token keyword">private</span> InjectionMetadata <span class="token function">buildResourceMetadata</span><span class="token punctuation">(</span><span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>InjectionMetadata<span class="token punctuation">.</span>InjectedElement<span class="token operator">></span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> clazz<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> List<span class="token operator">&lt;</span>InjectionMetadata<span class="token punctuation">.</span>InjectedElement<span class="token operator">></span> currElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 遍历这个class的所有field，依次对每个field进行处理</span>            ReflectionUtils<span class="token punctuation">.</span><span class="token function">doWithLocalFields</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> field <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// @WebServiceRef注解处理</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>webServiceRefClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>webServiceRefClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@WebServiceRef annotation is not supported on static fields"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebServiceRefElement</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> field<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// @EJB注解处理</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ejbRefClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>ejbRefClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@EJB annotation is not supported on static fields"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EjbRefElement</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> field<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// @Resource注解处理</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Resource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@Resource annotation is not supported on static fields"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>ignoredResourceTypes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceElement</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> field<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 再遍历这个class的所有method，处理以set方法进行注入的方式</span>            ReflectionUtils<span class="token punctuation">.</span><span class="token function">doWithLocalMethods</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> method <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                Method bridgedMethod <span class="token operator">=</span> BridgeMethodResolver<span class="token punctuation">.</span><span class="token function">findBridgedMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>BridgeMethodResolver<span class="token punctuation">.</span><span class="token function">isVisibilityBridgeMethodPair</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> bridgedMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getMostSpecificMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>webServiceRefClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> bridgedMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>webServiceRefClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@WebServiceRef annotation is not supported on static methods"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@WebServiceRef annotation requires a single-arg method: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        PropertyDescriptor pd <span class="token operator">=</span> BeanUtils<span class="token punctuation">.</span><span class="token function">findPropertyForMethod</span><span class="token punctuation">(</span>bridgedMethod<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                        currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebServiceRefElement</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> bridgedMethod<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ejbRefClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> bridgedMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>ejbRefClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@EJB annotation is not supported on static methods"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@EJB annotation requires a single-arg method: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        PropertyDescriptor pd <span class="token operator">=</span> BeanUtils<span class="token punctuation">.</span><span class="token function">findPropertyForMethod</span><span class="token punctuation">(</span>bridgedMethod<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                        currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EjbRefElement</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> bridgedMethod<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bridgedMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Resource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@Resource annotation is not supported on static methods"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>paramTypes<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"@Resource annotation requires a single-arg method: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>ignoredResourceTypes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>paramTypes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            PropertyDescriptor pd <span class="token operator">=</span> BeanUtils<span class="token punctuation">.</span><span class="token function">findPropertyForMethod</span><span class="token punctuation">(</span>bridgedMethod<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                            currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceElement</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> bridgedMethod<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            elements<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> currElements<span class="token punctuation">)</span><span class="token punctuation">;</span>            targetClass <span class="token operator">=</span> targetClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> targetClass <span class="token operator">!=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InjectionMetadata</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ResourceElement源码"><a href="#ResourceElement源码" class="headerlink" title="ResourceElement源码"></a>ResourceElement源码</h4><p>​以@Resource注解解析后的数据ResourceElement为例，可以发现beanName默认为@Resource的name字段。如果没有则为field字段（注解在field上）。或者则去掉前面的set，再将下个字母变为小写作为beanName（注解在set方法上）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ResourceElement</span> <span class="token keyword">extends</span> <span class="token class-name">LookupElement</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 存在@Lazy注解，且value为true，这个值就为true     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> lazyLookup<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ResourceElement</span><span class="token punctuation">(</span>Member member<span class="token punctuation">,</span> AnnotatedElement ae<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> PropertyDescriptor pd<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>member<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">;</span>       Resource resource <span class="token operator">=</span> ae<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Resource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// @Resource的name字段</span>       String resourceName <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resourceType <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>isDefaultName <span class="token operator">=</span> <span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isDefaultName<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// name字段为空</span>          <span class="token comment" spellcheck="true">// 先获取这个字段名</span>          resourceName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>member <span class="token keyword">instanceof</span> <span class="token class-name">Method</span> <span class="token operator">&amp;&amp;</span> resourceName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resourceName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 注解在set方法上，则去掉前面的set，再将下个字母变为小写作为beanName</span>             resourceName <span class="token operator">=</span> Introspector<span class="token punctuation">.</span><span class="token function">decapitalize</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>embeddedValueResolver <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 支持占位符解析</span>          resourceName <span class="token operator">=</span> embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">!=</span> resourceType<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">checkResourceType</span><span class="token punctuation">(</span>resourceType<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// No resource type specified... check field/method.</span>          resourceType <span class="token operator">=</span> <span class="token function">getResourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 默认字段名</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">(</span>resourceName <span class="token operator">!=</span> null <span class="token operator">?</span> resourceName <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 默认当前字段的Class类型</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>lookupType <span class="token operator">=</span> resourceType<span class="token punctuation">;</span>       String lookupValue <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>mappedName <span class="token operator">=</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>lookupValue<span class="token punctuation">)</span> <span class="token operator">?</span> lookupValue <span class="token operator">:</span> resource<span class="token punctuation">.</span><span class="token function">mappedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Lazy lazy <span class="token operator">=</span> ae<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Lazy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>lazyLookup <span class="token operator">=</span> <span class="token punctuation">(</span>lazy <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> lazy<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**           字段注入方法，如果需要懒加载，则会创建一个代理对象   */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">getResourceToInject</span><span class="token punctuation">(</span>Object target<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String requestingBeanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lazyLookup <span class="token operator">?</span> <span class="token function">buildLazyResourceProxy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span> <span class="token operator">:</span>             <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字段注入"><a href="#字段注入" class="headerlink" title="字段注入"></a>字段注入</h3><p>bean的populateBean调用了InstantiationAwareBeanPostProcessor#postProcessProperties方法，开始字段的注入</p><h4 id="CommonAnnotationBeanPostProcessor-postProcessProperties"><a href="#CommonAnnotationBeanPostProcessor-postProcessProperties" class="headerlink" title="CommonAnnotationBeanPostProcessor#postProcessProperties"></a>CommonAnnotationBeanPostProcessor#postProcessProperties</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> PropertyValues <span class="token function">postProcessProperties</span><span class="token punctuation">(</span>PropertyValues pvs<span class="token punctuation">,</span> Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 找出上一步缓存的元数据</span>    InjectionMetadata metadata <span class="token operator">=</span> <span class="token function">findResourceMetadata</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 开始注入</span>       metadata<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">"Injection of resource dependencies failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pvs<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="InjectionMetadata-InjectedElement-inject"><a href="#InjectionMetadata-InjectedElement-inject" class="headerlink" title="InjectionMetadata.InjectedElement#inject"></a>InjectionMetadata.InjectedElement#inject</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>Object target<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String requestingBeanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> PropertyValues pvs<span class="token punctuation">)</span>       <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isField<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 字段注入</span>       Field field <span class="token operator">=</span> <span class="token punctuation">(</span>Field<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>member<span class="token punctuation">;</span>       ReflectionUtils<span class="token punctuation">.</span><span class="token function">makeAccessible</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 根据不同的子类getResourceToInject实现，获取对应的bean。会触发依赖bean的创建</span>       <span class="token comment" spellcheck="true">// 依赖bean创建完毕并返回后，再将其赋予给field</span>       field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token function">getResourceToInject</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// set方法注入</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkPropertySkipping</span><span class="token punctuation">(</span>pvs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>          Method method <span class="token operator">=</span> <span class="token punctuation">(</span>Method<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>member<span class="token punctuation">;</span>          ReflectionUtils<span class="token punctuation">.</span><span class="token function">makeAccessible</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>          method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token function">getResourceToInject</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">getTargetException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>CommonAnnotationBeanPostProcessor</code> 是标准注解(<code>@Resource/@PostConstruct/@PreDestroy</code>)的解析者，通过<strong>元数据提前解析+生命周期钩子回调</strong>，实现了依赖注入和生命周期管理。</p><ul><li><strong>CommonAnnotationBeanPostProcessor#postProcessMergedBeanDefinition</strong>：负责扫描 <code>@Resource</code>、<code>@PostConstruct</code>、<code>@PreDestroy</code> 注解，把解析结果封装成 <code>InjectionMetadata</code>（字段、方法对应的 <code>ResourceElement</code> 等），再缓存下来，等待后续注入或生命周期回调使用</li><li><strong>CommonAnnotationBeanPostProcessor#postProcessProperties</strong>：负责根据解析好的 <code>InjectionMetadata</code> 真正进行注入</li><li><strong>InitDestroyAnnotationBeanPostProcessor#postProcessBeforeInitialization</strong>： 在 Bean 初始化前，调用所有 <code>@PostConstruct</code> 标注的方法<ul><li><strong>InitDestroyAnnotationBeanPostProcessor#postProcessBeforeDestruction</strong>：在 Bean 销毁前，调用所有 <code>@PreDestroy</code> 标注的方法。</li></ul></li></ul><h2 id="AutowiredAnnotationBeanPostProcessor"><a href="#AutowiredAnnotationBeanPostProcessor" class="headerlink" title="AutowiredAnnotationBeanPostProcessor"></a>AutowiredAnnotationBeanPostProcessor</h2><p>根据构造方法可知，它专用来处理Spring提供的这些注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// @Autowired支持</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>autowiredAnnotationTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Autowired<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// @Value支持</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>autowiredAnnotationTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Value<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// javax提供的@Value支持</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>autowiredAnnotationTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span><span class="token punctuation">)</span>             ClassUtils<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.inject.Value"</span><span class="token punctuation">,</span> AutowiredAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"JSR-330 'javax.inject.Inject' annotation found and supported for autowiring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// JSR-330 API not available - simply skip.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>@org.springframework.beans.factory.annotation.Autowired</strong></li><li><strong>@org.springframework.beans.factory.annotation.Value</strong></li><li><strong>@javax.inject.Inject</strong></li></ul><p>​整体流程和上面的CommonAnnotationBeanPostProcessor差不多。都是<strong>在postProcessMergedBeanDefinition方法里进行bean内部有上诉3个注解的字段或方法进行解析并缓存。然后在postProcessProperties进行依赖注入</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeanPostProcessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Bean初始化</title>
      <link href="/2021-01-08/spring-bean-de-chu-shi-hua/"/>
      <url>/2021-01-08/spring-bean-de-chu-shi-hua/</url>
      
        <content type="html"><![CDATA[<hr><p>​整体分析了BeanFactory和ApplicationContext的区别。并从Spring Bean创建流程源码分析了bean的创建流程并对其进行总结，并分析了三级缓存的作用</p><span id="more"></span><h1 id="Spring-Bean的初始化（5-1-x）"><a href="#Spring-Bean的初始化（5-1-x）" class="headerlink" title="Spring-Bean的初始化（5.1.x）"></a>Spring-Bean的初始化（5.1.x）</h1><h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>​<code>BeanFactory</code> 是 Spring 最基础的 IoC 容器接口，仅提供了 Bean 的获取与管理能力。而 <code>DefaultListableBeanFactory</code> 是其默认实现类，它通过实现多个关键接口，构建出完整的 IoC 容器功能体系。</p><p>以下是 <code>DefaultListableBeanFactory</code> 实现的主要接口以及其对应的职责：</p><table><thead><tr><th align="center">主要接口</th><th align="left">主要功能</th></tr></thead><tbody><tr><td align="center"><strong>AliasRegistry</strong></td><td align="left">提供 Bean 的别名注册和解析能力。允许一个 Bean 在容器中有多个名字，是 Spring IoC 容器灵活命名机制的基础。</td></tr><tr><td align="center"><strong>BeanDefinitionRegistry</strong></td><td align="left">管理 Bean 的定义信息（<code>BeanDefinition</code>），提供注册、删除、查询等能力。是容器启动期间加载和维护元数据的关键接口。</td></tr><tr><td align="center"><strong>SingletonBeanRegistry</strong></td><td align="left">管理单例 Bean 的注册与缓存机制，控制 Bean 的生命周期。所有单例 Bean 都存储在 <code>singletonObjects</code> 缓存中。</td></tr><tr><td align="center"><strong>AutowireCapableBeanFactory</strong></td><td align="left">提供创建 Bean 实例、属性注入、初始化回调、AOP 代理等高级功能。<br />通常用于手动创建并管理 Bean 的生命周期，比如调用 <code>createBean()</code>、<code>autowireBean()</code> 等。</td></tr><tr><td align="center"><strong>ConfigurableListableBeanFactory</strong></td><td align="left">是 <code>BeanFactory</code> 的高级配置接口，支持访问所有已注册的 <code>BeanDefinition</code>，还可以注册 <code>BeanPostProcessor</code>组件。<br /><strong>常用于容器初始化后对 BeanFactory 进行增强或定制</strong>。</td></tr><tr><td align="center"><strong>HierarchicalBeanFactory</strong></td><td align="left">支持父子容器结构，允许子容器从父容器中查找 Bean，提升模块化和隔离能力。<br /> 是实现 <code>ApplicationContext</code> 之间嵌套结构的基础。</td></tr><tr><td align="center"><strong>FactoryBeanRegistrySupport</strong>  （继承自 <code>AbstractAutowireCapableBeanFactory</code>）</td><td align="left">支持 <code>FactoryBean</code> 机制的关键实现类，负责识别并缓存 <code>FactoryBean</code> 创建的产品对象。<br /> 比如，当你定义了一个实现 <code>FactoryBean&lt;T&gt;</code> 的类时，容器最终会获取到 <code>T</code> 类型的对象，而不是工厂本身。</td></tr></tbody></table><h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><p>ApplicationContext不仅实现了BeanFactory接口，还多了许多拓展接口，其余接口如下</p><table><thead><tr><th>其他接口</th><th>主要功能</th></tr></thead><tbody><tr><td><strong>EnvironmentCapable</strong></td><td>获取Environment，可读取各种配置</td></tr><tr><td><strong>MessageSource</strong></td><td>国际化消息解析</td></tr><tr><td><strong>ApplicationEventPublisher</strong></td><td>支持事件发布&#x2F;监听机制</td></tr><tr><td><strong>ResourcePatternResolver</strong></td><td>支持资源加载，比如 classpath 等路径资源</td></tr></tbody></table><p>​在注解驱动的环境下，常用的 <code>ApplicationContext</code> 实现类为 <code>AnnotationConfigApplicationContext</code>。该类内部封装了一个 <code>DefaultListableBeanFactory</code> 实例，作为底层的 Bean 注册与管理中心，从而继承了 <code>BeanFactory</code> 的全部能力。</p><p>​而其<strong>refresh</strong>方法更是容器启动流程的核心。<strong>Bean的解析、注册，各种后置处理器的准备、使用，国际化和事件发布、各种监听器均在这个方法中完成，可以说是整个Spring的核心</strong></p><h2 id="bean创建流程源码（只保留了重要的部分）"><a href="#bean创建流程源码（只保留了重要的部分）" class="headerlink" title="bean创建流程源码（只保留了重要的部分）"></a>bean创建流程源码（只保留了重要的部分）</h2><h3 id="AbstractBeanFactory-doGetBean"><a href="#AbstractBeanFactory-doGetBean" class="headerlink" title="AbstractBeanFactory#doGetBean"></a>AbstractBeanFactory#doGetBean</h3><p>org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean方法部分关键代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取真实的beanName，参数name可能是bean的别名和FactoryBean格式（前面有&amp;）</span>String beanName <span class="token operator">=</span> <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>Object bean<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Eagerly check singleton cache for manually registered singletons.</span><span class="token comment" spellcheck="true">// 为了解决循环引用，在这里就必须可以从二级或三级缓存中拿bean（尽管此时这个bean实例化了，还未填充数据和初始化）</span>Object sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sharedInstance <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 循环创建多例bean抛出异常</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrototypeCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 先获取父容器</span>  BeanFactory parentBeanFactory <span class="token operator">=</span> <span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 父BeanFactory存在且当前的BeanFactory不存在BeanDefinition，就会去父BeanFactory递归查找</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在父容器中获取bean，能获取到就直接返回了</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>typeCheckOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 标记bean为已创建</span>    <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    RootBeanDefinition mbd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkMergedBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependsOn <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dependsOn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 有dependsOn的bean，则优先创建这些bean</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Create bean instance.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 单例bean的创建</span>      sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// bean创建失败，执行destory相关方法并直接抛出异常</span>          <span class="token function">destroySingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 创建多例bean</span>      Object prototypeInstance <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        prototypeInstance <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 特殊的scope里bean的创建。创建在session，request等scope里面的bean</span>      String scopeName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Scope scope <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 获取并放入对应的Scope中，在返回bean</span>      Object scopedInstance <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>scopedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">cleanupAfterBeanCreationFailure</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Check if required type matches the type of the actual bean instance.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>requiredType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    T convertedBean <span class="token operator">=</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>convertedBean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> convertedBean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> bean<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DefaultSingletonBeanRegistry-getSingleton"><a href="#DefaultSingletonBeanRegistry-getSingleton" class="headerlink" title="DefaultSingletonBeanRegistry#getSingleton"></a>DefaultSingletonBeanRegistry#getSingleton</h4><p>从三级缓存中获取bean</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先从一级缓存中直接获取</span>        Object singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 单例bean还没创建好但是正在创建的情况（说明已经有循环引用了）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 二级缓存中获取</span>            singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 一级缓存为空，从二级中取</span>                        singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 二级缓存为空，再从三级缓存中获取</span>                            ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> singletonFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 三级缓存不为空，取出该bean，放入二级缓存，同时从三级缓存中删除</span>                                singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singletonObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AbstractAutowireCapableBeanFactory-doCreateBean"><a href="#AbstractAutowireCapableBeanFactory-doCreateBean" class="headerlink" title="AbstractAutowireCapableBeanFactory#doCreateBean"></a>AbstractAutowireCapableBeanFactory#doCreateBean</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实例化bean。先创建出一个空壳的bean，各种field和方法都没有填充和调用</span>BeanWrapper instanceWrapper <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  instanceWrapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanInstanceCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 已实例化的bean</span>Object bean <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// bean 的class type</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">!=</span> NullBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  mbd<span class="token punctuation">.</span>resolvedTargetType <span class="token operator">=</span> beanType<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 单例+允许循环引用+当前bean正在创建。就需要将bean包装后放入三级缓存中</span><span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span>    <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 将已实例化但还未填充属性的bean放入三级缓存，供其他依赖此bean的bean使用</span>  <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  准备初始化bean</span>Object exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 填充bean的字段（依赖的字段bean）</span>  <span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// bean完全填充好属性后，开始调用各种初始化方法和BeanPostProcessor接口</span>  exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 省略异常</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 注册destroy相关方法</span><span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AbstractAutowireCapableBeanFactory-populateBean"><a href="#AbstractAutowireCapableBeanFactory-populateBean" class="headerlink" title="AbstractAutowireCapableBeanFactory#populateBean"></a>AbstractAutowireCapableBeanFactory#populateBean</h4><p>填充bean的字段</p><pre class="line-numbers language-java"><code class="language-java">PropertyValues pvs <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">hasPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> mbd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 根据autowireMode来判断注入方式</span><span class="token comment" spellcheck="true">// 1. xml显示配置的autowire</span><span class="token comment" spellcheck="true">// 2. 配置了@Bean注解的autowire字段（这个字段默认不会走下面的代码注入）</span><span class="token keyword">int</span> resolvedAutowireMode <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_NAME <span class="token operator">||</span> resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>  MutablePropertyValues newPvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Add property values based on autowire by name if applicable.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_NAME<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">autowireByName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Add property values based on autowire by type if applicable.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">autowireByType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  pvs <span class="token operator">=</span> newPvs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ==================== 以下就是@Autowired和@Resource注入方式的处理</span><span class="token comment" spellcheck="true">// 是否存在InstantiationAwareBeanPostProcessor处理器（主要是注解解析PostProcessor）</span><span class="token keyword">boolean</span> hasInstAwareBpps <span class="token operator">=</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> needsDepCheck <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getDependencyCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> AbstractBeanDefinition<span class="token punctuation">.</span>DEPENDENCY_CHECK_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>PropertyDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> filteredPds <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hasInstAwareBpps<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pvs <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pvs <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取InstantiationAwareBeanPostProcessor处理器，并调用其postProcessProperties方法</span>  <span class="token comment" spellcheck="true">// 基于注解的依赖注入会用到</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bp <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      InstantiationAwareBeanPostProcessor ibp <span class="token operator">=</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor<span class="token punctuation">)</span> bp<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 注解相关的自动注入</span>      PropertyValues pvsToUse <span class="token operator">=</span> ibp<span class="token punctuation">.</span><span class="token function">postProcessProperties</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      pvs <span class="token operator">=</span> pvsToUse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AbstractAutowireCapableBeanFactory-initializeBean"><a href="#AbstractAutowireCapableBeanFactory-initializeBean" class="headerlink" title="AbstractAutowireCapableBeanFactory#initializeBean"></a>AbstractAutowireCapableBeanFactory#initializeBean</h4><p>初始化bean</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 三种aware(BeanName，BeanClassLoader，BeanFactory)</span><span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 名叫wrappedBean，表示这些方法返回的bean可能是被包装后的，比如aop相关</span>Object wrappedBean <span class="token operator">=</span> bean<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// BeanPostProcessor接口实例回调（在bean的初始化方法调用之前调用）</span>  <span class="token comment" spellcheck="true">// 例如：@PostConstruct注解的实现</span>  wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsBeforeInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// InitializingBean方法和init-method方法</span><span class="token function">invokeInitMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> wrappedBean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// BeanPostProcessor#postProcessAfterInitialization接口实例回调。</span>  <span class="token comment" spellcheck="true">// 在bean的初始化方法调用完成之后调用，说明bean以及初始化完毕，可以实现其他扩展功能了</span>  <span class="token comment" spellcheck="true">//比如AOP的实现、 @Scheduled注解实现等</span>  wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> wrappedBean<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h2><ul><li>一级缓存（<strong>DefaultSingletonBeanRegistry#singletonObjects</strong>）：存放的是完全初始化好的bean，包括已实例化、填充内部依赖的bean，运行完初始化方法（@PostConstruct、afterPropertiesSet方法、指定的init-method方法）</li><li>二级缓存（<strong>DefaultSingletonBeanRegistry#earlySingletonObjects</strong>）：存放bean缓存（如果能被AOP，就是AOP对象），但还未填充属性和允许初始化方法</li><li>三级缓存（<strong>DefaultSingletonBeanRegistry#singletonFactories</strong>）：存放bean的ObjectFactory工厂对象，使用这个工厂对象，可提前暴露出bean的引用（专用来提前暴露AOP对象的方法）</li></ul><h3 id="为什么要使用三级缓存"><a href="#为什么要使用三级缓存" class="headerlink" title="为什么要使用三级缓存"></a><strong>为什么要使用三级缓存</strong></h3><p>​<strong>三级缓存专门来解决AOP对象的暴露问题</strong>。</p><p>​如果没用AOP是可以只用一级缓存和二级缓存就解决的。但如果使用了AOP且没有三级缓存，那么必须在实例化后就马上完成AOP代理，但这和spring的设计初衷不同，AOP代理的完成时使用了bean的后置处理器<strong>AnnotationAwareAspectJAutoProxyCreator</strong>来完成的，也就是在初始化bean后执行的bean后置处理器方法（<strong>AbstractAutowireCapableBeanFactory#initializeBean</strong>），就不可能再实例化bean后进行代理，所以才有了三级缓存，仅用来提前暴露AOP对象</p><h3 id="三层级缓存真能完美解决吗？"><a href="#三层级缓存真能完美解决吗？" class="headerlink" title="三层级缓存真能完美解决吗？"></a>三层级缓存真能完美解决吗？</h3><p>如果有3个bean分别为A、B、C，A依赖B和C，B只依赖A，C什么都不依赖，但提供一个方法sayHello使用。</p><p>​当开始实例化A时，实例化A后将其工厂对象放入三级缓存中，开始填充A属性，发现了B需要填充，开始实例化B，实例化B对象过程中又需要填充其属性A，这时能从三级缓存中取出了A的引用（但此时A不完整），如果B对象有一个初始化方法（@PostConstruct），调用A对象里的C对象的sayHello方法，但由于A此时只是个空壳，就会抛出空指针异常。</p><p>​总的来说，就是在循环引用期间的调用初始化方法时，调用了尚未完全创建好的bean（空壳bean）的某个字段的方法，导致抛出NPE，导致服务启动失败</p><h2 id="关键流程总结"><a href="#关键流程总结" class="headerlink" title="关键流程总结"></a>关键流程总结</h2><ol><li>实例化bean：创建bean的空壳对象</li><li>将其工厂对象（ObjectFactory）放入三级缓存（根据<strong>AbstractAutowireCapableBeanFactory#allowCircularReferences</strong>字段决定）</li><li>填充依赖bean（<strong>AbstractAutowireCapableBeanFactory#populateBean</strong>）：进行@Autowired和@Resource等注解的字段注入。如果这些依赖的 Bean 还没创建，会触发递归创建</li><li>初始化bean（<strong>AbstractAutowireCapableBeanFactory#initializeBean</strong>）<ul><li>4.1 调用<strong>BeanPostProcessor#postProcessBeforeInitialization方法</strong>（初始化前的hook）</li><li>4.2 调用各种初始化方法（**@PostConstruct、afterPropertiesSet方法、指定的init-method方法**）</li><li>4.3 调用<strong>BeanPostProcessor#postProcessAfterInitialization</strong>（初始化后的hook，<strong>AOP相关实现</strong>）</li></ul></li><li>注册destory相关方法（<strong>AbstractBeanFactory#registerDisposableBeanIfNecessary</strong>）</li><li>完成创建，放入一级缓存。同时移除三级缓存和二级缓存中的相关对象</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring三级缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM参数</title>
      <link href="/2020-12-18/jvm-can-shu/"/>
      <url>/2020-12-18/jvm-can-shu/</url>
      
        <content type="html"><![CDATA[<p>JVM常用参数整理和垃圾收集器组合</p> <span id="more"></span><h1 id="JVM参数和垃圾收集器组合"><a href="#JVM参数和垃圾收集器组合" class="headerlink" title="JVM参数和垃圾收集器组合"></a>JVM参数和垃圾收集器组合</h1><h2 id="jvm参数整理"><a href="#jvm参数整理" class="headerlink" title="jvm参数整理"></a>jvm参数整理</h2><ul><li><strong>-Xms64m</strong> ：初始堆大小</li><li><strong>-Xmx128m</strong> ：最大堆大小</li><li><strong>-Xmn32m</strong> ：年轻代大小</li><li><strong>-XX:MaxNewSize&#x3D;256m</strong> : 最大新生代大小</li><li><strong>-Xss512k</strong>：栈大小</li><li><strong>-XX:MetaspaceSize&#x3D;256M</strong> ：Metaspace扩容时触发FullGC的初始化阈值(并不是元空间的初始化大小，元空间是不断扩容的，当达到这个值时，就会触发full gc，<a href="https://www.jianshu.com/p/b448c21d2e71">链接</a>）</li><li><strong>-XX:MaxMetaspaceSize&#x3D;512M</strong>：Metaspace最大大小</li><li><strong>-XX:NewRatio&#x3D;2</strong>：老年代和新生代的比例</li><li><strong>-XX:SurvivorRatio&#x3D;8</strong> ：Eden区与一个Survivor区的大小比值（所以<strong>s0:s1:eden&#x3D;1:1:8</strong>）</li><li><strong>-XX:MinHeapFreeRatio&#x3D;40</strong>：空闲堆空间的最小百分比。如果空闲堆空间的比例小于它，则会进行堆扩容</li><li><strong>-XX:MaxHeapFreeRatio&#x3D;70</strong>：空闲堆空间的最大百分比。如果空闲堆空间的比例大于它，则会进行堆缩容</li><li><strong>-XX:-DisableExplicitGC</strong>：禁止显式GC，即禁止程序中System.gc()。个人感觉没必要</li><li><strong>-XX:+HeapDumpOnOutOfMemoryError</strong>：OOM时导出堆快照到文件</li><li><strong>-XX:HeapDumpPath&#x3D;&#x2F;home&#x2F;huskie&#x2F;gc&#x2F;oom.hprof</strong>：OOM时导出文件路径</li><li><strong>-Xloggc:</strong>&#x2F;home&#x2F;ruidong&#x2F;gc.log   存储gc日志的路径</li><li><strong>-XX:OnOutOfMemoryError</strong>：OOM时操作，比如如执行脚本发送邮件</li><li><strong>-XX:+TraceClassLoading</strong>：打印加载类的详细信息</li><li><strong>-XX:+PrintGCDetails</strong>：打印GC详细信息</li><li><strong>-XX:+PrintGCTimeStamps</strong>：打印CG发生的时间戳（相对于项目启动时间）</li><li><strong>-XX:+PrintGCDateStamps</strong>：打印GC发生的时间</li><li><strong>-XX:+PrintHeapAtGC</strong>：每一次GC前和GC后，都打印堆信息</li><li><strong>-XX:+PrintClassHistogram</strong>：按下Ctrl+Break后，打印类的信息</li><li><strong>-XX:+PrintGCApplicationConcurrentTime</strong> ：打印应用程序的运行时间（许多事情会导致JVM暂停所有线程，停在安全点。gc也只是其中的一种，当暂停之后在重启应用线程，则会刷新这个时间（归0），在重新计数）<a href="http://ifeve.com/logging-stop-the-world-pauses-in-jvm/">链接</a></li><li><strong>-XX:+PrintGCApplicationStoppedTime</strong> ：打印应用线程暂停的时间，显示应用线程被暂停了多久和应用线程暂停到安全点花费的时间</li><li><strong>-XX:TargetSurvivorRatio&#x3D;50</strong> ：survivor空间的晋升大小空间百分比（默认为50）</li><li><strong>-XX:MaxTenuringThreshold&#x3D;15</strong>  ：年轻代晋升到老年代的最大年龄阈值(tenuring threshold)。默认值为 15[每次GC，增加1岁，到15岁如果还要存活，放入Old区]。<strong>jvm还会动态的计算晋升阈值，方法：依次从年龄为1的对象大小加起来，一直加到大小超过了 [（TargetSurvivorRatio * survivor_capacity）&#x2F; 100 ]值，这时加起来的最大年龄大小即为这次晋升的临界阈值</strong>（具体算法在：hotspot\src\share\vm\gc_implementation\shared\ageTable.cpp文件里，方法为compute_tenuring_threshold）</li><li><strong>-XX:+PrintTenuringDistribution</strong> ：ygc 时打印当前晋升年龄信息</li></ul><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><h3 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h3><h4 id="Serial（hotspot虚拟机在客户端下的默认新生代垃圾收集器）"><a href="#Serial（hotspot虚拟机在客户端下的默认新生代垃圾收集器）" class="headerlink" title="Serial（hotspot虚拟机在客户端下的默认新生代垃圾收集器）"></a>Serial（hotspot虚拟机在客户端下的默认新生代垃圾收集器）</h4><p>单线程新生代收集器，复制算法，整个过程STW</p><p>优势：内存消耗最小</p><p>缺点：不适合大内存多处理器工作，慢</p><h4 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h4><p>多线程并行的新生代收集器，复制算法，整个过程STW</p><ul><li><strong>-XX:ParallelGCThreads&#x3D;4</strong> ：并行收集的线程数</li></ul><h4 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h4><ul><li>吞吐量 &#x3D; 运行用户代码时间 &#x2F; ( 运行用户代码时间 + 垃圾收集时间 )</li></ul><p>吞吐量优先的新生代并行多线程收集器，复制算法（<strong>标记-复制</strong>算法）</p><p>三个重要参数：</p><ul><li><strong>XX:MaxGCPauseMillis</strong> ：垃圾收集最大停顿时间，大于0的毫秒数</li><li><strong>-XX:GCTimeRatio</strong>: 大于0小于100的整数（运行用户代码时间比上垃圾回收的时间），默认为99，即允许最大1%的垃圾回收时间</li><li><strong>-XX:+UseAdaptiveSizePolicy</strong>：开启垃圾收集器的自适应调节策略。虚拟机动态调整新生代，Eden区，Survivor区的比例和晋升大小</li></ul><h3 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h3><h4 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h4><p><strong>标记-清除</strong>算法的老年代收集器</p><h4 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="Serial Old"></a>Serial Old</h4><p>Serial的老年代会收集，<strong>标记-整理</strong>算法</p><h4 id="Parallel-Scavenge-Old"><a href="#Parallel-Scavenge-Old" class="headerlink" title="Parallel Scavenge Old"></a>Parallel Scavenge Old</h4><p>Parallel Scavenge收集器的老年代版本，标记-整理算法</p><h3 id="整堆"><a href="#整堆" class="headerlink" title="整堆"></a>整堆</h3><h4 id="G1（garbage-frist收集器）"><a href="#G1（garbage-frist收集器）" class="headerlink" title="G1（garbage-frist收集器）"></a>G1（garbage-frist收集器）</h4><h2 id="垃圾收集器组合"><a href="#垃圾收集器组合" class="headerlink" title="垃圾收集器组合"></a>垃圾收集器组合</h2><ul><li>Serial + SerialOld</li><li>Serial + CMS (jdk8声明废弃，jdk9已被取消)</li><li>ParNew +CMS （使用CMS收集器的默认组合)</li><li>ParNew + SerialOld (jdk8声明废弃，jdk9已被取消)</li><li>Parallel Scavenge +  SerialOld</li><li>Parallel Scavenge + Parallel Scavenge Old（jdk8的默认组合）G1（jdk9的默认收集器，且CMS被标记为废弃了）</li></ul><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul><li><strong>java -XX:+PrintFlagsFinal -version</strong>  ：查看jvm默认参数。数据太多可配合grep使用</li></ul><h2 id="GCRoots对象"><a href="#GCRoots对象" class="headerlink" title="GCRoots对象"></a>GCRoots对象</h2><ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li><li>本地方法栈(Native 方法)中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>所有被同步锁持有的对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>G1</title>
      <link href="/2020-11-25/g1/"/>
      <url>/2020-11-25/g1/</url>
      
        <content type="html"><![CDATA[<hr><p>​简单总结了G1和其常用参数，并分析了的G1日志</p><span id="more"></span><h1 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h1><p>​G1（Garbage First）是 JDK 7 引入，并在 JDK 9 默认启用的服务端垃圾回收器。它的核心理念是将整个 Java 堆划分为多个大小相等的 <strong>Region</strong>，打破了传统“新生代 &#x2F; 老年代”的物理分区模式，转而以 Region 为基本单位进行垃圾管理与回收。</p><ul><li><strong>整堆收集</strong>：G1 是一个真正的 <strong>整堆并行压缩收集器</strong>，新生代和老年代都可以并行回收。</li><li><strong>并发标记</strong>：采用 <strong>三色标记法 + SATB + 写屏障机制</strong>，保证并发标记期间的准确性。</li><li><strong>可预测的停顿时间</strong>：用户可设置 <code>-XX:MaxGCPauseMillis</code> 控制最大停顿时间，G1 会在这个目标下选择哪些 Region 进入回收集（CSet）。</li></ul><h2 id="常用参数设置"><a href="#常用参数设置" class="headerlink" title="常用参数设置"></a>常用参数设置</h2><ul><li><strong>-XX:+UseG1GC</strong></li><li><strong>-XX:G1HeapRegionSize&#x3D;2M</strong>：一个Region的大小</li><li><strong>-XX:MaxGCPauseMillis&#x3D;80</strong>：允许收集停顿的最大时常（毫秒）</li><li><strong>-XX:InitiatingHeapOccupancyPercent&#x3D;45</strong> ：老年代占用到 45% 时触发并发标记周期（默认45）</li><li><strong>不要再设置-xmn和-XX:NewRatio</strong></li></ul><h2 id="Region划分"><a href="#Region划分" class="headerlink" title="Region划分"></a>Region划分</h2><ul><li>整个堆被分成多个 <strong>Region</strong>（默认 2048 个），每个 Region 的大小为 <strong>1MB ~ 32MB</strong>，并且必须是 2 的幂次方。</li><li>每个 Region 会被动态标记为不同用途：<ul><li><code>E</code>：Eden 区（新生代分配对象）</li><li><code>S</code>：Survivor 区（新生代存活对象）</li><li><code>O</code>：Old 区（长生命周期对象）</li><li><code>H</code>：Humongous 区（大对象，直接分配在老年代）</li></ul></li></ul><p>​大对象（如数组、长字符串等）若超过一个 Region 一半大小，会被当作 Humongous 对象，分配连续的多个 Region。由于这些对象移动成本高，<strong>G1 默认不会移动 Humongous 对象</strong>，而是直接将它们标记为老年代区域。</p><h2 id="Remembered-Set（RSet）"><a href="#Remembered-Set（RSet）" class="headerlink" title="Remembered Set（RSet）"></a>Remembered Set（RSet）</h2><p>​由于 G1 会独立地对某些 Region 进行回收，它必须知道<strong>老年代是否引用了某个新生代对象</strong>。这正是 <strong>Remembered Set（记忆集）</strong> 的作用：</p><ul><li>每个 Region 都维护了一个对应的 <strong>RSet</strong>，记录有哪些其它 Region 的对象引用了自己。</li><li>在回收某个 Region 时，G1 只需要扫描这个 RSet，而不必全堆扫描，大幅降低了跨代引用处理的成本。</li></ul><blockquote><p>简单说：<strong>RSet 让分区式回收变得可能而高效。</strong></p></blockquote><h2 id="Card-Table（卡表）"><a href="#Card-Table（卡表）" class="headerlink" title="Card Table（卡表）"></a>Card Table（卡表）</h2><p>RSet 的实现依赖于 <strong>Card Table + 写屏障</strong>：</p><ul><li>Java 堆被进一步划分为更小的单位：<strong>Card</strong>，默认每个 Card 是 512 字节。</li><li>JVM 在写引用字段时会触发 <strong>写屏障（Write Barrier）</strong>，将对应 Card 标记为 dirty，并记录引用变更。</li><li>在 GC 时，这些 dirty Card 会被用于更新 RSet，确保引用信息完整。</li></ul><blockquote><p>卡表是写屏障的基础，RSet 是分区引用追踪的核心，三者协同构成 G1 的并发收集体系。</p></blockquote><h2 id="日志解析"><a href="#日志解析" class="headerlink" title="日志解析"></a>日志解析</h2><pre class="line-numbers language-log"><code class="language-log">2020-11-23T11:40:46.167+0800: 1.503: [GC pause (G1 Evacuation Pause) (young), 0.0048336 secs]   // 下面的Min,Avg,Max,Diff,Sum分别表示GC线程最小启动或耗时时间（后面的也是），平均，最大，最大差值，和总耗时，单位都为ms   [Parallel Time: 3.1 ms, GC Workers: 6] // 本次YGC共6个GC线程，总耗时3.1ms      [GC Worker Start (ms): Min: 1503.0, Avg: 1504.5, Max: 1506.1, Diff: 3.0] // 本次GC线程启动（相对于JVM的启动）      [Ext Root Scanning (ms): Min: 0.0, Avg: 0.2, Max: 0.7, Diff: 0.7, Sum: 1.1] // 本次GC线程的GC Roots扫描时间      [Update RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0] // 更新Remember Sets 的耗时统计信息（记忆集一般使用来解决跨Region的引用）         [Processed Buffers: Min: 0, Avg: 0.0, Max: 0, Diff: 0, Sum: 0]      [Scan RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0] // 每个Region都会有一个RSet，RSet又包含指向这个Region的Cards引用，这个阶段就是扫描RSet中的Cards，从而分辨出Eden哪些对象被老年代引用，从而这些不会被GC      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.2, Diff: 0.2, Sum: 0.2] // 扫描代码中的root节点（局部变量）      [Object Copy (ms): Min: 0.0, Avg: 1.3, Max: 2.7, Diff: 2.7, Sum: 7.6] // 对象copy，将存活的对象copy到目标Region中      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.3]         [Termination Attempts: Min: 1, Avg: 1.2, Max: 2, Diff: 1, Sum: 7]      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.2] // GC线程完成其他任务的时间      [GC Worker Total (ms): Min: 0.0, Avg: 1.6, Max: 3.1, Diff: 3.1, Sum: 9.4] // GC线程整个生命周期总计消耗时间      [GC Worker End (ms): Min: 1506.1, Avg: 1506.1, Max: 1506.1, Diff: 0.0] // GC线程完成任务的停止时间（相对于JVM）   [Code Root Fixup: 0.0 ms]   [Code Root Purge: 0.0 ms]   [Clear CT: 0.1 ms] // 清理Card Table（卡表）   [Other: 1.6 ms]      [Choose CSet: 0.0 ms] // 选择要回收的Region放入CSet（会根据停顿时间来决定）      [Ref Proc: 1.4 ms] // 处理引用对象耗时时间（Weak、Soft、Phantom、JNI等等）      [Ref Enq: 0.0 ms] // 遍历所有引用，将不能回收的放入pending列表      [Redirty Cards: 0.0 ms] // 重置card为dirty      // 大型对象的回收      [Humongous Register: 0.0 ms]       [Humongous Reclaim: 0.0 ms]      [Free CSet: 0.0 ms] // 释放CSet中Region占用的内存空间所耗时间   [Eden: 51.0M(51.0M)->0.0B(46.0M) Survivors: 0.0B->5120.0K Heap: 51.0M(1024.0M)->4815.7K(1024.0M)] [Times: user=0.05 sys=0.00, real=0.01 secs] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>G1 不再物理区分年轻代和老年代，转而统一使用多个 Region 管理整个堆。</p></li><li><p>支持 <strong>并发标记 + 并发回收 + 可预测停顿</strong>，是整堆压缩收集器。</p></li><li><p>使用 <strong>Remembered Set + Card Table + 写屏障</strong> 高效维护跨代引用关系。</p></li><li><p>避免 Full GC 的目标是：通过周期性并发标记、预测性选择 CSet 来进行碎片整理。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> G1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈ThreadLocal为什么被设计为弱引用</title>
      <link href="/2020-11-21/tan-tan-threadlocal-wei-shi-me-bei-she-ji-wei-ruo-yin-yong/"/>
      <url>/2020-11-21/tan-tan-threadlocal-wei-shi-me-bei-she-ji-wei-ruo-yin-yong/</url>
      
        <content type="html"><![CDATA[<hr><p>分析了ThreadLocal为什么要被设计为弱引用，并给出了ThreadLocal的建议使用方法</p><span id="more"></span><h1 id="谈谈ThreadLocal为什么被设计为弱引用"><a href="#谈谈ThreadLocal为什么被设计为弱引用" class="headerlink" title="谈谈ThreadLocal为什么被设计为弱引用"></a>谈谈ThreadLocal为什么被设计为弱引用</h1><p>​ThreadLocal在用作ThreadLocalMap的key时，是被设计为弱引用的。</p><p>​ThreadLocalMap的内部类Entry被设计为实现了WeakReference，Entry用来存放数据。在构造Entry对象时，将传进来的ThreadLocal对象包装成了真正的弱引用对象，而Entry对象和内部的value对象本身是强引用的。</p><p>弱引用的解释：</p><blockquote><p>​只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p></blockquote><p>​简单理解就是当垃圾回收时，该对象只被WeakReference对象的弱引用字段（T reference）所引用，而未被任何强类型的对象引用，那么，该弱引用的对象就会被回收。</p><p>​注意：WeakReference引用本身是强引用，它内部的（T reference）才是真正的弱引用字段，WeakReference就是一个装弱引用的容器而已。</p><h2 id="1-回收测试示例"><a href="#1-回收测试示例" class="headerlink" title="1 回收测试示例"></a>1 回收测试示例</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token function">firstStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在这里打断点，观察thread对象里的ThreadLocalMap数据</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通过是否获取返回值观察A对象里的local对象是否被回收</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> A <span class="token function">firstStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value: "</span><span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> local <span class="token operator">=</span> ThreadLocal<span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"in class A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> local<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>            local<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/soil/weakNotClear.png" alt="ThreadLocal被强引用持有，不会被回收"></p><p align="center" style="color: #888;">ThreadLocal 被强引用持有，不会被回收</p><p><img src="/img/soil/weakClear.png" alt="ThreadLocal只被弱引用持有，gc后被回收了"></p><p align="center" style="color: #888;">ThreadLocal只被弱引用持有，gc后被回收了</p><p>​如上面的代码，当构造一个A对象时，内部的local对象也构造了，之后调用get和set方法对local对象取值和设置值，当A对象不可达时，垃圾收集器就会回收A。</p><p>​现在我们假设ThreadLocalMap的Entey里的key（ThreadLocal对象）不是弱引用的，且已经调用了A的对象的get或set方法，那么垃圾收集器回收A对象时，一定不会回收里面的local对象，为什么？</p><blockquote><p>因为Entey已近持有了local对象的引用，我们没有设置引用类型，那这个引用就默认是个强引用。</p><p><strong>Thread -&gt; ThreadLocal.ThreadLocalMap -&gt; Entry[] -&gt; Enrty -&gt; key（threadLocal对象）和value</strong></p></blockquote><p>​引用链如上面所示，这<strong>个引用链全是强引用，当这个线程还未结束时，他持有的强引用，包括递归下去的所有强引用都不会被垃圾回收器回收</strong>。</p><p>​那么回到正常情况，ThreadLocalMap里Entey的key是弱引用，在本例中也就是local对象在这里是弱引用，当对象A回收时，由于local对象只剩下被弱引用key所引用，所以local对象也会被回收。</p><h2 id="2-重点来了，key为什么被设计为弱引用？？"><a href="#2-重点来了，key为什么被设计为弱引用？？" class="headerlink" title="2 重点来了，key为什么被设计为弱引用？？"></a>2 重点来了，key为什么被设计为弱引用？？</h2><p>​回归本质，ThreadLocalMap是用来存放对象的，在一次线程的执行栈中，存放数据后方便我们在任意的地方取得我们想要的值而不被其他线程干扰。ThreadLocalMap本身并没有为外界提供取出和存放数据的API，我们所能获得数据的方式只有通过ThreadLocal类提供的API来间接的从ThreadLocalMap取出数据，所以，当我们用不了key（ThreadLocal对象）的API也就无法从ThreadLocalMap里取出指定的数据。</p><p>​<strong>在上面的例子中，A对象被回收了，这些get和set方法也访问不到了，也就没法从ThreadLocalMap里取出数据了。没法利用API取出数据，那这个Entry对象还有用吗？？所以最好的方法是在A对象被回收后，系统自动回收对应的Entry对象，但是让Entry对象或其中的value对象做为弱引用都是非常不合理的（这两个要是使用弱引用，都可能造成数据意外丢失）。所以，让key（threadLocal对象）为弱引用，自动被垃圾回收，key就变为null了，下次，我们就可以通过Entry不为null，而key为null来判断该Entry对象该被清理掉了。</strong></p><p>​至于ThreadLocalMap为什么不给外界提供API来操作数据，我觉得是因为这个Map对于一个线程只有一份，任何地方都在用，为了<strong>提供更方便的API</strong>和<strong>为了我们不破换其他框架保存到里面的数据（数据不被污染</strong>），所以才用ThreadLocal作为key和API来操作数据。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p>​综上，Entry的key被设计为弱引用就是<strong>为了让程序自动的对访问不到的数据进行回收提醒</strong>。所以，在访问不到的数据被回收之前，内存泄漏确实是存在的，但是我们不用担心，就算我们不调用remove，ThreadLocalMap在内部的set，get和扩容时都会清理掉泄漏的Entry，内存泄漏完全没必要过于担心</p><p>所以，<strong>ThreadLocal的建议使用方法</strong>：</p><ul><li><p>设计为static的，被class对象给强引用，线程存活期间就不会被回收，也不用remove，完全不用担心内存泄漏</p></li><li><p>非static的，放置在长对象（比如被spring管理的对象）的内部，也不会被回收</p></li></ul><p>​个人也觉得没必要让创建的ThreadLocal对象生命周期过短，ThreadLocal被设计出来本身就是用来跨方法栈获取当前线程的数据或者无锁的获取线程安全的数据，空间交换了线程安全的上锁时间。只要让ThreadLocal具有线程的生命周期，就完全没必要使用remove方法，也完全不用担心内存泄漏的问题。</p><p>​另外说一点，HashMap是使用拉链法解决hash冲突的，ThreadLocalMap是使用线性探测解决hash冲突的（内部只维护Entey数组，没有链表）。所以，源码中在清除泄漏的Entry时，会进行rehash，防止数组的当前位置为null后，有hash冲突的Entry访问不到的问题。</p>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMS</title>
      <link href="/2020-09-19/cms/"/>
      <url>/2020-09-19/cms/</url>
      
        <content type="html"><![CDATA[<hr><p>​主要分析了CMS收集器的算法实现和收集流程，和部分关键参数对CMS的影响，以及三色标记如何解决对象漏标问题。并在最后总结了CMS的优缺点</p><span id="more"></span><h1 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h1><p>​CMS（Concurrent Mark-Sweep）是一种基于<strong>标记-清除算法</strong>实现的老年代垃圾回收器，<strong>以获取最短停顿时间为目标</strong>，适合对响应时间敏感的应用（如 Web 系统）。其核心思想是尽可能地让 GC 工作与用户线程并发执行，降低停顿时间。</p><p>​一次CMS gc会算作两次full gc，分别为初始标记和最终标记（算上的时STW次数），但在多次收集后产生的空间碎片如果影响到了对象的分配，也会才用<strong>标记-整理</strong>算法收集一次</p><p>​清除算法会产生空间碎片，如果cms区预留的空闲内存不能满足新对象的分配，那么会触发<strong>Concurrent Mode Failure</strong>，这时会冻结用户线程，临时启用<strong>Serial Old</strong>收集器重新回收老年代的垃圾，全程STW，耗时很长</p><ul><li>初始标记(CMS initial mark): STW，仅标记GCRoots对象的下一个可达对象，很快</li><li>并发标记(CMS concurent mark)</li><li>重新标记(CMS remark): STW，解决并发标记时”那些消失的对象“</li><li>并发清除(CMS concurrent sweep)</li></ul><h2 id="1-参数"><a href="#1-参数" class="headerlink" title="1.参数"></a>1.参数</h2><ul><li><p><strong>-XX:+UseConcMarkSweepGC</strong>   ： 启用CMS收集器（年轻代默认使用ParNew收集器）</p></li><li><p><strong>–XX:CMSWaitDuration&#x3D;2000</strong> ： cms后台线程的轮询间隔时间（ms单位)</p></li><li><p><strong>-XX:+UseCMSInitiatingOccupancyOnly</strong> : 使用基于设定的阈值进行CMS gc，值为CMSInitiatingOccupancyFraction</p></li><li><p><strong>-XX:CMSInitiatingOccupancyFraction&#x3D;80</strong> : 在UseCMSInitiatingOccupancyOnly参数启用后生效。当CMS区（老年代）占比达到80%后，启用CMS垃圾回收。默认为-1，代表不启用，则老年代垃圾回收阈值算法为：**( (100 - MinHeapFreeRatio) + (CMSTriggerRatio * MinHeapFreeRatio) &#x2F; 100.0) &#x2F; 100.0** &#x3D; 92%</p></li><li><p><strong>-XX:ConcGCThreads&#x3D;2</strong> ：并发gc线程数，默认为（ParallelGCThreads+3）&#x2F; 4。ParallelGCThreads为新生代并行GC线程数，当CPU数量小于8时，ParallelGCThreads的值就是CPU的数量，当CPU数量大于8时，ParallelGCThreads的值等于3+5*cpuCount &#x2F; 8 （可用jstack查看）</p></li></ul><h2 id="2-三色标记"><a href="#2-三色标记" class="headerlink" title="2 三色标记"></a>2 三色标记</h2><h3 id="2-1-含义"><a href="#2-1-含义" class="headerlink" title="2.1 含义"></a>2.1 含义</h3><table><thead><tr><th>颜色</th><th>含义</th></tr></thead><tbody><tr><td><strong>白色</strong></td><td>尚未被标记的对象，<strong>可能是垃圾</strong></td></tr><tr><td><strong>灰色</strong></td><td>被标记为可达，但<strong>其内部引用的对象还没有全部扫描完</strong></td></tr><tr><td><strong>黑色</strong></td><td>可达，且其所有引用的对象也都已经被标记（扫描完）</td></tr></tbody></table><p>​在三色标记开始时，<strong>所有对象初始状态都是白色</strong>。GC 从 GCRoots 出发，只能扫描到 GCRoots 可达的对象。<strong>每当扫描到一个新对象时，它会先被标记为灰色</strong>（表示已经被发现但尚未处理完）。<strong>当该对象的所有引用对象也都被扫描并标记后，它就会被染为黑色</strong>（表示处理完毕，不可回收）。</p><p>而对于那些<strong>不可达的对象</strong>，由于没有任何路径从 GCRoots 可以触达它们，因此它们<strong>不会被扫描</strong>，颜色保持为白色，最终被识别为垃圾对象。</p><p>因此，在三色标记结束时，只会存在<strong>黑色和白色两类对象</strong>：</p><ul><li><strong>黑色对象</strong>：可达、已完全处理，<strong>不能被回收</strong></li><li><strong>白色对象</strong>：不可达、未被处理，<strong>将被回收</strong></li></ul><h3 id="2-2-问题"><a href="#2-2-问题" class="headerlink" title="2.2 问题"></a>2.2 问题</h3><ul><li>浮动垃圾：被标记为黑色的对象还会继续存活。但如果我们的用户线程此时对黑色对象丢弃引用，这个黑色对象就不可达了，就应该在本次垃圾清理中被回收。但这个影响不大，下次GC可进行处理</li><li><strong>对象漏标</strong>：<strong>在并发标记阶段，应用线程可能会修改对象引用关系，导致本应可达的对象未被正确扫描，仍然保持白色，最终被误回收。</strong>有如下两种情况<ul><li>对黑色对象A（此时A已完全扫描完毕）内部赋值一个白色对象B。B产生了漏标</li><li>对灰色对象C（此时C内部还未扫描完）内部暂时断开了一个对象D使其变为白色，并在扫描完成后重新将D赋值到C中</li></ul></li></ul><h3 id="2-3-增量更新（Incremental-Update）"><a href="#2-3-增量更新（Incremental-Update）" class="headerlink" title="2.3 增量更新（Incremental Update）"></a>2.3 增量更新（Incremental Update）</h3><p>顾名思义，表示增加了引用。增量更新关注的是<strong>引用新增</strong>的情况，尤其是解决以下对象漏标场景：</p><blockquote><p>黑色对象 A 在并发标记后，新增引用了一个未被标记的白色对象 B。</p></blockquote><p>在这种情况下，为了避免漏标，<strong>写屏障机制会将 A 重新标记为灰色</strong>，使其在“重新标记（Remark）”阶段重新被扫描一次，从而发现并标记 B，确保其不会被错误回收。<strong>总结就是黑色对象A一旦新插入了白色对象B的引用之后，A就变回灰色对象了</strong>。</p><p>​<strong>CMS 使用增量更新策略</strong>，因为它是老年代回收器，老年代中的对象多数是长寿命的，结构稳定，<strong>引用新增比引用删除更常见</strong>。但增量更新<strong>只能处理“新增引用”，无法处理“引用删除”导致的漏标，因此并不完美</strong>。这也是 CMS 在 JDK9 被标记为过时的重要原因之一。</p><h3 id="2-4-原始快照（Snapshot-At-The-Beginning，SATB）"><a href="#2-4-原始快照（Snapshot-At-The-Beginning，SATB）" class="headerlink" title="2.4 原始快照（Snapshot-At-The-Beginning，SATB）"></a>2.4 原始快照（Snapshot-At-The-Beginning，SATB）</h3><p>​<strong>保存一份并发标记开始时的引用快照</strong>，当后续并发标记过程中对这些引用删除时，都会被记录到SATB缓冲区，标记结束后SATB缓冲区的对象被重新标记为存活。</p><p>​<strong>原始快照只处理对灰色对象C删除白色对象D的情况（将D记录到SATB缓冲区），重新标记阶段会在将D标为活跃。但不处理黑色新增引用，需要依赖其他机制保证（一般都是依赖写屏障，将B直接标为存活）</strong></p><p>​<strong>G1使用原始快照能完全避免对象漏标</strong>，因为它就是用写屏障直接标记白色对象为存活的方式来处理给黑色对象新增的白色对象这种漏标情况。即<strong>SATB处理删除，写屏障兜底新增</strong>。虽不可避免的会增加浮动垃圾，但肯定不会漏标</p><h2 id="3-cms-gc触发条件"><a href="#3-cms-gc触发条件" class="headerlink" title="3 cms gc触发条件"></a>3 cms gc触发条件</h2><ul><li><a href="https://heapdump.cn/article/190389">原文</a></li><li>foreground collector  ：空间分配不够触发</li><li>background collector<ul><li>显式调用 <code>System.gc()</code>，且配置了 <code>-XX:+ExplicitGCInvokesConcurrent</code></li><li>未配置 <code>UseCMSInitiatingOccupancyOnly</code> 时，JVM 会根据运行统计数据动态判断</li><li>OldGen 达到某个使用阈值（静态或动态计算）</li><li>Young GC <strong>失败或预计失败</strong>，JVM 触发 CMS 作为<strong>悲观策略</strong></li><li>元空间（Metaspace）扩容触发，且 <code>CMSClassUnloadingEnabled=true</code>（默认开启）</li></ul></li></ul><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><ul><li>CMS 是一种低停顿老年代收集器，适合延迟敏感型系统。</li><li>优点是并发执行、停顿低，缺点如下<ul><li>空间碎片严重</li><li>需要预留足够空间，否则触发Concurrent Mode Failure 会退化为Serial GC，非常耗时</li><li><strong>只用了增量更新，没有完全解决漏标</strong></li><li>会产生浮动垃圾</li></ul></li><li>推荐配合 <code>CMSInitiatingOccupancyFraction</code> 与 <code>UseCMSInitiatingOccupancyOnly</code> 控制触发阈值，防止内存不足时被动触发 Full GC。</li></ul>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMS </tag>
            
            <tag> 三色标记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码篇-线程池</title>
      <link href="/2020-05-12/java-yuan-ma-pian-xian-cheng-chi/"/>
      <url>/2020-05-12/java-yuan-ma-pian-xian-cheng-chi/</url>
      
        <content type="html"><![CDATA[<p>​对jdk的ThreadPoolExecutor和ScheduledThreadPoolExecutor进行了详细的源码分析</p> <span id="more"></span><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="1-ThreadPoolExecutor"><a href="#1-ThreadPoolExecutor" class="headerlink" title="1 ThreadPoolExecutor"></a>1 ThreadPoolExecutor</h2><h3 id="1-1-重要字段"><a href="#1-1-重要字段" class="headerlink" title="1.1 重要字段"></a>1.1 重要字段</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//状态控制器，初始值： 1110 0000 0000 0000 0000 0000 0000 0000</span><span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>RUNNING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_BITS <span class="token operator">=</span> Integer<span class="token punctuation">.</span>SIZE <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 29位</span><span class="token comment" spellcheck="true">// 0001 1111 1111 1111 1111 1111 1111 1111</span><span class="token comment" spellcheck="true">// 1110 0000 0000 0000 0000 0000 0000 0000 取反后</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CAPACITY   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                            <span class="token comment" spellcheck="true">// 运行中：111 00000000000000000000000000000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不再接受新任务的入队列，但已经入队列还未还未的任务还可以继续执行</span><span class="token comment" spellcheck="true">// 000 00000000000000000000000000000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不接受新任务入队列，也不处理队列中的任务，中断正在处理任务的worker</span><span class="token comment" spellcheck="true">// 001 00000000000000000000000000000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全部完成，任务终止，worker数为0</span><span class="token comment" spellcheck="true">// 010 00000000000000000000000000000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 011 00000000000000000000000000000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 计算线程池的状态</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token operator">~</span>CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 后29位为0，前3为跟随c</span><span class="token comment" spellcheck="true">// 计算线程池有多少工作线程</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 前3位为0，后面29为跟随 c</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> wc<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rs <span class="token operator">|</span> wc<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 任务队列</span><span class="token keyword">private</span> <span class="token keyword">final</span> BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 主锁</span><span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 工作线程的Set</span><span class="token keyword">private</span> <span class="token keyword">final</span> HashSet<span class="token operator">&lt;</span>Worker<span class="token operator">></span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Worker<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> Condition termination <span class="token operator">=</span> mainLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 池已经创建的线程最大数（一个动态值，线程池整个周期同时存在的最多线程数）</span><span class="token keyword">private</span> <span class="token keyword">int</span> largestPoolSize<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 完成的任务数</span><span class="token keyword">private</span> <span class="token keyword">long</span> completedTaskCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建线程的工厂</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> ThreadFactory threadFactory<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 拒绝策略</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> RejectedExecutionHandler handler<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 非核心线程数的保持时间</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 是否允许核心线程过期</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> allowCoreThreadTimeOut<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 核心线程数</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> corePoolSize<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最大线程数</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> ​ThreadPoolExecutor利用一个int类型的数来同时保存当前线程池状态和工作线程的数量，高3为用来表示当前线程的状态，低29为用来保存工作线程的数量。通过位运算实现状态和数量的原子性操作，避免单独维护两个变量时的竞态条件</p><p>​ThreadPoolExecutor内部的Worker就是工作线程的抽象，每一个Worker都是一个工作线程。同时，Worker又继承了AQS可以充当锁的角色，目的是更好的<strong>让外部知道当前worker是否正在运行，以帮助回收或中断Worker</strong>。worker运行时（获取到任务后开始运行）会加锁，通过测试当前worker是否加上锁或者是否可以获得当前worker的锁，便可知道worker是否繁忙，有助于worker的清理</p></blockquote><h3 id="1-2-核心方法"><a href="#1-2-核心方法" class="headerlink" title="1.2 核心方法"></a>1.2 核心方法</h3><h4 id="1-2-1-shutdown（平滑关闭）"><a href="#1-2-1-shutdown（平滑关闭）" class="headerlink" title="1.2.1 shutdown（平滑关闭）"></a>1.2.1 shutdown（平滑关闭）</h4><p>​将当前线程池状态设为SHUTDOWN状态，再中断空闲的Worker（判断Worker是否空闲就通过它的锁方法）。<strong>所以，执行了这个方法后，正在执行的任务不会被中断，且已经存在workQueue中的Runnable也可以被执行，但是不能放入新的Runnable</strong></p><h4 id="1-2-2-shutdownNow（立即关闭）"><a href="#1-2-2-shutdownNow（立即关闭）" class="headerlink" title="1.2.2 shutdownNow（立即关闭）"></a>1.2.2 shutdownNow（立即关闭）</h4><p>​将当前线程池状态设为STOP状态，将所有Worker设置为中断位，且倒出workQueue中的所有Runnable。<strong>所以，执行了这个方法后，正在运行的任务如果检测了中断位就会立即退出，如果没检测就还是会执行完，而已经存在workQueue中的Runnable将不会被执行，会将这些Runnable返回给调用者，让调用者处理</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 平滑关闭线程池： * 1. 将线程池状态设为SHUTDOWN，此时： *    - 继续执行已提交的任务（包括正在执行的和队列中的） *    - 拒绝新任务提交（execute()会抛出RejectedExecutionException） * 2. 仅中断空闲Worker（通过tryLock()判断） *  * 注意：正在执行的任务不会被中断，调用者需确保任务有合理的终止逻辑 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 检查每个worker线程是否可以修改</span>        <span class="token function">advanceRunState</span><span class="token punctuation">(</span>SHUTDOWN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// CAS操作更新状态为SHUTDOWN</span>        <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// interrupt所有空闲的worker</span>    <span class="token function">onShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hook for ScheduledThreadPoolExecutor</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 立即关闭线程池： * 1. 将线程池状态设为STOP，此时： *    - 中断所有Worker（无论是否在执行任务） *    - 丢弃队列中未执行的任务 *    - 拒绝新任务提交 * 2. 返回被丢弃的任务列表供调用者处理 *  * 注意： * - 正在执行的任务是否停止取决于任务是否响应中断 * - 典型使用场景：需要快速释放资源的紧急关闭 */</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> tasks<span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">advanceRunState</span><span class="token punctuation">(</span>STOP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置当前线程池状态为STOP</span>        <span class="token function">interruptWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// interrupt所有Worker</span>        tasks <span class="token operator">=</span> <span class="token function">drainQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将任务队列中的task全部丢弃给方法调用者</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tasks<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 尝试终止线程池的最终状态转换： * 1. 检查是否满足终止条件（3种直接返回的情况）： *    - RUNNING状态：还有任务在执行 *    - 已经是TIDYING/TERMINATED状态：避免重复操作 *    - SHUTDOWN状态但队列不空：等待任务处理完成 * 2. 如果仍有活跃Worker，尝试中断单个空闲Worker * 3. 最终状态转换： *    SHUTDOWN/STOP -> TIDYING -> TERMINATED */</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 三种情况下直接退出</span>        <span class="token comment" spellcheck="true">// 1.线程池处于Running状态，还在运行</span>        <span class="token comment" spellcheck="true">// 2.线程池状态大于TIDYING，代表当前线程池已经终结</span>        <span class="token comment" spellcheck="true">// 3.shutdown状态，并且任务队列不为空，代表需等待这些任务完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> TIDYING<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Eligible to terminate</span>            <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span>ONLY_ONE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>        mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span>TIDYING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">terminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hook方法</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    ctl<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>TERMINATED<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    termination<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// else retry on failed CAS</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-3-execute（投递任务）"><a href="#1-2-3-execute（投递任务）" class="headerlink" title="1.2.3 execute（投递任务）"></a>1.2.3 execute（投递任务）</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 执行execute的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取当前线程池状态</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否小于核心线程数，是则新建线程运行任务</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 核心数满了，并且当前线程池状态为Running，加到等待队列中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 等待队列满了，新建线程，但不能大于最大线程数</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 创建失败，直接调用拒绝策略</span>        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-4-worker的运行和阻塞"><a href="#1-2-4-worker的运行和阻塞" class="headerlink" title="1.2.4 worker的运行和阻塞"></a>1.2.4 worker的运行和阻塞</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Worker的Runnable方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span>Worker w<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread wt <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Runnable task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>    w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> null<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// allow interrupts</span>    <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 利用阻塞队列，一直循环取任务执行（阻塞队列为空时会阻塞当前想取出元素的线程）</span>        <span class="token comment" spellcheck="true">// 如果getTask为null，就代表会终结当前工作线程</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span> <span class="token operator">||</span>                 <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                  <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hook before</span>                Throwable thrown <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 真正的运行Runnable</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hook after</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                task <span class="token operator">=</span> null<span class="token punctuation">;</span>                w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>                w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 核心方法之一，从阻塞队列中取任务</span><span class="token keyword">private</span> Runnable <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Did the last poll() time out?</span>    <span class="token comment" spellcheck="true">// 死循环取任务</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check if queue empty only if necessary.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> STOP <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 允许核心线程过期和非核心线程都可以超时取任务</span>        <span class="token keyword">boolean</span> timed <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">||</span> wc <span class="token operator">></span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>wc <span class="token operator">></span> maximumPoolSize <span class="token operator">||</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> timedOut<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>wc <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 原子性的尝试减少一个工作线程，减少成功才返回结束线程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndDecrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是超时取任务，时间结束后还是取不到，则设置timedOut为true，下次循环就可以直接返回null退出了，这样，这个Worker也就终结了</span>            Runnable r <span class="token operator">=</span> timed <span class="token operator">?</span>                workQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">)</span> <span class="token operator">:</span>            workQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 不为null才返回，就不用担心返回null而终结了当前线程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> r<span class="token punctuation">;</span>            timedOut <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> retry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h3><p><strong>execute Runnable的流程</strong></p><ul><li>先判断线程池的工作线程数量是否小于核心线程数，小于核心线程数直接新建线程来执行</li><li>如果核心线程数满了，则将Runnable投入到workQueue中</li><li>如果workQueue满了，则创建非核心线程来继续执行任务</li><li>如果线程池中的工作现场数量到达了maximumPoolSize的值，则使用拒绝策略来执行任务</li></ul><p><strong>Worker的工作流程</strong></p><p>​调用getTask取任务来执行，如果取出的任务为空，则这个Worker也就结束了（终结了）。getTask不为空的话，还是先进性一系列的线程池状态校验，在执行hook函数（beforeExecute），在真正的执行这个Runnable，再执行hook函数（afterExecute），最后再将completedTasks加1，表示当前Worker完成的任务总数</p><p><strong>getTask流程</strong>（实现线程超时回收的关键）</p><ul><li>先进行一系列的状态校验</li><li><strong>判断是否允许超时（满足任意一个就行）</strong><ul><li><strong>allowCoreThreadTimeOut为true（都允许核心线程超时了，那没任务的情况下线程池就不该有worker线程）</strong></li><li><strong>当前线程池的工作线程数量大于核心线程数量就允许超时</strong></li></ul></li><li>判断是否触发减少工作线程数量的机制，然后使用CAS减少工作线程数量，减少成功才返回null，结束当前工作线程</li><li>通过阻塞队列取Runnable，如果不允许超时，则会一直阻塞到这。如果允许超时，则会超时等待keepAliveTime纳秒取Runnable，如果取不出来，则设置一次已经超时，再来循环一次，来判断是否该减少工作线程</li></ul><h2 id="2-ScheduledThreadPoolExecutor"><a href="#2-ScheduledThreadPoolExecutor" class="headerlink" title="2 ScheduledThreadPoolExecutor"></a>2 ScheduledThreadPoolExecutor</h2><h3 id="2-1-ScheduledExecutorService"><a href="#2-1-ScheduledExecutorService" class="headerlink" title="2.1 ScheduledExecutorService"></a>2.1 ScheduledExecutorService</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ScheduledExecutorService</span> <span class="token keyword">extends</span> <span class="token class-name">ExecutorService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建一个一次性的延迟（定时）任务。     * 框架中cron表达式就是通过此接口实现（只需要在任务完成后，在计算下一次的执行时间，再用此方法定时执行，以此类推）     */</span>    <span class="token keyword">public</span> ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">schedule</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">,</span>                                       <span class="token keyword">long</span> delay<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 执行Callable接口的任务，也是一个一次性的定时任务    */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> ScheduledFuture<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">schedule</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> callable<span class="token punctuation">,</span>                                           <span class="token keyword">long</span> delay<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 基于固定的频率执行定时任务      * 例：初始执行任务的时间戳：当前时间戳（调用时）+ initialDelay      * 第二次执行：初始执行任务开始时的时间戳 + period      * 第三次执行：第二次执行任务开始时的时间戳 + period     *     * 典型场景：严格周期性的任务，如：     * - 每分钟采集一次系统指标     * - 每5秒发送心跳包     */</span>    <span class="token keyword">public</span> ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">,</span>                                                  <span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span>                                                  <span class="token keyword">long</span> period<span class="token punctuation">,</span>                                                  TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 基于固定的周期执行定时任务      * 例：初始执行任务的时间戳：当前时间戳（调用时）+ initialDelay     *  第二次执行：初始任务执行完结时的时间戳 + delay     *  第三次执行：第二次任务执行完结时的时间戳 + delay     *     * 典型场景：需要冷却时间的任务，如：     * - 数据库批量处理（保证每次处理完成后再间隔）     * - 异步结果轮询（避免密集请求）     */</span>    <span class="token keyword">public</span> ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">,</span>                                                     <span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span>                                                     <span class="token keyword">long</span> delay<span class="token punctuation">,</span>                                                     TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-DelayedWorkQueue"><a href="#2-2-DelayedWorkQueue" class="headerlink" title="2.2 DelayedWorkQueue"></a>2.2 DelayedWorkQueue</h3><p>​为ScheduledThreadPoolExecutor内部固定的阻塞队列，基于<strong>小顶堆</strong>数据结构实现。</p><p>​投递的每个任务被封装后都扔进DelayedWorkQueue中，<strong>按照任务被执行的时间戳进行小顶堆排序，堆顶就刚好是队列中下个需要执行的任务</strong>。同时基于<strong>Leader-Follower 模式</strong>进行线程调度的优化，只有leader进行延时等待堆首任务，其余线程直接阻塞等待</p><p>​核心字段和方法如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DelayedWorkQueue</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">BlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数组初始容量</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组实现的最小顶堆结构，queue[0]始终都是最快需要被执行的那个任务</span>        <span class="token keyword">private</span> RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> queue <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">RunnableScheduledFuture</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>INITIAL_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// leader线程，定时等待queue[0]任务的那个线程</span>        <span class="token keyword">private</span> Thread leader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> Condition available <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向堆尾新加入任务，进行上移（和父节点换个位置）调整位置</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父节点的索引</span>                RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> queue<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调整完毕，直接break</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 当前节点的下次执行时间更快，继续递归向上遍历，直到放到合适的位置</span>                queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token function">setIndex</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> parent<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token function">setIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">/**         * Sifts element added at top down to its heap-ordered spot.         * Call only when holding lock.&lt;p/>         * 元素下移操作（弹出堆顶元素后，将堆尾元素放置到堆顶再重新调整下移）         */</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> half <span class="token operator">=</span> size <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> half<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 较小值节点的索引（初始为左子节点）</span>                <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 小值，初始为左子节点</span>                RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> queue<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 右子节点索引</span>                <span class="token keyword">int</span> right <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 如果右子节点更小，则将c替换为右子节点，同时替换child为右子节点索引</span>                    c <span class="token operator">=</span> queue<span class="token punctuation">[</span>child <span class="token operator">=</span> right<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 目标元素比最小的子节点元素还小，目的就达成了，直接break</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 左右子节点中较小的节点和父节点交换</span>                queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>                <span class="token function">setIndex</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 替换目标索引，继续将参数k向下比较</span>                k <span class="token operator">=</span> child<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token function">setIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**          重写的offer方法（该方法就是线程池投递任务的方法）         */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>Runnable x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>            <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                    <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                size <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 数组中还没有任务，直接放在首位</span>                    queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token function">setIndex</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 已存在定时任务，看是否需要调整位置</span>                    <span class="token function">siftUp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 代表向队列添加了一个需要最快执行的任务</span>                    <span class="token comment" spellcheck="true">// 需要重置leader线程，并唤醒一个阻塞的线程（可能为无限阻塞的，也可能为上个定时等待的leader线程）来定时等待这个任务</span>                    <span class="token comment" spellcheck="true">// 换种角度，如果唤醒的是上个定时等待的leader线程，那肯定是很赚的，因为不需要启动多个定时等待的线程了</span>                    <span class="token comment" spellcheck="true">// 如果唤醒的不是上个leader线程，那就会存在多个定时等待的线程，这是没法避免的</span>                    leader <span class="token operator">=</span> null<span class="token punctuation">;</span>                    available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将阻塞的线程从等待队列转移到同步队列，当下面的unlock后再唤醒阻塞线程</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/*        重写的take方法                所以，多线程多任务且没有任务需要立即执行造成的结果就是：            1、1个leader线程定时等待队首任务（实时的向线程池添加最快需要执行的任务，可能存在多个定时等待的线程，且至少他们曾经是leader线程）            2、其余全部线程无限期等待，最大程度的减少资源损耗（因为任务都有顺序，没必要同时让所有线程都定时等待，给底层的通知增加压力）        总结：        1、当没有任务时：所有线程都无限等待，没有leader线程，等待任务入队列的唤醒        2、当有任务时：唤醒的线程成为leader线程，当这个leader线程等待到期时，            取消自己为leader线程（另一种说法就是自己变成了follower线程），            唤醒一个无限期等待的线程，然后自己就去执行这个到期的任务，被唤醒的线程就会变成新的leader线程。一直这么循环下去        3、当实时向线程池添加最快需要执行的任务时：会取消当前leader线程，并唤醒一个阻塞的线程，让其成为新的leader线程         */</span>        <span class="token keyword">public</span> RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>            <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> first <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不存在定时任务，所有线程都在这等待</span>                        available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">long</span> delay <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 时间已过，弹出队首任务去执行它</span>                            <span class="token keyword">return</span> <span class="token function">finishPoll</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 进入下面，无论怎样都要等待，所以直接把first置为null，下次循环再获取</span>                        <span class="token comment" spellcheck="true">// 因为可能多个线程走到下面，都持有了队首的引用。避免出现RunnableScheduledFuture运行完了但不能及时回收的情况</span>                        <span class="token comment" spellcheck="true">// 当然，也只有一次性的RunnableScheduledFuture才会回收，定时任务都是循环使用这个RunnableScheduledFuture的</span>                        first <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// don't retain ref while waiting</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 由leader存在，其他线程只需要无限期等待就行</span>                            available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有leader存在，设置当前线程为leader，并定时等待（时间就为最近待执行的那个任务的距离下次执行时间间隔）</span>                            Thread thisThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            leader <span class="token operator">=</span> thisThread<span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                available<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定时等待</span>                            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 时间一到，说明队首任务可执行了，但当前线程可能不是leader线程了，需要判断一下再置空</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> thisThread<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 必须判断，有可能实时的添加了一个最快需要执行的线程，导致当前线程被取消了leader</span>                                    leader <span class="token operator">=</span> null<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 任务取出来了，leader为空且存在队首任务，需要唤醒一个无限等待的线程</span>                    <span class="token comment" spellcheck="true">// 让其成为leader线程并继续定时等待</span>                    available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3 总结"></a>2.3 总结</h3><p>​ScheduledThreadPoolExecutor本质还是个线程池，<strong>内部的DelayedWorkQueue就是工作队列。投递的定时任务和普通任务都会封装为ScheduledFutureTask，并最终放入DelayedWorkQueue里的那个数组（只不过定时任务有延时，可能会放在队列中的任何位置。而普通任务封装的ScheduledFutureTask执行时间就是当前而已，始终会放到队列的队首并立马执行）</strong></p><p>​DelayedWorkQueue实现了BlockingQueue，是基于<strong>数组的最小顶堆的数据结构</strong>实现，以此<strong>保证数组的第一个位置就是最近需要被执行的任务</strong>。结构图和特点如下</p><p>​ScheduledThreadPoolExecutor还使用了<strong>Leader-Follower模式</strong>，leader线程定时等待工作队列中第一个任务，其余线程一般就都无限期等待（如果向工作队列添加的是一个最快需要被执行的任务，可能就有多个定时等待的线程，但leader线程始终都会是最快需要被执行任务的线程）。</p><p><strong>为什么使用Leader-Follower模式：</strong></p><blockquote><p>​避免资源的浪费。定时任务再怎么排序，也只会有一个是最快需要执行的任务（时间相同会根据sequenceNumber排序），只需要设计一个定时等待线程等待这个最快需要执行的任务。当这个最快需要执行的任务触发后，再设计一个新的leader线程等待下一个最近的定时任务。理想的情况下，定时任务线程池只会有一个定时等待的线程（Leader线程），其余线程要么正在运行定时任务，要么全部无限期阻塞（Follower线程），最大程度的避免资源浪费（无限期等待的线程不用想其它的，乖乖等待被其他线程唤醒就行。而定时等待的线程需要在时间到达后被唤醒，至少需要被定时器监视以用来执行唤醒操作）</p></blockquote><ul><li><strong>固定周期</strong>：受执行时常影响，只有当任务结束后才相对于结束时间来计算任务的下次执行时间</li><li><strong>固定频率</strong>：不受任务的执行时常所影响，当任务投递到队列时就可以预判到以后任何执行该任务的时间</li></ul><p>​一个被投递的周期任务首先会封装成ScheduledFutureTask，再根据其下次执行时间放在DelayedWorkQueue的某个位置。如果放在了DelayedWorkQueue的队首，则使用定时任务线程池里的线程超时等待，以便时间到达后开始执行。正常执行完毕则会先根据其是固定周期任务还是固定频率的任务来计算下次执行时间并修赋值到ScheduledFutureTask的time字段，再将这个任务再次入队列，这样递归去执行。执行中如果抛出了异常，则会将ScheduledFutureTask的state修改为异常，之后就不再执行这个任务了</p>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码篇-Future</title>
      <link href="/2020-05-09/java-yuan-ma-pian-future/"/>
      <url>/2020-05-09/java-yuan-ma-pian-future/</url>
      
        <content type="html"><![CDATA[<hr><p>​jdk中Future接口实现类相关源码解析。包括FutureTask和 ScheduledFutureTask</p> <span id="more"></span><h1 id="1-Future"><a href="#1-Future" class="headerlink" title="1 Future"></a>1 Future</h1><p>Future接口表示一个异步操作的结果，即未来的结果，同时实现了 <code>Runnable</code> 和 <code>Future</code> 接口。提供了如下的一些基础方法可获取、判断和取消等操作</p><ul><li><p><code>get()</code>：<strong>阻塞</strong>直到计算完成并返回结果（支持超时设置）</p></li><li><p><code>isDone()</code>：<strong>非阻塞</strong>检查任务是否完成（成功&#x2F;失败&#x2F;取消）</p></li><li><p><code>cancel(boolean mayInterruptIfRunning)</code>：尝试取消任务，参数决定是否中断执行中的线程</p></li><li><p><code>isCancelled()</code>：判断任务是否被取消</p></li></ul><p>其实现类为FutureTask，就是用它来实现Callable接口的功能</p><hr><h2 id="1-1-FutureTask"><a href="#1-1-FutureTask" class="headerlink" title="1.1 FutureTask"></a>1.1 FutureTask</h2><h3 id="1-1-1-重点字段和方法"><a href="#1-1-1-重点字段和方法" class="headerlink" title="1.1.1 重点字段和方法"></a>1.1.1 重点字段和方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RunnableFuture</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// state字段，表示了当前Future的状态，取值为如下字段</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NEW          <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始状态，新建</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COMPLETING   <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正在结束</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NORMAL       <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正常执行完毕</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXCEPTIONAL  <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 异常执行完毕</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED    <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前一个状态必须是NEW，已取消（未中断）</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INTERRUPTING <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前一个状态必须是NEW，正在中断（中断）</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INTERRUPTED  <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取消成功的才可以设置，中断完成（中断）</span>    <span class="token comment" spellcheck="true">// 待运行的Callable任务</span>    <span class="token keyword">private</span> Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> callable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Callable执行的结果。如果出现执行的过程中异常，则保存的是异常对象</span>    <span class="token keyword">private</span> Object outcome<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 运行Callable#call方法的线程（也即是运行业务代码的线程）</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Thread runner<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当这里面的Callable还未执行完，却有其他线程调用Future#get()方法，</span>    <span class="token comment" spellcheck="true">// 会将其他线程阻塞并构造为等待节点，维持一个链表结构，以便在Callable执行完毕后唤醒并回调</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> WaitNode waiters<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> NEW <span class="token operator">||</span>            <span class="token operator">!</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> runnerOffset<span class="token punctuation">,</span>                                         null<span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> c <span class="token operator">=</span> callable<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> state <span class="token operator">==</span> NEW<span class="token punctuation">)</span> <span class="token punctuation">{</span>                V result<span class="token punctuation">;</span>                <span class="token keyword">boolean</span> ran<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 执行业务方法</span>                    result <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ran <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result <span class="token operator">=</span> null<span class="token punctuation">;</span>                    ran <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token function">setException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 异常结束，将状态设为EXCEPTIONAL，如果等待队列有节点，则唤醒对应的线程</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ran<span class="token punctuation">)</span>                    <span class="token function">set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正常结束，将状态设为NORMAL，如果等待队列有节点，则唤醒对应的线程</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            runner <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> INTERRUPTING<span class="token punctuation">)</span>                <span class="token function">handlePossibleCancellationInterrupt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 阻塞获取</span>    <span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException <span class="token punctuation">{</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;=</span> COMPLETING<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 还未完全结束Callabke，进入等待</span>            s <span class="token operator">=</span> <span class="token function">awaitDone</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">report</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 根据state判断是否需要阻塞并做对于的事</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">awaitDone</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> timed <span class="token operator">?</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanos <span class="token operator">:</span> 0L<span class="token punctuation">;</span>        WaitNode q <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> queued <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前线程支持响应中断</span>                <span class="token function">removeWaiter</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> COMPLETING<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Callable运行完毕，且result已经设置完毕</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    q<span class="token punctuation">.</span>thread <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">return</span> s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 进入到以下分支，就代表Callable还未完全执行完毕</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> COMPLETING<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// cannot time out yet  Callable运行完毕，但正在设置result，让出执行时间，等待下次判断</span>                Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 第一次循环，构造等待节点</span>                q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WaitNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queued<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 还未加入等待队列，则将节点加入到等待队列中</span>                queued <span class="token operator">=</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> waitersOffset<span class="token punctuation">,</span>                                                     q<span class="token punctuation">.</span>next <span class="token operator">=</span> waiters<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>timed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 是否运行超时判断</span>                nanos <span class="token operator">=</span> deadline <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> 0L<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">removeWaiter</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> state<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                LockSupport<span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// 暂停当前线程，等待任务执行完毕的唤醒</span>                LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 任务执行完毕，唤醒等待队列的所有节点</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">finishCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert state > COMPLETING;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>WaitNode q<span class="token punctuation">;</span> <span class="token punctuation">(</span>q <span class="token operator">=</span> waiters<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> waitersOffset<span class="token punctuation">,</span> q<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Thread t <span class="token operator">=</span> q<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        q<span class="token punctuation">.</span>thread <span class="token operator">=</span> null<span class="token punctuation">;</span>                        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    WaitNode next <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    q<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// unlink to help gc</span>                    q <span class="token operator">=</span> next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        callable <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// to reduce footprint</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-2-总结"><a href="#1-1-2-总结" class="headerlink" title="1.1.2 总结"></a>1.1.2 总结</h3><ol><li>FutureTask根据内部的state字段来判断当前任务运行到了哪个阶段并作出对于的抉择，也使用<strong>volatile修饰保证它在多线程环境下的可见性</strong>。<ul><li><strong>state状态流转</strong>：<ul><li>NEW<code>→</code>COMPLETING<code>→</code>NORMAL<code>（成功）</code></li><li>NEW<code>→</code>COMPLETING<code>→</code>EXCEPTIONAL<code>（失败）</code></li><li>NEW<code>→</code>CANCELLED&#x2F;INTERRUPTED<code>（取消）</code></li></ul></li></ul></li><li>如果想获取任务执行的结果，要使用get来获取结果，get是个阻塞的方法。当任务还未执行完毕时，会将调用get的方法阻塞并构造成WaitNode，再通过内部的next字段链接下一个WaitNode，形成一个链表结构。当任务执行完毕后，内部调用的finishCompletion方法会判断等待链表是否为空，不为空就代表有线程在获取结果时被阻塞了，这时唤醒阻塞队列的所有线程，最终，调用get方法的线程返回结果。即<strong>使用 <code>WaitNode</code> 链表 + CAS 操作管理阻塞线程，避免显式锁开销</strong></li><li>只会允许任务执行一次，状态不可逆转</li></ol><h2 id="1-2-ScheduledFutureTask"><a href="#1-2-ScheduledFutureTask" class="headerlink" title="1.2 ScheduledFutureTask"></a>1.2 ScheduledFutureTask</h2><p>​ScheduledFutureTask继承了FutureTask，当<strong>向定时任务线程池投递任务时（Runnable或Callable），都会将其封装为ScheduledFutureTask</strong></p><h3 id="1-2-1-重点字段和方法"><a href="#1-2-1-重点字段和方法" class="headerlink" title="1.2.1 重点字段和方法"></a>1.2.1 重点字段和方法</h3><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledFutureTask</span><span class="token operator">&lt;</span>V<span class="token operator">></span>            <span class="token keyword">extends</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RunnableScheduledFuture</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 当前任务的id（自增的），代表了进入队列的顺序 &lt;br/>     * 当两个定时任务下次执行时间一致时，sequenceNumber越小就会越早执行     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceNumber<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 下次执行当前任务的纳秒时间戳</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> time<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 执行定时任务的纳秒间隔时间     * 大于0：代表固定的频率，不受任务的执行所花费的时间影响     * 等于0：代表不是一个重复的任务（只会执行一次     * 小于0：代表固定的时间间隔，基于任务执行完毕后的时间计算。（任务执行完后再基于当前时间计算下次执行时间）     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> period<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前任务在数组中的索引</span>    <span class="token keyword">int</span> heapIndex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>time <span class="token operator">-</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 比较方法，决定了放入数组的位置</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Delayed other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>other <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// compare zero if same object</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>other <span class="token keyword">instanceof</span> <span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ScheduledFutureTask<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">(</span>ScheduledFutureTask<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span>other<span class="token punctuation">;</span>            <span class="token keyword">long</span> diff <span class="token operator">=</span> time <span class="token operator">-</span> x<span class="token punctuation">.</span>time<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前任务的下次执行时间更长，返回正数</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sequenceNumber <span class="token operator">&lt;</span> x<span class="token punctuation">.</span>sequenceNumber<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> diff <span class="token operator">=</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span> <span class="token operator">-</span> other<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>diff <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>diff <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * false: 代表当前任务为一次性任务     * true: 定时任务     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPeriodic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> period <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当前任务执行完毕后，用来计算下次执行时间</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setNextRunTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> p <span class="token operator">=</span> period<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// p为两次执行时间的时间间隔的纳秒值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p大于0，即为固定时间执行的任务，基于初始运行时间计算下一次的执行时间</span>            time <span class="token operator">+=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// p小于0，为基于完成任务的时间来执行，基于任务运行完的时间，来计算出下一次的执行时间</span>            time <span class="token operator">=</span> <span class="token function">triggerTime</span><span class="token punctuation">(</span><span class="token operator">-</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 主方法，运行当前定时任务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> periodic <span class="token operator">=</span> <span class="token function">isPeriodic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canRunInCurrentRunState</span><span class="token punctuation">(</span>periodic<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>periodic<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 非定时任务，当作普通任务直接调用FutureTask的run方法运行</span>            ScheduledFutureTask<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ScheduledFutureTask<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">runAndReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 运行定时任务，且运行成功（没抛异常）</span>            <span class="token function">setNextRunTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置下一次执行时间</span>            <span class="token function">reExecutePeriodic</span><span class="token punctuation">(</span>outerTask<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 再把当前任务重新入队列</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**      父类的FutureTask中的方法，运行并重置状态，用于任务的多次执行          * 正常执行时：不会修改运行状态（也就是说这个操作不会修改state字段值，保持初始值，以支持重复执行）。         * 出现异常时：还是将state设为EXCEPTIONAL，也就是说一个定时任务要是抛出了异常，之后就不会再执行它了         */</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">runAndReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> NEW <span class="token operator">||</span> <span class="token comment" spellcheck="true">// 不为NEW状态的都不执行</span>            <span class="token operator">!</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> runnerOffset<span class="token punctuation">,</span>                                         null<span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> ran <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> c <span class="token operator">=</span> callable<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> s <span class="token operator">==</span> NEW<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不设置返回结果。多次执行的任务就不该有执行结果</span>                    ran <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 抛出异常，修改state为EXCEPTIONAL，以后也不在执行它</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// runner must be non-null until state is settled to</span>            <span class="token comment" spellcheck="true">// prevent concurrent calls to run()</span>            runner <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// state must be re-read after nulling runner to prevent</span>            <span class="token comment" spellcheck="true">// leaked interrupts</span>            s <span class="token operator">=</span> state<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> INTERRUPTING<span class="token punctuation">)</span>                <span class="token function">handlePossibleCancellationInterrupt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ran <span class="token operator">&amp;&amp;</span> s <span class="token operator">==</span> NEW<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-2-总结"><a href="#1-2-2-总结" class="headerlink" title="1.2.2 总结"></a>1.2.2 总结</h3><p><code>ScheduledFutureTask</code> 通过 <code>period</code> 字段判断任务类型：<code>0</code> 表示一次性任务，<code>&gt;0</code> 表示固定频率，<code>&lt;0</code> 表示固定延迟。</p><p>在 <code>run()</code> 方法中，若<strong>任务为周期性任务，执行完当前任务后会计算下次执行时间，并将自身重新提交至基于小顶堆的 <code>DelayedWorkQueue</code> 中，以维持调度</strong>。</p><ul><li>基于纳秒时间精度，避免 <code>System.currentTimeMillis()</code> 的系统时间变动干扰。</li><li>复用 <code>FutureTask</code> 的任务封装机制，增强任务调度能力。</li><li>精简实现，不依赖额外锁，主要通过最小堆和 <code>Delayed</code> 接口实现调度。</li></ul>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码篇-锁</title>
      <link href="/2020-04-18/java-yuan-ma-pian-suo/"/>
      <url>/2020-04-18/java-yuan-ma-pian-suo/</url>
      
        <content type="html"><![CDATA[<p>​jdk中AQS实现类相关源码解析。包括 ReentrantLock，Condition，CountDownLatch，Semaphore，ReentrantReadWriteLock</p><span id="more"></span><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="1-ReentrantLock"><a href="#1-ReentrantLock" class="headerlink" title="1 ReentrantLock"></a>1 ReentrantLock</h2><p>​基于AQS实现的一种可重入互斥锁，所以只允许一个线程获取到锁。获取到锁时state设为1，当获取到锁的线程尝试重入时，便会增加state，同理需要将state减到0才会释放锁</p><h3 id="1-1-非公平锁（NonfairSync）"><a href="#1-1-非公平锁（NonfairSync）" class="headerlink" title="1.1 非公平锁（NonfairSync）"></a>1.1 非公平锁（NonfairSync）</h3><h4 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h4><blockquote><ol><li>java.util.concurrent.locks.ReentrantLock.Sync#nonfairTryAcquire：利用CAS尝试设置state，能设置成功，代表获取到锁，成功返回。设置失败，代表已经被其他线程获取了锁，返回失败</li><li>返回失败后将当前线程构造为Node节点，设置到同步队列的链表中进入到<strong>java.util.concurrent.locks.AbstractQueuedSynchronizer#acquireQueued</strong>方法：死循环获取当前Node的前一个节点（<strong>同步队列的首节点是成功获取到锁的节点</strong>），如果前驱结点为首节点，当前Node才有资格获取锁。如果还是获取不到，就调用<strong>java.util.concurrent.locks.LockSupport#park</strong>(java.lang.Object)方法阻塞当前线程，等待其他线程唤醒再去竞争锁</li></ol></blockquote><h4 id="unlock"><a href="#unlock" class="headerlink" title="unlock"></a><strong>unlock</strong></h4><blockquote><ol><li>java.util.concurrent.locks.ReentrantLock.Sync#tryRelease：复原state（将其归0），exclusiveOwnerThread设为null</li><li>java.util.concurrent.locks.AbstractQueuedSynchronizer#release：在tryRelease成功后，使用<strong>java.util.concurrent.locks.LockSupport#unpark</strong>方法唤醒同步队列首节点的下一个节点里的线程，让他再去尝试获取锁</li></ol></blockquote><h3 id="1-2-公平锁（FairSync）"><a href="#1-2-公平锁（FairSync）" class="headerlink" title="1.2 公平锁（FairSync）"></a>1.2 公平锁（FairSync）</h3><h4 id="lock-1"><a href="#lock-1" class="headerlink" title="lock"></a><strong>lock</strong></h4><blockquote><p>​和非公平锁很像，不同的部分就在覆盖了<strong>java.util.concurrent.locks.AbstractQueuedSynchronizer#tryAcquire</strong>这个方法和非公平锁略有不同。在新的线程获取锁失败，并将自己构造为Node节点并放入同步队列链表后，还会通过调用<strong>java.util.concurrent.locks.AbstractQueuedSynchronizer#hasQueuedPredecessors</strong>方法</p></blockquote><h4 id="unlock：和非公平锁一样"><a href="#unlock：和非公平锁一样" class="headerlink" title="unlock：和非公平锁一样"></a><strong>unlock</strong>：和非公平锁一样</h4><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ReentrantLock的公平锁第一次尝试获取锁</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// 测试当前线程是否是等待最久的线程</span>                <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 查询是否有线程等待获取的时间长于当前线程 * 判断是否存在队列中第二个Node(因为首节点是个空节点)，且第二个节点中的线程是否是当前线程 * 也就是说：判断同步队列中当前节点是否有前驱结点 * true:代表当前线程不是等待最久的线程或压根就没有等待的线程 * false:在代表当前线程已经是等待最久的线程（毕竟队列越前面，则代表进去的越久）&lt;p/> * 只有公平锁才需要用到这个方法，来判断当前线程是否等待时间最长 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>     Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>    Node s<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用 h != t 来做判断是因为调用这个方法的线程此时还没有进入等待队列</span>    <span class="token comment" spellcheck="true">// 如果 h != t，则代表队列中有线程在等待获取锁</span>    <span class="token keyword">return</span> h <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>thread <span class="token operator">!=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h3><h4 id="1-3-1-为什么叫公平锁和非公平锁"><a href="#1-3-1-为什么叫公平锁和非公平锁" class="headerlink" title="1.3.1 为什么叫公平锁和非公平锁"></a>1.3.1 为什么叫公平锁和非公平锁</h4><p>​根据上面的分析，<strong>公平锁在获取锁是总是会先判断当前线程是否是等待最久的线程</strong>。<strong>所以，就算是同步队列存在大量Node，且有线程第一次在获取锁，那么，下一次获取到锁的线程也一定是同步队列的首节点的下一个节点，即必须排队。（首节点就是当前获取到锁的节点，只有获取成功了，同步才会更新首节点）</strong></p><p>​<strong>非公平锁中：对于已经进入同步队列的线程来说，也只能首节点的下一个节点里的线程能尝试获取锁。但对于还未构造成Node加入到同步队列的线程来说，这个线程和首节点的下一个节点里的线程能竞争获取锁</strong>，所以非公平。<strong>但对于已经进入同步队列的线程来说，前驱结点是一定比后面的节点先获取到锁的</strong></p><h4 id="1-3-2-各自优势"><a href="#1-3-2-各自优势" class="headerlink" title="1.3.2 各自优势"></a>1.3.2 各自优势</h4><ul><li>公平锁：防止线程饥饿，分散性很好，适合线程等待时间敏感的场景</li><li>非公平锁：更快。一是<strong>获取锁是不用判断当前线程是否是等待最久的线程</strong>。二是<strong>上下文交换没有公平锁频繁</strong>。在存在大量锁竞争的前提下，可以肯定，公平锁上下文切换很频繁，获取锁后的线程再次获取锁时是一定会阻塞的。而非公平锁则不一样，下一次获取到锁的线程仍可能是上一次获取到锁的线程，没有上下文切换</li></ul><h2 id="2-Condition"><a href="#2-Condition" class="headerlink" title="2 Condition"></a>2 Condition</h2><p>等待通知接口，代替Object原生的wait和notify，其具体实现为AQS里的ConditionObject（定义在AQS里的非静态内部类，所以使用了AQS部分方法来实现其功能）。<strong>只有获取到锁的线程才能调用Condition的阻塞和唤醒方法</strong>。三个核心组件如下</p><ul><li>等待队列：使用 Node 节点串联，与 AQS 同步队列共用 Node 结构 </li><li>状态转换：Node 在等待队列和同步队列之间的转换 </li><li>线程控制：包括阻塞、唤醒、中断处理等机制</li></ul><p>主要字段</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 等待队列中的首节点</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Node firstWaiter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等待队列中的尾节点</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Node lastWaiter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-Condition-await"><a href="#2-1-Condition-await" class="headerlink" title="2.1 Condition#await"></a>2.1 Condition#await</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><blockquote><ul><li>首先将当前线程构造为等待节点，并加入到等待队列的末尾</li><li>其次释放锁资源（能够await的线程一定是获取到锁的），同时唤醒同步队列的第二个节点，让其尝试获取锁</li><li>死循环判断当前节点是否为同步节点（等待节点在等待队列里，是一定要阻塞的。同步节点在同步队列里，是可以并被唤醒并尝试获取锁的），await到这里线程就阻塞了</li><li>当被唤醒后，当前节点一定被加入了同步队列，再尝试获取锁，如果能获取到，代表就可以返回了。如果获取不到，就表示当前同步块被其他线程暂用了，也还是阻塞。不过下一次被唤醒后就会通过同步队列的唤醒方式来尝试获取锁</li></ul></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 响应中断</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建等待节点并加入等待队列</span>    Node node <span class="token operator">=</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 先检查当前线程是否已获取到锁，否则抛异常。然后完全释放锁并且唤醒同步队列中的第二个节点</span>    <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> interruptMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 死循环判断当前节点是否在等待队列中</span>    <span class="token comment" spellcheck="true">// 等待队列中的节点一定要阻塞，而同步队列中的节点是可以被唤醒的</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interruptMode <span class="token operator">=</span> <span class="token function">checkInterruptWhileWaiting</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当signal后，需要重新获取锁，要复原现场，需要重新持有上一次所持有的所有的state值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> savedState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> interruptMode <span class="token operator">!=</span> THROW_IE<span class="token punctuation">)</span>        interruptMode <span class="token operator">=</span> REINTERRUPT<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nextWaiter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// clean up if cancelled</span>        <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptMode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前节点有中断</span>        <span class="token function">reportInterruptAfterWait</span><span class="token punctuation">(</span>interruptMode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** *   将当前线程构造为一个等待节点，并加入到等待队列的尾部，并通过nextWaiter字段建立联系 &lt;br/> *  注意：等待队列建立关联用的是nextWaiter字段，不是prev和next字段 */</span><span class="token keyword">private</span> Node <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node lastW <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 尾节点</span>    <span class="token comment" spellcheck="true">// If lastWaiter is cancelled, clean out.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastW <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> lastW<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastW <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastW <span class="token operator">==</span> null<span class="token punctuation">)</span>        firstWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">else</span>        lastW<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    lastWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ====================以下为AQS中的方法===================</span><span class="token comment" spellcheck="true">// 判断这个节点是否在同步队列上</span><span class="token comment" spellcheck="true">// false -> 这个节点在等待队列上</span><span class="token comment" spellcheck="true">// true -> 这个节点在同步队列上</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>waitStatus <span class="token operator">==</span> Node<span class="token punctuation">.</span>CONDITION <span class="token operator">||</span> node<span class="token punctuation">.</span>prev <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If has successor, it must be on queue</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">findNodeFromTail</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 当前节点尝试获取锁* 返回true -> 获取锁的过程有中断*/</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Node prevNode <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 只有当前节点的前驱结点为首节点，当前节点里的线程才有资格获取锁</span>            <span class="token comment" spellcheck="true">// 只可能有一个线程获取成功（即获取锁），所以设置首节点不需要同步了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prevNode <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                prevNode<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Condition-signal和signalAll"><a href="#2-2-Condition-signal和signalAll" class="headerlink" title="2.2 Condition#signal和signalAll"></a>2.2 Condition#signal和signalAll</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>singal的目的很简单，就是将等待队列的首节点转移到同步队列的尾节点，signalAll则是将等待队列中的所有节点都转移到同步节点。<strong>signal方法本身不能唤醒线程，只是让这些节点里的线程有资格被唤醒</strong>，可以将signal和排队买票做类比</p><ul><li>等待队列相当于候补区</li><li>signal 相当于叫号，让候补区的人去正式排队区（同步队列）</li><li>但叫号本身并不会直接让人拿到票，还需要排队区的人按顺序获取票（锁）</li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSignal</span><span class="token punctuation">(</span>Node first<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将首节点的nextWaiter转移到首节点，如果nextWaiter为空，则表示队列中只有一个节点，且首尾相同</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>firstWaiter <span class="token operator">=</span> first<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            lastWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// gc处理</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">transferForSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>             <span class="token punctuation">(</span>first <span class="token operator">=</span> firstWaiter<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将当前的等待节点转换为同步节点，并加入到同步队列的末尾</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">transferForSignal</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Node p <span class="token operator">=</span> <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> p<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">)</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前驱节点被取消了，或者设置为SIGNAL失败</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3 总结"></a>2.3 总结</h3><p>​Condition实现了等待通知，当一个线程进入同步块后，就可以调用await，释放自己获取的锁资源，将自己阻塞。内部实现是<strong>首先将当前线程构造成一个等待节点，加入ConditionObject的等待队列的末尾，再释放锁资源，之后唤醒同步队列的第二个节点让其尝试获取锁</strong>。而当其他进入同步块的线程调用signal后，会将等待队列的首节点转移到同步队列，并将其变成同步节点，最后再使用同步队列的唤醒机制等待被唤醒。</p><p>​所以signal并不能直接唤醒一个await的线程，最佳使用案例就是消费者发送者机制，比如阻塞队列。</p><h2 id="3-CountDownLatch"><a href="#3-CountDownLatch" class="headerlink" title="3 CountDownLatch"></a>3 CountDownLatch</h2><p>CountDownLatch为共享锁实现，只能使用一次。用来“卡点”，阻塞的线程需要等待其他线程准备好了后（countDown直到AQS里的state为0），才继续被唤醒执行后面的代码。</p><p>在CountDownLatch中，AQS里的state值并不表示可获取到锁的次数，而是<strong>java.util.concurrent.CountDownLatch#countDown</strong> state值的次数后会释放所有调用了**java.util.concurrent.CountDownLatch#await()**的线程</p><p>内部的同步器Sync主要方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    获取共享锁，只有AQS的state为0才能获取到    通过这个接口就可以猜到，当state为0时（拉下了所有门闩），总会返回1，代表获取锁成功。    并依次传播下去递归调用这个方法，直到同步队列的所有Node里的线程全部唤醒，这就是CountDownLatch的原理*/</span><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 释放共享锁，state第一次被减为0才释放成功，也就表示了CountDownLatch只能用一次</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Decrement count; signal when transition to zero</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>await方法会阻塞当前线程，直到其他线程“拉下所有门闩”。阻塞的线程会构造为共享节点加入同步队列，只有队首节点的下一个节点才有资格尝试获取锁，获取不到就LockSupport#park</p><p>countDown会将state值减小1，当state将为0时，释放同步队列里的第二个共享节点里的线程。当这个线程释放后，就能成功获取到锁了，将这个事件传播下去，一次唤醒同步队列里的所有共享节点。至此，所有被阻塞的线程都被唤醒且会成功获取到锁，最终从await方法里返回</p><h2 id="4-Semaphore"><a href="#4-Semaphore" class="headerlink" title="4 Semaphore"></a>4 Semaphore</h2><p><strong>信号量，共享锁实现。可以利用构造器指定令牌（permits）的数量。当线程到达时，获取（acquire）指定数量的令牌，当没有可用令牌（premits为0）时，阻塞线程，等待令牌的释放（release）再被唤醒后继续执行。基于此，即可实现共享锁（permits大于1），也可实现不可重入的互斥锁（permits为1）</strong></p><p>也分为公平锁和分公平锁，其判断方式完全和ReentrantLock一致。</p><p>​<strong>非公平锁允许准备进入同步块的线程（还未加入同步队列）和同步队列中的第二个节点竞争获取锁。而公平锁则只允许同步队列中第二个节点里的线程能尝试获取锁。</strong></p><p>​<strong>其实现方式就是将state设为我们允许并发运行的线程数量，每当一个线程获取到锁后，将state - 1，如果state为0则阻塞所有准备进入同步块的线程，并将其构造为共享节点加入同步队列。每当有线程从同步块退出时，将state + 1，并根据是否非公平来唤醒同步队列的第二个节点来尝试获取锁</strong></p><h2 id="5-ReentrantReadWriteLock"><a href="#5-ReentrantReadWriteLock" class="headerlink" title="5 ReentrantReadWriteLock"></a>5 ReentrantReadWriteLock</h2><p>​读写锁，<strong>支持并发的读或互斥的写</strong>。读写锁分别各自实现，读锁使用共享锁，写锁使用互斥锁。ReentrantReadWriteLock内部的ReadLock和WriteLock都使用了内部同一个Sync对象来实现读写加锁的功能，在Sync内，他将AQS的state转换为二进制，高十六位表示读状态位，低十六位表示写状态位。由于读是共享的，所以state的高十六位表示了当前有多少个线程在读，在此期间写锁是禁用的。而低十六位是写锁，所以只可能有一个线程，但可能数字大于1（这是就表示写锁重入了）。当写锁被占用是，读是不允许的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHARED_SHIFT<span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//   读状态位            写状态位</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHARED_UNIT  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0000000000000001 0000000000000000</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_COUNT <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000000000000000 1111111111111111</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXCLUSIVE_MASK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000000000000000 1111111111111111</span><span class="token comment" spellcheck="true">// 获取共享锁冲入次数（读锁专用）</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">>>></span> SHARED_SHIFT<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取排他锁冲入次数（写锁专用）</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> EXCLUSIVE_MASK<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>读写锁都支持重入，但写锁只能让当前线程重入，并且要解锁时需要unlock重入的次数。</strong></p></li><li><p><strong>支持锁降级但不支持锁升级</strong></p><blockquote><p> 锁降级：即一个线程在持有写锁的情况下，可以继续获取读锁，然后释放写锁，从而将写锁降级为读锁。在某些场景下很有用，比如</p><ul><li>在写操作完成后，仍然需要保持对数据的读访问权限</li><li>避免其他线程在写锁释放后立即获取写锁，导致数据不一致</li></ul></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS实现类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码篇-AQS</title>
      <link href="/2020-04-17/java-yuan-ma-pian-aqs/"/>
      <url>/2020-04-17/java-yuan-ma-pian-aqs/</url>
      
        <content type="html"><![CDATA[<hr><p>​总结了LockSupport的作用，并从源码分析了AbstractQueuedSynchronizer的实现逻辑</p><span id="more"></span><h1 id="Java源码篇-AQS"><a href="#Java源码篇-AQS" class="headerlink" title="Java源码篇-AQS"></a>Java源码篇-AQS</h1><h2 id="1-LockSupport"><a href="#1-LockSupport" class="headerlink" title="1 LockSupport"></a>1 LockSupport</h2><h3 id="1-1-总结"><a href="#1-1-总结" class="headerlink" title="1.1 总结"></a>1.1 总结</h3><p>Java中实现<strong>当前线程的阻塞和定时阻塞</strong>，并提供<strong>唤醒指定线程</strong>的工具，在内部使用sun.misc.Unsafe来实现这一系列的操作。在AQS中普遍被使用</p><ul><li><strong>阻塞当前线程</strong>：通过 <code>park()</code> 方法使当前线程进入等待状态。</li><li><strong>定时阻塞</strong>：通过 <code>parkNanos(long nanos)</code> 或 <code>parkUntil(long deadline)</code> 方法使当前线程在指定时间内等待。</li><li><strong>唤醒指定线程</strong>：通过 <code>unpark(Thread thread)</code> 方法唤醒指定的处于等待状态的线程。</li></ul><h3 id="1-2-核心代码"><a href="#1-2-核心代码" class="headerlink" title="1.2 核心代码"></a>1.2 核心代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 唤醒指定的线程（如果该线程被park了） * 如果线程先被unpark（解除等待）了，那么该线程下一次调用park(进入等待)则不起作用，也就不会被阻塞 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unpark</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">!=</span> null<span class="token punctuation">)</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 阻塞当前线程，并设置一个blocker（俗称阻塞器，这个只是用来jstack查看，并不能通过notifyAll来唤醒阻塞的线程） * blocker只能用来调试和诊断，并不影响线程的阻塞和唤醒 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span>Object blocker<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setBlocker</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> blocker<span class="token punctuation">)</span><span class="token punctuation">;</span>    UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setBlocker</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 定时等待，阻塞当前线程指定的纳秒数，当时间到达时就自动唤醒（定时任务会调用） */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 定时等待，阻塞当前线程直到指定的时间戳（deadline）到来就自动唤醒（定时任务会调用） */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parkUntil</span><span class="token punctuation">(</span><span class="token keyword">long</span> deadline<span class="token punctuation">)</span> <span class="token punctuation">{</span>    UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> deadline<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-AbstractQueuedSynchronizer"><a href="#2-AbstractQueuedSynchronizer" class="headerlink" title="2 AbstractQueuedSynchronizer"></a>2 AbstractQueuedSynchronizer</h2><blockquote><p>​Node是AQS的核心内部类，它是构建同步器的基础数据结构，通过不同的配置可以实现同步队列，也可实现等待队列</p></blockquote><h3 id="2-1-同步队列"><a href="#2-1-同步队列" class="headerlink" title="2.1 同步队列"></a>2.1 同步队列</h3><p>​<strong>当线程尝试获取锁时，未获取到锁的线程会被构造成一个Node，利用CAS放入同步尾部作为尾节点，等待被唤醒。同步队列关联的是整个锁，一对一的关系。而同步队列中的Node又根据nextWaiter字段判断当前Node是共享节点还是独占节点</strong></p><ul><li><p>Node之间通过<strong>prev和next指针构成双向链表</strong></p></li><li><p><strong>头节点(head)代表当前持有锁的线程</strong></p></li><li><p>包含waitStatus字段标记节点状态</p><ul><li><strong>CANCELLED(1): 线程已取消</strong></li><li><strong>SIGNAL(-1): 后继节点需要唤醒</strong></li><li><strong>CONDITION(-2): 节点在等待队列中</strong></li><li>PROPAGATE(-3): 共享锁需要向后传播</li><li>0: 初始状态</li></ul></li><li><p>使用nextWaiter区分共享&#x2F;互斥模式</p><ul><li><p><strong>共享节点：共享锁的实现（Semaphore、CountDownLatch等）。nextWaiter字段为固定的Node#SHARED。释放当前节点的线程后，还具有向后传播的能力（根据state的值判断是否需要释放后继共享节点里的线程）</strong></p></li><li><p><strong>互斥节点：互斥锁的实现（ReentrantLock等），nextWaiter字段为Node#EXCLUSIVE（即null），只会释放当前节点里的线程</strong></p></li></ul></li></ul><h3 id="2-2-等待队列"><a href="#2-2-等待队列" class="headerlink" title="2.2 等待队列"></a>2.2 等待队列</h3><p>​当已经获取到锁的线程触发<strong>java.util.concurrent.locks.Condition#await()<strong>方法阻塞自己，让出锁时。</strong>会将当前线程构造成一个Node（等待节点，状态为CONDITION），利用CAS放入等待队列尾部。等待队列关联的是Condition。所以，当ReentrantLock构造多个Condition时，就有多个等待队列，ReentrantLock和等待队列可以为一对多，而Condition和等待队列时一对一</strong>。而<strong>当其他线程获取当前锁（ReentrantLock）的线程调用java.util.concurrent.locks.Condition#signal等方法时，便会将等待队列的首节点转入到同步队列的尾节点，并重新设置Node的状态</strong></p><ul><li><p>单向链表结构，只使用nextWaiter指针</p></li><li><p><strong>nextWaiter字段为等待队列中下一个等待节点的指针</strong></p></li><li><p>当调用signal()时，节点从等待队列转移到同步队列过程中的状态变化如下</p><ol><li>CONDITION -&gt; 0</li><li>入队同步队列</li><li>等待获取锁</li></ol></li></ul><h3 id="2-3-核心代码"><a href="#2-3-核心代码" class="headerlink" title="2.3 核心代码"></a>2.3 核心代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 同步队列专属的头尾节点。</span><span class="token comment" spellcheck="true">// 因为只有在同步队列里的线程才需要被唤醒。等待队列里的线程如果要被唤醒，需要先加入到同步队列</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node head<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 核心，可获取到锁的次数</span><span class="token comment" spellcheck="true">// - ReentrantLock: 表示重入次数</span><span class="token comment" spellcheck="true">// - Semaphore: 表示剩余许可数</span><span class="token comment" spellcheck="true">// - CountDownLatch: 表示剩余计数</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自旋的阈值（纳秒）。当超时等待时间小于这个值时，就不会再暂停线程，而是自旋。因为这个时间已经很少了，考虑到阻塞线程后上线文切换会消耗时间，就没必要再阻塞了</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> spinForTimeoutThreshold <span class="token operator">=</span> 1000L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取到独占锁的线程</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Thread exclusiveOwnerThread<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**    留给子类实现的尝试获取共享锁的方法，共享锁获取，返回AQS里state的剩余值     1：返回值 > 0，代表当前线程获取成功，且state还有剩余值，表示可以继续传播给下一个共享节点线程，让其尝试获取锁     2：返回值 = 0，代表当前线程获取成功，但state值刚好被用完，那么下一个共享节点线程就不应该被唤醒了（因为这时已经获取不到state的剩余值了）    3：返回值 &lt; 0，代表当前线程都没获取成功，直接获取失败，阻塞等待被其他线程唤醒后在尝试获取*/</span><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取共享锁</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>SHARED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 首节点的下个节点才有资格获取锁（首节点就是获取到锁的节点）</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 至少当前线程获取成功了，但可能state值已经被用完了</span>                    <span class="token comment" spellcheck="true">// 获取成功，传播给下一个共享Node，根据state的剩余值来判断是否需要唤醒下一个共享Node里的线程</span>                    <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不能获取到锁线程就park</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 释放共享锁（Semaphore会使用）</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 必要的循环</span>      <span class="token comment" spellcheck="true">// 1. CAS操作可能失败需要重试</span>    <span class="token comment" spellcheck="true">// 2. 在设置head的过程中可能有新的节点入队</span>    <span class="token comment" spellcheck="true">// 3. 传播机制要求必须确保传播状态正确设置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// h != tail 检查确保队列中还有后继节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> ws <span class="token operator">=</span> h<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// loop to recheck cases</span>                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                     <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Node<span class="token punctuation">.</span>PROPAGATE<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// loop on failed CAS</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> head<span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">// loop if head changed</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    将目标节点（参数node）设为同步队列的尾部（使用CAS来解决并发问题）。    所以，在这整个过程中，链表中除首节点外其余节点的prev在任何时刻都不会为空；        但除尾节点外其余节点的next字段有可能为空 （刚好走完第②步，还没走到第③步）*/</span><span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 初始化同步队列，设置一个空Node为首尾节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先将目标节点的prev设置程原尾节点 ①</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// CAS设置尾节点 ②</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置成功了，才把原尾节点的next设为目标节点（现尾节点）③</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 唤醒目标节点（参数node）的最近下一个可唤醒节点中的线程</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 首节点的下个节点唤醒失败时，就从尾节点向前遍历，直到找到距首节点最近的可唤醒的节点</span>    <span class="token comment" spellcheck="true">// 目的是避免并发时（节点入队列和唤醒），倒数第二个节点（甚至不止）的next字段为空，导致拿不到其实已经入队列里的后续节点</span>    Node s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ============内部的Node数据结构=================</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 共享锁</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Node SHARED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 互斥锁</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Node EXCLUSIVE <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  取消获取锁</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SIGNAL    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待condition唤醒（等待队列才会用到这个状态）</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CONDITION <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PROPAGATE <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前节点的状态</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 同步队列专用</span>    <span class="token keyword">volatile</span> Node prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 同步队列专用</span>    <span class="token keyword">volatile</span> Node next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待线程</span>    <span class="token keyword">volatile</span> Thread thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 当前Node为同步队列中的共享节点时：SHARED</span>    <span class="token comment" spellcheck="true">// 2. 当前Node为同步队列中的独占节点时：null</span>    <span class="token comment" spellcheck="true">// 3. 当前Node为等待队列中的节点时：下一个等待节点的指针</span>    Node nextWaiter<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断当前节点是互斥锁，还是共享锁</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextWaiter <span class="token operator">==</span> SHARED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当前节点的前驱结点</span>    <span class="token keyword">final</span> Node <span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NullPointerException <span class="token punctuation">{</span>        Node p <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LockSupport </tag>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码篇-Map</title>
      <link href="/2020-04-09/java-yuan-ma-pian-map/"/>
      <url>/2020-04-09/java-yuan-ma-pian-map/</url>
      
        <content type="html"><![CDATA[<p>​jdk中常用Map实现类相关源码解析。包括 HashMap，LinkedHashMap，ConcurrentHashMap</p> <span id="more"></span><h1 id="Java源码篇-Map"><a href="#Java源码篇-Map" class="headerlink" title="Java源码篇-Map"></a>Java源码篇-Map</h1><h2 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1 HashMap"></a>1 HashMap</h2><h3 id="1-1-重点字段"><a href="#1-1-重点字段" class="headerlink" title="1.1 重点字段"></a>1.1 重点字段</h3><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/** * 数组默认长度 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span><span class="token comment" spellcheck="true">/** * 最大容量（即数组最大长度） */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 默认加载因子 * 加载因子（loadFactor）是哈希表中用于控制数组存放数据疏密程度的参数。 * 当loadFactor越趋近于1时，数组中存放的数据（entry）越多，哈希冲突的概率增加， * 导致单个桶中的链表长度可能增加，进而影响查找元素的效率。反之，当loadFactor越小， * 数组中存放的数据越少，数据分布越稀疏，数组的利用率降低。 * * 默认的loadFactor值为0.75f，是官方经过权衡后给出的一个较为理想的平衡点， * 旨在兼顾查找效率和空间利用率。 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 树化阈值。当桶(bucket)上的结点数大于这个值时会转成红黑树 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 链表化阈值（当桶(bucket)上的结点数小于这个值时树转链表） */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 桶中结构树化对应的table的最小长度 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 扩容阈值（threshold） * threshold = loadFactor * 数组长度 * 当HashMap中元素的数量超过threshold时，会触发数组的扩容操作。 * 扩容是为了减少哈希冲突，保持查找效率。 */</span><span class="token keyword">int</span> threshold<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-核心方法"><a href="#1-2-核心方法" class="headerlink" title="1.2 核心方法"></a>1.2 核心方法</h3><h4 id="1-2-1-put"><a href="#1-2-1-put" class="headerlink" title="1.2.1 put"></a>1.2.1 put</h4><h5 id="1-初始化数组"><a href="#1-初始化数组" class="headerlink" title="1 初始化数组"></a>1 <strong>初始化数组</strong></h5><ul><li>如果是第一次添加元素，先初始化数组（即分配内存空间）。</li><li>计算键的哈希值并确定索引位置，然后将键值对放入对应的桶（bucket）中。</li></ul><h5 id="2-目标桶为空"><a href="#2-目标桶为空" class="headerlink" title="2 目标桶为空"></a>2 <strong>目标桶为空</strong></h5><ul><li>如果计算索引后，数组中对应的桶为空，则直接将键值对放入该桶中。</li></ul><h5 id="3-目标桶不为空"><a href="#3-目标桶不为空" class="headerlink" title="3 目标桶不为空"></a>3 <strong>目标桶不为空</strong></h5><ul><li><strong>根节点匹配</strong>：<ul><li>如果桶中的根节点（第一个节点）与待插入节点的键 <code>equals</code>，则直接替换根节点的值。</li></ul></li><li><strong>树化节点</strong>：<ul><li>如果根节点是树形节点（即红黑树节点），则调用红黑树的插入方法将节点放入树中。</li></ul></li><li><strong>链表遍历</strong>：<ul><li>如果根节点是链表节点，则遍历链表：<ul><li>如果找到与待插入节点键 <code>equals</code> 的节点，则替换其值。</li><li>如果遍历到链表末尾仍未找到匹配的节点，则将新节点插入链表末尾。</li><li><strong>树化条件</strong>：<ul><li>如果链表长度（包括待插入节点）达到 8 且数组长度大于等于 64，则将链表转换为红黑树。</li><li>如果链表长度达到 8 但数组长度小于 64，则仅进行数组扩容，不进行树化。</li></ul></li></ul></li></ul></li></ul><h4 id="1-2-2-resize"><a href="#1-2-2-resize" class="headerlink" title="1.2.2 resize"></a>1.2.2 resize</h4><p><strong>HashMap 数组的长度始终为 2 的次幂，且扩容时长度加倍。这样设计的主要目的是为了方便扩容时的索引计算。</strong>以下为具体的扩容过程</p><h5 id="1-创建新数组"><a href="#1-创建新数组" class="headerlink" title="1 创建新数组"></a>1 <strong>创建新数组</strong></h5><ul><li>先创建一个长度为原数组 2 倍的新数组。</li></ul><h5 id="2-迁移数据"><a href="#2-迁移数据" class="headerlink" title="2 迁移数据"></a>2 <strong>迁移数据</strong></h5><ul><li><p>遍历原数组中的每个桶（bucket）：</p><ul><li><p><strong>如果桶为空或只有一个元素</strong>：</p><ul><li>直接计算该元素在新数组中的索引，并将其放入新数组。</li></ul></li><li><p><strong>如果桶中有链表结构</strong>：</p><ul><li><p>遍历链表中的每个节点（Node），计算其在新数组中的索引。</p></li><li><p>由于新数组长度是原数组的 2 倍，且长度始终为 2 的次幂，因此新索引的计算方法为：</p><pre class="line-numbers language-java"><code class="language-java">newIndex <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新索引的结果只有两种可能：</p><ul><li><strong>与原索引相同</strong>：如果 key 的哈希值在高一位为 0。</li><li><strong>等于原索引加上原数组长度</strong>：如果 key 的哈希值在高一位为 1。</li></ul></li><li><p>根据计算结果，将节点放入新数组的对应位置。</p></li></ul></li></ul></li></ul><h5 id="3-链表拆分"><a href="#3-链表拆分" class="headerlink" title="3 链表拆分"></a>3 <strong>链表拆分</strong></h5><ul><li>如果原桶中的链表被拆分为两个链表（一个保持原索引，另一个为原索引加上原数组长度），则分别将它们放入新数组的对应位置。</li></ul><h4 id="1-2-3-部分核心代码"><a href="#1-2-3-部分核心代码" class="headerlink" title="1.2.3 部分核心代码"></a>1.2.3 部分核心代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>             <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> rootNode<span class="token punctuation">;</span> <span class="token keyword">int</span> tableLength<span class="token punctuation">,</span> index<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>tableLength <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 添加第一个元素</span>      tableLength <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rootNode <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>tableLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 数组上对于的索引为空，代表这个kv可以直接放到这</span>      tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>      Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>rootNode<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> rootNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// bucket上的元素equals要放进来的kv，直接覆盖</span>          e <span class="token operator">=</span> rootNode<span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rootNode <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// bucket上已经是红黑树结构了，直接存放为红黑树结构</span>          e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 向链表的末尾添加</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> rootNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 到链表末尾了</span>                  rootNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>                  <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 链表的长度（算上bucket）已经大于等于了8，转换为红黑树</span>                      <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                  <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遍历链表时有equals，直接替换</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              rootNode <span class="token operator">=</span> e<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// existing mapping for key</span>          <span class="token comment" spellcheck="true">// e不为空，代表是覆盖的情况，不是新增</span>          V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>              e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>          <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token operator">++</span>modCount<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>      <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * resize方法，只展示了部分核心代码 * 数组的初始化或扩容，扩容是加倍的 */</span><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 旧数组存在元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// bucket存在元素</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这个bucket没有链表，只需要将它重新计算下在新数组的索引，并放入对于的bucket中</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 红黑树结构</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// preserve order</span>                    <span class="token comment" spellcheck="true">/* 旧数组的桶在新数组的索引位的节点 */</span>                    <span class="token comment" spellcheck="true">// 索引大小没有变化</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 索引扩大了旧数组的长度（即新索引位：旧索引位+旧数组长度）</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// e.hash &amp; oldCap == 0 就代表e的hash值（转换为2进制）高一位为0，</span>                        <span class="token comment" spellcheck="true">// 与（新的容量-1）相与后，其在数组的索引位置不变</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 这里则高一位为1，与新的容量 &amp; 后，</span>                             <span class="token comment" spellcheck="true">// 其在新数组的索引位置会增加新容量的扩大值（即原容量的大小）</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-线程不安全"><a href="#1-3-线程不安全" class="headerlink" title="1.3 线程不安全"></a>1.3 线程不安全</h3><blockquote><ul><li>当两个线程同时put数据时，且被put的两个数据能定位到HashMap数组的相同那个bucket位置上，就可能产生一个覆盖掉另一个的可能，造成一个数据消失。</li><li>多个线程同时修改 HashMap的结构时（如插入、删除或扩容），可能会导致部分数据丢失。比如线程A插入，而线程B正在扩容，最终导致A线程插入的数据丢失</li><li>没有volatile或锁的同步机制，会导致一个线程的修改对另一个线程不可见</li></ul></blockquote><h2 id="2-LinkedHashMap"><a href="#2-LinkedHashMap" class="headerlink" title="2 LinkedHashMap"></a>2 LinkedHashMap</h2><p><code>LinkedHashMap</code> 是 <code>HashMap</code> 的子类，它不仅实现了 <code>Map</code> 接口，还具有排序功能。其排序行为由 <code>accessOrder</code> 字段控制</p><h3 id="2-1-核心字段"><a href="#2-1-核心字段" class="headerlink" title="2.1 核心字段"></a>2.1 核心字段</h3><ul><li><code>head</code>：链表的头节点，指向最早插入或访问的节点。</li><li><code>tail</code>：链表的尾节点，指向最近插入或访问的节点。</li><li><code>accessOrder</code>（默认 <code>false</code>）：<ul><li><code>false</code>：按照<strong>插入顺序排序</strong>，越晚插入的元素越排在链表末尾。</li><li><code>true</code>：按照<strong>访问顺序排序</strong>，最近访问的元素会被移动到链表末尾。<strong>可用于实现 LRU 缓存。</strong></li></ul></li></ul><h3 id="2-2-排序实现原理"><a href="#2-2-排序实现原理" class="headerlink" title="2.2 排序实现原理"></a>2.2 排序实现原理</h3><h4 id="2-2-1-双向链表"><a href="#2-2-1-双向链表" class="headerlink" title="2.2.1 双向链表"></a>2.2.1 双向链表</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 继承了HashMap.Node的Entry内部结构</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 具有链表结构的Entry</span>    <span class="token comment" spellcheck="true">// 前驱节点和后继节点</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> before<span class="token punctuation">,</span> after<span class="token punctuation">;</span>    <span class="token function">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-添加元素"><a href="#2-2-2-添加元素" class="headerlink" title="2.2.2 添加元素"></a>2.2.2 添加元素</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 重写了HashMap的newNode方法，在构造新节点时将其添加到链表末尾</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">newNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将新节点链接到链表末尾</span>    <span class="token function">linkNodeLast</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-访问节点移动到末尾"><a href="#2-2-3-访问节点移动到末尾" class="headerlink" title="2.2.3 访问节点移动到末尾"></a>2.2.3 访问节点移动到末尾</h4><p>如果 <code>accessOrder</code> 为 <code>true</code>，<code>LinkedHashMap</code> 会在访问节点时（如调用 <code>get</code> 方法）触发 <code>afterNodeAccess</code> 方法，将最近访问的节点移动到链表末尾，基于此<strong>可以实现LRU缓存</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 重写的HashMap#afterNodeAccess方法，</span><span class="token keyword">void</span> <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> last<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>accessOrder <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>last <span class="token operator">=</span> tail<span class="token punctuation">)</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// accessOrder为true，e不为tail</span>        <span class="token comment" spellcheck="true">// 重排序当前元素，将当前节点设为新的tail（保持最近一次被访问的节点在最后面）</span>        LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span>            <span class="token punctuation">(</span>LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">,</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>before<span class="token punctuation">,</span> a <span class="token operator">=</span> p<span class="token punctuation">.</span>after<span class="token punctuation">;</span>        p<span class="token punctuation">.</span>after <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// e为head，更新头节点</span>            head <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">else</span>            b<span class="token punctuation">.</span>after <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// e不为tail</span>            a<span class="token punctuation">.</span>before <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">else</span>            last <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> null<span class="token punctuation">)</span>            head <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>before <span class="token operator">=</span> last<span class="token punctuation">;</span>            last<span class="token punctuation">.</span>after <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tail <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-ConcurrentHashMap"><a href="#3-ConcurrentHashMap" class="headerlink" title="3 ConcurrentHashMap"></a>3 ConcurrentHashMap</h2><p><code>ConcurrentHashMap</code> 是一个线程安全的 <code>Map</code> 实现，通过 **CAS 和 <strong>分段锁</strong> 机制实现高效的并发操作。其数据结构与 <code>HashMap</code> 类似，采用 <strong>数组 + 链表 + 红黑树</strong> 的形式：</p><ul><li>当链表长度超过 8 时，链表会转换为红黑树。</li><li>当红黑树节点数小于 6 时，红黑树会退化为链表。</li></ul><h3 id="3-1-put方法"><a href="#3-1-put方法" class="headerlink" title="3.1 put方法"></a>3.1 put方法</h3><p><strong>死循环put元素</strong>，直到操作成功才退出</p><ul><li>数组还没初始化，开始数组的初始化</li><li>数组的bucket还未被占用，CAS占用（成功了就break，失败了就代表已经被其他节点占用了，进行下一次循环进入其他if分支）</li><li><strong>当前桶为<code>ForwardingNode</code>，表示有线程正在进行扩容操作，则先帮助扩容，等扩容完毕在继续put</strong></li><li>bucket被占用，锁住根节点，开始构造到链表的为尾节点。添加到尾节点后，在判断当前链表长度是否超过8，否则就转换为红黑树</li></ul><h3 id="3-2-扩容（重点）"><a href="#3-2-扩容（重点）" class="headerlink" title="3.2 扩容（重点）"></a>3.2 扩容（重点）</h3><p>​核心是通过 <strong>多线程协作</strong> 和 <strong>分段迁移</strong> 的方式进行高效的数据迁移，同时尽量减少对读写操作的影响</p><h4 id="3-2-1-扩容触发时机"><a href="#3-2-1-扩容触发时机" class="headerlink" title="3.2.1 扩容触发时机"></a>3.2.1 扩容触发时机</h4><ul><li>当 <code>ConcurrentHashMap</code> 中的元素数量超过 <strong>阈值（threshold）</strong> 时触发</li><li>阈值计算公式：<code>阈值 = 数组长度 * 负载因子（loadFactor，默认 0.75）</code>。</li></ul><h4 id="3-2-2-具体步骤"><a href="#3-2-2-具体步骤" class="headerlink" title="3.2.2 具体步骤"></a>3.2.2 具体步骤</h4><ul><li><p>首先创建一个新的数据，为元素组大小的2倍。将其设置到nextTable字段</p></li><li><p>通过CAS设置transferIndex（初始设为旧数组的长度，即是从旧数组末尾开始向前遍历转移数据的）</p></li><li><p>每个线程通过CAS从transferIndex获取一段连续长度为stride（步长）的桶，stride计算如下</p><ul><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 计算步长：即扩容时每个线程每次最小处理的数组连续长度</span><span class="token comment" spellcheck="true">// cpu为1，则由这个线程全部处理；cpu数量大于1，每个核心负责的步长为 数组长度/(8 * cpu核数) ，不过如果计算出步长小于16，则会被设置为16。确保线程的工作量均衡</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stride <span class="token operator">=</span> <span class="token punctuation">(</span>NCPU <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> NCPU <span class="token operator">:</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TRANSFER_STRIDE<span class="token punctuation">)</span><span class="token punctuation">{</span>  stride <span class="token operator">=</span> MIN_TRANSFER_STRIDE<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>开始迁移数据，到这一步了每个线程就只会迁移自己所负责的步长索引数据，不会冲突</p><ul><li>空桶：则放置一个 <code>ForwardingNode</code>，表示该桶已迁移</li><li>桶为<code>ForwardingNode</code>：当前桶已迁移。因为整体是从后向前迁移的，可推测当前线程负责的这段步长索引一定已处理完毕，即这段步长内这个桶后面的所有桶也都已经被处理完成了，需要重新计算它下一次该负责的新步长索引</li><li>桶未迁移：则操作加锁，对桶中的链表或红黑树进行迁移，迁移完成后，再将当前桶放置为<code>ForwardingNode</code>节点</li></ul></li><li><p>当最后一个线程迁移完毕后，则更新table为新数据和sizeCtl，表示扩容完成</p></li></ul><h4 id="3-2-3-相关思考"><a href="#3-2-3-相关思考" class="headerlink" title="3.2.3 相关思考"></a>3.2.3 相关思考</h4><ul><li><p>步长计算安全嘛？</p><blockquote><p>​安全，通过CAS设置公共变量transferIndex（初始值为table.length），同时该变量为volatile，它的变化能立马被其他线程感知到，可以保证每个线程处理的步长索引不会重复和交叉</p></blockquote></li><li><p>其他线程如何感知并帮助扩容？</p><blockquote><p>​通过判断桶节点为ForwardingNode，则表示正在扩容，此时这个线程则帮助扩容，计算自己需要处理的步长索引来转移数据到新数组中。每处理完一个桶也将其设为ForwardingNode节点</p></blockquote></li><li><p>get方法并没有加锁，如果桶已被转移怎么获取到数据？</p><blockquote><p>​首先扩容是读写分离的，扩容时不会对桶本身做任何修改（即不会修改Node的内部指针数据），所以如果拿到原桶数据，则能直接遍历获取数据。而如果拿到的是ForwardingNode，它本身也提供了find方法，会到新数组中去找到需要的数据</p></blockquote></li><li><p>扩容完成如何处理？</p><blockquote><p>​每个线程完成自己负责区间的迁移后，会更新<code>sizeCtl</code>字段中的扩容线程数计数，判断确定最后一个完成迁移的线程会将新数组赋值给table并重新计算<code>sizeCtl</code>的阈值</p></blockquote></li><li><p>最后需要注意，在操作数组中的桶时，都会获取这个桶节点的锁（put和resize等等修改方法），锁是相同的，所以不必担心某一个桶的相关数据被多个线程同时处理（put，resize等）</p></li></ul><h4 id="3-2-4-核心代码"><a href="#3-2-4-核心代码" class="headerlink" title="3.2.4 核心代码"></a>3.2.4 核心代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTab<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">,</span> stride<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算步长：即扩容时每个线程每次最小处理的数组连续长度</span>    <span class="token comment" spellcheck="true">// cpu为1，则由这个线程全部处理；cpu数量大于1，每个核心负责的步长为 数组长度/(8 * cpu核数) ，不过如何计算出步长小于16，则会被设置为16。确保线程的工作量均衡</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stride <span class="token operator">=</span> <span class="token punctuation">(</span>NCPU <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> NCPU <span class="token operator">:</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TRANSFER_STRIDE<span class="token punctuation">)</span>        stride <span class="token operator">=</span> MIN_TRANSFER_STRIDE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// subdivide range</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// initiating</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 创建新数组，2次幂便于扩容计算新索引位置</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            nextTab <span class="token operator">=</span> nt<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// try to cope with OOME</span>            sizeCtl <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nextTable <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 表示从数组末尾开始分配迁移任务</span>        transferIndex <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> nextn <span class="token operator">=</span> nextTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    ForwardingNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> fwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForwardingNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>nextTab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前线程是否需要继续在旧数组上截取一段桶来处理数据，默认是</span>    <span class="token keyword">boolean</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 扩容完毕的标志</span>    <span class="token keyword">boolean</span> finishing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// to ensure sweep before committing nextTab</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// i 是当前线程正在处理的桶的索引，bound 是当前线程负责的迁移任务的起始索引（也就是在处理中则 i>bound）</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> fh<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 检查当前线程负责的步长内的桶是否处理完毕。处理完毕，则选取下一段当前现场该处理的步长索引段</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>advance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nextIndex<span class="token punctuation">,</span> nextBound<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">>=</span> bound <span class="token operator">||</span> finishing<span class="token punctuation">)</span>                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nextIndex <span class="token operator">=</span> transferIndex<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span>                     <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> TRANSFERINDEX<span class="token punctuation">,</span> nextIndex<span class="token punctuation">,</span>                      nextBound <span class="token operator">=</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">></span> stride <span class="token operator">?</span>                                   nextIndex <span class="token operator">-</span> stride <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bound <span class="token operator">=</span> nextBound<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// i初始化为旧数组最后一个索引位置</span>                i <span class="token operator">=</span> nextIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> n <span class="token operator">||</span> i <span class="token operator">+</span> n <span class="token operator">>=</span> nextn<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前线程扩容完毕处理</span>            <span class="token keyword">int</span> sc<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>finishing<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nextTable <span class="token operator">=</span> null<span class="token punctuation">;</span>                table <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>                sizeCtl <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">,</span> sc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> RESIZE_STAMP_SHIFT<span class="token punctuation">)</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                finishing <span class="token operator">=</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// recheck before commit</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 空桶，CAS放置ForwardingNode，让其他线程可以感知到，以帮助扩容</span>            advance <span class="token operator">=</span> <span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> MOVED<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前桶已被处理</span>            <span class="token comment" spellcheck="true">// 到这了就说明这段步长索引处理完毕，需要重新计算新步长索引</span>            advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// already processed</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 桶加锁，开始转移当前桶的链表或红黑树到新的数组里</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 获取成功，再次校验桶节点是否变化，未变才继续操作（避免被其他刚释放了这个锁的线程给修改了）</span>                    <span class="token comment" spellcheck="true">// 桶数据转移到新数组去，和HashMap类似计算新数组中的索引</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> ln<span class="token punctuation">,</span> hn<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> runBit <span class="token operator">=</span> fh <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> lastRun <span class="token operator">=</span> f<span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span> p <span class="token operator">!=</span> null<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> runBit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                runBit <span class="token operator">=</span> b<span class="token punctuation">;</span>                                lastRun <span class="token operator">=</span> p<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>runBit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            ln <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                            hn <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            hn <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                            ln <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> f<span class="token punctuation">;</span> p <span class="token operator">!=</span> lastRun<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">;</span> K pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">;</span> V pv <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                                ln <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 转移完后，旧数组的桶放置ForwardingNode，表示当前桶已处理完毕并表示为扩容中</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                        advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> t <span class="token operator">=</span> <span class="token punctuation">(</span>TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>f<span class="token punctuation">;</span>                        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> lo <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hi <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token keyword">int</span> lc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> h <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>                            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>                                <span class="token punctuation">(</span>h<span class="token punctuation">,</span> e<span class="token punctuation">.</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span>val<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> loTail<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    lo <span class="token operator">=</span> p<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                                loTail <span class="token operator">=</span> p<span class="token punctuation">;</span>                                <span class="token operator">++</span>lc<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> hiTail<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    hi <span class="token operator">=</span> p<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                                hiTail <span class="token operator">=</span> p<span class="token punctuation">;</span>                                <span class="token operator">++</span>hc<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        ln <span class="token operator">=</span> <span class="token punctuation">(</span>lc <span class="token operator">&lt;=</span> UNTREEIFY_THRESHOLD<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">untreeify</span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span> <span class="token operator">:</span>                            <span class="token punctuation">(</span>hc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>                        hn <span class="token operator">=</span> <span class="token punctuation">(</span>hc <span class="token operator">&lt;=</span> UNTREEIFY_THRESHOLD<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">untreeify</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span> <span class="token operator">:</span>                            <span class="token punctuation">(</span>lc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 转移完后，旧数组的桶放置ForwardingNode，表示当前桶已处理完毕并表示为扩容中</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                        advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-为什么key和value不允许为null，而HashMap可以呢？"><a href="#3-4-为什么key和value不允许为null，而HashMap可以呢？" class="headerlink" title="3.4 为什么key和value不允许为null，而HashMap可以呢？"></a>3.4 为什么key和value不允许为null，而HashMap可以呢？</h3><blockquote><p>​<strong>ConcurrentHashMap如果允许key和value为null，会产生二义性</strong>。即不能确定map里本身没有这个数据，还是说有这个数据，但这个数据存的是null值。</p><p>​为什么HashMap可以允许呢？因为它不会产生二义性，使用<strong>HashMap设计用于单线程下，假设我们获取key为A的数据返回了null，之后还马上可以通过containsKey来判断到底是不存在A还是A就为null（因为是单线程，不用担心其他线程会修改数据）</strong></p><p>​但ConcurrentHashMap是线程安全的，也就是默认会在多线程下修改数据。假设ConcurrentHashMap支持设置null，这时线程A获取key为null的数据返回了null，此时我们不确定A在不在ConcurrentHashMap里，需要用containsKey来判断key为null是否存在于ConcurrentHashMap里。但多线程的情况下，B线程在A线程containsKey操作前添加了key为null的数据，导致A线程containsKey返回了true，导致和第一步预期不同（第一步可能是不存在key为null的数据）</p><p>​综上：<strong>ConcurrentHashMap，它是为并发而生的，它是要用在并发场景中的。假如允许使用 map.get(key)返回 null ，这时是没办法通过 map.containsKey来准确的检测，因为在检测过程中可能会被其他线程锁修改，而导致检测结果并不可靠。所以直接禁用了null，好处就是返回null一定能表示key不存在，而不是有其他的含义，让语义更明确了</strong></p><p>​所以这个设计选择反映了<strong>并发编程的一个重要原则：通过适当的限制来换取更好的可靠性和简单性</strong>。虽然失去了存储null值的能力，但换来了更清晰的语义和更好的并发安全性。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Map </tag>
            
            <tag> ConcurrentHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2020-02-07/git/"/>
      <url>/2020-02-07/git/</url>
      
        <content type="html"><![CDATA[<p>​Git常用命令总结</p><span id="more"></span><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="1-git-config"><a href="#1-git-config" class="headerlink" title="1 git config"></a>1 git config</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># git查看配置</span><span class="token function">git</span> config --list<span class="token comment" spellcheck="true"># ================= 全局配置（保存在用户目录下的 ～/.gitconfig 文件中）======================</span><span class="token comment" spellcheck="true"># 设置全局用户名和邮箱（在 git commit 时记录为提交者信息））</span><span class="token function">git</span> config --global user.name  <span class="token string">"reef"</span><span class="token function">git</span> config --global user.email <span class="token string">"shanzhao.rd@gmail.com"</span><span class="token comment" spellcheck="true"># 设置全局代理（socks5 协议，端口号为 7890）</span><span class="token function">git</span> config --global http.proxy<span class="token operator">=</span>socks5://127.0.0.1:7890<span class="token function">git</span> config --global https.proxy<span class="token operator">=</span>socks5://127.0.0.1:7890<span class="token comment" spellcheck="true"># ================= 当前仓库单独配置（保存在当前仓库中 .git/config 文件中）======================</span><span class="token comment" spellcheck="true"># 设置仓库专属用户名和邮箱（覆盖全局设置）</span><span class="token function">git</span> config  user.name  <span class="token string">"reef"</span><span class="token function">git</span> config  user.email <span class="token string">"shanzhao.rd@gmail.com"</span><span class="token comment" spellcheck="true"># 设置当前仓库的代理（仅对该仓库生效）</span><span class="token function">git</span> config  http.proxy<span class="token operator">=</span>socks5://127.0.0.1:7890<span class="token function">git</span> config  https.proxy<span class="token operator">=</span>socks5://127.0.0.1:7890<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-初始化仓库"><a href="#2-初始化仓库" class="headerlink" title="2 初始化仓库"></a>2 初始化仓库</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将当前文件夹初始化为一个 Git 本地仓库</span><span class="token function">git</span> init<span class="token comment" spellcheck="true"># 将指定文件夹初始化为一个 Git 本地仓库</span><span class="token function">git</span> init <span class="token operator">&lt;</span>目录路径<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-本地仓库的操作"><a href="#3-本地仓库的操作" class="headerlink" title="3 本地仓库的操作"></a>3 本地仓库的操作</h2><h3 id="3-1-查看文件状态"><a href="#3-1-查看文件状态" class="headerlink" title="3.1 查看文件状态"></a>3.1 查看文件状态</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 可以查看分支名（branch）和文件的状态，如已修改（Modified），未跟踪的（untracked）,未修改的不会有提示</span><span class="token function">git</span> status<span class="token comment" spellcheck="true"># 简洁版的git status</span><span class="token comment" spellcheck="true"># 红色M 代表文件修改了但未加入暂存区</span><span class="token comment" spellcheck="true"># 绿色M 代表文件修改了并且已加入暂存区</span><span class="token comment" spellcheck="true"># ?? 代表未跟踪的，</span><span class="token comment" spellcheck="true"># A 代表文件已被加入到暂存区</span><span class="token function">git</span> status -s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-未暂存的文件添加到暂存区和解暂存"><a href="#3-2-未暂存的文件添加到暂存区和解暂存" class="headerlink" title="3.2 未暂存的文件添加到暂存区和解暂存"></a>3.2 未暂存的文件添加到暂存区和解暂存</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将文件加入暂存区</span><span class="token function">git</span> add 文件名<span class="token comment" spellcheck="true"># 将暂存区的文件取消暂存</span><span class="token function">git</span> reset 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-commit-暂存区文件的提交"><a href="#3-3-commit-暂存区文件的提交" class="headerlink" title="3.3 commit(暂存区文件的提交)"></a>3.3 commit(暂存区文件的提交)</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 不带文件名会提交暂存区所有的文件</span><span class="token function">git</span> commit -m <span class="token string">"提交的日志信息"</span><span class="token comment" spellcheck="true"># 提交全部暂存区文件，并打开一个编辑器，让你写入提交日志（'i':插入，'ESC':退出编辑，':wq':保存并退出）</span><span class="token function">git</span> commit<span class="token comment" spellcheck="true"># 该语句可将不是暂存区的文件直接commit，因为-a就代表提交到了暂存区。两步合为一步了</span><span class="token function">git</span> commit -a -m <span class="token string">"提交的日志信息"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-已commit的文件删除"><a href="#3-4-已commit的文件删除" class="headerlink" title="3.4 已commit的文件删除"></a>3.4 已commit的文件删除</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 会放在暂存区，在commit之后就删除了。如果直接在文件夹中删除，则不会放在暂存区，要将其删除，就必须先add进暂存区，再commit</span><span class="token function">git</span> <span class="token function">rm</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-5-将文件添加至忽略列表"><a href="#3-5-将文件添加至忽略列表" class="headerlink" title="3.5 将文件添加至忽略列表"></a>3.5 将文件添加至忽略列表</h3><blockquote><p> 自动生成的文件，比如日志文件，class文件就不需要通过git提交，git一般只负责提交源代码。这种情况下，我们可以在<strong>工作区中创建一个.gitignore文件</strong>（文件名固定，可以在git命令行中用touch .gitignore语句创建）</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 通配符（匹配任意）</span>*<span class="token comment" spellcheck="true"># 取反。比如!hello.class文件，git就不会忽略掉hello.class文件</span><span class="token operator">!</span><span class="token comment" spellcheck="true"># 忽略当前目录下的xxx文件</span>/xxx<span class="token comment" spellcheck="true"># 忽略当前目录下的doc文件夹下的所有</span>doc/<span class="token comment" spellcheck="true"># 忽略当前目录下的doc文件夹里的所有txt文件</span>doc/*.txt<span class="token comment" spellcheck="true"># 忽略当前目录下的doc文件里的所有文件夹里的class文件</span>doc/**/*.class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6-查看git操作日志"><a href="#3-6-查看git操作日志" class="headerlink" title="3.6 查看git操作日志"></a>3.6 查看git操作日志</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 因为日志太多，不会一次性全部显示，按回车会显示下面的，按Q会退出。</span><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-远程仓库的操作"><a href="#4-远程仓库的操作" class="headerlink" title="4. 远程仓库的操作"></a>4. 远程仓库的操作</h2><h3 id="4-1-remote"><a href="#4-1-remote" class="headerlink" title="4.1 remote"></a>4.1 remote</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 可以查看到本地关联的的远程仓库的别名（粗略查看）</span><span class="token function">git</span> remote<span class="token comment" spellcheck="true"># 显示远程仓库地址（详细点）</span><span class="token function">git</span> remote -v<span class="token comment" spellcheck="true"># 可查看更多信息（更详细）</span><span class="token function">git</span> remote show 远程仓库的别名<span class="token comment" spellcheck="true"># 添加(add)远程仓库（一个本地仓库可以添加多个远程仓库）</span><span class="token function">git</span> remote add 仓库别名 远程仓库的url<span class="token comment" spellcheck="true"># 删除本地仓库中配置的某个远程仓库别名及其对应的 URL（该命令不会影响到真正的远程仓库）</span><span class="token function">git</span> remote <span class="token function">rm</span> 远程仓库的别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-clone"><a href="#4-2-clone" class="headerlink" title="4.2 clone"></a>4.2 clone</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 克隆远程仓库到此命令行文件夹下面</span><span class="token function">git</span> clone 远程仓库的url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-3-fetch-pull"><a href="#4-3-fetch-pull" class="headerlink" title="4.3 fetch &amp; pull"></a>4.3 fetch &amp; pull</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 从远程仓库获取最新版本带本地仓库，不会合并(merge)。如果省略这两个参数，即别名为origin，分支为matser</span><span class="token function">git</span> fetch 仓库别名 远程仓库的branchName<span class="token comment" spellcheck="true"># 合并到本地仓库</span><span class="token function">git</span> merge origin/master<span class="token comment" spellcheck="true"># 从远程仓库获取最新版本带本地仓库，会合并(merge)。如果省略这两个参数，即别名为origin，分支为matser</span><span class="token function">git</span> pull 仓库别名 远程仓库的branchName<span class="token comment" spellcheck="true"># 用于合并本地和远程仓库之间没有共同历史的分支内容。（强制合并）</span><span class="token function">git</span> pull 仓库别名 远程仓库的branchName --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Git分支操作"><a href="#5-Git分支操作" class="headerlink" title="5 Git分支操作"></a>5 Git分支操作</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出所有本地分支</span><span class="token function">git</span> branch<span class="token comment" spellcheck="true"># 列出所有远程分支</span><span class="token function">git</span> branch -r<span class="token comment" spellcheck="true"># 列出所有本地和远程的分支</span><span class="token function">git</span> branch -a<span class="token comment" spellcheck="true"># 查看所有本地分支，并可查看是否和远程分支建立映射关系</span><span class="token function">git</span> branch -v<span class="token comment" spellcheck="true"># 在本仓库中新建一个分支(在正在使用的分支下创建新的分支，新的分支将会复制正在使用的分支的所有内容进行初始化)</span><span class="token function">git</span> branch 新分支名<span class="token comment" spellcheck="true"># 切换到指定的分支下，前面会有*提示</span><span class="token function">git</span> checkout 已存在的分支名<span class="token comment" spellcheck="true"># 本地仓库分支推送到远程仓库</span><span class="token function">git</span> push 仓库别名<span class="token punctuation">(</span>shortname<span class="token punctuation">)</span> 本地仓库的分支名<span class="token punctuation">(</span>branchName<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将指定的分支名的分支文件合并到正在使用的分支里（branchName -> 正在使用的分支）</span><span class="token function">git</span> merge 分支名<span class="token punctuation">(</span>branchName<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 根据分支名删除分支，未push的不能删除</span><span class="token function">git</span> branch -d 分支名<span class="token comment" spellcheck="true"># 根据分支名强力删除分支，未push的也能删除</span><span class="token function">git</span> branch -D 分支名<span class="token comment" spellcheck="true"># 删除远程仓库中的分支</span><span class="token function">git</span> push 远程仓库的别名 -d 分支名<span class="token comment" spellcheck="true"># oldName是当前分支名，newName是想改成的名</span><span class="token function">git</span> branch -m oldName newName<span class="token comment" spellcheck="true"># 本地更新远程仓库分支</span><span class="token function">git</span> remote update origin --prune<span class="token comment" spellcheck="true"># =========分支追踪（名字不同也可以）============</span><span class="token comment" spellcheck="true"># 在本地新建分支local-branchName，并和对应的远程分支remote-branchName做映射，最后再checkout并pull</span><span class="token function">git</span> checkout -b local-branchName origin/remote-branchName<span class="token comment" spellcheck="true"># 将本地分支local-branchName分支追踪远程分支origin/remote-branchName（建立映射关系）   </span><span class="token function">git</span> branch --set-upstream local-branchName origin/remote-branchName<span class="token comment" spellcheck="true"># 将当前分支跟踪远程分支origin/remote-branchName   </span><span class="token function">git</span> branch -u origin/remote-branchName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-Git标签操作"><a href="#6-Git标签操作" class="headerlink" title="6 Git标签操作"></a>6 Git标签操作</h2><blockquote><p> 标签指的是某个分支的某个特定时间点的状态，记录了截止到当前时间的当前分支的全部内容。根据标签，我们可以很方便的切回到标签标记时的状态</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建一个新标签</span><span class="token function">git</span> tag 新的标签名<span class="token comment" spellcheck="true"># 列出所有标签</span><span class="token function">git</span> tag<span class="token comment" spellcheck="true"># 查看tag的信息</span><span class="token function">git</span> show 标签名<span class="token comment" spellcheck="true"># 将指定的标签推送至远程仓库</span><span class="token function">git</span> push 仓库别名 标签名<span class="token comment" spellcheck="true"># 新建一个分支，根据标签名指向指定的标签</span><span class="token function">git</span> checkout -b 新的分支名 标签名<span class="token comment" spellcheck="true"># 删除本地仓库中指定的标签</span><span class="token function">git</span> tag -d 标签名<span class="token comment" spellcheck="true"># 删除远程仓库中指定的标签</span><span class="token function">git</span> push origin :refs/tags/标签名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-SSH（secure-shell）认证"><a href="#7-SSH（secure-shell）认证" class="headerlink" title="7 SSH（secure shell）认证"></a>7 SSH（secure shell）认证</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成 SSH 密钥对的命令（由公钥和私钥组成，常用语SSH的连接和认证）</span>ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上诉命令会生成两个文件，将公钥放在git远程仓库的ssh key里接可以使用ssh操作远程仓库了</p><ul><li><strong>~&#x2F;.ssh&#x2F;id_rsa：私钥，用于客户端身份认证，需保密，放在本地</strong></li><li><strong>~&#x2F;.ssh&#x2F;id_rsa.pub：公钥，可放在远程服务器上</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
