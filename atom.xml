<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reef&#39;s Blog</title>
  
  <subtitle>hello world</subtitle>
  <link href="https://blog.shanzhao.site/atom.xml" rel="self"/>
  
  <link href="https://blog.shanzhao.site/"/>
  <updated>2025-06-18T12:42:55.855Z</updated>
  <id>https://blog.shanzhao.site/</id>
  
  <author>
    <name>reef</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CloudFlare-CDN缓存清除</title>
    <link href="https://blog.shanzhao.site/2024-06-14/cloudflare-cdn-huan-cun-qing-chu/"/>
    <id>https://blog.shanzhao.site/2024-06-14/cloudflare-cdn-huan-cun-qing-chu/</id>
    <published>2024-06-14T02:33:50.000Z</published>
    <updated>2025-06-18T12:42:55.855Z</updated>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;​	给出了一些api用于清除Cloudflare的CDN缓存方式&lt;/p&gt;</summary>
    
    
    
    <category term="cloudflare" scheme="https://blog.shanzhao.site/categories/cloudflare/"/>
    
    
    <category term="cdn缓存清除" scheme="https://blog.shanzhao.site/tags/cdn%E7%BC%93%E5%AD%98%E6%B8%85%E9%99%A4/"/>
    
  </entry>
  
  <entry>
    <title>Netty（三） — EventLoopGroup和EventLoop</title>
    <link href="https://blog.shanzhao.site/2022-10-13/netty-eventloop/"/>
    <id>https://blog.shanzhao.site/2022-10-13/netty-eventloop/</id>
    <published>2022-10-13T15:18:03.000Z</published>
    <updated>2022-10-16T11:52:09.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;​	 基于Netty 4.1.34版本，分析了 Netty 中NIO相关的 &lt;strong&gt;EventLoopGroup&lt;/strong&gt; 与 &lt;strong&gt;EventLoop&lt;/strong&gt; 的核心功能和实现原理，重点涵盖了&lt;strong&gt;JDK Selector 的性能瓶颈与 Netty 优化策略&lt;/strong&gt;、&lt;strong&gt;事件循环线程的阻塞与唤醒机制（含空轮询 Bug 修复方案）、IO 事件与任务调度细节&lt;/strong&gt;，并配套流程图直观展示 EventLoop 工作流程&lt;/p&gt;</summary>
    
    
    
    <category term="Netty" scheme="https://blog.shanzhao.site/categories/Netty/"/>
    
    
    <category term="NIO" scheme="https://blog.shanzhao.site/tags/NIO/"/>
    
    <category term="事件循环" scheme="https://blog.shanzhao.site/tags/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>Netty（二） — Pipeline和Handler</title>
    <link href="https://blog.shanzhao.site/2022-08-16/netty-pipeline-he-handler/"/>
    <id>https://blog.shanzhao.site/2022-08-16/netty-pipeline-he-handler/</id>
    <published>2022-08-16T13:33:03.000Z</published>
    <updated>2022-08-25T11:58:09.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;​	分析了 Netty 中 &lt;strong&gt;ChannelPipeline、ChannelHandler、ChannelHandlerContext&lt;/strong&gt; 各自的作用和实现原理，重点讲了下&lt;strong&gt;解码器基类 ByteToMessageDecoder 是怎么解决粘包&amp;#x2F;拆包的问题&lt;/strong&gt;以及在&lt;strong&gt;实际使用时该如何考虑&lt;/strong&gt;。最后用一张&lt;strong&gt;流程图总结了这三个核心组件在实际数据处理过程中的组合和协作方式&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Netty" scheme="https://blog.shanzhao.site/categories/Netty/"/>
    
    
    <category term="解码器" scheme="https://blog.shanzhao.site/tags/%E8%A7%A3%E7%A0%81%E5%99%A8/"/>
    
    <category term="责任链模式" scheme="https://blog.shanzhao.site/tags/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Netty（一） — Channel和Unsafe</title>
    <link href="https://blog.shanzhao.site/2022-07-20/netty-channel-he-unsafe/"/>
    <id>https://blog.shanzhao.site/2022-07-20/netty-channel-he-unsafe/</id>
    <published>2022-07-20T11:33:03.000Z</published>
    <updated>2022-07-25T11:58:09.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;​	基于 Netty 4.1.34，从 Channel 的整体架构入手，分析了 Channel 与 Unsafe 的配合机制，以及底层对应的 NIO 实现类。在分析过程中也穿插了对关键方法的说明，最后总结了 Netty Channel 相比原生 JDK Channel 在使用体验和扩展性上的优势。&lt;/p&gt;</summary>
    
    
    
    <category term="Netty" scheme="https://blog.shanzhao.site/categories/Netty/"/>
    
    
    <category term="NIO" scheme="https://blog.shanzhao.site/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（五） — 嵌入式Tomcat</title>
    <link href="https://blog.shanzhao.site/2022-05-13/springboot-qian-ru-shi-tomcat-de-shi-yong/"/>
    <id>https://blog.shanzhao.site/2022-05-13/springboot-qian-ru-shi-tomcat-de-shi-yong/</id>
    <published>2022-05-13T11:35:03.000Z</published>
    <updated>2022-05-13T11:35:03.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;​	主要分析了嵌入式 Tomcat 的构建流程，重点对比了它&lt;strong&gt;和传统 Tomcat 启动方式的差异&lt;/strong&gt;，也梳理了 SpringBoot 提供的相关扩展点，比如 &lt;strong&gt;ServletContextInitializerBeans 的处理逻辑&lt;/strong&gt;。最后&lt;strong&gt;结合 Tomcat 启动和 Spring 单例 Bean 初始化的整体流程，对延迟绑定端口，以及整个启动顺序背后的依赖关系做了系统性的分析和思考&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://blog.shanzhao.site/categories/SpringBoot/"/>
    
    
    <category term="嵌入式Tomcat" scheme="https://blog.shanzhao.site/tags/%E5%B5%8C%E5%85%A5%E5%BC%8FTomcat/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（四） — Condition相关原理</title>
    <link href="https://blog.shanzhao.site/2022-04-21/springboot-conditional-zhu-jie-xiang-guan-yuan-li/"/>
    <id>https://blog.shanzhao.site/2022-04-21/springboot-conditional-zhu-jie-xiang-guan-yuan-li/</id>
    <published>2022-04-21T12:40:03.000Z</published>
    <updated>2022-04-18T11:33:20.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;​	基于Spring Boot 2.7.x 版本，深入分析了&lt;strong&gt;OnBean、OnClass、OnProperty这三类常见Condition的源码实现&lt;/strong&gt;，在此基础上，探讨了 &lt;code&gt;@Conditional&lt;/code&gt; 注解的&lt;strong&gt;组合用法&lt;/strong&gt;（&lt;strong&gt;与、或、非&lt;/strong&gt;逻辑）的处理机制。&lt;/p&gt;
&lt;p&gt;​	同时，分析了&lt;strong&gt;Condition匹配结果的debug支持&lt;/strong&gt;实现，以及 &lt;code&gt;ConfigurationClassPostProcessor&lt;/code&gt; 中&lt;strong&gt;Condition判断的触发流程&lt;/strong&gt;，重点关注其&lt;strong&gt;通过 &lt;code&gt;importedBy&lt;/code&gt; 链支持的 &lt;code&gt;TrackedConditionEvaluator&lt;/code&gt; 回溯与剪枝优化策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	最后，提供了逻辑&lt;strong&gt;或&lt;/strong&gt;&lt;code&gt;@Conditional&lt;/code&gt;组合与 &lt;strong&gt;importedBy路径 skip 判定的测试用例&lt;/strong&gt;，以验证整体逻辑的正确性&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://blog.shanzhao.site/categories/SpringBoot/"/>
    
    
    <category term="Condition" scheme="https://blog.shanzhao.site/tags/Condition/"/>
    
    <category term="回溯" scheme="https://blog.shanzhao.site/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（三）— 自动配置源码解析</title>
    <link href="https://blog.shanzhao.site/2022-03-26/springboot-zi-dong-pei-zhi-yuan-ma-jie-xi/"/>
    <id>https://blog.shanzhao.site/2022-03-26/springboot-zi-dong-pei-zhi-yuan-ma-jie-xi/</id>
    <published>2022-03-26T14:11:03.000Z</published>
    <updated>2022-04-14T10:45:20.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;​	基于 Spring Boot 2.7.x 版本，深入剖析了 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 注解的实现原理，重点解析了其背后通过 &lt;code&gt;DeferredImportSelector&lt;/code&gt; 实现的自动配置机制。特别对 &lt;code&gt;@AutoConfigureBefore&lt;/code&gt; 与 &lt;code&gt;@AutoConfigureAfter&lt;/code&gt; 所涉及的 &lt;strong&gt;DFS 拓扑排序逻辑&lt;/strong&gt; 进行了详细的分析，揭示了自动配置类加载顺序的核心控制机制&lt;/p&gt;
&lt;p&gt;​	最后，还分析了 2.7.0 版本新增的 &lt;code&gt;@AutoConfiguration&lt;/code&gt; 注解的&lt;strong&gt;特殊语义&lt;/strong&gt;，包括其与&lt;strong&gt;新的 &lt;code&gt;.imports&lt;/code&gt; SPI 文件的绑定&lt;/strong&gt;、&lt;strong&gt;默认排除扫描机制&lt;/strong&gt;（&lt;code&gt;AutoConfigurationExcludeFilter&lt;/code&gt;）。并给出了自己的使用建议&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://blog.shanzhao.site/categories/SpringBoot/"/>
    
    
    <category term="拓扑排序" scheme="https://blog.shanzhao.site/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
    <category term="自动配置" scheme="https://blog.shanzhao.site/tags/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（二）— SPI和starter优化器原理</title>
    <link href="https://blog.shanzhao.site/2022-03-04/springboot-spi-he-starter-you-hua-qi/"/>
    <id>https://blog.shanzhao.site/2022-03-04/springboot-spi-he-starter-you-hua-qi/</id>
    <published>2022-03-04T12:40:03.000Z</published>
    <updated>2022-03-19T11:33:20.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;​	算是一篇SrpingBoot自动配置原理解析的前置文章。首先从源码角度回顾了早期的 &lt;code&gt;spring.factories&lt;/code&gt; SPI 加载机制，接着分析了 Spring Boot 2.7.x 引入的基于注解粒度的 &lt;code&gt;.imports&lt;/code&gt; 文件机制，展示了其在自动配置解耦方面的优势。并介绍了两个常被 starter 使用的辅助组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spring-boot-configuration-processor：生成配置元数据，IDE使用&lt;/li&gt;
&lt;li&gt;spring-boot-autoconfigure-processor：加速自动配置加载&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	最后，结合自定义 starter 的实践，附上了完整的测试用例，验证上述机制在实际开发中的可用性&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://blog.shanzhao.site/categories/SpringBoot/"/>
    
    
    <category term="starter" scheme="https://blog.shanzhao.site/tags/starter/"/>
    
    <category term="SPI" scheme="https://blog.shanzhao.site/tags/SPI/"/>
    
  </entry>
  
  <entry>
    <title>Spring-事物NOT_SUPPORTED策略下多数据源切换的问题</title>
    <link href="https://blog.shanzhao.site/2022-03-03/spring-shi-wu-not-supported-ce-lue-xia-duo-shu-ju-yuan-qie-huan-de-wen-ti/"/>
    <id>https://blog.shanzhao.site/2022-03-03/spring-shi-wu-not-supported-ce-lue-xia-duo-shu-ju-yuan-qie-huan-de-wen-ti/</id>
    <published>2022-03-03T10:34:17.000Z</published>
    <updated>2022-03-03T10:34:17.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;​	从案例中分析了NOT_SUPPORTED默认情况下为什么不能进行多数据源切换以及优雅的解决办法，以及给出了自己的思考&lt;/p&gt;</summary>
    
    
    
    <category term="Spring" scheme="https://blog.shanzhao.site/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot（一）— fatJar启动和LaunchedURLClassLoader加载class的原理</title>
    <link href="https://blog.shanzhao.site/2022-02-15/springboot-fatjar-qi-dong-he-launchedurlclassloader-jia-zai-class-de-yuan-li/"/>
    <id>https://blog.shanzhao.site/2022-02-15/springboot-fatjar-qi-dong-he-launchedurlclassloader-jia-zai-class-de-yuan-li/</id>
    <published>2022-02-15T13:16:27.000Z</published>
    <updated>2022-02-17T07:33:23.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;​	基于 Spring Boot 2.7.x，从整体架构角度出发，梳理并串联了 fatjar 模式下的关键组件：&lt;code&gt;Archive&lt;/code&gt;、&lt;code&gt;JarFile&lt;/code&gt;、&lt;code&gt;JarEntry&lt;/code&gt;、&lt;code&gt;Handler&lt;/code&gt;、&lt;code&gt;JarURLConnection&lt;/code&gt;，重点&lt;strong&gt;分析它们在类加载过程中的职责与协作关系&lt;/strong&gt;。全文&lt;strong&gt;不聚焦具体 jar 包结构解析细节，而是深入源码层面解析 fatjar 启动流程及 &lt;code&gt;LaunchedURLClassLoader#loadClass&lt;/code&gt; 实现机制&lt;/strong&gt;，并辅以实际测试用例进行debug和验证。&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://blog.shanzhao.site/categories/SpringBoot/"/>
    
    
    <category term="fatjar" scheme="https://blog.shanzhao.site/tags/fatjar/"/>
    
    <category term="LaunchedURLClassLoader" scheme="https://blog.shanzhao.site/tags/LaunchedURLClassLoader/"/>
    
    <category term="URLClassLoader" scheme="https://blog.shanzhao.site/tags/URLClassLoader/"/>
    
    <category term="类加载器" scheme="https://blog.shanzhao.site/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat-Session管理</title>
    <link href="https://blog.shanzhao.site/2022-01-09/tomcat-session-guan-li/"/>
    <id>https://blog.shanzhao.site/2022-01-09/tomcat-session-guan-li/</id>
    <published>2022-01-09T06:13:33.000Z</published>
    <updated>2022-01-14T11:09:20.000Z</updated>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;​	本文从源码出发，剖析 Tomcat 中 Session 的懒加载、保活与生命周期控制机制，并解析了 StandardManager 如何借助序列化完成热部署场景下的 Session 持久化与自动恢复&lt;/p&gt;</summary>
    
    
    
    <category term="Tomcat" scheme="https://blog.shanzhao.site/categories/Tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat-热加载之ThreadLocal内存泄漏篇（二）</title>
    <link href="https://blog.shanzhao.site/2021-12-23/tomcat-re-jia-zai-zhi-threadlocal-nei-cun-xie-lou-pian-er/"/>
    <id>https://blog.shanzhao.site/2021-12-23/tomcat-re-jia-zai-zhi-threadlocal-nei-cun-xie-lou-pian-er/</id>
    <published>2021-12-23T11:45:06.000Z</published>
    <updated>2021-12-28T13:56:17.000Z</updated>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;​	通过举例深入的分析了热加载场景下ThreadLocal使用不当造成的内存泄漏。并剖析了Tomcat通过实现&lt;strong&gt;无效的ThreadLocalMap.Entry清除&lt;/strong&gt;、&lt;strong&gt;ThreadLocalLeakPreventionListener回收空闲worker线程&lt;/strong&gt;和&lt;strong&gt;TaskQueue对取任务逻辑的重写来兜底剩余worker线程回收&lt;/strong&gt;这三种策略来优雅的解决ThreadLocal内存泄漏的问题&lt;/p&gt;</summary>
    
    
    
    <category term="Tomcat" scheme="https://blog.shanzhao.site/categories/Tomcat/"/>
    
    
    <category term="热加载" scheme="https://blog.shanzhao.site/tags/%E7%83%AD%E5%8A%A0%E8%BD%BD/"/>
    
    <category term="内存泄漏" scheme="https://blog.shanzhao.site/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
    <category term="垃圾回收" scheme="https://blog.shanzhao.site/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat-热加载和相关Class的垃圾回收探讨（一）</title>
    <link href="https://blog.shanzhao.site/2021-12-11/tomcat-re-jia-zai-he-xiang-guan-class-de-la-ji-hui-shou-tan-tao-yi/"/>
    <id>https://blog.shanzhao.site/2021-12-11/tomcat-re-jia-zai-he-xiang-guan-class-de-la-ji-hui-shou-tan-tao-yi/</id>
    <published>2021-12-11T05:07:06.000Z</published>
    <updated>2021-12-18T11:57:06.000Z</updated>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;​	本文深入分析了 WebappClassLoader 的热加载整体流程，并&lt;strong&gt;对热加载过程中遗留的垃圾回收问题进行了系统性拆解&lt;/strong&gt;。重点涵盖了：&lt;strong&gt;垃圾的分类、核心引用关系的梳理、各类资源的清理策略&lt;/strong&gt;。最后&lt;strong&gt;详细解析了 Tomcat 如何通过兜底机制清理仍存活的线程，并结合实践给出了线程资源管理的最佳建议&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Tomcat" scheme="https://blog.shanzhao.site/categories/Tomcat/"/>
    
    
    <category term="热加载" scheme="https://blog.shanzhao.site/tags/%E7%83%AD%E5%8A%A0%E8%BD%BD/"/>
    
    <category term="内存泄漏" scheme="https://blog.shanzhao.site/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
    <category term="垃圾回收" scheme="https://blog.shanzhao.site/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat-类加载器</title>
    <link href="https://blog.shanzhao.site/2021-11-23/tomcat-lei-jia-zai-qi/"/>
    <id>https://blog.shanzhao.site/2021-11-23/tomcat-lei-jia-zai-qi/</id>
    <published>2021-11-23T01:13:34.000Z</published>
    <updated>2021-11-28T10:09:17.000Z</updated>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;​	以问题切入，深入剖析了commonLoader与WebappClassLoader各自的定位与设计初衷，重点分析了WebappClassLoader如何在保证JVM核心类安全的前提下，部分打破双亲委派机制，实现Web应用之间的真正隔离。&lt;/p&gt;</summary>
    
    
    
    <category term="Tomcat" scheme="https://blog.shanzhao.site/categories/Tomcat/"/>
    
    
    <category term="类加载器" scheme="https://blog.shanzhao.site/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat-责任链之Pipeline+Valve和Filter</title>
    <link href="https://blog.shanzhao.site/2021-11-02/tomcat-ze-ren-lian-zhi-pipeline-valve-he-filter/"/>
    <id>https://blog.shanzhao.site/2021-11-02/tomcat-ze-ren-lian-zhi-pipeline-valve-he-filter/</id>
    <published>2021-11-02T11:18:11.000Z</published>
    <updated>2021-11-07T10:03:15.000Z</updated>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;​	分析了Tomcat中Pipeline+Valve和支持Filter的ApplicationFilterChain两种基于责任链模式的实现逻辑，并在最后总结了这两者的异同点以及为什么会有这两种类似的模块。&lt;/p&gt;</summary>
    
    
    
    <category term="Tomcat" scheme="https://blog.shanzhao.site/categories/Tomcat/"/>
    
    
    <category term="责任链模式" scheme="https://blog.shanzhao.site/tags/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat-启动流程和http请求流程</title>
    <link href="https://blog.shanzhao.site/2021-10-18/tomcat-qi-dong-liu-cheng-he-http-qing-qiu-liu-cheng/"/>
    <id>https://blog.shanzhao.site/2021-10-18/tomcat-qi-dong-liu-cheng-he-http-qing-qiu-liu-cheng/</id>
    <published>2021-10-18T03:02:15.000Z</published>
    <updated>2021-10-23T11:02:17.000Z</updated>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;​	分析并总结了tomcat的启动流程和整个http请求流程，重点可关注&lt;strong&gt;启动流程的UML图和请求流程图&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Tomcat" scheme="https://blog.shanzhao.site/categories/Tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat-Context,ContextConfig和Wrapper</title>
    <link href="https://blog.shanzhao.site/2021-10-03/tomcat-context-contextconfig-he-wrapper/"/>
    <id>https://blog.shanzhao.site/2021-10-03/tomcat-context-contextconfig-he-wrapper/</id>
    <published>2021-10-03T10:39:39.000Z</published>
    <updated>2021-10-07T06:31:39.000Z</updated>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;​	StandardContext、ContextConfig以及StandardWrapper的核心逻辑源码解析及总结&lt;/p&gt;</summary>
    
    
    
    <category term="Tomcat" scheme="https://blog.shanzhao.site/categories/Tomcat/"/>
    
    
    <category term="Container" scheme="https://blog.shanzhao.site/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat-Engine,Host和HostConfig</title>
    <link href="https://blog.shanzhao.site/2021-09-23/tomcat-engine-host-he-hostconfig/"/>
    <id>https://blog.shanzhao.site/2021-09-23/tomcat-engine-host-he-hostconfig/</id>
    <published>2021-09-23T02:35:44.000Z</published>
    <updated>2021-10-02T07:33:44.000Z</updated>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;​	从源码分析了ContainerBase，StandardEngine，StandardHost和HostConfig的实现逻辑。需要&lt;strong&gt;重点注意HostConfig的作用和部署流程&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Tomcat" scheme="https://blog.shanzhao.site/categories/Tomcat/"/>
    
    
    <category term="Container" scheme="https://blog.shanzhao.site/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat-Server和Service</title>
    <link href="https://blog.shanzhao.site/2021-09-04/tomcat-server-he-service/"/>
    <id>https://blog.shanzhao.site/2021-09-04/tomcat-server-he-service/</id>
    <published>2021-09-04T12:43:45.000Z</published>
    <updated>2025-09-11T07:22:45.000Z</updated>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;​	对Tomcat中Server，Service的init和start方法 + 核心字段进行了分析，并&lt;strong&gt;重点分析了Connector-NioEndpoint内部的Acceptor和Poller线程，并用图文的方法做了总结&lt;/strong&gt;。并简单总结了Mapper和MapperListener的作用&lt;/p&gt;</summary>
    
    
    
    <category term="Tomcat" scheme="https://blog.shanzhao.site/categories/Tomcat/"/>
    
    
    <category term="Acceptor" scheme="https://blog.shanzhao.site/tags/Acceptor/"/>
    
    <category term="Poller" scheme="https://blog.shanzhao.site/tags/Poller/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat-整体架构和Lifecycle</title>
    <link href="https://blog.shanzhao.site/2021-08-19/tomcat-zheng-ti-jia-gou-he-lifecycle/"/>
    <id>https://blog.shanzhao.site/2021-08-19/tomcat-zheng-ti-jia-gou-he-lifecycle/</id>
    <published>2021-08-19T13:21:06.000Z</published>
    <updated>2022-03-12T06:33:07.000Z</updated>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;​	基于Tomcat-8.5.x版本，简单分析了整体的架构和核心组件。并详细分析和总结了Lifecycle机制&lt;/p&gt;</summary>
    
    
    
    <category term="Tomcat" scheme="https://blog.shanzhao.site/categories/Tomcat/"/>
    
    
  </entry>
  
</feed>
